<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="ALARM" id="2">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">//Recieve orders, appear and execute
if (global.hp&gt;0){

upslashing=0;
upslashwait=0;
image_index=0;
image_single=0;
perform=0;
fakeperform=0;
randomfakes=0;

repeat(10){

if (!perform){
x=obj_sabot.x;
y=obj_sabot.y;
sprite_index=spr_komatoassassin_basic;
if (cracked)
    randomstate=floor(random(6)+2);
else
    randomstate=floor(random(8));
temprand=0;

//Five-shot in front of Iji
if (randomstate==0){
temprand=random(150)+100;
if (global.facing==0){
    sprite_index=spr_komatoassassin_pose1;
    if (place_free(obj_iji.x-temprand,obj_iji.y-20)){
        x=obj_iji.x-temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
else if (global.facing==1){
    sprite_index=spr_komatoassassin_pose1left;
    if (place_free(obj_iji.x+temprand,obj_iji.y-20)){
        x=obj_iji.x+temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) &amp;&amp; !place_free(x,y+1) &amp;&amp; !collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1)){
        alarm[1]=85-(global.difficulty*10);
        alarm[0]=50-(global.difficulty*10);
        shotcount=0;
        scr_sound("tor_gather");
        if (sprite_index==spr_komatoassassin_pose1)
            (instance_create(x+65,y+10,obj_chargetell)).tempid=id;
        if (sprite_index==spr_komatoassassin_pose1left)
            (instance_create(x-40,y+10,obj_chargetell)).tempid=id;
        }
    else
        perform=0;
    }
}

//Dual-shot behind Iji
if (randomstate==1){
temprand=random(150)+100;
if (global.facing==0){
    sprite_index=spr_komatoassassin_pose2left;
    if (place_free(obj_iji.x+temprand,obj_iji.y-20)){
        x=obj_iji.x+temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
else if (global.facing==1){
    sprite_index=spr_komatoassassin_pose2;
    if (place_free(obj_iji.x-temprand,obj_iji.y-20)){
        x=obj_iji.x-temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) &amp;&amp; !place_free(x,y+1) &amp;&amp; !collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1)){
        alarm[1]=45-global.difficulty*5;
        scr_sound("tor_gather");
        if (sprite_index==spr_komatoassassin_pose2){
            (instance_create(x+70,y+2,obj_chargetell)).tempid=id;
            (instance_create(x+45,y+42,obj_chargetell)).tempid=id;
            }
        if (sprite_index==spr_komatoassassin_pose2left){
            (instance_create(x-37,y+2,obj_chargetell)).tempid=id;
            (instance_create(x-12,y+42,obj_chargetell)).tempid=id;
            }
        }
    else
        perform=0;
    }
}

//Downstab
if (randomstate==2){
temprand=random(128)+256;
sprite_index=spr_komatoassassin_downstab;
if (place_free(obj_iji.x,obj_iji.y-temprand)){
    x=obj_iji.x;
    y=obj_iji.y-temprand;
    if (!collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1)){
        gravity=1;
        gravity_direction=270;
        perform=1;
        }
    else
        sprite_index=spr_komatoassassin_basic;
    }
}

//Uppercut
if (randomstate==3 &amp;&amp; global.difficulty!=0){
temprand=random(1);
if (temprand&gt;0.5){
    sprite_index=spr_komatoassassin_uppercut;
    if (place_free(obj_iji.x-50,obj_iji.y-20) &amp;&amp; !place_free(obj_iji.x-50,obj_iji.y+64)){
        x=obj_iji.x-50;
        y=obj_iji.y-20;
        perform=1;
        }
    }
else{
    sprite_index=spr_komatoassassin_uppercutleft;
    if (place_free(obj_iji.x+32,obj_iji.y-20) &amp;&amp; !place_free(obj_iji.x+32,obj_iji.y+64)){
        x=obj_iji.x+32;
        y=obj_iji.y-20;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) &amp;&amp; !place_free(x,y+1)){
        image_single=0;
        alarm[1]=44-(global.difficulty*5);
        alarm[0]=39-(global.difficulty*5);
        }
    else
        perform=0;
    }
}

//Backstab
if (randomstate==4){
if (global.facing==0){
    sprite_index=spr_komatoassassin_backstableft;
    if (place_free(obj_iji.x+50,obj_iji.y-30) &amp;&amp; !place_free(obj_iji.x+32,obj_iji.y+32)){
        x=obj_iji.x+50;
        y=obj_iji.y-30;
        perform=1;
        }
    }
else if (global.facing==1){
    sprite_index=spr_komatoassassin_backstab;
    if (place_free(obj_iji.x-50,obj_iji.y-30) &amp;&amp; !place_free(obj_iji.x-50,obj_iji.y+32)){
        x=obj_iji.x-50;
        y=obj_iji.y-30;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) &amp;&amp; !place_free(x,y+1)){
        image_single=0;
        alarm[1]=44-(global.difficulty*5);
        alarm[0]=40-(global.difficulty*5);
        }
    else
        perform=0;
    }
}

//Upslash
if (randomstate==5){
sprite_index=spr_komatoassassin_upslash;
x=obj_iji.x;
y=obj_iji.y;
if (place_free(x,y)){
    move_contact_solid(270,384);
    if (!place_free(x,y+1) &amp;&amp; (y-obj_iji.y)&gt;128 &amp;&amp; obj_iji.vspeed&lt;2){
        perform=1;
        image_single=0;
        }
    else{
        x=obj_sabot.x;
        y=obj_sabot.y;
        }
    }
}

//Laser daggers
if (randomstate==6){
    x=random(800)+obj_iji.x-400;
    y=random(300)+obj_iji.y-300;
    if (place_free(x,y) &amp;&amp; distance_to_object(obj_iji)&gt;192 &amp;&amp; !collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1)){
        perform=1;
        fakeperform=1;
        alarm[2]=random(25-(global.difficulty*5))+25-(global.difficulty*5);
        instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
        if (x&gt;obj_iji.x){
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=225;
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=180;
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=135;
            }
        else{
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=-45;
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=0;
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=45;
            }
        }
    }

//Fake attack
if (randomstate==7){
    randomfakes=ceil(random(4))+4;
    alarm[4]=5;
    perform=1;
    fakeperform=1;
    }

} //End of perform
} //End of repeat

//Perform
if (perform){
    if (!fakeperform &amp;&amp; sprite_index!=spr_komatoassassin_basic &amp;&amp; sprite_index!=spr_komatoassassin_basicleft){
        instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
        visible=1;
        }
    }
else
    alarm[2]=random(25-(global.difficulty*5))+25-(global.difficulty*5);
}</argument>
      </arguments>
    </action>
  </actions>
</event>
