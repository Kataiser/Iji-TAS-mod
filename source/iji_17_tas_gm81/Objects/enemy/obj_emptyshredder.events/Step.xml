<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">temphspeed=hspeed;
if (iji&gt;0)
    iji-=1;

//Slow down
if (!goingleft &amp;&amp; !goingright &amp;&amp; !place_free(x,y+1)){
    if (hspeed&lt;-1)
        hspeed+=0.4;
    if (hspeed&gt;1)
        hspeed-=0.4;
    if (hspeed&gt;=-1 &amp;&amp; hspeed&lt;=1)
        hspeed=0;
    }

//Limit speed
if (hspeed&lt;-18)
    hspeed=-18;
if (hspeed&gt;18)
    hspeed=18;

//Fall
if (place_free(x,y+1)){
    gravity=0.7;
    gravity_direction=270;
    if (place_free(x+hspeed,y+vspeed+2)){
        if (place_free(x+hspeed,y+vspeed-2)){
            donothing=1;
            }
        else if (place_free(x+hspeed,y+vspeed+12)){
            x-=hspeed;
            if (hspeed&lt;0)
                move_contact_solid(180,32)
            else
                move_contact_solid(0,32)
            hspeed*=-0.5;
            if (abs(hspeed)&lt;8)
                hspeed=0;
            }
        }
    else if (place_free(x+hspeed,y+vspeed+12)){
        x-=hspeed;
        if (hspeed&lt;0)
            move_contact_solid(180,32)
        else
            move_contact_solid(0,32)
        hspeed*=-0.5;
        if (abs(hspeed)&lt;8)
            hspeed=0;
        }
    }
if (vspeed&gt;18)
    vspeed=18;

//Travel up slopes
if (hspeed&lt;0 &amp;&amp; place_meeting(x+hspeed-2,y,obj_sloper) &amp;&amp; place_free(x+hspeed-2,y-24)){
    y-=10;
    move_contact_solid(270,32);
    }
else if (hspeed&gt;0 &amp;&amp; place_meeting(x+hspeed+2,y,obj_slopel) &amp;&amp; place_free(x+hspeed+2,y-24)){
    y-=10;
    move_contact_solid(270,32);
    }

//Travel down slopes
else if (hspeed&lt;0 &amp;&amp; place_meeting(x,y+16,obj_slopel)){
    move_contact_solid(270,32);
    vspeed=0;
    gravity=0;
    }
else if (hspeed&gt;0 &amp;&amp; place_meeting(x,y+16,obj_sloper)){
    move_contact_solid(270,32);
    vspeed=0;
    gravity=0;
    }

//Bounce on walls
else if (hspeed&lt;0 &amp;&amp; !place_free(x+hspeed-2,y)){
    if (!place_meeting(x+hspeed-8,y,obj_meta) &amp;&amp; !place_meeting(x+hspeed-8,y,obj_door) &amp;&amp; !place_meeting(x+hspeed-8,y,obj_glass)){
        hspeed*=-0.5;
        if (hspeed&lt;8){
            move_contact_solid(180,32)
            hspeed=0;
            }
        else
            scr_sound("glo_land");
        }
    }
else if (hspeed&gt;0 &amp;&amp; !place_free(x+hspeed+2,y)){
    if (!place_meeting(x+hspeed+8,y,obj_meta) &amp;&amp; !place_meeting(x+hspeed+8,y,obj_door) &amp;&amp; !place_meeting(x+hspeed+8,y,obj_glass)){
        hspeed*=-0.5;
        if (hspeed&gt;-8){
            move_contact_solid(0,32)
            hspeed=0;
            }
        else
            scr_sound("glo_land");
        }
    }

//Land
if (hspeed==0 &amp;&amp; !place_free(x,y+vspeed+2)){
    vspeed=0;
    gravity=0;
    move_contact_solid(270,32);
    }
if (vspeed&gt;0){
    if (hspeed&lt;0){
        if (!place_free(x+hspeed-2,y)){
            hspeed=0;
            move_contact_solid(180,32);
            }
        if (!place_free(x,y+vspeed+2)){
            vspeed=0;
            gravity=0;
            move_contact_solid(270,32);
            }
        }
    if (hspeed&gt;0){
        if (!place_free(x+hspeed+2,y)){
            hspeed=0;
            move_contact_solid(0,32);
            }
        if (!place_free(x,y+vspeed+2)){
            vspeed=0;
            gravity=0;
            move_contact_solid(270,32);
            }
        }
    }


//Jump
if(hspeed&lt;-10 &amp;&amp; !place_meeting(x-140,y,obj_sloper) &amp;&amp; place_meeting(x-46,y+4,obj_sloper))
    vspeed=-abs(hspeed)/2;
if(hspeed&gt;10 &amp;&amp; !place_meeting(x+140,y,obj_slopel) &amp;&amp; place_meeting(x+46,y+4,obj_slopel))
    vspeed=-abs(hspeed)/2;

//Fix
if (place_meeting(x,y+16,obj_slopel) || place_meeting(x,y+16,obj_sloper)){
if ((hspeed&lt;1 &amp;&amp; temphspeed&gt;4) || (hspeed&gt;-1 &amp;&amp; temphspeed&lt;-4))
        hspeed=temphspeed;
    }
if (place_meeting(x,y,obj_block)){
    if (place_free(x-4,y))
        x-=4;
    else if (place_free(x+4,y))
        x+=4;
    move_outside_solid(90,32);
    }

//Shredder damaged
if (shredderhp&lt;500)
    ssmokecyc+=1;
if (shredderhp&lt;250)
    ssmokecyc+=2;
if (ssmokecyc&gt;=10){
    ssmokecyc=0;
    instance_create(x-40+random(80),y-20+random(40),obj_bigsmoke);
    }

//Shredder explodes
if (shredderhp&lt;=0){
    instance_destroy();
    instance_create(x,y,obj_enemyrocketexplosion);
    instance_create(x,y,obj_explosioncenter);
    if (global.specialbake==0)
        maxdebris=200;
    else
        maxdebris=40;
    if (instance_number(obj_scrapwhite)&lt;maxdebris){
        repeat(40){
            tempid=instance_create(x-10+random(20),y-10+random(20),obj_scrapwhite);
            tempid.direction=random(360);
            tempid.speed=random(18)+10;
            }
        }
    scr_shakescreen(2);
    }
</argument>
      </arguments>
    </action>
  </actions>
</event>
