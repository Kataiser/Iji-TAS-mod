<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">//"FIND"
if (angry &amp;&amp; !prevangry){
    if (state==0 || state==1 || state==2)
        scr_sound("com_find");
    }
prevangry=angry;
//"DEATH"
if (state==4 &amp;&amp; prevstate!=4 &amp;&amp; temphp&gt;0){
    if (mutepainsound)
        mutepainsound=0;
    else
        scr_sound("com_death");
    }
prevstate=state;

if (temphp&gt;0 &amp;&amp; hp&lt;=0 &amp;&amp; ijikill==1){
    obj_iji.killemote=1;
    }
temphp=hp;

scr_tasenvision(10,35);
if (targetiji&gt;0)
targetiji-=1;
if (targetrival&gt;0)
targetrival-=1;
if (scouring&gt;0)
scouring-=1;
if (hp==maxhp)
scouring=0;
cfised=0;
thored=0;
plasmaed=0;
//Lose sight
if ((x &lt; obj_shakescreen.x-1000) || (x &gt; obj_shakescreen.x+1000) || (y &lt; obj_shakescreen.y-800) || (y &gt; obj_shakescreen.y+800)){
    angry=0;
    alarm[5]=0;
    if (state==2)
        state=0;
    }
//Alter sprite speed
if (sprite_index=spr_tasencommander_basic || sprite_index=spr_tasencommander_basicleft)
    image_speed=0.2;
else
    image_speed=0.5;
//Crack fail
if (crackmark==1 &amp;&amp; distance_to_object(obj_iji) &gt; 50){
    script_execute(scr_crackfail);
    global.erasetop=0;
    global.topmessage="CRACKING FAILED: Subject is too far away";
    }
if (crackmark==1 &amp;&amp; hp&lt;=0){
    script_execute(scr_terminatecrack);
    global.erasetop=0;
    global.topmessage="CRACKING FAILED: Subject is dead";
    }
//Fix hitting cieling
if (state==4 &amp;&amp; place_meeting(x,y+vspeed-2,(obj_block)) &amp;&amp; !place_meeting(x,y+vspeed-2,(obj_meta)) &amp;&amp; vspeed&lt;0){
    move_contact_solid(90,-1);
    vspeed=0;
    y+=3;
    }
//Stop animations
if (sprite_index=spr_tasencommander_knockdown || sprite_index=spr_tasencommander_knockdownleft){
    if (image_index&gt;7.9)
        image_single=8;
    }
//Melee attack
if (image_index==2){
    if (sprite_index=spr_tasencommander_swipe){
        scr_sound("glo_swipe");
        tempid=instance_create(x+20,y+26,obj_swipe);
        tempid.facing=1;
        tempid.target=id;
        }
    if (sprite_index=spr_tasencommander_swipeleft){
        scr_sound("glo_swipe");
        tempid=instance_create(x-61,y+26,obj_swipe);
        tempid.facing=0;
        tempid.target=id;
        }
    }
//Autodeath
if (hp&lt;=0){
    dead=1;
    if (crackmark==1){
        script_execute(scr_terminatecrack);
        global.erasetop=0;
        global.topmessage="Cracking failed; subject is dead";
        }
    }
//Smoke when charging
if (firingrocket==1 &amp;&amp; state==0)
    smoking+=1;
if (smoking&gt;=5){
    smoking=0;
    if (facing==0)
        instance_create(x-40,y+25,obj_smoke);
    else
        instance_create(x+60,y+25,obj_smoke);
    }
//Knockdown
if (state==4){
    if (knockdowntype==1){
        if (place_free(x-velocity,y+vspeed+2) &amp;&amp; !place_meeting(x-velocity,y,obj_blockenemy)){
            if (place_free(x-velocity,y+vspeed-2))
                x-=velocity;
            else if (place_free(x,y+vspeed+12)){
                velocity*=0.3;
                knockdowntype=2;
                sprite_index=spr_tasencommander_knockdownleft;
                facing=0;
                }
            }
        else if (place_free(x,y+vspeed+12)){
            velocity*=0.3;
            knockdowntype=2;
            sprite_index=spr_tasencommander_knockdownleft;
            facing=0;
            }
        }
    if (knockdowntype==2){
        if (place_free(x+velocity,y+vspeed+2) &amp;&amp; !place_meeting(x+velocity,y,obj_blockenemy)){
            if (place_free(x+velocity,y+vspeed-2))
                x+=velocity;
            else if (place_free(x,y+vspeed+12)){
                velocity*=0.3;
                knockdowntype=1;
                sprite_index=spr_tasencommander_knockdown;
                facing=1;
                }
            }
        else if (place_free(x,y+vspeed+12)){
            velocity*=0.3;
            knockdowntype=1;
            sprite_index=spr_tasencommander_knockdown;
            facing=1;
            }
        }
    //Fall
    if (place_free(x,y+1)){
        gravity=1;
        gravity_direction=270;
        }
    }
//Limit fall speed
if (vspeed&gt;20)
    vspeed=20;
//Armor
if (armor&lt;99.9)
    armor+=0.1;
//Pain from armordrop
if (armor&lt;1){
    if (state&lt;4)
        damageable=1;
    if (state==6)
        damageable=1;
    if (damageable==1){
        damageable=0;
        hp-=1;
        if (hp&gt;0.001){
            scr_sound("com_pain");
            takingpain=1;
            swiping=0;
            firingrocket=0;
            while(armor&lt;1)
                armor+=maxarmor;
            state=3;
            alarm[1]=0;
            alarm[2]=10;
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            image_index=0;
            if (facing==0)
                sprite_index=spr_tasencommander_painleft;
            else
                sprite_index=spr_tasencommander_pain;
            if (x&gt;obj_iji.x){
                tempid=instance_create(x+32,y+15,obj_tasenblood);
                tempid.image_index=6;
                tempid.speed=random(2)+2;
                }
            else{
                tempid=instance_create(x+2,y+15,obj_tasenblood);
                tempid.speed=random(2)+2;
                tempid.direction=180;
                }
            }
        else{
            dead=1;
            firingrocket=0;
            takingpain=1;
            if (targetrival==0 || !instance_exists(target))
                target=obj_iji;
            if (x&lt;target.x)
                script_execute(scr_enemyknockdown,1,random(3)+(resistance/2));
            else
                script_execute(scr_enemyknockdown,2,random(3)+(resistance/2));
            }
        }
    }
//Stand still
if (state==0 &amp;&amp; firingrocket==0 &amp;&amp; swiping==0){
    if (facing==0)
        sprite_index=spr_tasencommander_basicleft;
    else
        sprite_index=spr_tasencommander_basic;
    }
//Walk
if (state==1){
    if (facing==0){
        sprite_index=spr_tasencommander_walkleft;
        if (place_meeting(x-walkspeed,y,obj_glass) || place_meeting(x-walkspeed,y,obj_blockenemy) || place_free(x-20,y+20)){
            facing=1;
            exit;
            }
        if (place_free(x-walkspeed,y+1) &amp;&amp; (place_meeting(x-walkspeed,y+10,obj_slopel) || place_meeting(x-walkspeed,y+10,obj_sloper))){
            x-=walkspeed;
            move_contact_solid(270,-1);
            }
        else if (place_free(x-walkspeed,y))
            x-=walkspeed;
        else{
            if (place_free(x-walkspeed,y-5) &amp;&amp; (place_meeting(x,y+10,obj_slopel) || place_meeting(x,y+10,obj_sloper))){
                y-=5;
                x-=walkspeed;
                move_contact_solid(270,-1);
                }
            else
                facing=1;
            }
        }
    else{
        sprite_index=spr_tasencommander_walk;
        if (place_meeting(x+walkspeed,y,obj_glass) || place_meeting(x+walkspeed,y,obj_blockenemy) || place_free(x+20,y+20)){
            facing=0;
            exit;
            }
        if (place_free(x+walkspeed,y+1) &amp;&amp; (place_meeting(x+walkspeed,y+10,obj_slopel) || place_meeting(x+walkspeed,y+10,obj_sloper))){
            x+=walkspeed;
            move_contact_solid(270,-1);
            }
        else if (place_free(x+walkspeed,y))
            x+=walkspeed;
        else{
            if (place_free(x+walkspeed,y-5) &amp;&amp; (place_meeting(x,y+10,obj_slopel) || place_meeting(x,y+10,obj_sloper))){
                y-=5;
                x+=walkspeed;
                move_contact_solid(270,-1);
                }
            else
                facing=0;
            }
        }
    }</argument>
      </arguments>
    </action>
  </actions>
</event>
