<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="ALARM" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">inputs_file = file_text_open_read(tas_file_name);
line = 0;
repeat (step) {scr_nextline();}
file_text_close(inputs_file);
step += 1;

if (string_count("Save: ", current_inputs) == 1) {
    state_filename_save = string_replace(current_inputs, "Save: ", "");
    obj_taspause.most_recent_savestate = state_filename_save;
    alarm[0] = 1;
    current_alarm = 1;
    if (!directory_exists(program_directory + "\savestates")) {directory_create(program_directory + "\savestates"); sleep(100)}
    last_saved_txt = file_text_open_write("savestates\last_saved.txt");
    file_text_write_string(last_saved_txt, state_filename_save);
    file_text_close(last_saved_txt);
    ds_list_clear(held_keys);
    ds_list_clear(held_keys_display);
    // pressed and released should already be empty
    game_save("savestates\" + state_filename_save + ".state");
}
else if (string_count("Skip", current_inputs) == 1) {
    with (obj_sabot) {scr_skiplevel();}
    alarm[0] = 1;
    current_alarm = 1;
}
else if (string_count("End", current_inputs) == 1) {
    ds_list_clear(held_keys);
    ds_list_clear(held_keys_display);
    ds_list_clear(just_pressed_keys);
    ds_list_clear(just_released_keys);
    alarm[0] = -1;
    current_alarm = -1;
    is_executing = false;
}
else {
    first_char_pos = string_pos(",", current_inputs) + 1;

    if (first_char_pos != 1) {
        string_builder = "";
        
        for (i=first_char_pos; i&lt;=string_length(current_inputs); i+=1) {
            if (string_char_at(current_inputs, i) == ",") {
                scr_parsekey(string_builder);
                string_builder = "";
                i += 1;
            }
        
            string_builder += string_char_at(current_inputs, i);
        }
        
        scr_parsekey(string_builder);
    }
    
    alarm[0] = num_in_inputs;
    current_alarm = num_in_inputs;
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
