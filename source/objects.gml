Information about object: obj_iji
Sprite: spr_iji_basic
Solid: false
Visible: true
Depth: -1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (!global.horse){
    iji=1;
    tempid=instance_create(x,y,obj_teledest);
    tempid.dest=83652;
    tempid.visible=0;
    walkspeed=6;
    noliftride=1;
    if (instance_number(obj_chaintracer)==0)
        instance_create(0,0,obj_chaintracer);
    if (instance_number(obj_chaintracer2)==0)
        instance_create(0,0,obj_chaintracer2);
    }

image_speed=0.5;

if (room==rom_sector1)
    berserkkills=1;
else if (room==rom_sector2)
    berserkkills=2;
else if (room==rom_sector3 || room==rom_sector11)
    berserkkills=3;
else if (room==rom_sector4)
    berserkkills=4;
else if (room==rom_sector5 || room==rom_sector12)
    berserkkills=5;
else if (room==rom_sector6)
    berserkkills=6;
else if (room==rom_sector7 || room==rom_sector13)
    berserkkills=7;
else if (room==rom_sector8)
    berserkkills=8;
else if (room==rom_sector9 || room==rom_sector14)
    berserkkills=9;
else if (room==rom_sectorx || room==rom_sector15 || room==rom_sector16)
    berserkkills=10;
else
    berserkkills=0;

attitude=0; //not pacifist no matter what
if (room==rom_sector11 || room==rom_sector12 || room==rom_sector13 || room==rom_sector14 || room==rom_sector15 || room==rom_sector16 || ((room==rom_sector9 || room==rom_sectorx) && global.specialtrigger1==0))
    attitude=1;
Alarm Event for alarm 0:

execute code:

global.state=3;
if (global.facing==0)
    sprite_index=spr_duckleft;
else
    sprite_index=spr_duck;
image_single=4;
switchingpose=0;
if (takingpain==1 && recovering==0){
    recovering=1;
    if (global.strengthlevel==10)
        alarm[7]=90;
    else
        alarm[7]=60;
    }
Alarm Event for alarm 1:

execute code:

image_speed=0.5;
lookingaround=0;
global.state=1;
if (global.facing==0)
    sprite_index=spr_basicleft;
else
    sprite_index=spr_basic;
switchingpose=0;
kicking=0;
if (takingpain==1 && recovering==0 && goaroundtrigger==0){
    recovering=1;
    if (global.strengthlevel==10)
        alarm[7]=90;
    else
        alarm[7]=60;
    }
scr_ougi();
Alarm Event for alarm 2:

execute code:

reloading=0;
Alarm Event for alarm 3:

execute code:

//Mount Shredder
global.ignoreall=0;
global.erasetop=0;
global.topmessage="Press Up or Down to dismount";
ignoreshreddertext=10;
if (global.facing==0)
    sprite_index=spr_tasenshredder_basicijileft;
else
    sprite_index=spr_tasenshredder_basiciji;
image_index=14;
image_single=-1;
image_speed=0.5;
alarm[0]=0;
alarm[1]=0;
alarm[4]=0;
alarm[5]=0;
alarm[7]=0;
    
Alarm Event for alarm 4:

execute code:

firing=0;
if (global.state==1){
    if (running==0){
        if (global.facing==0)
            sprite_index=spr_basicleft;
        else
            sprite_index=spr_basic;
        }
    if (running==1){
        if (global.facing==0)
            sprite_index=spr_runleft;
        else
            sprite_index=spr_run;
        }
    }
Alarm Event for alarm 5:

execute code:

//WARNING: this now only happens in scr_terminatecrack()
if (niacrack){
    global.ignoreall=0;
    niacrack=0;
    }
Alarm Event for alarm 6:

execute code:

//Vortex death during full pacifist ending
if (vortexkilled && !vortexkilled2){
    vortexkilled2=1;
    with (obj_sabot)
        scr_music("mus_darkstroke");
    if (!global.noblood){
        instance_create(x+6,y+30,obj_bloodflow);
        (instance_create(x+6,y+30,obj_bloodflow)).dir=1;
        }
    repeat(150)
        instance_create(obj_iji.x-100+random(200),obj_iji.y-100+random(200),obj_ijideathflash);
    (instance_create(x,y,obj_whiteblanket)).alarm[0]=2;
    global.hp=0;
    global.armor=0;
    repeat(3)
        script_execute(scr_nanoexplosion,6,25);
    (instance_create(x,y,obj_deadiji)).sprite_index=sprite_index;
    visible=0;
    invisible=1;
    scr_stopijivoice();
    global.ignoreall=1;
    image_single=9;
    global.state=8;
    }


else{
//Death
if (global.hp<1){
    with (obj_ansaksie){
        scr_assassinpain(1);
        instance_destroy();
        }
    with (obj_tasenscout)
        angry=0;
    with (obj_tasensoldier)
        angry=0;
    with (obj_tasencommander)
        angry=0;
    with (obj_tasenelite)
        angry=0;
    with (obj_komatotrooper)
        angry=0;
    with (obj_komatoberserker)
        angry=0;
    with (obj_komatoassassin){
        angry=0;
        if (!asha && !asha2)
            instance_destroy=0;
        }
    with (obj_komatobeast)
        angry=0;
    with (obj_komatoannihilator)
        angry=0;
    with (obj_krotera){
        if (hp>0){
            angry=0;
            calmdown=1;
            }
        }
    with (obj_asha)
        angry=0;
    with (obj_iosa){
        angry=0;
        alarm[2]=0;
        alarm[6]=0;
        }
    with (obj_visioncheck)
        instance_destroy();
    with (obj_nanoflash)
        instance_destroy();
    if (obj_checkpoint.state==1)
        scr_revive();
    //Really dead
    else{
        repeat(8)
            instance_create(x-10+floor(random(32)),y+10,obj_xp4);
        if (global.ammo2>0)
            instance_create(x-26+floor(random(32)),y-6,obj_ammo1);
        if (global.ammo2>10)
            instance_create(x-26+floor(random(32)),y-6,obj_ammo2);
        if (global.ammo3>0)
            instance_create(x-26+floor(random(32)),y-6,obj_ammo3);
        if (global.ammo3>3)
            instance_create(x-26+floor(random(32)),y-6,obj_ammo4);
        if (global.ammo4>0)
            instance_create(x-26+floor(random(32)),y-6,obj_ammo5);
        if (global.ammo4>3)
            instance_create(x-26+floor(random(32)),y-6,obj_ammo6);
        if (global.ammo6>0)
            instance_create(x-26+floor(random(32)),y-6,obj_ammo7);
        if (global.ammo6>3)
            instance_create(x-26+floor(random(32)),y-6,obj_ammo8);
        if (global.ammo7>0)
            instance_create(x-26+floor(random(32)),y-6,obj_ammo9);
        if (global.ammo7>3)
            instance_create(x-26+floor(random(32)),y-6,obj_ammo10);
        if (global.ammo8>0)
            instance_create(x-26+floor(random(32)),y-6,obj_ammo11);
        if (global.ammo8>3)
            instance_create(x-26+floor(random(32)),y-6,obj_ammo12);
        with (obj_sabot)
            scr_music("mus_gameover");
        if (room==rom_sector11 || room==rom_sector12 || room==rom_sector13 || room==rom_sector14 || room==rom_sector15)
            global.bosshint=1;
        if (!global.noblood){
            instance_create(x+6,y+30,obj_bloodflow);
            (instance_create(x+6,y+30,obj_bloodflow)).dir=1;
            }
        obj_hud.depth=-100;
        obj_weapon1.depth=-101;
        obj_weapon2.depth=-101;
        obj_weapon3.depth=-101;
        obj_weapon4.depth=-101;
        obj_weapon5.depth=-101;
        obj_weapon6.depth=-101;
        obj_weapon7.depth=-101;
        obj_weapon8.depth=-101;
        obj_reloader.depth=-102;
        repeat(150)
            instance_create(obj_iji.x-100+random(200),obj_iji.y-100+random(200),obj_ijideathflash);
        (instance_create(x,y,obj_whiteblanket)).alarm[0]=2;
        instance_create(obj_shakescreen.x,obj_shakescreen.y,obj_breakscreen);
        global.armor=0;
        repeat(3) script_execute(scr_nanoexplosion,6,25);
        with (obj_turret){
            angry=0;
            alarm[2]=0;
            }
        (instance_create(x,y,obj_deadiji)).sprite_index=sprite_index;
        instance_destroy();
        with (obj_chaintracer2)
            instance_destroy();
        obj_sabot.gameover=1;
        scr_stopijivoice();
        }
    }
//Await getup
else{
    image_single=9;
    global.state=8;
    if (takingpain==1 && recovering==0){
        if (global.strengthlevel==10)
            alarm[7]=90;
        else
            alarm[7]=60;
        recovering=1;
        }
    else{
        takingpain=0;
        recovering=0;
        }
    }
}
Alarm Event for alarm 7:

execute code:

{
takingpain=0;
recovering=0;
}
Step Event:

execute script scr_ijistep with arguments (0,0,0,0,0)
Begin Step Event:

execute script scr_ijibeginstep with arguments (0,0,0,0,0)
End Step Event:

execute script scr_ijiendstep with arguments (0,0,0,0,0)
Collision Event with object obj_tasensoldier:

execute code:

if (!shredder){
if (other.dead==0 && takingpain==0){
    if (!global.truce && other.alarm[7]<=0){
        global.armor-=6/global.armorlevel;
        instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
        if (other.angry==0 && (other.state==0 || other.state==1 || other.state==2))
            other.alarm[2]=1;
        if (other.angry==0){
            tempid=instance_create(other.x+6,other.y+8,obj_visionchecke)
            tempid.direction=0;
            tempid.speed=16;
            tempid=instance_create(other.x+6,other.y+8,obj_visionchecke)
            tempid.direction=180;
            tempid.speed=16;
            }
        other.angry=1;
        other.alarm[5]=300;
        other.targetiji=300;
        }
    }
}
else if (speed>8 && other.state!=4 && other.state!=5){
    scr_sound("glo_kick");
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=hspeed;
        tempid.direction=random(360);
        }
    scr_shakescreen(2);
    other.ijikill=1;
    other.hp-=1;
    if (other.hp<=0 && other.killtype<7)
        other.killtype=7;
    if (hspeed<0){
        with (other)
            scr_enemyknockdown(1,abs(obj_iji.hspeed)-resistance);
        }
    if (hspeed>0){
        with (other)
            scr_enemyknockdown(2,abs(obj_iji.hspeed)-resistance);
        }
    }

Collision Event with object obj_enemybullet:

execute code:

if (shredder){
shredderhp-=4;
}
else{
if (takingpain==0 && recovering==0){
    global.armor-=(4/global.armorlevel);
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_ijisplat);
    if (overload==9){
        global.ammo2partpart+=1;
        if (global.ammo2partpart>=3){
            global.ammo2partpart=0;
            global.ammo2part-=1;
            }
        if global.ammo2part<0{
            if (global.weapon2){
                if (global.assimilatelevel<10)
                    maxammo=global.assimilatebase+global.assimilatelevel*global.assimilatesize;
                else
                    maxammo=99;
                if (global.ammo2==maxammo)
                    global.topmessage="Machinegun ammo full";
                else
                    global.topmessage="Machinegun ammo +1";
                }
            else{
                if (global.assimilatelevel<10)
                    maxammo=global.assimilatebase+global.assimilatelevel*global.assimilatesize;
                else
                    maxammo=99;
                if (global.ammo2==maxammo)
                    global.topmessage="Unknown ammo full";
                else
                    global.topmessage="Unknown ammo +1";
                }
            global.ammo2part=9;
            global.ammo2+=1;
            global.erasetop=0;
            }
        }
    }
}

with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_rocketexplosion:

execute code:

if (shredder && !other.dud)
shredderhp-=200;

if (other.dud==0){
    if (takingpain==0){
        global.hp-=2;
        global.damage+=2;
        }
    force=11-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left + (bbox_right - bbox_left) /2) < (other.bbox_left + ((other.bbox_right - other.bbox_left) /2)))
        script_execute(scr_knockdown,1,force);
    else
        script_execute(scr_knockdown,2,force);
    }
Collision Event with object obj_mpfbexplosion:

execute code:

if (shredder && !other.dud)
shredderhp-=400;

if (other.dud==0){
    if (takingpain==0){
        global.hp-=3;
        global.damage+=3;
        }
    force=22-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left + (bbox_right - bbox_left) /2) < (other.bbox_left + ((other.bbox_right - other.bbox_left) /2)))
        script_execute(scr_knockdown,1,force);
    else
        script_execute(scr_knockdown,2,force);
    }
Collision Event with object obj_tasenscout:

execute code:

if (!shredder){
if (other.dead==0 && takingpain==0){
    if (!global.truce && other.alarm[7]<=0){
        global.armor-=6/global.armorlevel;
        instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
        if (other.angry==0 && (other.state==0 || other.state==1 || other.state==2))
            other.alarm[2]=1;
        if (other.angry==0){
            tempid=instance_create(other.x+6,other.y+8,obj_visionchecke)
            tempid.direction=0;
            tempid.speed=16;
            tempid=instance_create(other.x+6,other.y+8,obj_visionchecke)
            tempid.direction=180;
            tempid.speed=16;
            }
        other.angry=1;
        other.alarm[5]=300;
        other.targetiji=300;
        }
    }
}
else if (speed>8 && other.state!=4 && other.state!=5){
    scr_sound("glo_kick");
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=hspeed;
        tempid.direction=random(360);
        }    scr_shakescreen(2);
    other.ijikill=1;
    other.hp-=1;
    if (other.hp<=0 && other.killtype<7)
        other.killtype=7;
    if (hspeed<0){
        with (other)
            scr_enemyknockdown(1,abs(obj_iji.hspeed)-resistance);
        }
    if (hspeed>0){
        with (other)
            scr_enemyknockdown(2,abs(obj_iji.hspeed)-resistance);
        }
    }

Collision Event with object obj_enemyrocketexplosion:

execute code:

if (shredder && !other.dud)
shredderhp-=200;

if (other.dud==0){
    if (takingpain==0){
        global.hp-=2;
        global.damage+=2;
        if (global.sector==15){
            if (other.torweapon==0){
                obj_tor.weight[0]+=3;
                obj_tor.potencycount[0]-=1;
                }
            else if (other.torweapon==5){
                obj_tor.weight[5]+=3;
                obj_tor.potencycount[5]-=1;
                }
            else if (other.torweapon==7){
                obj_tor.weight[7]+=3;
                obj_tor.potencycount[7]-=1;
                }
            }
        if (overload==9){
            if (global.weapon3){
                if (global.assimilatelevel<10)
                    maxammo=global.assimilatebase+global.assimilatelevel*global.assimilatesize;
                else
                    maxammo=99;
                if (global.ammo3==maxammo)
                    global.topmessage="Rocket ammo full";
                else
                    global.topmessage="Rocket ammo +1";
                }
            else{
                if (global.assimilatelevel<10)
                    maxammo=global.assimilatebase+global.assimilatelevel*global.assimilatesize;
                else
                    maxammo=99;
                if (global.ammo3==maxammo)
                    global.topmessage="Unknown ammo full";
                else
                    global.topmessage="Unknown ammo +1";
                }
            global.ammo3+=1;
            global.erasetop=0;
            }
        }
    force=11-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left + (bbox_right - bbox_left) /2) < (other.bbox_left + ((other.bbox_right - other.bbox_left) /2)))
        script_execute(scr_knockdown,1,force);
    else
        script_execute(scr_knockdown,2,force);
    }
Collision Event with object obj_shockexplosion:

execute code:

if (shredder && !other.dud)
shredderhp-=200;

if (other.dud==0){
    if (takingpain==0){
        global.hp-=2;
        global.damage+=2;
        }
    force=13-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)<(other.bbox_left+((other.bbox_right-other.bbox_left)/2)))
        script_execute(scr_knockdown,1,force);
    else
        script_execute(scr_knockdown,2,force);
    }
Collision Event with object obj_shockballexplosion:

execute code:

if (shredder && !other.dud)
shredderhp-=30;

else{
if (other.dud==0 && takingpain==0)
    global.armor-=30/global.armorlevel;
}
Collision Event with object obj_tasencommander:

execute code:

if (!shredder){
if (other.dead==0 && takingpain==0){
    if (!global.truce && other.alarm[7]<=0){
        global.armor-=6/global.armorlevel;
        instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
        if (other.angry==0 && (other.state==0 || other.state==1))
            other.alarm[2]=1;
        if (other.angry==0){
            tempid=instance_create(other.x+6,other.y+16,obj_visionchecke)
            tempid.direction=0;
            tempid.speed=16;
            tempid=instance_create(other.x+6,other.y+16,obj_visionchecke)
            tempid.direction=180;
            tempid.speed=16;
            }
        other.angry=1;
        other.alarm[5]=300;
        other.targetiji=300;
        }
    }
}
else if (speed>8 && other.state!=4 && other.state!=5){
    scr_sound("glo_kick");
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=hspeed;
        tempid.direction=random(360);
        }
    scr_shakescreen(2);
    other.ijikill=1;
    other.hp-=1;
    if (other.hp<=0 && other.killtype<7)
        other.killtype=7;
    if (hspeed<0){
        with (other)
            scr_enemyknockdown(1,abs(obj_iji.hspeed)-resistance);
        }
    if (hspeed>0){
        with (other)
            scr_enemyknockdown(2,abs(obj_iji.hspeed)-resistance);
        }
    }

Collision Event with object obj_swipe:

execute code:

if (shredder && !other.dud)
shredderhp-=100;

if (takingpain==0 && other.dud==0){
    scr_sound("iji_swiped");
    global.damage+=1;
    global.hp-=1;
    scr_shakescreen(2);
    if (other.facing==1)
        script_execute(scr_knockdown,2,12);
    else
        script_execute(scr_knockdown,1,12);
    }
Collision Event with object obj_tasenelite:

execute code:

if (shredder){
if (speed>8 && !other.dead && !other.takingpain){
    scr_sound("glo_kick");
    repeat(3){
        tempid=instance_create(other.x+30,other.y+15,obj_scrapwhite);
        tempid.speed=hspeed;
        tempid.direction=random(360);
        }
    with (other){
        ijikill=1;
        hp-=1;
        if (hp<=0 && killtype<7)
            killtype=7;
        scr_shakescreen(2);
        scr_elitepain();
        }
    }
}

else{
if (other.dead==0 && takingpain==0){
    if (!global.truce && other.alarm[7]<=0){
        global.armor-=6/global.armorlevel;
        instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
        if (other.angry==0)
            other.alarm[2]=1;
        if (other.angry==0){
            tempid=instance_create(other.x+6,other.y+32,obj_visionchecke)
            tempid.direction=0;
            tempid.speed=16;
            tempid=instance_create(other.x+6,other.y+32,obj_visionchecke)
            tempid.direction=180;
            tempid.speed=16;
            }
        other.angry=1;
        other.alarm[5]=300;
        other.targetiji=300;
        }
    }
}
Collision Event with object obj_kickbox_elite:

execute code:

if (shredder && !other.dud)
shredderhp-=100;

if (takingpain==0 && other.dud==0){
    scr_sound("iji_swiped");
    global.damage+=1;
    global.hp-=1;
    scr_shakescreen(2);
    if (other.facing==1)
        script_execute(scr_knockdown,2,10);
    else
        script_execute(scr_knockdown,1,10);
    }
Collision Event with object obj_enemympfbexplosion:

execute code:

if (shredder && !other.dud)
shredderhp-=400;

if (other.dud==0){
    if (takingpain==0){
        global.hp-=3;
        global.damage+=3;
        if (overload==9){
            if (global.weapon4){
                if (global.assimilatelevel<10)
                    maxammo=global.assimilatebase+global.assimilatelevel*global.assimilatesize;
                else
                    maxammo=99;
                if (global.ammo4==maxammo)
                    global.topmessage="MPFB ammo full";
                else
                    global.topmessage="MPFB ammo +1";
                }
            else{
                if (global.assimilatelevel<10)
                    maxammo=global.assimilatebase+global.assimilatelevel*global.assimilatesize;
                else
                    maxammo=99;
                if (global.ammo4==maxammo)
                    global.topmessage="Unknown ammo full";
                else
                    global.topmessage="Unknown ammo +1";
                }
            global.ammo4+=1;
            global.erasetop=0;
            }
        }
    force=22-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left + (bbox_right - bbox_left) /2) < (other.bbox_left + ((other.bbox_right - other.bbox_left) /2)))
        script_execute(scr_knockdown,1,force);
    else
        script_execute(scr_knockdown,2,force);
    if (global.sector==15){
        obj_tor.weight[4]+=3;
        obj_tor.potencycount[4]-=1;
        }
    }
Collision Event with object obj_nanoflash:

execute code:

with (other){
    if (follow==1 && target==0){
        instance_create(x,y,obj_ijisplat);
        instance_destroy();
        }
    }
Collision Event with object obj_station:

execute script scr_readstation with arguments (0,0,0,0,0)
Collision Event with object obj_ammo:

execute script scr_pickupammo with arguments (0,0,0,0,0)
Collision Event with object obj_weaponpickup:

execute script scr_touchweapon with arguments (0,0,0,0,0)
Collision Event with object obj_xp:

execute code:

if (global.hp>0 && !shredder){
    //Nanoshield
    if (overload==8)
        global.armor=100;
    //Conditions
    okay=0;
    if (other.sprite_index==spr_pickuphealth && (global.hp
Collision Event with object obj_jumpupgrade:

execute code:

scr_sound("glo_pickup2");
global.topmessage="Jump +1";
global.erasetop=0;
global.jumplevel+=1;
with (other){
    script_execute(scr_pickupflash,0,0,5);
    instance_destroy();
    }
if (global.sector==2)
(instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chat23";
if (global.sector==5){
    (instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chat53";
    tempid=instance_create(4224,2256,obj_trigger);
    tempid.textid="chat57"
    tempid.followiji=1;
    }
Collision Event with object obj_armorupgrade:

execute code:

scr_sound("glo_pickup2");
global.topmessage="Armor +1";
global.erasetop=0;
global.armorlevel+=1;
with (other){
    script_execute(scr_pickupflash,0,0,5);
    instance_destroy();
    }
if (global.sector==3)
(instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chat32";
Collision Event with object obj_log1:

execute code:

if (!shredder){
if (global.noitemtext==0 && global.ignorestation==0){
    if (string_copy(global.topmessage,1,6)!="Nano +"){
        if (other.sprite_index==spr_terminal)
            global.topmessage="Use this terminal with the "+chr(global.usekey)+" key";
        else{
            if (other.sprite_index=spr_log1)
                global.topmessage="Use this Tasen text log ("+chr(global.usekey)+" key) to read it";
            else if (other.sprite_index=spr_log2)
                global.topmessage="Use this Komato text log ("+chr(global.usekey)+" key) to read it";
            else
                global.topmessage="Use this text log ("+chr(global.usekey)+" key) to read it";
            }
        global.erasetop=0;
        }
    }
}
Collision Event with object obj_door:

execute code:

if (shredder){
    script_execute(scr_shakescreen,1);
    if (hspeed<0){
        with (other)
        script_execute(scr_metabreak,abs(obj_iji.hspeed),1);
        }
    else{
        with (other)
        script_execute(scr_metabreak,abs(obj_iji.hspeed),2);
        }
    global.erasetop=0;
    global.topmessage="Level "+string(other.resistance)+" Shield door destroyed";
    }
Collision Event with object obj_tele:

execute code:

if (global.noitemtext==0 && !shredder){
    if (string_copy(global.topmessage,1,6)!="Nano +"){
        global.topmessage="Use this teleporter ("+chr(global.usekey)+" key) to warp to its destination";
        global.erasetop=0;
        }
    }
Collision Event with object obj_weapstation:

execute code:

if (global.noitemtext==0 && global.ignorestation==0 && !other.crackmark && global.weapstation!=1 && global.weapstation!=2){
    if (string_copy(global.topmessage,1,6)!="Nano +"){
        global.topmessage="Use this Nanoweapon station ("+chr(global.usekey)+" key) to combine Nanoweapons";
        global.erasetop=0;
        }
    }
Collision Event with object obj_trigger:

execute code:

if (!global.horse){
if (vortexkilled && other.doit==0){
(instance_create(obj_shakescreen.x,obj_shakescreen.y,obj_chat)).textid=other.textid;
goaroundtrigger=1;
with (other)
    doit=1;
}

else{
if (other.doit==0 && global.hp>0){
if (other.textid="chat47" || other.textid=="chat63")
    global.ignoremessagescroll=1;
else if (other.textid="chat11" && global.specialtrigger16)
    global.ignoremessagescroll=90;
else
    global.ignoremessagescroll=30;
with (other)
    doit=1;
(instance_create(obj_shakescreen.x,obj_shakescreen.y,obj_chat)).textid=other.textid;
if (other.stopoverload==1){
    if (overloadtime>1)
    overloadtime=1;
    }
global.ignoreall=1;
takingpain=1;
goaroundtrigger=1;
alarm[5]=0;
alarm[7]=0;
recovering=0;
running=0;
goingleft=0;
goingright=0;
if (global.state==1){
    if (global.facing==0)
        sprite_index=spr_basicleft;
    else
        sprite_index=spr_basic;
    }
if (global.state==5){ //Stand up when halfway ducking
    if (sprite_index==spr_duck || sprite_index==spr_duckleft){
        switchingpose=1;
        if (image_index<1)
            image_index=1-image_index;
        else
            image_index=0;
        if (global.facing==0)
            sprite_index=spr_standupleft;
        else
            sprite_index=spr_standup;
        image_single=-1;
        image_speed=0.5;
        alarm[1]=4-(image_index*2);
        alarm[0]=0;
        }
    }

if (global.state==6 || global.state==7 || global.state==8){ //Stand up when knockdown
    if (other.textid="chat86" || other.textid="chat45" || other.textid="chat9e" || other.textid="chat9e22")
        global.facing=1;
    global.state=2;
    vspeed=0;
    hspeed=0;
    velocity=0;
    if (facing==0)
        sprite_index=spr_jumpleft;
    else
        sprite_index=spr_jump;
    image_index=0;
    image_single=-1;
    image_speed=0.5;
    if (!place_free(x,y)){
        if (place_free(x,y+30))
            y+=30;
        else if (place_free(x,y-30))
            y-=30;
        }
    }
}
}
}
Collision Event with object obj_terminal:

execute code:

if (global.ignorestation==0 && !other.cracked && !obj_sabot.annihilatorbeta){
    if (string_copy(global.topmessage,1,6)!="Nano +"){
        global.topmessage="Use this terminal with the "+chr(global.usekey)+" key";
        global.erasetop=0;
        }
    }
Collision Event with object obj_end:

execute code:

if (!global.ignoreall || instantend){

if (global.sector==1 && room!=rom_sectorz){
    if (!gotribbon)
        global.specialtrigger8=0;
    }
global.ignoreall=1;
instantend=0;
goaroundtrigger=1;
if (!vortexkilled){
    alarm[5]=0;
    alarm[7]=0;
    running=0;
    goingleft=0;
    goingright=0;
    takingpain=1;
    recovering=0;
    if (global.state==1){
        if (global.facing==0)
            sprite_index=spr_basicleft;
        else
            sprite_index=spr_basic;
        }
    if (global.state==5){ //Stand up when halfway ducking
        if (sprite_index==spr_duck || sprite_index==spr_duckleft){
            switchingpose=1;
            if (image_index<2)
                image_index=2-image_index;
            else
                image_index=0;
            if (global.facing==0)
                sprite_index=spr_standupleft;
            else
                sprite_index=spr_standup;
            image_single=-1;
            image_speed=0.5;
            alarm[1]=6-(image_index*2);
            alarm[0]=0;
            }
        }
    }

other.alarm[0]=14;
instance_create(x,y,obj_endtransition);
}
Collision Event with object obj_turret:

execute code:

if (other.active){
    if (!shredder){
        if (other.dead==0 && takingpain==0){
            if (!global.truce && other.alarm[8]<=0){
                global.armor-=6/global.armorlevel;
                instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
                if (other.angry==0){
                    other.alarm[2]=15;
                    with (other)
                        scr_turretchargetell();
                    }
                other.angry=1;
                other.alarm[3]=300;
                }
            }
        if (other.dead==1){
            if (goingright || goingleft){
                with (other){
                    if (kicked==0){
                        scr_sound("glo_kick");
                        script_execute(scr_turretkick);
                        kicked=1;
                        alarm[7]=20;
                        }
                    }
                }
            }
        }
    else if (speed>8 && other.kicked==0 && !other.cracked){
        script_execute(scr_shakescreen,1);
        with (other){
            scr_sound("glo_kick");
            script_execute(scr_turretkick);
            kicked=1;
            alarm[7]=10;
            }
        }
    }
Collision Event with object obj_enemyshockballexplosion:

execute code:

if (shredder && !other.dud)
shredderhp-=30;

else if (other.dud==0 && takingpain==0){
    global.armor-=30/global.armorlevel;
    if (overload==9){
        global.ammo7part+=1;
        if global.ammo7part>=10{
            if (global.weapon7){
                if (global.assimilatelevel<10)
                    maxammo=global.assimilatebase+global.assimilatelevel*global.assimilatesize;
                else
                    maxammo=99;
                if (global.ammo7==maxammo)
                    global.topmessage="Shocksplinter ammo full";
                else
                    global.topmessage="Shocksplinter ammo +1";
                }
            else{
                if (global.assimilatelevel<10)
                    maxammo=global.assimilatebase+global.assimilatelevel*global.assimilatesize;
                else
                    maxammo=99;
                if (global.ammo7==maxammo)
                    global.topmessage="Unknown ammo full";
                else
                    global.topmessage="Unknown ammo +1";
                }
            global.ammo7part=0;
            global.ammo7+=1;
            global.erasetop=0;
            }
        }
    }
Collision Event with object obj_enemyshockexplosion:

execute code:

if (shredder && !other.dud)
shredderhp-=200;

if (other.dud==0){
    if (takingpain==0){
        global.hp-=2;
        global.damage+=2;
        if (overload==9){
            if (global.weapon7){
                if (global.assimilatelevel<10)
                    maxammo=global.assimilatebase+global.assimilatelevel*global.assimilatesize;
                else
                    maxammo=99;
                if (global.ammo7==maxammo)
                    global.topmessage="Shocksplinter ammo full";
                else
                    global.topmessage="Shocksplinter ammo +1";
                }
            else{
                if (global.assimilatelevel<10)
                    maxammo=global.assimilatebase+global.assimilatelevel*global.assimilatesize;
                else
                    maxammo=99;
                if (global.ammo7==maxammo)
                    global.topmessage="Unknown ammo full";
                else
                    global.topmessage="Unknown ammo +1";
                }
            global.ammo7+=1;
            global.erasetop=0;
            }
        }
    force=13-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)<(other.bbox_left+((other.bbox_right-other.bbox_left)/2)))
        script_execute(scr_knockdown,1,force);
    else
        script_execute(scr_knockdown,2,force);
    }
Collision Event with object obj_komatotrooper:

execute code:

if (!shredder){
if (other.dead==0 && takingpain==0){
    if (other.alarm[7]<=0){
        global.armor-=6/global.armorlevel;
        instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
        if (other.angry==0 && (other.state==0 || other.state==1 || other.state==2))
            other.alarm[2]=1;
        if (other.angry==0){
            tempid=instance_create(other.x+6,other.y+8,obj_visionchecke)
            tempid.direction=0;
            tempid.speed=16;
            tempid=instance_create(other.x+6,other.y+8,obj_visionchecke)
            tempid.direction=180;
            tempid.speed=16;
            }
        other.angry=1;
        other.alarm[5]=300;
        other.targetiji=300;
        }
    }
}
else if (speed>8 && other.state!=4 && other.state!=5){
    scr_sound("glo_kick");
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=hspeed;
        tempid.direction=random(360);
        }    scr_shakescreen(2);
    other.ijikill=1;
    other.hp-=1;
    if (other.hp<=0 && other.killtype<7)
        other.killtype=7;
    if (hspeed<0){
        with (other)
            scr_enemyknockdown(1,abs(obj_iji.hspeed)-resistance);
        }
    if (hspeed>0){
        with (other)
            scr_enemyknockdown(2,abs(obj_iji.hspeed)-resistance);
        }
    }

Collision Event with object obj_enemypulse:

execute code:

if (shredder)
shredderhp-=1;

else{
if (!takingpain && !recovering){
    global.armor-=(1/global.armorlevel);
    if (overload==9){
        global.ammo6partpart+=1;
        if (global.ammo6partpart>=5){
            global.ammo6partpart=0;
            global.ammo6part-=1;
            }
        if global.ammo6part<0{
            if (global.weapon6){
                if (global.assimilatelevel<10)
                    maxammo=global.assimilatebase+global.assimilatelevel*global.assimilatesize;
                else
                    maxammo=99;
                if (global.ammo6==maxammo)
                    global.topmessage="Pulse ammo full";
                else
                    global.topmessage="Pulse ammo +1";
                }
            else{
                if (global.assimilatelevel<10)
                    maxammo=global.assimilatebase+global.assimilatelevel*global.assimilatesize;
                else
                    maxammo=99;
                if (global.ammo6==maxammo)
                    global.topmessage="Unknown ammo full";
                else
                    global.topmessage="Unknown ammo +1";
                }
            global.ammo6part=24;
            global.ammo6+=1;
            global.erasetop=0;
            }
        }
if (other.hyper==1 && global.armor<30){
    global.hp-=1;
    global.damage+=1;
    scr_shakescreen(2);
    if (other.hspeed<0)
        scr_knockdown(1,other.hyperstrength);
    else
        scr_knockdown(2,other.hyperstrength);
    }
}
}
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
Collision Event with object obj_krotera:

execute code:

if (other.dead==0 && takingpain==0){
    global.armor-=6/global.armorlevel;
    instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
    }
Collision Event with object obj_emptyshredder:

execute code:

//Mount Shredder
if (!shredder){
if (ignoreshreddertext<=0){
    if (string_copy(global.topmessage,1,6)!="Nano +"){
        global.erasetop=0;
        global.topmessage="Press "+chr(global.usekey)+" to mount a Tasen Shredder";
        }
    }
if (other.speed==0 && abs(y-other.y+28)<22 && keyboard_check(ord("C")) && !global.ignoreall && global.state==1){
    keyboard_clear(ord("C"));
    x=floor(other.x);
    y=floor(other.y);
    obj_sabot.shredderx=xprevious-x;
    obj_sabot.shreddery=yprevious-y+28;
    scr_recoveryblinkend();
    visible=0;
    instance_create(x,y,obj_hologram);
    shredderhp=other.shredderhp;
    lookingaround=0;
    global.state=1;
    shredder=1;
    goingleft=0;
    goingright=0;
    running=0;
    takingpain=0;
    recovering=0;
    alarm[3]=12;
    alarm[0]=0;
    alarm[1]=0;
    alarm[4]=0;
    alarm[5]=0;
    alarm[7]=0;
    global.ignoreall=1;
    if (other.facing==0)    
        sprite_index=spr_tasenshredder_getonleft;
    else
        sprite_index=spr_tasenshredder_geton;
    global.facing=other.facing;
    image_index=0;
    image_single=-1;
    image_speed=0.5;
    with (other)
        instance_destroy();
    }
}
Collision Event with object obj_tasenshredder:

execute code:

if (global.hp>0 && !takingpain && !shredder){
    if (abs(other.hspeed)<8){
        global.armor-=6/global.armorlevel;
        instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
        }
    else if (other.hspeed<0){
        global.hp-=1;
        global.damage+=1;
        scr_sound("iji_swiped");
        scr_knockdown(1,abs(other.hspeed)-2);
        }
    else{
        global.hp-=1;
        global.damage+=1;
        scr_sound("iji_swiped");
        scr_knockdown(2,abs(other.hspeed)-2);
        }
    }
Collision Event with object obj_komatoberserker:

execute code:

if (!shredder){
if (other.dead==0 && takingpain==0){
    if (other.alarm[7]<=0){
        global.armor-=6/global.armorlevel;
        instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
        if (other.angry==0 && (other.state==0 || other.state==1))
            other.alarm[2]=1;
        if (other.angry==0){
            tempid=instance_create(other.x+6,other.y+12,obj_visionchecke)
            tempid.direction=0;
            tempid.speed=16;
            tempid=instance_create(other.x+6,other.y+12,obj_visionchecke)
            tempid.direction=180;
            tempid.speed=16;
            }
        other.angry=1;
        other.alarm[5]=300;
        other.targetiji=300;
        }
    }
}
else if (speed>8 && other.state!=4 && other.state!=5){
    scr_sound("glo_kick");
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=hspeed;
        tempid.direction=random(360);
        }    scr_shakescreen(2);
    other.ijikill=1;
    other.hp-=1;
    if (other.hp<=0 && other.killtype<7)
        other.killtype=7;
    if (hspeed<0){
        with (other)
            scr_enemyknockdown(1,abs(obj_iji.hspeed)-resistance);
        }
    if (hspeed>0){
        with (other)
            scr_enemyknockdown(2,abs(obj_iji.hspeed)-resistance);
        }
    }

Collision Event with object obj_komatoassassin:

execute code:

if (other.visible==1 && takingpain==0){
    if (other.sprite_index==spr_komatoassassin_downstab || other.sprite_index==spr_asha_downstab){
        global.armor=100;
        global.hp-=1;
        scr_pain();
        scr_sound("iji_sworded");
        scr_putstain();
        }
    else{
        global.armor-=6/global.armorlevel;
        instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
        }
    with (other){
        if (!angry){
            alarm[2]=random(60-(global.difficulty*20))+30-(global.difficulty*10);
            angry=1;
            visible=0;
            instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
            }
        }
    }
Collision Event with object obj_assassin_uppercut:

execute code:

if (takingpain==0 && other.dud==0 && global.sector!=14){
    scr_sound("iji_sworded");
    global.damage+=1;
    global.hp-=1;
    scr_shakescreen(2);
    if (other.facing==1)
        script_execute(scr_knockdown,2,6);
    else
        script_execute(scr_knockdown,1,6);
    scr_putstain();
    }
Collision Event with object obj_assassin_backstab:

execute code:

if (takingpain==0 && other.dud==0 && global.sector!=14){
    scr_sound("iji_sworded");
    global.damage+=1;
    global.hp-=1;
    scr_shakescreen(2);
    if (other.facing==1)
        script_execute(scr_knockdown,2,6);
    else
        script_execute(scr_knockdown,1,6);
    scr_putstain();
    }
Collision Event with object obj_assassin_upslash:

execute code:

if (takingpain==0 && global.sector!=14){
    scr_sound("iji_sworded");
    global.hp-=1;
    global.armor=100;
    script_execute(scr_pain);
    scr_putstain();
    }
Collision Event with object obj_komatobeast:

execute code:

if (global.hp>0 && !takingpain && !shredder){
    if (other.state==2 || other.state==3){
        scr_sound("iji_swiped");
        global.hp-=1;
        global.damage+=1;
        if (other.facing==0)
            scr_knockdown(1,10);
        else
            scr_knockdown(2,10);
        }
    else{
        if (other.alarm[7]<=0){
            global.armor-=6/global.armorlevel;
            instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
            }
        }
    if (other.angry==0)
        other.alarm[2]=1;
    if (other.angry==0){
        tempid=instance_create(other.x+6,other.y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(other.x+6,other.y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    angry=1;
    alarm[5]=300;
    other.targetiji=300;
    }
if (shredder){
    with (other)
        scr_beastdeath();
    }
Collision Event with object obj_proxima:

execute code:

if (takingpain==0 && !recovering && !other.chargingnuke){
    global.armor-=16/global.armorlevel;
    instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
    }
Collision Event with object obj_komatoannihilator:

execute code:

if (other.dead==0 && takingpain==0){
    global.armor-=6/global.armorlevel;
    instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
    if (other.angry==0 && (other.state==0 || other.state==1))
        other.alarm[2]=1;
    if (other.angry==0){
        tempid=instance_create(other.x+50,other.y+100,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(other.x+50,other.y+100,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    other.angry=1;
    other.alarm[5]=300;
    other.targetiji=300;
    }
Collision Event with object obj_iosa:

execute code:

if (other.dead==0 && takingpain==0){
    global.armor-=6/global.armorlevel;
    instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
    }
Collision Event with object obj_iosa2:

execute code:

/*if (other.dead==0 && takingpain==0 && other.state!=11){
    global.armor-=6/global.armorlevel;
    instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
    }
*/
if (other.state==10 && instance_number(obj_cracktext)==1){
    x-=8;
    }
Collision Event with object obj_iosa2slash:

execute code:

if (!takingpain || global.hp<=0){
if (global.hp>0){
    global.damage+=3;
    global.hp-=3;
    }
if (global.hp<=0){
    takingpain=0;
    cannotpause=1;
    }
scr_sound("iji_swiped");
scr_sound("iji_sworded");
scr_shakescreen(3);
script_execute(scr_knockdown,1,16);
scr_putstain();
}
Collision Event with object obj_iosa2overdrive:

execute code:

if (other.attack==1 && visible){
    if (global.hp>0){
        global.armor-=150/global.armorlevel;
        if (global.armor<=2){
            global.hp-=1;
            global.damage+=1;
            if (global.hp>0)
                global.armor=100;
            else
                global.armor=0;
            }
        }
    scr_sound("iji_swiped");
    scr_sound("iji_sworded");
    scr_shakescreen(4);
    fatality=1;
    notech=20;
    goaroundcyen=1;
    scr_knockdown(1,0,0,1,1);
    fatality=0;
    y+=3.6;
    velocity=0;
    hspeed=0;
    vspeed=0;
    if (x>obj_iosa2overdrive.x+16)
        x-=16;
    else
        x+=16;
    takingpain=0;
    recovering=0;
    visible=1;
    scr_putstain(1);
    }
Collision Event with object obj_iosa2_swipebox:

execute code:

if (!takingpain){
    if (global.hp>0){
        global.damage+=3;
        global.hp-=3;
        }
    scr_sound("iji_swiped");
    scr_sound("iji_sworded");
    scr_shakescreen(3);
    //fatality=1;
    script_execute(scr_knockdown,1,10);
    //fatality=0;
    scr_putstain();
    }
Collision Event with object obj_enemythor:

execute code:

if (thored==0){
thored=2;

if (!takingpain && !recovering && !thored2){
    thored2=1;
    scr_sound("iji_bigpain");
    }

if (thored2){
takingpain=0;
recovering=0;
visible=1;
fatality=1;
notech=10;
scr_shakescreen(4);
if (obj_iosa.facing==0){
    scr_knockdown(1,0,0,0,1);
    if (place_free(x-66,y))
        x-=64;
    else if (place_free(x-34,y))
        x-=32;
    else if (place_free(x-18,y))
        x-=16;
    }
else{
    scr_knockdown(2,0,0,0,1);
    if (place_free(x+66,y))
        x+=64;
    else if (place_free(x+34,y))
        x+=32;
    else if (place_free(x+18,y))
        x+=16;
    }
fatality=0;
if (global.hp>0){
global.damage+=1;
global.hp-=1;
}
if (place_free(x,y+9))
    y+=7;
velocity=0;
hspeed=0;
vspeed=0;
}
}
Collision Event with object obj_skysmasher:

execute code:

if (other.dead==0 && takingpain==0){
    if (other.alarm[8]<=0){
        with (other)
            scr_smasherwake();
        global.armor-=6/global.armorlevel;
        instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
        }
    }
Collision Event with object obj_locationmessage:

execute code:

if (global.sector==7 && other.sec7bg==1)
    background_visible[1]=1;
if (global.sector==7 && other.sec7bg==2)
    background_visible[1]=0;
if (other.loc!=obj_sabot.topmessage3){
    if (other.slow)
        obj_sabot.topmessage3slow=1;
    obj_sabot.topmessage3cyc=120;
    obj_sabot.topmessage3dcyc=0;
    obj_sabot.topmessage3=other.loc;
    with (other){
        if (destroy)
            instance_destroy();
        }
    }
if (other.truce==1)
    specialtruce=1;
if (other.truce==2)
    specialtruce=0;
if (other.thunder==1)
    obj_sabot.thunder=1;
else
    obj_sabot.thunder=0;
if (other.deepsector==1)
    obj_sabot.deepsector=1;
else if (other.deepsector==0 || other.deepsector==2)
    obj_sabot.deepsector=0;
Collision Event with object obj_impulseexplosion:

execute code:

if (other.dud==0 && takingpain==0){
    force=11-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left + (bbox_right - bbox_left) /2) < (other.bbox_left + ((other.bbox_right - other.bbox_left) /2)))
        script_execute(scr_knockdown,1,force,1,1,1,1);
    else
        script_execute(scr_knockdown,2,force,1,1,1,1);
    recovering=0;
    takingpain=0;
    }
Keyboard Event for Key:

execute code:

//Walk left
if (!ignorephysics){
if (!place_meeting(x,y,obj_end)){
if (global.ignoreall==0 && goingright==0 && !shredder){

    scr_getup();

    //Airbrake left
    if (global.state==6 && global.facing==0 && velocity>2 && global.hp>0){
        velocity-=0.4;
        }

    goingleft=1;
    lookingaround=0;
    if (global.state==1){
        alarm[1]=0;
        running=1;
        global.facing=0;
        if (sprite_index!=spr_runfireleft)
            sprite_index=spr_runleft;
        if (place_meeting(x-walkspeed,y,obj_glass))
            exit;
        if (place_free(x-walkspeed,y))
            x-=walkspeed;
        else if (place_free(x-walkspeed,y-4)){
            x-=walkspeed;
            y-=4;
            move_contact_solid(270,-1);
            }
        //Go down stairs
        if (place_free(x,y+1) && (place_meeting(x,y+5,obj_sloper) || place_meeting(x,y+5,obj_slopel)))
            move_contact_solid(270,-1);
        }
    //Jump
    if (global.state==2){
        running=1;
        global.facing=0;
        sprite_index=spr_jumpleft;
        if (place_meeting(x-walkspeed,y,obj_glass))
            exit;
        if (place_free(x-walkspeed,y) && place_free(x-walkspeed,y+vspeed-2))
            x-=walkspeed;
        //if (place_free(x-5,y+vspeed+gravity+1) && place_free(x-5,y+vspeed-2))
        //    x-=5;
        //else if (vspeed>0 && place_free(x-5,y) && !place_free(x,y+vspeed+gravity+1) && !place_free(x+5,y+vspeed+gravity+1))
        //    x-=5;
        }
    }
}
}
Keyboard Event for Key:

execute code:

if (!ignorephysics && !place_meeting(x,y,obj_end) && global.ignoreall==0 && !shredder)
scr_getup();
Keyboard Event for Key:

execute code:

if (!ignorephysics){
if (!place_meeting(x,y,obj_end)){
if (!global.ignoreall && !goingleft && !shredder){

scr_getup();

//Airbrake right
if (global.state==6 && global.facing==1 && velocity>2 && global.hp>0){
    velocity-=0.4;
    }

goingright=1;
lookingaround=0;
//Move right
if (global.state==1){
alarm[1]=0;
running=1;
global.facing=1;
    if (sprite_index!=spr_runfire)
        sprite_index=spr_run;
    if (place_meeting(x+walkspeed,y,obj_glass))
        exit;
    if (place_free(x+walkspeed,y)){
        x+=walkspeed;
        }
    else if (place_free(x+walkspeed,y-4)){
        x+=walkspeed;
        y-=4;
        move_contact_solid(270,-1);
        }
    //Go down stairs
    if (place_free(x,y+1) && (place_meeting(x,y+5,obj_sloper) || place_meeting(x,y+5,obj_slopel)))
        move_contact_solid(270,-1);
    }
    //Jump
    if (global.state==2){
        running=1;
        global.facing=1;
        sprite_index=spr_jump;
        if (place_meeting(x+walkspeed,y,obj_glass))
            exit;
        if (place_free(x+walkspeed,y) && place_free(x+walkspeed,y+vspeed-2))
            x+=walkspeed;
        //if (place_free(x+5,y+vspeed+gravity+1) && place_free(x+5,y+vspeed-2))
        //    x+=5;
        //else if (vspeed>0 && place_free(x+5,y) && !place_free(x,y+vspeed+gravity+1) && !place_free(x-5,y+vspeed+gravity+1))
        //    x+=5;
        }
    }
}
}
Keyboard Event for X-key Key:

execute code:

scr_firekey();
Key Press Event for Key:

execute script scr_enterkey with arguments (0,0,0,0,0)
Key Press Event for Key:

execute code:

if (!ignorephysics){
    if (!place_meeting(x,y,obj_end)){
        if (global.ignoreall==0){
            lookingaround=0;
            tempshredderjump=0;
            //Dismount Shredder
            if (shredder){
                visible=1;
                with (obj_hologram)
                    instance_destroy();
                tempid=instance_create(floor(x),floor(y)-1,obj_emptyshredder);
                tempid.shredderhp=shredderhp;
                tempid.iji=21;
                if (sprite_index==spr_tasenshredder_basicijileft){
                    tempid.sprite_index=spr_tasenshredder_emptyleft;
                    tempid.facing=0;
                    }
                else{
                    tempid.sprite_index=spr_tasenshredder_empty;
                    tempid.facing=1;
                    }
                tempid.hspeed=hspeed;
                tempid.vspeed=vspeed;
                y-=24;
                x=floor(x);
                y=floor(y);
                shredder=0;
                pressjump=1;
                global.state=2;
                tempshredderjump=1;
                image_index=0;
                if (global.jumplevel==1)
                    vspeed=-14;
                if (global.jumplevel==2)
                    vspeed=-18;
                if (global.jumplevel==3)
                    vspeed=-23;
                if (global.facing==0)
                    sprite_index=spr_jumpleft;
                else
                    sprite_index=spr_jump;
                hspeed=0;
                }
            scr_getup();
            //Jump
            if (tempshredderjump==0){
                gojump=0;
                if (global.state==2 && (prevstate==1 && (!place_free(xprev,yprev+4) || !place_free(xprev2,yprev2+4))) && place_free(x,y-8))
                    gojump=1;
                if (global.state==2 && (prevstate2==1 && !place_free(xprev2,yprev2+4)) && place_free(x,y-8))
                    gojump=1;
                if (global.state==1 && (!place_free(x,y+4) || !place_free(xprev,yprev+4) || !place_free(xprev2,yprev2+4)) && place_free(x,y-8))
                    gojump=1;
                if  ((sprite_index==spr_pushbutton || sprite_index==spr_pushbuttonleft) && image_single=-1 && place_free(x,y-8))
                    gojump=1;
                if  ((sprite_index==spr_duck || sprite_index==spr_duckleft || sprite_index==spr_standup || sprite_index==spr_standupleft) && (image_single=-1 || delayframes>0) && place_free(x,y-38))
                    gojump=1;
                if (gojump){
                    //Dusty below
                    if (place_meeting(x,y+1,obj_dustyblock)){
                        instance_create(x+1,y+57,obj_smoke);
                        instance_create(x+14,y+57,obj_smoke);
                        }
                    image_single=-1;
                    image_speed=0.5;
                    delayframes=0;
                    scr_sound("iji_jump");
                    switchingpose=0;
                    pressjump=1;
                    global.state=2;
                    alarm[0]=0;
                    alarm[1]=0;
                    image_index=0;
                    if (global.jumplevel==1)
                        vspeed=-14;
                    if (global.jumplevel==2)
                        vspeed=-18;
                    if (global.jumplevel==3)
                        vspeed=-22;
                    if (global.facing==0)
                        sprite_index=spr_jumpleft;
                    else
                        sprite_index=spr_jump;
                    }
                }
            }
        }
    }
Key Press Event for Key:

execute code:

//Dismount Shredder
if (shredder && (sprite_index==spr_tasenshredder_basiciji || sprite_index==spr_tasenshredder_basicijileft)){
    visible=1;
    with (obj_hologram)
        instance_destroy();
    tempid=instance_create(floor(x),floor(y)-1,obj_emptyshredder);
    tempid.shredderhp=shredderhp;
    tempid.iji=21;
    if (sprite_index==spr_tasenshredder_basicijileft){
        tempid.sprite_index=spr_tasenshredder_emptyleft;
        tempid.facing=0;
        }
    else{
        tempid.sprite_index=spr_tasenshredder_empty;
        tempid.facing=1;
        }
    tempid.hspeed=hspeed;
    tempid.vspeed=vspeed;
    y-=46;
    x=floor(x);
    y=floor(y);
    shredder=0;
    pressjump=1;
    global.state=2;
    image_index=0;
    vspeed=-1;
    if (global.facing==0)
        sprite_index=spr_jumpleft;
    else
        sprite_index=spr_jump;
    hspeed=0;
    }
Key Press Event for A-key Key:

execute script scr_prevweap with arguments (0,0,0,0,0)
Key Press Event for C-key Key:

execute code:

scr_getup();
scr_usekey();
Key Press Event for D-key Key:

execute script scr_nextweap with arguments (0,0,0,0,0)
Key Press Event for S-key Key:

execute script scr_specialweap with arguments (0,0,0,0,0)
Key Press Event for X-key Key:

execute script scr_pressfirekey with arguments (0,0,0,0,0)
Key Press Event for Z-key Key:

execute code:

scr_getup();
scr_kickkey();
Key Release Event for C-key Key:

execute code:

tech=0;
techcyc=0;
______________________________________________________

Information about object: obj_block
Sprite: spr_block
Solid: true
Visible: false
Depth: 100
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_bullet
Sprite: spr_bullet
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute script scr_bullet with arguments (1,0,0,0,0)
set Alarm 0 to 1
Alarm Event for alarm 0:

execute code:

if (hit){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stagger){
        tempid=instance_create(x,y,obj_bullethit);
        tempid.image_index=3;
        tempid.alarm[0]=4;
        }
    else{
        instance_create(x,y,obj_smoke);
        tempid=instance_create(x,y,obj_bullethit);
        tempid.alarm[0]=4;
        }
    scr_sound("glo_rico");
    if (!stagger){
        temprand=random(1);
        if (temprand>0.7 && global.specialbake==0){
            if (global.facing==0)
                instance_create(x+8,y-8,obj_pixspark);
            else
                instance_create(x-8,y-8,obj_pixspark);
            }
        }
    }
instance_destroy();
______________________________________________________

Information about object: obj_sabot
Sprite: spr_sabot
Solid: false
Visible: true
Depth: -202
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (global.horse)
    scr_horseinit();
else
    scr_sabotcreate();
Alarm Event for alarm 0:

execute code:

firstfadein=0.25;
with (obj_loadingback)
    instance_destroy();
//deactivate surrounding world
if (room!=rom_sector11 && room!=rom_sector12 && room!=rom_sector13 && room!=rom_sector14 && room!=rom_sector15 && room!=rom_sector16){
    instance_deactivate_all(1);
    instance_activate_object(obj_iji);
    instance_activate_object(obj_shakescreen);
    //METHOD X
    with (obj_shakescreen)
        scr_methodx();
    }
Alarm Event for alarm 1:

execute code:

drawgameover=1;
Alarm Event for alarm 2:

execute code:

nextfv=0;
Alarm Event for alarm 3:

execute code:

//Part of teleportation
instance_activate_object(obj_teledest);
with (obj_teledest){
    if (obj_iji.dest==dest){
        if (sprite_index==spr_checkpoint){
            obj_iji.x=x+10;
            obj_iji.y=y+35;
            //Sec7
            if (room==rom_sector7){
                obj_sabot.fixedpalette=0;
                if (!obj_iji.sec7cp2){
                    obj_sabot.palette=1;
                    background_index[0]=bg_back73;
                    }
                else{
                    obj_sabot.palette=0;
                    background_index[0]=bg_back7;
                    }
                }
            //Lifts
            instance_activate_object(obj_lift);
            with (obj_lift){
                if (global.sector==2 && tag==1)
                    y=3904;
                else if (global.sector==2 && tag==2)
                    y=2720;
                else if (global.sector==3 && tag==1)
                    y=2400;
                else if (global.sector==3 && tag==2)
                    y=1440;
                else if (global.sector==5 && tag==1)
                    y=3648;
                else if (global.sector==6 && tag==1)
                    y=3008;
                else if (global.sector==7 && tag==1)
                    y=5952;
                else if (global.sector==7 && tag==2 && obj_iji.sec7cp2)
                    y=4704;
                else if (global.sector==7 && tag==3)
                    y=1984;
                }
            }
        else{
            obj_iji.x=x+10;
            obj_iji.y=y-29;
            instance_create(obj_iji.x,obj_iji.y,obj_whiteflash2);
            }
        obj_sabot.ignoresmooth=1;
        if (global.facing==1 && sprite_index==spr_teledest)
            instance_create(obj_iji.x-11,obj_iji.y-4,obj_ijiflash);
        if (global.facing==0 && sprite_index==spr_teledest){
            tempid=instance_create(obj_iji.x-19,obj_iji.y-4,obj_ijiflash);
            tempid.image_index=5;
            }
        repeat(30){
            if (sprite_index==spr_checkpoint)
                tempid=instance_create(x+random(32),y+random(64),obj_thorspark);
            else
                tempid=instance_create(x+random(32),y+12-random(64),obj_thorspark);
            tempid.speed=random(3.5)-1.5;
            tempid.direction=90;
            tempid.gravity=0.2;
            }
        }
    }
instance_activate_object(obj_block);
metcyc=0;
doteleport=1;
Alarm Event for alarm 4:

execute code:

ignoresmooth=0;
Alarm Event for alarm 5:

execute code:

scr_methodx();
(instance_create(x,y,obj_blackblanket)).alarm[0]=2;
Alarm Event for alarm 6:

execute code:

//Reboot
if (global.hp>0 && !obj_iji.takingpain && !obj_iji.recovering && (obj_iji.sprite_index==spr_duck || obj_iji.sprite_index==spr_duckleft)){
    if (room==rom_sectorz || room==rom_sector1 || room==rom_sector2 || room==rom_sector3 || room==rom_sector4 || room==rom_sector5 || room==rom_sector6 || room==rom_sector7 || room==rom_sector8 || room==rom_sector9 || room==rom_sectorx){
        global.erasetop=0;
        global.topmessage="WARNING: CRITICAL SECURITY BREACH DETECTED";
        global.ignorestation=90;
        global.security=1;
        obj_iji.crackmark=1;
        global.cracktext="KL-53 TASEN#[1>base>field]#Security: ";
        global.cracktext+=string(global.security);
        if (global.security==10)
            global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
        else
            global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
        script_execute(scr_begincrack);
        }
    else{
        global.ignoreall=0;
        global.erasetop=0;
        global.topmessage="You are too distracted to attempt this here";
        }
    }
Alarm Event for alarm 7:

execute code:

pause=1;
repeat(10)
    sound_stop_all();
instance_deactivate_all(1);
instance_activate_object(obj_activateme);
instance_activate_object(obj_herosabot);
instance_activate_object(obj_starthero3d);
with (obj_starthero3d)
    instance_destroy();
Alarm Event for alarm 8:

execute code:

instance_deactivate_all(1);
instance_activate_object(obj_shakescreen);
instance_activate_object(obj_horseenter);
//METHOD X
with (obj_shakescreen)
    scr_methodx();
End Step Event:

execute code:

if (global.horse)
    scr_horseendstep();
else{
    scr_sabot();
    scr_forcehud();
    if (instance_number(obj_messagetext)>=1)
        scr_messageframe();
    if (instance_number(obj_cracktext)==1)
        scr_crackframe();
    }
Keyboard Event for Keypad 1 Key:

execute code:

if (!playinghero3d && !pause){
if (global.viewyoffset<80)
    global.viewyoffset+=10;
if (global.viewxoffset>-100)
    global.viewxoffset-=10;
}
Keyboard Event for Keypad 2 Key:

execute code:

if (!playinghero3d && !pause){
if (global.viewyoffset<80)
    global.viewyoffset+=10;
}
Keyboard Event for Keypad 3 Key:

execute code:

if (!playinghero3d && !pause){
if (global.viewyoffset<80)
    global.viewyoffset+=10;
if (global.viewxoffset<100)
    global.viewxoffset+=10;
}
Keyboard Event for Keypad 4 Key:

execute code:

if (!playinghero3d && !pause){
if (global.viewxoffset>-100)
    global.viewxoffset-=10;
}
Keyboard Event for Keypad 6 Key:

execute code:

if (!playinghero3d && !pause){
if (global.viewxoffset<100)
    global.viewxoffset+=10;
}
Keyboard Event for Keypad 7 Key:

execute code:

if (!playinghero3d && !pause){
if (global.viewyoffset>-80)
    global.viewyoffset-=10;
if (global.viewxoffset>-100)
    global.viewxoffset-=10;
}
Keyboard Event for Keypad 8 Key:

execute code:

if (!playinghero3d && !pause){
if (global.viewyoffset>-80)
    global.viewyoffset-=10;
}
Keyboard Event for Keypad 9 Key:

execute code:

if (!playinghero3d && !pause){
if (global.viewyoffset>-80)
    global.viewyoffset-=10;
if (global.viewxoffset<100)
    global.viewxoffset+=10;
}
Draw Event:

execute code:

if (global.horse)
    scr_horsedraw();
else{
    if (drawgameover){
        gameoverrestartcyc+=1;
        if (gameoverrestartcyc>40){
            with (obj_breakscreen)
                fade+=8.5;
            }
        if (gameoverrestartcyc>=70){
            scr_retrysector();
            }
        }
    if (!gameover)
        scr_topmessage();
    scr_drawtime();
    }
Key Press Event for Key:

COMMENT: DEBUG
execute script scr_debug with arguments (0,0,0,0,0)
Key Press Event for Key:

execute code:

//Retry Sector/Boss
if (gameover)
    scr_retrysector();
Key Press Event for 0-key Key:

execute script scr_changeweapon with arguments (10,0,0,0,0)
Key Press Event for 1-key Key:

execute script scr_changeweapon with arguments (1,0,0,0,0)
Key Press Event for 2-key Key:

execute script scr_changeweapon with arguments (2,0,0,0,0)
Key Press Event for 3-key Key:

execute script scr_changeweapon with arguments (3,0,0,0,0)
Key Press Event for 4-key Key:

execute script scr_changeweapon with arguments (4,0,0,0,0)
Key Press Event for 5-key Key:

execute script scr_changeweapon with arguments (5,0,0,0,0)
Key Press Event for 6-key Key:

execute script scr_changeweapon with arguments (6,0,0,0,0)
Key Press Event for 7-key Key:

execute script scr_changeweapon with arguments (7,0,0,0,0)
Key Press Event for 8-key Key:

execute script scr_changeweapon with arguments (8,0,0,0,0)
Key Press Event for 9-key Key:

execute script scr_changeweapon with arguments (9,0,0,0,0)
Key Press Event for E-key Key:

execute script scr_changeweapon with arguments (7,0,0,0,0)
Key Press Event for Q-key Key:

execute script scr_changeweapon with arguments (5,0,0,0,0)
Key Press Event for R-key Key:

execute script scr_changeweapon with arguments (8,0,0,0,0)
Key Press Event for W-key Key:

execute script scr_changeweapon with arguments (6,0,0,0,0)
Key Press Event for Keypad 5 Key:

execute code:

if (!playinghero3d && !pause && !global.horse){
if (global.sector!=11 && global.sector!=12 && global.sector!=13 && global.sector!=14 && global.sector!=15 && instance_number(obj_asha2)==0  && instance_number(obj_ougi)==0){
with (obj_shakescreen){
    instance_deactivate_all(1);
    scr_methodx();
    }
}
global.viewxoffset=0;
global.viewyoffset=0;
}
Key Press Event for F4 Key:

execute code:

if (keyboard_check(vk_alt)){
    sound_stop_all();
    game_end();
    }
______________________________________________________

Information about object: obj_tasensoldier
Sprite: spr_tasensoldier_basicleft
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_tasenenemy
Mask: 

Create Event:

execute code:

scr_storeseed();

killtype=1;
image_speed=0.5;
state=1;
alarm[2]=25+random(10);
alarm[7]=1;
hp=2;
maxhp=2;
if (global.suddendeath){
    hp=1;
    maxhp=1;
    }
armor=100;
maxarmor=100;
enemytype=1;
resistance=4;
security=4;
walkspeed=3+global.specialtrigger16*2;

if (global.really){
    hp*=2;
    maxhp*=2;
    walkspeed*=2;
    armor*=2;
    maxarmor*=2;
    resistance*=2;
    security*=2;
    }
    
scr_restoreseed();

Alarm Event for alarm 0:

set variable reloading to 0
Alarm Event for alarm 1:

execute code:

if (facing==0 && !takingpain)
    sprite_index=spr_tasensoldier_basicleft;
else
    sprite_index=spr_tasensoldier_basic;
Alarm Event for alarm 2:

execute code:

scr_storeseed();

//Fast getup fix
if (golden)
    image_speed=0.5;
//Choose target
if (targetrival==0){
    if (targetiji>0)
        target=obj_iji.id;
    else{
        angry=0;
        alarm[5]=300;
        }
    }
if (!instance_exists(target)){
angry=0;
targetrival=0;
if (targetiji>0 && target!=obj_iji.id){
    if (!angry && (state==0 || state==1 || state==2))
        alarm[2]=1;
    angry=1;
    alarm[5]=300;
    target=obj_iji.id;
    }
}

//Adjust sprite
if (facing==0 && state==0)
    sprite_index=spr_tasensoldier_basicleft;
if (facing==1 && state==0)
    sprite_index=spr_tasensoldier_basic;
//Begin taking action
takingpain=0;
alarm[2]=25+random(10);
//Scour for seen health
if (!angry && scouring>0){
    state=1;
    if (scouringdir>0)
        facing=0;
    else
        facing=1;
    exit;
    }
//Rocket has fired
if (firingrocket==1){
    state=1;
    firingrocket=0;
    if (x>target.x)
        facing=0;
    else
        facing=1;
    if (global.really)
        alarm[2]=5;
    exit;
    }
//Mach overload
if (angry && obj_sabot.machtot>12){
    state=1;
    if (x>target.x)
        facing=0;
    else
       facing=1;
    exit;
    }
//Roam
randomstate=random(1);
if (alwaysrocket)
    randomstate=0.98;
if (angry==0){
    if (randomstate<0.6){
        state=0;
        alarm[2]=60+random(90);
        }
    else{
        state=1;
        facing=0;
        if (randomstate>0.8)
            facing=1;
        }
    }
//Angry
else{
    if (randomstate<0.5){
        state=1;
        idling+=1;
        }
    if (idling==4){
        if (abs(target.y-y)<128)
            state=2;
        else
            state=1;
        idling=0;
        }
    if (randomstate>=0.5 && randomstate<0.92){
        if (abs(target.y-y)<128)
            state=2;
        else
            state=1;
        idling=0;
        }
    //Face target
    if (x>target.x)
        facing=0;
    else
        facing=1;
    //Charge a rocket
    if (randomstate>=0.92){
    if ((abs(y-target.y)<192 && (distance_to_object(target)>128 || golden)) || alwaysrocket){
        if (facing==0)
            tempid=instance_create(x-20,y+15,obj_chargetell);
        else
            tempid=instance_create(x+26,y+15,obj_chargetell);
        tempid.tempid=id;
        alwaysrocket=0;
        state=2;
        idling=0;
        if (((place_free(x+16,y-32) && place_free(x+32,y-32) && place_free(x+48,y-32) && place_free(x+64,y-32) && place_free(x+80,y-32) && place_free(x+96,y-32)) || (place_free(x+16,y) && place_free(x+32,y) && place_free(x+48,y) && place_free(x+64,y) && place_free(x+80,y) && place_free(x+96,y) && place_free(x+128,y))) && !place_meeting(x+16,y-32,obj_glass) && !place_meeting(x+32,y-32,obj_glass) && !place_meeting(x+48,y-32,obj_glass) && !place_meeting(x+64,y-32,obj_glass) && !place_meeting(x+80,y-32,obj_glass) && !place_meeting(x+96,y-32,obj_glass) && !place_meeting(x+128,y-32,obj_glass) && !place_meeting(x+16,y-32,obj_meta) && !place_meeting(x+32,y-32,obj_meta) && !place_meeting(x+48,y-32,obj_meta) && !place_meeting(x+64,y-32,obj_meta) && !place_meeting(x+80,y-32,obj_meta) && !place_meeting(x+96,y-32,obj_meta) && !place_meeting(x+128,y-32,obj_meta) && x<=target.x){
            if (golden){
                scr_sound("tor_gather");
                alarm[2]=23;
                alarm[6]=20;
                }
            else{
                scr_sound("wea_charge");
                alarm[2]=35;
                alarm[6]=32;
                }
            state=0;
            sprite_index=spr_tasensoldier_basic;
            firingrocket=1;
            }
        else if (((place_free(x-16,y-32) && place_free(x-32,y-32) && place_free(x-48,y-32) && place_free(x-64,y-32) && place_free(x-80,y-32) && place_free(x-96,y-32)) || (place_free(x-16,y) && place_free(x-32,y) && place_free(x-48,y) && place_free(x-64,y) && place_free(x-80,y) && place_free(x-96,y) && place_free(x-128,y))) && !place_meeting(x-16,y-32,obj_glass) && !place_meeting(x-32,y-32,obj_glass) && !place_meeting(x-48,y-32,obj_glass) && !place_meeting(x-64,y-32,obj_glass) && !place_meeting(x-80,y-32,obj_glass) && !place_meeting(x-96,y-32,obj_glass) && !place_meeting(x-128,y-32,obj_glass) && !place_meeting(x-16,y-32,obj_meta) && !place_meeting(x-32,y-32,obj_meta) && !place_meeting(x-48,y-32,obj_meta) && !place_meeting(x-64,y-32,obj_meta) && !place_meeting(x-80,y-32,obj_meta) && !place_meeting(x-96,y-32,obj_meta) && !place_meeting(x-128,y-32,obj_meta) && x>target.x){
            if (golden){
                scr_sound("tor_gather");
                alarm[2]=23;
                alarm[6]=20;
                }
            else{
                scr_sound("wea_charge");
                alarm[2]=35;
                alarm[6]=32;
                }
            state=0;
            sprite_index=spr_tasensoldier_basicleft;
            firingrocket=1;
            }
        }
    else{
        if (abs(target.y-y)<128)
            state=2;
        else
            state=1;
        idling=0;
        }
        }
    }
if (global.really && state==1 && alarm[2]>5)
    {alarm[2]=5;}
    
scr_restoreseed();

Alarm Event for alarm 4:

execute code:

scr_storeseed();

//Death
if (dead==1){
    if ((x > obj_shakescreen.x-500) && (x < obj_shakescreen.x+500) && (y > obj_shakescreen.y-400) && (y < obj_shakescreen.y+400))
    script_execute(scr_nanoexplosion,6,25);
    instance_create(x+6,y+18,obj_xp2);
    if (cracked)
        script_execute(scr_dropammo,6,15,1,3);
    else{
        script_execute(scr_dropammo,6,15,6,1);
        if (ammodrop>1)
            script_execute(scr_dropammo,6,15,8,3);
        }
    //Golden reward
    if (golden){
        obj_sabot.killedyuka=1;
        with (obj_cdoor){
            if (tag==25){
                scr_sound("glo_door");
                cracked=1;
                vspeed=-16;
                alarm[0]=6;
                }
            }
        instance_create(x+6,y+15,obj_harmlessexplosion);
        for (i=0;i<10;i+=1)
            instance_create(x+i*3,y+15,obj_pickuphealth);
        script_execute(scr_dropammo,-6,15,1,10);
        script_execute(scr_dropammo,12,15,1,10);
        script_execute(scr_dropammo,6,15,1,12);
        instance_create(x,y-30,obj_scrambler);
        scr_sound("exp_mpfb");
        scr_shakescreen(4);
        repeat(30){
            tempid=instance_create(x+6,y+10,obj_scrapwhite);
            tempid.alarm[2]=4;
            tempid.direction=random(180);
            tempid.speed=8+random(8);
            }
        }
    if (ijikill){
    tempid=instance_create(x+6,y-12,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y-12,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    instance_destroy();
    if (specialtrigger)
        global.specialtrigger2=0;
    if (specialtriggerb4)
        global.specialtriggerb4=0;
    }
//Get up
if (dead==0) && state==5{
    if (ijikill){
    tempid=instance_create(x+6,y-12,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y-12,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    armor=100;
    state=6;
    takingpain=0;
    image_index=0;
    image_single=-1;
    image_speed=0.5;
    if (facing==0)
        sprite_index=spr_tasensoldier_getupleft;
    else
        sprite_index=spr_tasensoldier_getup;
    y-=30;
    alarm[2]=28;
    if (golden){
        image_speed=1;
        alarm[2]=14;
        }    
    }
    
scr_restoreseed();

Alarm Event for alarm 5:

set variable angry to 0
Alarm Event for alarm 6:

execute code:

scr_storeseed();

if (golden){
if (facing==0){
    scr_shakescreen(2);
    scr_sound("wea_plas");
    tempid=instance_create(x-24,y+15,obj_enemyplasmatrace);
    with (tempid)
        scr_enemyplasmatrace(0);
    sprite_index=spr_tasensoldier_fireleft;
    }
else{
    scr_shakescreen(2);
    scr_sound("wea_plas");
    tempid=instance_create(x+28,y+15,obj_enemyplasmatrace);
    with (tempid)
        scr_enemyplasmatrace(1);
    sprite_index=spr_tasensoldier_fire;
    }
}

else{
if (weapon==0){
if (facing==0){
    if (cracked==0){
        scr_sound("wea_rock");
        tempid=instance_create(x-14,y+15,obj_enemyrocket);
        tempid.target=id;
        tempid.speed=-global.rocketspeed;
        tempid.image_single=1;
        tempid=instance_create(x-20,y+15,obj_rocketlaunch);
        tempid.sprite_index=spr_rocketlaunchleft;
        sprite_index=spr_tasensoldier_fireleft;
        }
    else{
        tempid=instance_create(x-3,y+15,obj_enemyrocketexplosion);
        tempid.target=id;
        instance_create(x-3,y+15,obj_explosioncenter);
        script_execute(scr_shakescreen,2);
        }
    }
else{
    if (cracked==0){
        scr_sound("wea_rock");
        tempid=instance_create(x+18,y+15,obj_enemyrocket);
        tempid.target=id;
        tempid.speed=global.rocketspeed;
        tempid.image_single=0;
        instance_create(x+26,y+15,obj_rocketlaunch);
        sprite_index=spr_tasensoldier_fire;
        }
    else{
        tempid=instance_create(x+18,y+15,obj_enemyrocketexplosion);
        tempid.target=id;
        instance_create(x+18,y+15,obj_explosioncenter);
        script_execute(scr_shakescreen,2);
        }
    }
}
if (weapon==1){
if (facing==0){
    if (cracked==0){
        scr_sound("wea_rock");
        tempid=instance_create(x-14,y+15,obj_enemyrocket);
        tempid.target=id;
        tempid.speed=-global.rocketspeed;
        tempid.image_single=1;
        tempid=instance_create(x-14,y+15,obj_enemyrocket);
        tempid.target=id;
        tempid.speed=global.rocketspeed-2;
        tempid.direction=174;
        tempid.image_single=1;
        tempid=instance_create(x-14,y+15,obj_enemyrocket);
        tempid.target=id;
        tempid.speed=global.rocketspeed-4;
        tempid.direction=186;
        tempid.image_single=1;
        tempid=instance_create(x-20,y+15,obj_rocketlaunch);
        tempid.sprite_index=spr_rocketlaunchleft;
        sprite_index=spr_tasensoldier_fireleft;
        }
    else{
        tempid=instance_create(x-3,y+15,obj_enemyrocketexplosion);
        tempid.target=id;
        instance_create(x-3,y+15,obj_explosioncenter);
        script_execute(scr_shakescreen,2);
        }
    }
else{
    if (cracked==0){
        scr_sound("wea_rock");
        tempid=instance_create(x+18,y+15,obj_enemyrocket);
        tempid.target=id;
        tempid.speed=global.rocketspeed;
        tempid.image_single=0;
        tempid=instance_create(x+18,y+15,obj_enemyrocket);
        tempid.target=id;
        tempid.speed=global.rocketspeed-2;
        tempid.direction=6;
        tempid.image_single=0;
        tempid=instance_create(x+18,y+15,obj_enemyrocket);
        tempid.target=id;
        tempid.speed=global.rocketspeed-4;
        tempid.direction=-6;
        tempid.image_single=0;
        instance_create(x+26,y+15,obj_rocketlaunch);
        sprite_index=spr_tasensoldier_fire;
        }
    else{
        tempid=instance_create(x+18,y+15,obj_enemyrocketexplosion);
        tempid.target=id;
        instance_create(x+18,y+15,obj_explosioncenter);
        script_execute(scr_shakescreen,2);
        }
    }
}
}

scr_restoreseed();

Alarm Event for alarm 7:

execute code:

scr_storeseed();

if (alarm[2]>=1 && state==3 && (sprite_index==spr_tasensoldier_pain || sprite_index==spr_tasensoldier_painleft)){
    alarm[7]=4;
    image_index=0;
    instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_nanospark);
    repeat(2)
        (instance_create(bbox_left-8+random(bbox_right-bbox_left+16),bbox_top-4+random(bbox_bottom-bbox_top+8),obj_glassspark)).image_index=4;
    }
    
scr_restoreseed();

Step Event:

execute code:

scr_storeseed();

//Golden
if (golden && !goldeninit){
    goldeninit=1;
    hp=50;
    maxhp=50;
    security=25;
    resistance=15;
    walkspeed=6;
    }

//"FIND"
if (angry && !prevangry){
    if (state==0 || state==1 || state==2){
        scr_sound("sol_find");
        }
    }
prevangry=angry;
//"DEATH"
if (state==4 && prevstate!=4 && temphp>0){
    if (mutepainsound)
        mutepainsound=0;
    else
        scr_sound("sol_death");
    }
prevstate=state;

if (temphp>0 && hp<=0 && ijikill==1){
    obj_iji.killemote=1;
    }
temphp=hp;

//Golden
//if (golden)
//    instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_glassspark);

scr_tasenvision(6,12);
if (targetiji>0)
targetiji-=1;
if (targetrival>0)
targetrival-=1;
if (scouring>0)
scouring-=1;
if (hp==maxhp)
scouring=0;
cfised=0;
thored=0;
plasmaed=0;
//Lose sight
if ((x < obj_shakescreen.x-1000) || (x > obj_shakescreen.x+1000) || (y < obj_shakescreen.y-800) || (y > obj_shakescreen.y+800)){
    angry=0;
    alarm[5]=0;
    if (state==2)
        state=0;
    }
//Crack fail
if (crackmark==1 && distance_to_object(obj_iji) > 50){
    script_execute(scr_crackfail);
    global.erasetop=0;
    global.topmessage="CRACKING FAILED: Subject is too far away";
    }
if (crackmark==1 && hp<=0){
    script_execute(scr_terminatecrack);
    global.erasetop=0;
    global.topmessage="CRACKING FAILED: Subject is dead";
    }
//Dodge projectile
perform=1;
if (global.difficulty==0){
    try=random(1);
    if (try>0.2)
    perform=0;
    }
if (global.difficulty==1){
    try=random(1);
    if (try>0.4)
    perform=0;
    }
if (global.difficulty==2){
    try=random(1);
    if (try>0.7)
    perform=0;
    }
if (golden || global.really)
    perform=1;
if (perform==1){
    if (state==0 || state==1 || state==2){
        if (facing==0){
            if (place_meeting(x-64,y-25,obj_rocket) || place_meeting(x-64,y-25,obj_shock) || place_meeting(x-64,y-25,obj_enemyshock) || place_meeting(x-64,y-25,obj_mpfb) || place_meeting(x-64,y-25,obj_komatorocket) || place_meeting(x-64,y-25,obj_komatompfb) || (place_meeting(x-32,y,obj_iji) && obj_iji.image_index==1 && obj_iji.sprite_index==spr_kickstrong)){
                state=7;
                sprite_index=spr_tasensoldier_duckleft;
                image_index=0;
                alarm[2]=12;
                alarm[0]=0;
                alarm[1]=0;
                alarm[5]=300;
                alarm[6]=0;
                alarm[7]=0;
                angry=1;
                firingrocket=0;
                idling=0;
                reloading=0;
                }
            }
        if (facing==1){
            if (place_meeting(x+64,y-25,obj_rocket) || place_meeting(x+64,y-25,obj_shock) || place_meeting(x+64,y-25,obj_enemyshock) || place_meeting(x+64,y-25,obj_mpfb) || place_meeting(x+64,y-25,obj_komatorocket) || place_meeting(x+64,y-25,obj_komatompfb) || (place_meeting(x+32,y,obj_iji) && obj_iji.image_index==1 && obj_iji.sprite_index==spr_kickstrongleft)){
                state=7;
                sprite_index=spr_tasensoldier_duck;
                image_index=0;
                alarm[2]=12;
                alarm[0]=0;
                alarm[1]=0;
                alarm[5]=300;
                alarm[6]=0;
                angry=1;
                firingrocket=0;
                idling=0;
                reloading=0;
                }
            }
        }
    }
//Fix hitting cieling
if (state==4 && place_meeting(x,y+vspeed-2,(obj_block)) && !place_meeting(x,y+vspeed-2,(obj_meta)) && vspeed<0){
    move_contact_solid(90,-1);
    vspeed=0;
    y+=3;
    }
//Stop animations
if (sprite_index=spr_tasensoldier_knockdown || sprite_index=spr_tasensoldier_knockdownleft){
    if (image_index==8)
        image_single=8;
    }
//Autodeath
if (hp<=0){
    dead=1;
    if (crackmark==1){
        script_execute(scr_terminatecrack);
        global.erasetop=0;
        global.topmessage="Cracking failed; subject is dead";
        }
    }
//Smoke when charging
if (firingrocket==1 && state==0)
    smoking+=1;
if (smoking>=5){
    smoking=0;
    if (golden){
        if (facing==0)
            instance_create(x-20,y+15,obj_shockemit);
        else
            instance_create(x+26,y+15,obj_shockemit);
        }
    else{
        if (facing==0)
            instance_create(x-20,y+15,obj_smoke);
        else
            instance_create(x+26,y+15,obj_smoke);
        }
    }
//Knockdown
if (state==4){
    if (knockdowntype==1){
        if (place_free(x-velocity,y+vspeed+2) && !place_meeting(x-velocity,y,obj_blockenemy)){
            if (place_free(x-velocity,y+vspeed-2))
                x-=velocity;
            else if (place_free(x,y+vspeed+12)){
                velocity*=0.3;
                knockdowntype=2;
                sprite_index=spr_tasensoldier_knockdownleft;
                facing=0;
                }
            }
        else if (place_free(x,y+vspeed+12)){
            velocity*=0.3;
            knockdowntype=2;
            sprite_index=spr_tasensoldier_knockdownleft;
            facing=0;
            }
        }
    if (knockdowntype==2){
        if (place_free(x+velocity,y+vspeed+2) && !place_meeting(x+velocity,y,obj_blockenemy)){
            if (place_free(x+velocity,y+vspeed-2))
                x+=velocity;
            else if (place_free(x,y+vspeed+12)){
                velocity*=0.3;
                knockdowntype=1;
                sprite_index=spr_tasensoldier_knockdown;
                facing=1;
                }
            }
        else if (place_free(x,y+vspeed+12)){
            velocity*=0.3;
            knockdowntype=1;
            sprite_index=spr_tasensoldier_knockdown;
            facing=1;
            }
        }
    //Fall
    if (place_free(x,y+1)){
        gravity=1;
        gravity_direction=270;
        }
    }
//Limit fall speed
if (vspeed>20)
    vspeed=20;
//Armor
if (armor<99.9)
    armor+=0.1;
//Pain from armordrop
if (armor<1){
    if (state<4)
        damageable=1;
    if (state==6)
        damageable=1;
    if (damageable==1){
        damageable=0;
        hp-=1;
        if (hp>0.001){
            scr_sound("sol_pain");
            while(armor<1)
                armor+=maxarmor;
            if (!golden){
                takingpain=1;
                firingrocket=0;
                state=3;
                alarm[1]=0;
                alarm[2]=10;
                alarm[3]=0;
                alarm[4]=0;
                alarm[6]=0;
                image_index=0;
                if (facing==0)
                    sprite_index=spr_tasensoldier_painleft;
                else
                    sprite_index=spr_tasensoldier_pain;
                }
            if (x>obj_iji.x){
                tempid=instance_create(x+28,y+15,obj_tasenblood);
                tempid.image_index=6;
                tempid.speed=random(2)+2;
                }
            else{
                tempid=instance_create(x+2,y+15,obj_tasenblood);
                tempid.speed=random(2)+2;
                tempid.direction=180;
                }
            }
        else{
            dead=1;
            firingrocket=0;
            takingpain=1;
            if (targetrival==0 || !instance_exists(target))
                target=obj_iji;
            if (x
Collision Event with object obj_block:

execute code:

//Knockdown landing
if (state==4){
    if (vspeed<0){
        move_contact_solid(90,-1);
        vspeed=0;
        y+=3;
        }
    else{
        scr_sound("glo_land");
        state=5;
        image_single=-1;
        image_index=0;
        image_speed=0.5;
        if (knockdowntype==1)
            sprite_index=spr_tasensoldier_hitfloor;
        if (knockdowntype==2)
            sprite_index=spr_tasensoldier_hitfloorleft;
        alarm[4]=10;
        gravity=0;
        vspeed=0;
        move_contact_solid(270,-1);
        }
    }

Collision Event with object obj_bullet:

execute code:

scr_storeseed();

if (!other.stagger)
    ijikill=1;
targetiji=300;
if (angry==0 && (state==0 || state==1 || state==2))
    alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0){
    if (other.stagger && !golden){
        if (state<4 || state==6){
            takingpain=1;
            firingrocket=0;
            state=3;
            alarm[1]=0;
            alarm[2]=10;
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            alarm[7]=0;
            image_index=0;
            if (facing==0)
                sprite_index=spr_tasensoldier_painleft;
            else
                sprite_index=spr_tasensoldier_pain;
            }
        }
    else if (!other.stagger){
        armor-=10*global.atmult;
        instance_create(other.x-3+random(7),other.y-3+random(7),obj_tasensplat);
        }
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stagger)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }

scr_restoreseed();

Collision Event with object obj_pellet:

execute code:

scr_storeseed();

if (!other.stun)
    ijikill=1;
targetiji=300;
if (angry==0 && (state==0 || state==1 || state==2))
    alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0){
    if (other.stun && !golden){
        if (state<4 || state==6){
            takingpain=1;
            firingrocket=0;
            state=3;
            alarm[1]=0;
            alarm[2]=floor(15*(1+(global.attacklevel/10)));
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            alarm[7]=4;
            if (facing==0)
                sprite_index=spr_tasensoldier_painleft;
            else
                sprite_index=spr_tasensoldier_pain;
            image_index=0;
            image_single=-1;
            image_speed=0.5;
            }
        }
    else if (!other.stun){
        armor-=9*global.atmult;
        instance_create(other.x-3+random(7),other.y-3+random(7),obj_tasensplat);
        }
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stun)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
    
scr_restoreseed();

Collision Event with object obj_kickbox:

execute code:

scr_storeseed();

global.temp=0;
with (other){
    if (place_meeting(x,y,obj_door) || place_meeting(x,y,obj_cdoor))
        global.temp=1;
    if (sprite_index==spr_detonator)
        global.temp=0;
    }
if (global.temp==0){
if (other.image_index==0){
    scr_sound("glo_kick");
    global.truce=0;
    ijikill=1;
    targetiji=300;
    script_execute(scr_shakescreen,1);
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (global.facing==0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }

    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    angry=1;
    alarm[5]=300;
    if (global.strengthlevel>=resistance){
        if (hp<=0 && milk<5){
            milk+=1;
            instance_create(bbox_left+(bbox_right-bbox_left)/2,bbox_top+(bbox_bottom-bbox_top)/2,obj_xp1);
            }
        hp-=1;
        if (other.sprite_index==spr_detonator){
            if (x>obj_iji.x)
                script_execute(scr_enemyknockdown,2);
            else
                script_execute(scr_enemyknockdown,1);
            }
        else
            script_execute(scr_enemyknockdown);
        }
    else{
        global.erasetop=0;
        if (golden)
            global.topmessage="You need a Strength of "+string(resistance)+" to knock down Yukabacera";
        else
            global.topmessage="You need a Strength of "+string(resistance)+" to knock down a Tasen Soldier";
        //Stagger
        if (hp>0 && !golden && (state==0 || state==1 || state==2 || state==3 || state==7)){
            takingpain=1;
            state=3;
            firingrocket=0;
            alarm[1]=0;
            alarm[2]=10;
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            image_index=0;
            if (facing==0)
                sprite_index=spr_tasensoldier_painleft;
            else
                sprite_index=spr_tasensoldier_pain;
            if (targetrival==0 || !instance_exists(target))
                target=obj_iji;
            }
        }
    }
}

scr_restoreseed();

Collision Event with object obj_rocketexplosion:

execute code:

scr_storeseed();

{
if (other.dud==0){
    global.truce=0;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    hp-=2*global.atmult;
    force=11-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}

scr_restoreseed();

Collision Event with object obj_mpfbexplosion:

execute code:

scr_storeseed();

//Nanodust
if (!golden){
    if (other.dud==0){
        if (x>other.x)
            scr_nanodust(x+6,y+32,1);
        else
            scr_nanodust(x+6,y+32,0);
        script_execute(scr_nanoexplosion,6,25);
        repeat(10){
            sound_stop(snd_sol_find1);
            sound_stop(snd_sol_find2);
            sound_stop(snd_sol_death1);
            sound_stop(snd_sol_death2);
            }
        instance_create(x+6,y+18,obj_xp2);
        if (cracked)
            script_execute(scr_dropammo,6,15,1,3);
        else{
            script_execute(scr_dropammo,6,15,6,1);
            if (ammodrop>1)
                script_execute(scr_dropammo,6,15,8,3);
            }
        if (other.ijis){
            ijikill=1;
            if (!killawarded){
                global.kills+=1;
                global.killdata[killdataid]=5;
                if (other.banana && killtype<8)
                    global.killdata[killdataid]=8;
                killawarded=1;
                }
            }
        else
            ijikill=0;
        scr_sound("tur_appear");
        instance_destroy();
        }
    }

else{
    if (other.dud==0){
        global.truce=0;
        if (other.ijis)
            ijikill=1;
        else
            ijikill=0;
        targetiji=300;
    if (angry==0){
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
        hp-=3*global.atmult;
        if (hp<=0 && ijikill && killtype<5)
            killtype=5;
        if (other.banana && hp<=0 && ijikill && killtype<8)
            killtype=8;
        force=22-(distance_to_object(obj_explosioncenter)/10);
        if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
            script_execute(scr_enemyknockdown,1,force);
        else
            script_execute(scr_enemyknockdown,2,force);
        }
    }
    
scr_restoreseed();

Collision Event with object obj_pulse:

execute code:

scr_storeseed();

global.truce=0;
if (!other.linker)
    ijikill=1;
targetiji=300;
if (other.hyper==1 && armor<33 && global.strengthlevel>=resistance){
    scr_sound("glo_kick");
    hp-=1;
    script_execute(scr_shakescreen,2);
    if (other.hspeed<0)
        script_execute(scr_enemyknockdown,1);
    else
        script_execute(scr_enemyknockdown,2);
    repeat(3){
        tempid=instance_create(other.x,other.y,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (other.hspeed<0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    }
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (angry==0 && (state==0 || state==1 || state==2))
    alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0 && !other.linker){
    armor-=2*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_tasensplat);
    }
if (other.linker)
    {scr_pulselink(3);}
    
scr_restoreseed();

Collision Event with object obj_enemyrocketexplosion:

execute code:

scr_storeseed();

{
if (other.dud==0){
    global.truce=0;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    hp-=2;
    force=11-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}

scr_restoreseed();

Collision Event with object obj_shockexplosion:

execute code:

scr_storeseed();

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    hp-=2*global.atmult;
    force=13-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}

scr_restoreseed();

Collision Event with object obj_shockballexplosion:

execute code:

scr_storeseed();

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
    if (dead==0)
        armor-=30*global.atmult;
    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    angry=1;
    alarm[5]=300;
    }
}

scr_restoreseed();

Collision Event with object obj_enemympfbexplosion:

execute code:

scr_storeseed();

//Nanodust
if (!golden){
    if (other.dud==0){
        if (x>other.x)
            scr_nanodust(x+6,y+32,1);
        else
            scr_nanodust(x+6,y+32,0);
        script_execute(scr_nanoexplosion,6,25);
        repeat(10){
            sound_stop(snd_sol_find1);
            sound_stop(snd_sol_find2);
            sound_stop(snd_sol_death1);
            sound_stop(snd_sol_death2);
            }
        instance_create(x+6,y+18,obj_xp2);
        if (cracked)
            script_execute(scr_dropammo,6,15,1,3);
        else{
            script_execute(scr_dropammo,6,15,6,1);
            if (ammodrop>1)
                script_execute(scr_dropammo,6,15,8,3);
            }
        if (other.ijis){
            ijikill=1;
            if (!killawarded){
                killawarded=1;
                global.kills+=1;
                global.killdata[killdataid]=5;
                if (other.banana && killtype<8)
                    global.killdata[killdataid]=8;
                }
            }
        else
            ijikill=0;
        scr_sound("tur_appear");
        instance_destroy();
        }
    }

else{
    if (other.dud==0){
        global.truce=0;
        if (other.ijis)
            ijikill=1;
        else
            ijikill=0;
        hp-=3;
        force=22-(distance_to_object(obj_explosioncenter)/10);
        if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
            script_execute(scr_enemyknockdown,1,force);
        else
            script_execute(scr_enemyknockdown,2,force);
        }
    }
    
scr_restoreseed();

Collision Event with object obj_pushbox:

execute code:

scr_storeseed();

if (dead==0){
    if (global.truce){
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    ijikill=1;
    if (global.cracklevel>=security){
        if (cracked==0){
            global.security=security;
            crackmark=1;
            if (global.suddendeath)
                global.cracktext="Tasen Soldier#H1 A100 W4#Security: ";
            else
                global.cracktext="Tasen Soldier#H2 A100 W4#Security: ";
            global.cracktext+=string(global.security);
            if (global.security==10)
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            else
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            script_execute(scr_begincrack);
            }
        else{
            global.erasetop=0;
            global.topmessage="Subject has already been cracked";
            }
        }
    else{
        global.erasetop=0;
        if (golden)
            global.topmessage="You need a Crack skill of "+string(security)+" to crack Yukabacera";
        else
            global.topmessage="You need a Crack skill of "+string(security)+" to crack a Tasen Soldier";
        scr_sound("glo_crackfail");
        global.ignorestation=90;
        }
    }
else{
    global.erasetop=0;
    global.topmessage="Unable to connect to nanofield; subject is dead";
    }
    
scr_restoreseed();

Collision Event with object obj_meta:

execute code:

scr_storeseed();

{
with (other)
    script_execute(scr_metabreak);
/*
if (other.sprite_index=spr_glass2 || other.sprite_index=spr_glass2small || other.sprite_index=spr_glass2short){
    repeat(3) instance_create(bbox_left+((bbox_right-bbox_left)/2),bbox_top+((bbox_bottom-bbox_top)/2),obj_tasenbloodspecial);
    hp-=1;
    }
*/
}

scr_restoreseed();

Collision Event with object obj_thor:

execute code:

scr_storeseed();

if (thored==0){
    ijikill=1;
    targetiji=300;
    if (angry==0 && (state==0 || state==1 || state==2)){
        alarm[2]=1;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    armor-=35*global.atmult;
    if (hp==1 && armor<=0 && ijikill && killtype<5)
        killtype=5;
    angry=1;
    alarm[5]=300;
    thored=1;
    
    //Nanodust
    if (hp==1 && armor<=0 && !golden){
        if (x>obj_iji.x)
            scr_nanodust(x+6,y+32,1);
        else
            scr_nanodust(x+6,y+32,0);
        script_execute(scr_nanoexplosion,6,25);
        repeat(10){
            sound_stop(snd_sol_find1);
            sound_stop(snd_sol_find2);
            sound_stop(snd_sol_death1);
            sound_stop(snd_sol_death2);
            }
        instance_create(x+6,y+18,obj_xp2);
        if (cracked)
            script_execute(scr_dropammo,6,15,1,3);
        else{
            script_execute(scr_dropammo,6,15,6,1);
            if (ammodrop>1)
                script_execute(scr_dropammo,6,15,8,3);
            }
        if (!killawarded){
            global.kills+=1;
            global.killdata[killdataid]=5;
            if (other.banana && killtype<8)
                global.killdata[killdataid]=8;
            else
                ijikill=0;
            killawarded=1;
            }
        scr_sound("tur_appear");
        instance_destroy();
        }
    }
    
scr_restoreseed();

Collision Event with object obj_enemyshockballexplosion:

execute code:

scr_storeseed();

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    if (dead==0)
        armor-=30;
    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
    angry=1;
    alarm[5]=300;
    targetrival=300;
    target=other.target;
    }
}

scr_restoreseed();

Collision Event with object obj_enemyshockexplosion:

execute code:

scr_storeseed();

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    hp-=2;
    targetrival=300;
    target=other.target;
    force=13-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}

scr_restoreseed();

Collision Event with object obj_enemypulse:

execute code:

scr_storeseed();

ijikill=0;
if (other.hyper==1 && armor<30){
    ijikill=0;
    scr_sound("glo_kick");
    hp-=1;
    script_execute(scr_shakescreen,2);
    if (other.hspeed<0)
        script_execute(scr_enemyknockdown,1,8);
    else
        script_execute(scr_enemyknockdown,2,8);
    repeat(3){
        tempid=instance_create(other.x,other.y,obj_scrapwhite);
        tempid.speed=6;
        if (other.hspeed<0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    }
if (angry==0 && (state==0 || state==1 || state==2))
    alarm[2]=1;
angry=1;
targetrival=300;
target=other.target;
alarm[5]=300;
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (dead==0){
    armor-=1;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_tasensplat);
    }
    
scr_restoreseed();

Collision Event with object obj_impulseexplosion:

execute code:

scr_storeseed();

if (other.dud==0){
    if (angry==0){
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    global.truce=0;
    ijikill=0;
    targetiji=300;
    mutepainsound=1;
    force=11-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force,1);
    else
        script_execute(scr_enemyknockdown,2,force,1);
    }
    
scr_restoreseed();

______________________________________________________

Information about object: obj_pellet
Sprite: spr_bullet
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute script scr_bullet with arguments (0,0,0,0,0)
set Alarm 0 to 1
Alarm Event for alarm 0:

execute code:

if (hit){
    x+=(3-random(6));
    y+=(3-random(6));
    if (!stun)
        instance_create(x,y,obj_smoke);
    if (stun){
        tempid=instance_create(x,y,obj_pellethit);
        tempid.image_index=3;
        tempid.alarm[0]=4;
        }
    else{
        tempid=instance_create(x,y,obj_pellethit);
        tempid.alarm[0]=4;
        }
    if (!stun){
        temprand=random(1);
        if (temprand>0.7 && instance_number(obj_pixspark)<10 && global.specialbake==0){
            if (global.facing==0)
                instance_create(x+8,y-8,obj_pixspark);
            else
                instance_create(x-8,y-8,obj_pixspark);
            }
        }
    }
instance_destroy();
______________________________________________________

Information about object: obj_visioncheck
Sprite: spr_visioncheck
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

scr_outside();
cycle+=1;
if (cycle>=100)
    instance_destroy();
Collision Event with object obj_block:

destroy the instance
Collision Event with object obj_tasensoldier:

execute code:

{
if ((hspeed>0 && other.facing==0) || (hspeed<0 && other.facing==1)){
    with (other){
        if (angry==0 && (state==0 || state==1 || state==2))
            alarm[2]=1;
        alarm[5]=300;
        if (angry==0){
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
        angry=1;
        targetiji=300;
        }
    }
}
Collision Event with object obj_tasenscout:

execute code:

{
if ((hspeed>0 && other.facing==0) || (hspeed<0 && other.facing==1)){
    with (other){
        if (angry==0 && (state==0 || state==1 || state==2))
            alarm[2]=ceil(random(15));
        alarm[5]=300;
        if (angry==0){
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
        angry=1;
        targetiji=300;
        }
    }
}
Collision Event with object obj_tasencommander:

execute code:

{
if ((hspeed>0 && other.facing==0) || (hspeed<0 && other.facing==1)){
    with (other){
        if (angry==0 && (state==0 || state==1 || state==2))
            alarm[2]=1;
        alarm[5]=300;
        if (angry==0){
        tempid=instance_create(x+6,y+16,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+16,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
        angry=1;
        targetiji=300;
        }
    }
}
Collision Event with object obj_tasenelite:

execute code:

if (!other.krotera){
if ((hspeed>0 && other.facing==0) || (hspeed<0 && other.facing==1)){
    with (other){
        if (angry==0 && (state==0 || state==1 || state==2))
            alarm[2]=1;
        alarm[5]=300;
        if (angry==0){
        tempid=instance_create(x+6,y+32,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+32,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
        angry=1;
        targetiji=300;
        }
    }
}
Collision Event with object obj_turret:

execute code:

if (other.sprite_index==spr_turret){
if ((hspeed>0 && other.facing==0) || (hspeed<0 && other.facing==1)){
    with (other){
        if (!angry){
            tempid=instance_create(x+6,y+8,obj_visionchecke)
            tempid.direction=0;
            tempid.speed=16;
            tempid=instance_create(x+6,y+8,obj_visionchecke)
            tempid.direction=180;
            tempid.speed=16;
            alarm[2]=30;
            scr_turretchargetell();
            angry=1;
            }
        alarm[3]=300;
        }
    }
}
Collision Event with object obj_komatotrooper:

execute code:

{
if ((hspeed>0 && other.facing==0) || (hspeed<0 && other.facing==1)){
    with (other){
        if (angry==0 && (state==0 || state==1 || state==2))
            alarm[2]=1;
        alarm[5]=300;
        if (angry==0){
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
        angry=1;
        targetiji=300;
        }
    }
}
Collision Event with object obj_tasenshredder:

execute code:

if ((hspeed>0 && other.facing==0) || (hspeed<0 && other.facing==1)){
    with (other){
        alarm[5]=300;
        if (angry==0){
        alarm[2]=1;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
        angry=1;
        targetiji=300;
        }
    }
Collision Event with object obj_komatoberserker:

execute code:

{
if ((hspeed>0 && other.facing==0) || (hspeed<0 && other.facing==1)){
    with (other){
        if (angry==0 && (state==0 || state==1 || state==2))
            alarm[2]=1;
        alarm[5]=300;
        if (angry==0){
        tempid=instance_create(x+6,y+12,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+12,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
        angry=1;
        targetiji=300;
        }
    }
}
Collision Event with object obj_komatoassassin:

execute code:

if (!other.asha && !other.angry && ((hspeed>0 && other.sprite_index==spr_komatoassassin_basicleft) || (hspeed<0 && other.sprite_index==spr_komatoassassin_basic))){
    with (other){
        alarm[2]=random(60-(global.difficulty*20))+30-(global.difficulty*10);
        angry=1;
        visible=0;
        instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
        }
    }
Collision Event with object obj_komatobeast:

execute code:

if ((hspeed>0 && other.facing==0) || (hspeed<0 && other.facing==1)){
    with (other){
        if (angry==0 && (state==0 || state==1 || state==2))
            alarm[2]=1;
        alarm[5]=300;
        if (angry==0){
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
        angry=1;
        targetiji=300;
        }
    }
Collision Event with object obj_komatoannihilator:

execute code:

if ((hspeed>0 && other.facing==0) || (hspeed<0 && other.facing==1)){
    with (other){
        if (state!=10){
            alarm[5]=300;
            if (angry==0 && (state==0 || state==1)){
                alarm[2]=1;
                tempid=instance_create(x+50,y+100,obj_visionchecke)
                tempid.direction=0;
                tempid.speed=16;
                tempid=instance_create(x+50,y+100,obj_visionchecke)
                tempid.direction=180;
                tempid.speed=16;
                }
            angry=1;
            targetiji=300;
            }
        }
    }
Collision Event with object obj_skysmasher:

execute code:

if ((hspeed>0 && other.image_single==0) || (hspeed<0 && other.image_single==1)){
with (other)
scr_smasherwake();
}
______________________________________________________

Information about object: obj_enemybullet
Sprite: spr_bullet
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute script scr_enemybullet with arguments (0,0,0,0,0)
set Alarm 0 to 1
Alarm Event for alarm 0:

execute code:

if (hit){
    x+=(3-random(6));
    y+=(3-random(6));
    scr_sound("glo_rico");
    instance_create(x,y,obj_smoke);
    instance_create(x,y,obj_bullethit);
    }
instance_destroy();
______________________________________________________

Information about object: obj_smoke
Sprite: spr_smoke
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_index=floor(random(2))*6;
image_speed=0.5;
gravity=0.2;
gravity_direction=90;
alarm[0]=12;
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_tasensplat
Sprite: spr_tasensplat
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
image_speed=0.5;
alarm[0]=8;
}
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_tasenblood
Sprite: spr_tasenblood
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
image_speed=0.5;
alarm[0]=12;
}
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_ijisplat
Sprite: spr_ijisplat
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
image_speed=0.5;
direction=random(360);
speed=random(3)+0.1;
alarm[0]=10;
}
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_ijiblood
Sprite: spr_ijiblood
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
direction=random(360);
speed=random(10)+10;
gravity=random(8)+4;
gravity_direction=random(360);
alarm[0]=16;
Alarm Event for alarm 0:

execute code:

instance_destroy();
if (splat)
    instance_create(x,y,obj_ijisplat);

Step Event:

execute code:

{
speed*=0.75;
gravity*=0.75;
if (speed<1){
    instance_destroy();
    if (splat)
        instance_create(x,y,obj_ijisplat);
    }
}
______________________________________________________

Information about object: obj_tasenbloodspecial
Sprite: spr_tasenblood
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
image_speed=0.5;
direction=random(360);
speed=random(5)+1;
if (hspeed>0){
    image_index=6;
    x+=26;
    }
alarm[0]=12;
}
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_shotgunflash
Sprite: spr_shotgunflash
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (global.facing==1)
    image_index=1;
alarm[0]=1;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_muzzleflash
Sprite: spr_muzzleflash
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=floor(random(5));
alarm[0]=1;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_hud
Sprite: spr_hud
Solid: false
Visible: true
Depth: -300
Persistent: false
Parent: 
Mask: 

Draw Event:

execute script scr_huddraw with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_weapon1
Sprite: spr_weapon1
Solid: false
Visible: true
Depth: -301
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=1+(global.weapon9*2);
if (global.weapon==9)
    image_single=4;
______________________________________________________

Information about object: obj_weapon2
Sprite: spr_weapon2
Solid: false
Visible: true
Depth: -301
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=0+(global.weapon10*2);
if (global.weapon==10)
    image_single=4;
______________________________________________________

Information about object: obj_weapon3
Sprite: spr_weapon3
Solid: false
Visible: true
Depth: -301
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=0+(global.weapon11*2);
if (global.weapon==11)
    image_single=4;
______________________________________________________

Information about object: obj_weapon4
Sprite: spr_weapon4
Solid: false
Visible: true
Depth: -301
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=0+(global.weapon12*2);
if (global.weapon==12)
    image_single=4;
______________________________________________________

Information about object: obj_weapon5
Sprite: spr_weapon5
Solid: false
Visible: true
Depth: -301
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=0+(global.weapon13*2);
if (global.weapon==13)
    image_single=4;
______________________________________________________

Information about object: obj_weapon6
Sprite: spr_weapon6
Solid: false
Visible: true
Depth: -301
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=0+(global.weapon14*2);
if (global.weapon==14)
    image_single=4;
______________________________________________________

Information about object: obj_weapon7
Sprite: spr_weapon7
Solid: false
Visible: true
Depth: -301
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=0+(global.weapon15*2);
if (global.weapon==15)
    image_single=4;
______________________________________________________

Information about object: obj_weapon8
Sprite: spr_weapon8
Solid: false
Visible: true
Depth: -301
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=0+(global.weapon16*2);
if (global.weapon==16)
    image_single=4;
______________________________________________________

Information about object: obj_kickbox
Sprite: spr_kickbox
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

set Alarm 0 to 1
Alarm Event for alarm 0:

destroy the instance
Collision Event with object obj_block:

execute code:

if (sprite_index!=spr_detonator){
scr_sound("glo_kick");
scr_shakescreen(0);
}
______________________________________________________

Information about object: obj_shakescreen
Sprite: spr_sabot
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Alarm Event for alarm 0:

execute code:

//Activated duplicate checkpoint in sec7 and secX
instance_activate_object(obj_checkpoint);
with (obj_checkpoint){
    if (tag==1){
        instance_destroy();
        instance_create(x,y,obj_dummycp);
        }
    }
Alarm Event for alarm 1:

execute code:

obj_sabot.readytopause=3;
______________________________________________________

Information about object: obj_rocketlaunch
Sprite: spr_rocketlaunch
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=10;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_rocket
Sprite: spr_rocket
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

set Alarm 0 to 2
Alarm Event for alarm 0:

execute code:

alarm[0]=1;
if (impulse){
    if (hspeed<0){
        tempid=instance_create(x+26+speed,y+2+floor(random(2)-1),obj_glidesmoke);
        tempid.hspeed=random(2)+4;
        tempid.vspeed=-2;
        tempid=instance_create(x+26+speed,y+2+floor(random(2)-1),obj_glidesmoke);
        tempid.hspeed=random(2)+4;
        tempid.vspeed=2;
        tempid=instance_create(x+26+speed*0.5,y+2+floor(random(2)-1),obj_glidesmoke);
        tempid.hspeed=random(2)+4;
        tempid.vspeed=-2;
        tempid=instance_create(x+26+speed*0.5,y+2+floor(random(2)-1),obj_glidesmoke);
        tempid.hspeed=random(2)+4;
        tempid.vspeed=2;
        }
    else{
        tempid=instance_create(x-4+speed,y+2+floor(random(2)-1),obj_glidesmoke);
        tempid.hspeed=-(random(2)+4);
        tempid.vspeed=-2;
        tempid=instance_create(x-4+speed,y+2+floor(random(2)-1),obj_glidesmoke);
        tempid.hspeed=-(random(2)+4);
        tempid.vspeed=2;
        tempid=instance_create(x-4+speed*0.5,y+2+floor(random(2)-1),obj_glidesmoke);
        tempid.hspeed=-(random(2)+4);
        tempid.vspeed=-2;
        tempid=instance_create(x-4+speed*0.5,y+2+floor(random(2)-1),obj_glidesmoke);
        tempid.hspeed=-(random(2)+4);
        tempid.vspeed=2;
        }
    }
else{
    if (hspeed<0){
        (instance_create(x+26-abs(speed),y+2+floor(random(2)-1),obj_glidesmoke)).hspeed=random(4)+4;
        (instance_create(x+26-abs(speed),y+2+floor(random(2)-1),obj_glidesmoke)).hspeed=random(4);
        }
    else{
        (instance_create(x-4+abs(speed),y+2+floor(random(2)-1),obj_glidesmoke)).hspeed=-(random(4)+4);
        (instance_create(x-4+abs(speed),y+2+floor(random(2)-1),obj_glidesmoke)).hspeed=-random(4);
        }
    }

Step Event:

execute script scr_outside with arguments (0,0,0,0,0)
Collision Event with object obj_block:

execute script scr_rockethit with arguments (0,0,1,0,0)
Collision Event with object obj_glass:

execute script scr_rockethit with arguments (0,1,0,0,0)
Collision Event with object obj_meta:

execute script scr_rockethit with arguments (0,0,0,0,0)
Collision Event with object obj_turret:

execute code:

{
if (other.visible)
script_execute(scr_rockethit);
}
Collision Event with object obj_alliedenemy:

execute code:

if (other.enemytype!=12)
    scr_rockethit();
else
    instance_create(other.bbox_left+((other.bbox_right-other.bbox_left)/2), other.bbox_top+((other.bbox_bottom-other.bbox_top)/2), obj_enemyreflector);

______________________________________________________

Information about object: obj_rocketexplosion
Sprite: spr_rocketexplosion
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

scr_sound("exp_rock");
vspeed=-2;
image_speed=0.5;
dud=1;
alarm[0]=18;
alarm[2]=1;
alarm[3]=2;
if (global.specialbake==0) maximum=20;
if (global.specialbake==1) maximum=5;
if (instance_number(obj_smokepoint)
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 2:

set variable dud to 0
Alarm Event for alarm 3:

set variable dud to 1
______________________________________________________

Information about object: obj_mpfb
Sprite: spr_mpfb
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=1;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

execute code:

if (!wakeless){
alarm[0]=5;
if (direction==180){
    tempid=instance_create(x-(speed+10),y,obj_mpfbwake);
    tempid.speed=-10;
    tempid.image_index=4;
    }
else
    (instance_create(x+(speed+10),y,obj_mpfbwake)).speed=10;
}
Step Event:

execute code:

if ((speed=global.mpfbspeed || global.sector==15) && !global.specialbake)
scr_mpfbspark();
scr_outside();
if (global.sector==15 && (x<200 || y<0 || x>1700 || y>1000))
    instance_destroy();
Collision Event with object obj_block:

execute script scr_mpfbhit with arguments (0,0,0,0,0)
Collision Event with object obj_glass:

execute script scr_mpfbhit with arguments (0,1,0,0,0)
Collision Event with object obj_meta:

execute script scr_mpfbhit with arguments (0,0,0,0,0)
Collision Event with object obj_turret:

execute code:

{
if (other.visible)
script_execute(scr_mpfbhit);
}
Collision Event with object obj_alliedenemy:

execute code:

if (other.enemytype!=12)
    scr_mpfbhit();
else
    instance_create(other.bbox_left+((other.bbox_right-other.bbox_left)/2), other.bbox_top+((other.bbox_bottom-other.bbox_top)/2), obj_enemyreflector);

______________________________________________________

Information about object: obj_mpfbwake
Sprite: spr_mpfbwake
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
image_speed=0.5;
alarm[0]=8;
}
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_mpfbexplosion
Sprite: spr_mpfbexplosion
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.25;
dud=1;
alarm[0]=28;
alarm[2]=1;
alarm[3]=2;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 2:

set variable dud to 0
Alarm Event for alarm 3:

set variable dud to 1
______________________________________________________

Information about object: obj_mpfbspark
Sprite: spr_mpfbspark
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
image_speed=0.5;
alarm[0]=28;
gravity=0.06;
gravity_direction=270;
}
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_detonator
Sprite: spr_detonator
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: obj_kickbox
Mask: 

Create Event:

execute code:

alarm[0]=7;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

destroy the instance
Step Event:

execute code:

{
repeat(3) instance_create(x+random(130)-65,y+random(130)-65,obj_detonatorspark);
}
______________________________________________________

Information about object: obj_detonatorspark
Sprite: spr_detonatorspark
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=16;
gravity=0.3;
gravity_direction=270;
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_tasenscout
Sprite: spr_tasenscout_basicleft
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_tasenenemy
Mask: 

Create Event:

execute code:

scr_storeseed();

killtype=1;
image_speed=0.5;
state=1;
alarm[2]=25+random(10);
hp=1;
maxhp=1;
armor=100;
maxarmor=100;
enemytype=0;
resistance=3;
security=2;
walkspeed=2+global.specialtrigger16*2;
afraid=0;

if (global.really){
    instance_destroy();
    instance_create(x,y,obj_tasensoldier);
    }
    
scr_restoreseed();

Alarm Event for alarm 0:

set variable reloading to 0
Alarm Event for alarm 1:

execute code:

{
if (facing==0)
    sprite_index=spr_tasenscout_basicleft;
else
    sprite_index=spr_tasenscout_basic;
}
Alarm Event for alarm 2:

execute code:

scr_storeseed();

//Choose target
if (targetrival==0){
    if (targetiji>0)
        target=obj_iji.id;
    else{
        angry=0;
        alarm[5]=300;
        }
    }
if (!instance_exists(target)){
angry=0;
targetrival=0;
if (targetiji>0 && target!=obj_iji.id){
    if (!angry && (state==0 || state==1 || state==2))
        alarm[2]=1;
    angry=1;
    alarm[5]=300;
    target=obj_iji.id;
    }
}

//Adjust sprite
if (facing==0 && state==0)
    sprite_index=spr_tasenscout_basicleft;
if (facing==1 && state==0)
    sprite_index=spr_tasenscout_basic;
//Begin taking action
takingpain=0;
alarm[2]=25+random(10);
randomstate=random(1);
//Scour for seen health
if (!angry && scouring>0){
    state=1;
    if (scouringdir>0)
        facing=0;
    else
        facing=1;
    exit;
    }
//Mach overload
if (angry && obj_sabot.machtot>12){
    state=1;
    if (afraid){
        if (x>target.x)
            facing=1;
        else
            facing=0;
        }
    else{
        if (x>target.x)
            facing=0;
        else
           facing=1;
        }
    exit;
    }
//Roam
if (angry==0){
    if (randomstate<0.6){
        state=0;
        alarm[2]=60+random(90);
        }
    else{
        state=1;
        if (randomstate>0.8)
            facing=0;
        else
            facing=1;
        }
    }
//Angry
else{
    if (state!=2){
        if (randomstate>0.6){
            if (abs(target.y-y)<128){
                if (cracked)
                    afraid=1;
                else if (target.iji==1 && global.kills>=global.berserkkc*global.sector)
                    afraid=1;
                else if (target.enemytype==11 || target.enemytype==13 || target.enemytype==14)
                    afraid=1;
                else
                    afraid=0;
                if (afraid)
                    alarm[2]=60+random(30);
                state=2;
                }
            else
                state=1;
            if (x>target.x)
                facing=0;
            else
                facing=1;
            }
        else{
            state=1;
            if (afraid){
                if (x>target.x)
                    facing=1;
                else
                    facing=0;
                }
            else{
                if (randomstate>0.3)
                    facing=0;
                else
                    facing=1;
                }
            }
        }
    else{
        state=1;
        if (afraid){
            if (x>target.x)
                facing=1;
            else
                facing=0;
            }
        else{
            if (randomstate>0.5)
                facing=0;
            else
                facing=1;
            }
        }
    }
    
scr_restoreseed();

Alarm Event for alarm 4:

execute code:

scr_storeseed();

//Death
if (dead==1){
    if ((x > obj_shakescreen.x-500) && (x < obj_shakescreen.x+500) && (y > obj_shakescreen.y-400) && (y < obj_shakescreen.y+400))
        script_execute(scr_nanoexplosion,6,25);
    instance_create(x+6,y+18,obj_xp1);
    if (cracked)
        script_execute(scr_dropammo,6,15,1,1);
    if (ijikill){
        tempid=instance_create(x+6,y-12,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y-12,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    instance_destroy();
    }
//Get up
if (dead==0) && state==5{
    if (ijikill){
    tempid=instance_create(x+6,y-12,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y-12,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    armor=100;
    state=6;
    takingpain=0;
    image_index=0;
    image_single=-1;
    image_speed=0.5;
    if (facing==0)
        sprite_index=spr_tasenscout_getupleft;
    else
        sprite_index=spr_tasenscout_getup;
    y-=30;
    alarm[2]=28;
    }
    
scr_restoreseed();

Alarm Event for alarm 5:

set variable angry to 0
Alarm Event for alarm 7:

execute code:

scr_storeseed();

if (alarm[2]>=1 && state==3 && (sprite_index==spr_tasenscout_pain || sprite_index==spr_tasenscout_painleft)){
    alarm[7]=4;
    image_index=0;
    instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_nanospark);
    repeat(2)
        (instance_create(bbox_left-8+random(bbox_right-bbox_left+16),bbox_top-4+random(bbox_bottom-bbox_top+8),obj_glassspark)).image_index=4;
    }
    
scr_restoreseed();

Step Event:

execute code:

scr_storeseed();

//"FIND"
if (angry && !prevangry){
    if (state==0 || state==1 || state==2)
        scr_sound("sco_find");
    }
prevangry=angry;
//"DEATH"
if (state==4 && prevstate!=4 && temphp>0){
    if (mutepainsound)
        mutepainsound=0;
    else
        scr_sound("sco_death");
    }
prevstate=state;

if (temphp>0 && hp<=0 && ijikill==1){
    obj_iji.killemote=1;
    }
temphp=hp;

scr_tasenvision(6,12);
if (targetiji>0)
targetiji-=1;
if (targetrival>0)
targetrival-=1;
if (scouring>0)
scouring-=1;
if (hp==maxhp)
scouring=0;
cfised=0;
thored=0;
plasmaed=0;
//Lose sight
if ((x < obj_shakescreen.x-1000) || (x > obj_shakescreen.x+1000) || (y < obj_shakescreen.y-800) || (y > obj_shakescreen.y+800)){
    angry=0;
    alarm[5]=0;
    if (state==2)
        state=0;
    }
//Crack fail
if (crackmark==1 && distance_to_object(obj_iji) > 50){
    script_execute(scr_crackfail);
    global.erasetop=0;
    global.topmessage="CRACKING FAILED: Subject is too far away";
    }
if (crackmark==1 && hp<=0){
    script_execute(scr_terminatecrack);
    global.erasetop=0;
    global.topmessage="CRACKING FAILED: Subject is dead";
    }
//Fix hitting cieling
if (state==4 && place_meeting(x,y+vspeed-2,(obj_block)) && !place_meeting(x,y+vspeed-2,(obj_meta)) && vspeed<0){
    move_contact_solid(90,-1);
    vspeed=0;
    y+=3;
    }
//Stop animations
if (sprite_index=spr_tasenscout_knockdown || sprite_index=spr_tasenscout_knockdownleft){
    if (image_index=8)
        image_single=8;
    }
//Autodeath
if (hp<=0){
    dead=1;
    if (crackmark==1){
        script_execute(scr_terminatecrack);
        global.erasetop=0;
        global.topmessage="Cracking failed; subject is dead";
        }
    }
//Knockdown
if (state==4){
    if (knockdowntype==1){
        if (place_free(x-velocity,y+vspeed+2) && !place_meeting(x-velocity,y,obj_blockenemy)){
            if (place_free(x-velocity,y+vspeed-2))
                x-=velocity;
            else if (place_free(x,y+vspeed+12)){
                velocity*=0.3;
                knockdowntype=2;
                sprite_index=spr_tasenscout_knockdownleft;
                facing=0;
                }
            }
        else if (place_free(x,y+vspeed+12)){
            velocity*=0.3;
            knockdowntype=2;
            sprite_index=spr_tasenscout_knockdownleft;
            facing=0;
            }
        }
    if (knockdowntype==2){
        if (place_free(x+velocity,y+vspeed+2) && !place_meeting(x+velocity,y,obj_blockenemy)){
            if (place_free(x+velocity,y+vspeed-2))
                x+=velocity;
            else if (place_free(x,y+vspeed+12)){
                velocity*=0.3;
                knockdowntype=1;
                sprite_index=spr_tasenscout_knockdown;
                facing=1;
                }
            }
        else if (place_free(x,y+vspeed+12)){
            velocity*=0.3;
            knockdowntype=1;
            sprite_index=spr_tasenscout_knockdown;
            facing=1;
            }
        }
    //Fall
    if (place_free(x,y+1)){
        gravity=1;
        gravity_direction=270;
        }
    }
//Limit fall speed
if (vspeed>20)
    vspeed=20;
//Armor
if (armor<99.9)
    armor+=0.1;
//Pain from armordrop
if (armor<1){
    if (state<4)
        damageable=1;
    if (state==6)
        damageable=1;
    if (damageable==1){
        damageable=0;
        hp-=1;
        if (hp>0.001){
            while(armor<1)
                armor+=maxarmor;
            takingpain=1;
            state=3;
            alarm[1]=0;
            alarm[2]=10;
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            alarm[7]=0;
            image_index=0;
            if (facing==0)
                sprite_index=spr_tasenscout_painleft;
            else
                sprite_index=spr_tasenscout_pain;
            if (x>obj_iji.x){
                tempid=instance_create(x+28,y+15,obj_tasenblood);
                tempid.image_index=6;
                tempid.speed=random(2)+2;
                }
            else{
                tempid=instance_create(x+2,y+15,obj_tasenblood);
                tempid.speed=random(2)+2;
                tempid.direction=180;
                }
            }
        else{
            dead=1;
            takingpain=1;
            if (targetrival==0 || !instance_exists(target))
                target=obj_iji;
            if (x
Collision Event with object obj_block:

execute code:

//Knockdown landing
if (state==4){
    if (vspeed<0){
        move_contact_solid(90,-1);
        vspeed=0;
        y+=3;
        }
    else{
        scr_sound("glo_land");
        state=5;
        image_single=-1;
        image_index=0;
        image_speed=0.5;
        if (knockdowntype==1)
            sprite_index=spr_tasenscout_hitfloor;
        if (knockdowntype==2)
            sprite_index=spr_tasenscout_hitfloorleft;
        alarm[4]=10;
        gravity=0;
        vspeed=0;
        move_contact_solid(270,-1);
        }
    }
Collision Event with object obj_bullet:

execute code:

scr_storeseed();

global.truce=0;
if (!other.stagger)
    ijikill=1;
targetiji=300;
if (angry==0 && (state==0 || state==1 || state==2))
    alarm[2]=ceil(random(15));
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0){
    if (other.stagger){
        if (state<4 || state==6){
            takingpain=1;
            state=3;
            alarm[1]=0;
            alarm[2]=10;
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            alarm[7]=0;
            image_index=0;
            if (facing==0)
                sprite_index=spr_tasenscout_painleft;
            else
                sprite_index=spr_tasenscout_pain;
            }
        }
    else{
        armor-=10*global.atmult;
        instance_create(other.x-3+random(7),other.y-3+random(7),obj_tasensplat);
        }
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stagger)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
    
scr_restoreseed();

Collision Event with object obj_pellet:

execute code:

scr_storeseed();

global.truce=0;
if (!other.stun)
    ijikill=1;
targetiji=300;
if (angry==0 && (state==0 || state==1 || state==2))
    alarm[2]=ceil(random(15));
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0){
    if (other.stun){
        if (state<4 || state==6){
            takingpain=1;
            state=3;
            alarm[1]=0;
            alarm[2]=floor(15*(1+(global.attacklevel/10)));
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            alarm[7]=4;
            if (facing==0)
                sprite_index=spr_tasenscout_painleft;
            else
                sprite_index=spr_tasenscout_pain;
            image_index=0;
            image_single=-1;
            image_speed=0.5;
            }
        }
    else{
        armor-=9*global.atmult;
        instance_create(other.x-3+random(7),other.y-3+random(7),obj_tasensplat);
        }
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stun)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
    
scr_restoreseed();

Collision Event with object obj_kickbox:

execute code:

scr_storeseed();

global.truce=0;
global.temp=0;
with (other){
    if (place_meeting(x,y,obj_door) || place_meeting(x,y,obj_cdoor))
        global.temp=1;
    if (sprite_index==spr_detonator)
        global.temp=0;
    }
if (global.temp==0){
if (other.image_index==0){
    scr_sound("glo_kick");
    ijikill=1;
    targetiji=300;
    script_execute(scr_shakescreen,1);
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (global.facing==0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }

    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=ceil(random(15));
    if (angry==0){
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    angry=1;
    alarm[5]=300;
    if (global.strengthlevel>=resistance){
        hp-=1;
        if (other.sprite_index==spr_detonator){
            if (x>obj_iji.x)
                script_execute(scr_enemyknockdown,2);
            else
                script_execute(scr_enemyknockdown,1);
            }
        else
            script_execute(scr_enemyknockdown);
        }
    else{
        global.erasetop=0;
        global.topmessage="You need a Strength of "+string(resistance)+" to knock down a Tasen Scout";
        //Stagger
        if (hp>0 && (state==0 || state==1 || state==2 || state==3)){
            takingpain=1;
            state=3;
            alarm[1]=0;
            alarm[2]=10;
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            image_index=0;
            if (facing==0)
                sprite_index=spr_tasenscout_painleft;
            else
                sprite_index=spr_tasenscout_pain;
            if (targetrival==0 || !instance_exists(target))
                target=obj_iji;
            }
        }
    }
}

scr_restoreseed();

Collision Event with object obj_rocketexplosion:

execute code:

scr_storeseed();

{
if (other.dud==0){
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    global.truce=0;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
    hp-=2*global.atmult;
    force=11-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}

scr_restoreseed();

Collision Event with object obj_mpfbexplosion:

execute code:

scr_storeseed();

//Nanodust
if (other.dud==0){
    if (x>other.x)
        scr_nanodust(x+6,y+32,1);
    else
        scr_nanodust(x+6,y+32,0);
    script_execute(scr_nanoexplosion,6,25);
    repeat(10){
        sound_stop(snd_sco_find1);
        sound_stop(snd_sco_find2);
        sound_stop(snd_sco_death1);
        sound_stop(snd_sco_death2);
        }
    instance_create(x+6,y+18,obj_xp1);
    if (cracked)
            script_execute(scr_dropammo,6,15,1,1);
    if (other.ijis){
        ijikill=1;
        if (!killawarded){
            global.kills+=1;
            global.killdata[killdataid]=5;
            if (other.banana && killtype<8)
                global.killdata[killdataid]=8;
            killawarded=1;
            }
        }
    else
        ijikill=0;
    scr_sound("tur_appear");
    instance_destroy();
    }

scr_restoreseed();
    
/*
if (other.dud==0){
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    global.truce=0;
    targetiji=300;
    hp+=-(3*(1+(global.attacklevel/10)));
    if (hp<=0 && ijikill && killtype<5)
        killtype=5;
    if (other.banana && hp<=0 && ijikill && killtype<8)
        killtype=8;
    force=22-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
*/

Collision Event with object obj_pulse:

execute code:

scr_storeseed();

global.truce=0;
if (!other.linker)
    ijikill=1;
targetiji=300;
if (other.hyper==1 && armor<33 && global.strengthlevel>=resistance){
    scr_sound("glo_kick");
    hp-=1;
    script_execute(scr_shakescreen,2);
    if (other.hspeed<0)
        script_execute(scr_enemyknockdown,1);
    else
        script_execute(scr_enemyknockdown,2);
    repeat(3){
        tempid=instance_create(other.x,other.y,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (other.hspeed<0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    }
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (angry==0 && (state==0 || state==1 || state==2))
    alarm[2]=ceil(random(15));
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0 && !other.linker){
    armor-=2*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_tasensplat);
    }
if (other.linker)
    {scr_pulselink(2);}
    
scr_restoreseed();

Collision Event with object obj_enemyrocketexplosion:

execute code:

scr_storeseed();

{
if (other.dud==0){
    global.truce=0;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    hp-=2;
    force=11-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}

scr_restoreseed();

Collision Event with object obj_shockexplosion:

execute code:

scr_storeseed();

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    hp-=2*global.atmult;
    force=13-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}

scr_restoreseed();

Collision Event with object obj_shockballexplosion:

execute code:

scr_storeseed();

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
    if (dead==0)
        armor-=30*global.atmult;
    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=ceil(random(15));
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    angry=1;
    alarm[5]=300;
    }
}

scr_restoreseed();

Collision Event with object obj_enemympfbexplosion:

execute code:

scr_storeseed();

//Nanodust
if (other.dud==0){
    if (x>other.x)
        scr_nanodust(x+6,y+32,1);
    else
        scr_nanodust(x+6,y+32,0);
    script_execute(scr_nanoexplosion,6,25);
    repeat(10){
        sound_stop(snd_sco_find1);
        sound_stop(snd_sco_find2);
        sound_stop(snd_sco_death1);
        sound_stop(snd_sco_death2);
        }
    instance_create(x+6,y+18,obj_xp1);
    if (cracked)
            script_execute(scr_dropammo,6,15,1,1);
    if (other.ijis){
        ijikill=1;
        if (!killawarded){
            global.kills+=1;
            global.killdata[killdataid]=5;
            if (other.banana && killtype<8)
                global.killdata[killdataid]=8;
            killawarded=1;
            }
        }
    else
        ijikill=0;
    scr_sound("tur_appear");
    instance_destroy();
    }

scr_restoreseed();
    
/*
if (other.dud==0){
    global.truce=0;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
    hp-=3;
    force=22-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
*/

Collision Event with object obj_pushbox:

execute code:

scr_storeseed();

if (dead==0){
    if (global.truce){
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    ijikill=1;
    if (global.cracklevel>=security){
        if (cracked==0){
            global.security=security;
            crackmark=1;
            global.cracktext="Tasen Scout#H1 A100 W3#Security: ";
            global.cracktext+=string(global.security);
            if (global.security==10)
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            else
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            script_execute(scr_begincrack);
            }
        else{
            global.erasetop=0;
            global.topmessage="Subject has already been cracked";
            }
        }
    else{
        global.erasetop=0;
        global.topmessage="You need a Crack skill of "+string(security)+" to crack a Tasen Scout";
        scr_sound("glo_crackfail");
        global.ignorestation=90;
        }
    }
else{
    global.erasetop=0;
    global.topmessage="Unable to connect to nanofield; subject is dead";
    }
    
scr_restoreseed();

Collision Event with object obj_meta:

execute code:

scr_storeseed();

{
with (other)
    script_execute(scr_metabreak);
/*
if (other.sprite_index=spr_glass2 || other.sprite_index=spr_glass2small || other.sprite_index=spr_glass2short){
    repeat(3) instance_create(bbox_left+((bbox_right-bbox_left)/2),bbox_top+((bbox_bottom-bbox_top)/2),obj_tasenbloodspecial);
    hp-=1;
    }
*/
}

scr_restoreseed();

Collision Event with object obj_thor:

execute code:

scr_storeseed();

if (thored==0){
    ijikill=1;
    targetiji=300;
    if (angry==0 && (state==0 || state==1 || state==2)){
        alarm[2]=ceil(random(15));
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    armor-=35*global.atmult;
    if (hp==1 && armor<=0 && ijikill && killtype<5)
        killtype=5;
    angry=1;
    alarm[5]=300;
    thored=1;

    //Nanodust
    if (hp==1 && armor<=0){
        if (x>obj_iji.x)
            scr_nanodust(x+6,y+32,1);
        else
            scr_nanodust(x+6,y+32,0);
        script_execute(scr_nanoexplosion,6,25);
        repeat(10){
            sound_stop(snd_sco_find1);
            sound_stop(snd_sco_find2);
            sound_stop(snd_sco_death1);
            sound_stop(snd_sco_death2);
            }
        instance_create(x+6,y+18,obj_xp1);
        if (cracked)
                script_execute(scr_dropammo,6,15,1,1);
        if (!killawarded){
            global.kills+=1;
            global.killdata[killdataid]=5;
            if (other.banana && killtype<8)
                global.killdata[killdataid]=8;
            else
                ijikill=0;
            killawarded=1;
            }
        scr_sound("tur_appear");
        instance_destroy();
        }
    }
    
scr_restoreseed();

Collision Event with object obj_enemyshockballexplosion:

execute code:

scr_storeseed();

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    if (dead==0)
        armor-=30;
    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
    angry=1;
    alarm[5]=300;
    targetrival=300;
    target=other.target;
    }
}

scr_restoreseed();

Collision Event with object obj_enemyshockexplosion:

execute code:

scr_storeseed();

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    hp-=2;
    targetrival=300;
    target=other.target;
    force=13-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}

scr_restoreseed();

Collision Event with object obj_enemypulse:

execute code:

scr_storeseed();

ijikill=0;
if (other.hyper==1 && armor<30){
    ijikill=0;
    scr_sound("glo_kick");
    hp-=1;
    script_execute(scr_shakescreen,2);
    if (other.hspeed<0)
        script_execute(scr_enemyknockdown,1,8);
    else
        script_execute(scr_enemyknockdown,2,8);
    repeat(3){
        tempid=instance_create(other.x,other.y,obj_scrapwhite);
        tempid.speed=6;
        if (other.hspeed<0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    }
if (angry==0 && (state==0 || state==1 || state==2))
    alarm[2]=1;
angry=1;
targetrival=300;
target=other.target;
alarm[5]=300;
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (dead==0){
    armor-=1;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_tasensplat);
    }
    
scr_restoreseed();

Collision Event with object obj_impulseexplosion:

execute code:

scr_storeseed();

if (other.dud==0){
    if (angry==0){
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    global.truce=0;
    ijikill=0;
    targetiji=300;
    mutepainsound=1;
    force=11-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force,1);
    else
        script_execute(scr_enemyknockdown,2,force,1);
    }
    
scr_restoreseed();

______________________________________________________

Information about object: obj_pulse
Sprite: spr_pulse
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=7;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

destroy the instance
Step Event:

execute code:

if (hyper==0)
    y=ystart+(random(21)-10);
rand=random(1);
if (rand>0.92){
    if (linker){
        tempid=instance_create(x+random(16)-8+hspeed,y+random(32)-16,obj_pulsespark);
        tempid.speed=random(4)-2;
        tempid.image_index=12;
        }
    else if (hyper){
        tempid=instance_create(x+random(16)-8+hspeed,y+random(32)-16,obj_pulsespark);
        tempid.speed=random(4)-2;
        tempid.image_index=6;
        }
    else
        (instance_create(x+random(16)-8+hspeed,y+random(32)-16,obj_pulsespark)).speed=random(4)-2;
    }
Collision Event with object obj_block:

execute code:

if (hyper && (other.sprite_index==spr_door || other.sprite_index==spr_door2 || other.sprite_index==spr_door3)){
    with (other){
        if (global.strengthlevel>=resistance){
            scr_sound("glo_kick");
            script_execute(scr_shakescreen,1);
            script_execute(scr_metabreak,global.strengthlevel+2,0);
            global.erasetop=0;
            global.topmessage="Level "+string(resistance)+" Shield door destroyed";
            //Wake Assassin
            if (assassin){
                with (obj_komatoassassin){
                    if (!angry && door){
                        alarm[2]=random(60-(global.difficulty*20))+30-(global.difficulty*10);
                        angry=1;
                        visible=0;
                        instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
                        }
                    }
                }
            }
        else{
            global.erasetop=0;
            global.topmessage="You need a Strength of ";
            global.topmessage+=string(resistance);
            global.topmessage+=" to destroy this Shield door";
        }
    }
}
if (linker && (other.sprite_index==spr_door || other.sprite_index==spr_door2 || other.sprite_index==spr_door3 || other.sprite_index==spr_cdoor)){
    if (global.topmessage=="0"){
        global.erasetop=0;
        global.topmessage="Pulse link could not be established";
        }
    }
scr_pulseexplosion(1);
instance_destroy();
______________________________________________________

Information about object: obj_pulsespark
Sprite: spr_pulsespark
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
image_speed=0.5;
alarm[0]=12;
}
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_pulseexplosion
Sprite: spr_pulseexplosion
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=4;
y+=-2+random(4);
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_enemyrocket
Sprite: spr_rocket
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=2;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

execute code:

alarm[0]=1;
if (hspeed<0){
    (instance_create(x+14,y+2+floor(random(2)-1),obj_glidesmoke)).hspeed=random(4)+4;
    (instance_create(x+14,y+2+floor(random(2)-1),obj_glidesmoke)).hspeed=random(4);
    }
else{
    (instance_create(x+8,y+2+floor(random(2)-1),obj_glidesmoke)).hspeed=-(random(4)+4);
    (instance_create(x+8,y+2+floor(random(2)-1),obj_glidesmoke)).hspeed=-random(4);
    }

Step Event:

execute script scr_outside with arguments (0,0,0,0,0)
Collision Event with object obj_iji:

execute script scr_rockethit with arguments (1,0,0,0,0)
Collision Event with object obj_block:

execute script scr_rockethit with arguments (1,0,1,0,0)
Collision Event with object obj_glass:

execute script scr_rockethit with arguments (1,1,0,0,0)
Collision Event with object obj_meta:

execute script scr_rockethit with arguments (1,0,0,0,0)
Collision Event with object obj_komatoenemy:

execute script scr_rockethit with arguments (1,0,0,0,0)
______________________________________________________

Information about object: obj_enemyrocketexplosion
Sprite: spr_rocketexplosion
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

scr_sound("exp_rock");
vspeed=-2;
image_speed=0.5;
dud=1;
alarm[0]=18;
alarm[2]=1;
alarm[3]=2;
if (global.specialbake==0) maximum=20;
if (global.specialbake==1) maximum=5;
if (instance_number(obj_smokepoint)
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 2:

set variable dud to 0
Alarm Event for alarm 3:

set variable dud to 1
Alarm Event for alarm 4:

execute code:

if (global.specialbake==0 && !nospark){
repeat(5)
    instance_create(x-10+random(20),y-10+random(20),obj_pixspark);
    }

______________________________________________________

Information about object: obj_shockspark
Sprite: spr_shockspark
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=6;
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_shocktrail
Sprite: spr_shocktrail
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
image_speed=0.5;
alarm[0]=8;
}
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_shock
Sprite: spr_shock
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=3;
obj_sabot.raveflash=0;
alarm[1]=1;
Alarm Event for alarm 0:

execute code:

{
alarm[0]=3;
instance_create(x,y,obj_shocktrail);
}
Alarm Event for alarm 1:

execute code:

if (!reflected && !global.specialbake){
tempid=instance_create(x-hspeed,y,obj_shockshell);
if (hspeed>0)
    tempid.hspeed=-tempid.hspeed;
    }
Step Event:

execute script scr_outside with arguments (0,0,0,0,0)
Collision Event with object obj_block:

execute script scr_shockhit with arguments (0,0,0,0,0)
Collision Event with object obj_glass:

execute script scr_shockhit with arguments (0,0,0,0,0)
Collision Event with object obj_meta:

execute script scr_shockhit with arguments (0,0,0,0,0)
Collision Event with object obj_turret:

execute code:

{
if (other.visible)
script_execute(scr_shockhit);
}
Collision Event with object obj_alliedenemy:

execute code:

if (other.enemytype!=12)
    scr_shockhit();
else
    instance_create(other.bbox_left+((other.bbox_right-other.bbox_left)/2), other.bbox_top+((other.bbox_bottom-other.bbox_top)/2), obj_enemyreflector);

______________________________________________________

Information about object: obj_shockexplosion
Sprite: spr_shockexplosion
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
dud=1;
alarm[0]=14;
alarm[1]=2;
alarm[2]=1;
alarm[3]=2;
alarm[4]=4;
alarm[5]=8;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 1:

execute code:

alarm[1]=2;
if (global.specialbake==0)
instance_create(x+random(50)-25,y+random(50)-25,obj_shockspark);
Alarm Event for alarm 2:

set variable dud to 0
Alarm Event for alarm 3:

set variable dud to 1
Alarm Event for alarm 4:

execute code:

sprite_index=spr_shockexplosion2;
Alarm Event for alarm 5:

execute code:

sprite_index=spr_shockexplosion3;
______________________________________________________

Information about object: obj_shockball
Sprite: spr_shockball
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
direction=random(360);
speed+=6;
gravity=0.8;
gravity_direction=random(360);
dud=1;
alarm[0]=3;
alarm[1]=10;
alarm[2]=14;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

execute code:

{
alarm[0]=3;
instance_create(x,y,obj_shockballtrail);
}
Alarm Event for alarm 1:

set variable dud to 0
Alarm Event for alarm 2:

execute code:

{
tempid=instance_create(x,y,obj_shockballexplosion);
tempid.ijis=ijis;
script_execute(scr_shakescreen,1);
instance_destroy();
}
Step Event:

execute code:

if (speed>30)
    speed=30;
scr_outside();
Collision Event with object obj_block:

execute code:

{
tempid=instance_create(x,y,obj_shockballexplosion);
tempid.ijis=ijis;
script_execute(scr_shakescreen,1);
instance_destroy();
}
Collision Event with object obj_glass:

execute code:

{
tempid=instance_create(x,y,obj_shockballexplosion);
tempid.ijis=ijis;
script_execute(scr_shakescreen,1);
instance_destroy();
}
Collision Event with object obj_meta:

execute code:

{
tempid=instance_create(x,y,obj_shockballexplosion);
tempid.ijis=ijis;
script_execute(scr_shakescreen,1);
instance_destroy();
}
Collision Event with object obj_turret:

execute code:

{
if (dud==0 && other.visible){
    tempid=instance_create(x,y,obj_shockballexplosion);
    tempid.ijis=ijis;
    script_execute(scr_shakescreen,1);
    instance_destroy();
    }
}
Collision Event with object obj_alliedenemy:

execute code:

if (other.enemytype==12)
    instance_create(other.bbox_left+((other.bbox_right-other.bbox_left)/2), other.bbox_top+((other.bbox_bottom-other.bbox_top)/2), obj_enemyreflector);
else if (dud==0){
    tempid=instance_create(x,y,obj_shockballexplosion);
    tempid.ijis=ijis;
    script_execute(scr_shakescreen,1);
    instance_destroy();
    }
______________________________________________________

Information about object: obj_shockballtrail
Sprite: spr_shockballtrail
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
image_speed=0.5;
alarm[0]=8;
}
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_shockballexplosion
Sprite: spr_shockexplosion
Solid: false
Visible: true
Depth: -4
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

scr_sound("exp_spli");
image_speed=0.5;
dud=1;
alarm[0]=14;
alarm[1]=2;
alarm[2]=1;
alarm[3]=2;
alarm[4]=4;
alarm[5]=8;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 1:

execute code:

alarm[1]=2;
if (global.specialbake==0)
instance_create(x+random(50)-25,y+random(50)-25,obj_shockspark);
Alarm Event for alarm 2:

set variable dud to 0
Alarm Event for alarm 3:

set variable dud to 1
Alarm Event for alarm 4:

execute code:

sprite_index=spr_shockexplosion2;
Alarm Event for alarm 5:

execute code:

sprite_index=spr_shockexplosion3;
______________________________________________________

Information about object: obj_cfistrace
Sprite: spr_bullet
Solid: false
Visible: true
Depth: -5
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

scr_cfisfire();
alarm[0]=2;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

destroy the instance
Draw Event:

execute script scr_cfisdraw with arguments (0,0,0,0,0)
execute script scr_outside with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_cfisspark
Sprite: spr_cfisspark
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.25;
alarm[0]=20;
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_tasencommander
Sprite: spr_tasencommander_basicleft
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_tasenenemy
Mask: 

Create Event:

execute code:

killtype=1;
image_speed=0.5;
state=1;
alarm[2]=25+random(10);
hp=5;
maxhp=5;
if (global.suddendeath){
    hp=1;
    maxhp=1;
    }
armor=100;
maxarmor=100;
enemytype=2;
resistance=6;
security=5;
walkspeed=3+global.specialtrigger16*2;

if (global.really){
    hp*=2;
    maxhp*=2;
    walkspeed*=2;
    armor*=2;
    maxarmor*=2;
    resistance*=2;
    security*=2;
    }
Alarm Event for alarm 1:

execute code:

{
if (facing==0)
    sprite_index=spr_tasencommander_basicleft;
else
    sprite_index=spr_tasencommander_basic;
}
Alarm Event for alarm 2:

execute code:

//Choose target
if (targetrival==0){
    if (targetiji>0)
        target=obj_iji.id;
    else{
        angry=0;
        alarm[5]=300;
        }
    }
if (!instance_exists(target)){
angry=0;
targetrival=0;
if (targetiji>0 && target!=obj_iji.id){
    if (!angry && (state==0 || state==1))
        alarm[2]=1;
    angry=1;
    alarm[5]=300;
    target=obj_iji.id;
    }
}

swiping=0;
//Adjust sprite
if (facing==0 && state==0)
    sprite_index=spr_tasencommander_basicleft;
if (facing==1 && state==0)
    sprite_index=spr_tasencommander_basic;
//Begin taking action
takingpain=0;
alarm[2]=25+random(10);
//Scour for seen health
if (!angry && scouring>0){
    state=1;
    if (scouringdir>0)
        facing=0;
    else
        facing=1;
    exit;
    }
//Rocket has fired
if (firingrocket==1){
    state=1;
    firingrocket=0;
    if (x>target.x)
        facing=0;
    else
        facing=1;
    if (global.really)
        alarm[2]=5;
    exit;
    }
//Roam
randomstate=random(1);
if (angry==0){
    if (randomstate<0.6){
        state=0;
        alarm[2]=60+random(90);
        }
    else{
        state=1;
        facing=0;
        if (randomstate>0.8)
            facing=1;
        }
    }
//Angry
else{
    if (x>target.x)
        facing=0;
    else
        facing=1;
    state=1;
    idling+=1;
    if (idling==4){
        idling=0;
        if (abs(target.y-y)<192)
            randomstate=1;
        }
    //Swipe
    if (randomstate>0.3){
        if (x>target.x && (place_meeting(x-40,y,obj_meta) || place_meeting(x-40,y,obj_glass))){
            state=0;
            swiping=1;
            image_index=0;
            alarm[2]=22;
            sprite_index=spr_tasencommander_swipeleft;
            }
        else if (x<=target.x && (place_meeting(x+40,y,obj_meta) || place_meeting(x+40,y,obj_glass))){
            state=0;
            swiping=1;
            image_index=0;
            alarm[2]=22;
            sprite_index=spr_tasencommander_swipe;
            }
        if (distance_to_object(target)<60){
            state=0;
            swiping=1;
            image_index=0;
            alarm[2]=22;
            if (x>target.x){
                facing=0;
                sprite_index=spr_tasencommander_swipeleft;
                }
            else{
                facing=1;
                sprite_index=spr_tasencommander_swipe;
                }
            }
        }
    //Get ready for rocket
    if (randomstate>0.7 && distance_to_object(target)>=60 && abs(y-target.y)<192){
        if (x>target.x)
            facing=0;
        else
            facing=1;
        //Charge a rocket
        idling=0;
        if (!oops && ((place_free(x+16,y-32) && place_free(x+32,y-32) && place_free(x+48,y-32) && place_free(x+64,y-32) && place_free(x+80,y-32) && place_free(x+96,y-32) && place_free(x+128,y-32)) || (place_free(x+16,y) && place_free(x+32,y) && place_free(x+48,y) && place_free(x+64,y) && place_free(x+80,y) && place_free(x+96,y) && place_free(x+128,y))) && !place_meeting(x+16,y-32,obj_glass) && !place_meeting(x+32,y-32,obj_glass) && !place_meeting(x+48,y-32,obj_glass) && !place_meeting(x+64,y-32,obj_glass) && !place_meeting(x+80,y-32,obj_glass) && !place_meeting(x+96,y-32,obj_glass) && !place_meeting(x+128,y-32,obj_glass) && !place_meeting(x+16,y-32,obj_meta) && !place_meeting(x+32,y-32,obj_meta) && !place_meeting(x+48,y-32,obj_meta) && !place_meeting(x+64,y-32,obj_meta) && !place_meeting(x+80,y-32,obj_meta) && !place_meeting(x+96,y-32,obj_meta) && !place_meeting(x+128,y-32,obj_meta) && x<=target.x){
            scr_sound("wea_charge");
            tempid=instance_create(x+60,y+25,obj_chargetell);
            tempid.tempid=id;
            state=0;
            sprite_index=spr_tasencommander_basic;
            alarm[2]=23;
            alarm[6]=20;
            firingrocket=1;
            }
        else if (!oops && ((place_free(x-16,y-32) && place_free(x-32,y-32) && place_free(x-48,y-32) && place_free(x-64,y-32) && place_free(x-80,y-32) && place_free(x-96,y-32) && place_free(x-128,y-32)) || (place_free(x-16,y) && place_free(x-32,y) && place_free(x-48,y) && place_free(x-64,y) && place_free(x-80,y) && place_free(x-96,y) && place_free(x-128,y))) && !place_meeting(x-16,y-32,obj_glass) && !place_meeting(x-32,y-32,obj_glass) && !place_meeting(x-48,y-32,obj_glass) && !place_meeting(x-64,y-32,obj_glass) && !place_meeting(x-80,y-32,obj_glass) && !place_meeting(x-96,y-32,obj_glass) && !place_meeting(x-128,y-32,obj_glass) && !place_meeting(x-16,y-32,obj_meta) && !place_meeting(x-32,y-32,obj_meta) && !place_meeting(x-48,y-32,obj_meta) && !place_meeting(x-64,y-32,obj_meta) && !place_meeting(x-80,y-32,obj_meta) && !place_meeting(x-96,y-32,obj_meta) && !place_meeting(x-128,y-32,obj_meta) && x>target.x){
            scr_sound("wea_charge");
            tempid=instance_create(x-40,y+25,obj_chargetell);
            tempid.tempid=id;
            state=0;
            sprite_index=spr_tasencommander_basicleft;
            alarm[2]=23;
            alarm[6]=20;
            firingrocket=1;
            }
        }
    }
if (global.really && state==1 && alarm[2]>5)
    alarm[2]=5;
Alarm Event for alarm 4:

execute code:

{
//Death
if (dead==1){
    if ((x > obj_shakescreen.x-500) && (x < obj_shakescreen.x+500) && (y > obj_shakescreen.y-400) && (y < obj_shakescreen.y+400))
    script_execute(scr_nanoexplosion,10,35);
    instance_create(x+10,y+25,obj_xp3);
    if (cracked)
        script_execute(scr_dropammo,10,25,1,4);
    else
        script_execute(scr_dropammo,10,25,6,3);
    if (ijikill){
    tempid=instance_create(x+6,y-1,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y-1,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    instance_destroy();
    }
//Get up
if (dead==0) && state==5{
    if (ijikill){
    tempid=instance_create(x+6,y-1,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y-1,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    armor=100;
    state=6;
    takingpain=0;
    image_index=0;
    image_single=-1;
    image_speed=0.5;
    if (facing==0)
        sprite_index=spr_tasencommander_getupleft;
    else
        sprite_index=spr_tasencommander_getup;
    y-=40;
    alarm[2]=24;
    }
}
Alarm Event for alarm 5:

set variable angry to 0
Alarm Event for alarm 6:

execute code:

if (weapon==0){
if (facing==0){
    if (cracked==0){
        scr_sound("wea_rock");
        tempid=instance_create(x-34,y+25,obj_enemyrocket);
        tempid.target=id;
        tempid.speed=-global.rocketspeed;
        tempid.image_single=1;
        tempid=instance_create(x-40,y+25,obj_rocketlaunch);
        tempid.sprite_index=spr_rocketlaunchleft;
        sprite_index=spr_tasencommander_fireleft;
        }
    else{
        tempid=instance_create(x-23,y+25,obj_enemyrocketexplosion);
        tempid.target=id;
        instance_create(x-23,y+25,obj_explosioncenter);
        oops=1;
        script_execute(scr_shakescreen,2);
        }
    }
else{
    if (cracked==0){
        scr_sound("wea_rock");
        tempid=instance_create(x+42,y+25,obj_enemyrocket);
        tempid.target=id;
        tempid.speed=global.rocketspeed;
        tempid.image_single=0;
        instance_create(x+46,y+25,obj_rocketlaunch);
        sprite_index=spr_tasencommander_fire;
        }
    else{
        tempid=instance_create(x+42,y+25,obj_enemyrocketexplosion);
        tempid.target=id;
        instance_create(x+42,y+25,obj_explosioncenter);
        oops=1;
        script_execute(scr_shakescreen,2);
        }
    }
}

if (weapon==1){
if (facing==0){
    if (cracked==0){
        scr_sound("wea_rock");
        tempid=instance_create(x-34,y+25,obj_enemyrocket);
        tempid.target=id;
        tempid.speed=-global.rocketspeed;
        tempid.image_single=1;
        tempid=instance_create(x-34,y+25,obj_enemyrocket);
        tempid.target=id;
        tempid.speed=global.rocketspeed-2;
        tempid.direction=174;
        tempid.image_single=1;
        tempid=instance_create(x-34,y+25,obj_enemyrocket);
        tempid.target=id;
        tempid.speed=global.rocketspeed-4;
        tempid.direction=186;
        tempid.image_single=1;
        tempid=instance_create(x-40,y+25,obj_rocketlaunch);
        tempid.sprite_index=spr_rocketlaunchleft;
        sprite_index=spr_tasencommander_fireleft;
        }
    else{
        tempid=instance_create(x-23,y+25,obj_enemyrocketexplosion);
        tempid.target=id;
        instance_create(x-23,y+25,obj_explosioncenter);
        oops=1;
        script_execute(scr_shakescreen,2);
        }
    }
else{
    if (cracked==0){
        scr_sound("wea_rock");
        tempid=instance_create(x+42,y+25,obj_enemyrocket);
        tempid.target=id;
        tempid.speed=global.rocketspeed;
        tempid.image_single=0;
        tempid=instance_create(x+42,y+25,obj_enemyrocket);
        tempid.target=id;
        tempid.speed=global.rocketspeed-2;
        tempid.direction=6;
        tempid.image_single=0;
        tempid=instance_create(x+42,y+25,obj_enemyrocket);
        tempid.target=id;
        tempid.speed=global.rocketspeed-4;
        tempid.direction=-6;
        tempid.image_single=0;
        instance_create(x+46,y+25,obj_rocketlaunch);
        sprite_index=spr_tasencommander_fire;
        }
    else{
        tempid=instance_create(x+42,y+25,obj_enemyrocketexplosion);
        tempid.target=id;
        instance_create(x+42,y+25,obj_explosioncenter);
        oops=1;
        script_execute(scr_shakescreen,2);
        }
    }
}
Alarm Event for alarm 7:

execute code:

if (alarm[2]>=1 && state==3 && (sprite_index==spr_tasencommander_pain || sprite_index==spr_tasencommander_painleft)){
    alarm[7]=4;
    image_index=0;
    instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_nanospark);
    repeat(2)
        (instance_create(bbox_left-8+random(bbox_right-bbox_left+16),bbox_top-4+random(bbox_bottom-bbox_top+8),obj_glassspark)).image_index=4;
    }
Step Event:

execute code:

//"FIND"
if (angry && !prevangry){
    if (state==0 || state==1 || state==2)
        scr_sound("com_find");
    }
prevangry=angry;
//"DEATH"
if (state==4 && prevstate!=4 && temphp>0){
    if (mutepainsound)
        mutepainsound=0;
    else
        scr_sound("com_death");
    }
prevstate=state;

if (temphp>0 && hp<=0 && ijikill==1){
    obj_iji.killemote=1;
    }
temphp=hp;

scr_tasenvision(10,35);
if (targetiji>0)
targetiji-=1;
if (targetrival>0)
targetrival-=1;
if (scouring>0)
scouring-=1;
if (hp==maxhp)
scouring=0;
cfised=0;
thored=0;
plasmaed=0;
//Lose sight
if ((x < obj_shakescreen.x-1000) || (x > obj_shakescreen.x+1000) || (y < obj_shakescreen.y-800) || (y > obj_shakescreen.y+800)){
    angry=0;
    alarm[5]=0;
    if (state==2)
        state=0;
    }
//Alter sprite speed
if (sprite_index=spr_tasencommander_basic || sprite_index=spr_tasencommander_basicleft)
    image_speed=0.2;
else
    image_speed=0.5;
//Crack fail
if (crackmark==1 && distance_to_object(obj_iji) > 50){
    script_execute(scr_crackfail);
    global.erasetop=0;
    global.topmessage="CRACKING FAILED: Subject is too far away";
    }
if (crackmark==1 && hp<=0){
    script_execute(scr_terminatecrack);
    global.erasetop=0;
    global.topmessage="CRACKING FAILED: Subject is dead";
    }
//Fix hitting cieling
if (state==4 && place_meeting(x,y+vspeed-2,(obj_block)) && !place_meeting(x,y+vspeed-2,(obj_meta)) && vspeed<0){
    move_contact_solid(90,-1);
    vspeed=0;
    y+=3;
    }
//Stop animations
if (sprite_index=spr_tasencommander_knockdown || sprite_index=spr_tasencommander_knockdownleft){
    if (image_index>7.9)
        image_single=8;
    }
//Melee attack
if (image_index==2){
    if (sprite_index=spr_tasencommander_swipe){
        scr_sound("glo_swipe");
        tempid=instance_create(x+20,y+26,obj_swipe);
        tempid.facing=1;
        tempid.target=id;
        }
    if (sprite_index=spr_tasencommander_swipeleft){
        scr_sound("glo_swipe");
        tempid=instance_create(x-61,y+26,obj_swipe);
        tempid.facing=0;
        tempid.target=id;
        }
    }
//Autodeath
if (hp<=0){
    dead=1;
    if (crackmark==1){
        script_execute(scr_terminatecrack);
        global.erasetop=0;
        global.topmessage="Cracking failed; subject is dead";
        }
    }
//Smoke when charging
if (firingrocket==1 && state==0)
    smoking+=1;
if (smoking>=5){
    smoking=0;
    if (facing==0)
        instance_create(x-40,y+25,obj_smoke);
    else
        instance_create(x+60,y+25,obj_smoke);
    }
//Knockdown
if (state==4){
    if (knockdowntype==1){
        if (place_free(x-velocity,y+vspeed+2) && !place_meeting(x-velocity,y,obj_blockenemy)){
            if (place_free(x-velocity,y+vspeed-2))
                x-=velocity;
            else if (place_free(x,y+vspeed+12)){
                velocity*=0.3;
                knockdowntype=2;
                sprite_index=spr_tasencommander_knockdownleft;
                facing=0;
                }
            }
        else if (place_free(x,y+vspeed+12)){
            velocity*=0.3;
            knockdowntype=2;
            sprite_index=spr_tasencommander_knockdownleft;
            facing=0;
            }
        }
    if (knockdowntype==2){
        if (place_free(x+velocity,y+vspeed+2) && !place_meeting(x+velocity,y,obj_blockenemy)){
            if (place_free(x+velocity,y+vspeed-2))
                x+=velocity;
            else if (place_free(x,y+vspeed+12)){
                velocity*=0.3;
                knockdowntype=1;
                sprite_index=spr_tasencommander_knockdown;
                facing=1;
                }
            }
        else if (place_free(x,y+vspeed+12)){
            velocity*=0.3;
            knockdowntype=1;
            sprite_index=spr_tasencommander_knockdown;
            facing=1;
            }
        }
    //Fall
    if (place_free(x,y+1)){
        gravity=1;
        gravity_direction=270;
        }
    }
//Limit fall speed
if (vspeed>20)
    vspeed=20;
//Armor
if (armor<99.9)
    armor+=0.1;
//Pain from armordrop
if (armor<1){
    if (state<4)
        damageable=1;
    if (state==6)
        damageable=1;
    if (damageable==1){
        damageable=0;
        hp-=1;
        if (hp>0.001){
            scr_sound("com_pain");
            takingpain=1;
            swiping=0;
            firingrocket=0;
            while(armor<1)
                armor+=maxarmor;
            state=3;
            alarm[1]=0;
            alarm[2]=10;
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            image_index=0;
            if (facing==0)
                sprite_index=spr_tasencommander_painleft;
            else
                sprite_index=spr_tasencommander_pain;
            if (x>obj_iji.x){
                tempid=instance_create(x+32,y+15,obj_tasenblood);
                tempid.image_index=6;
                tempid.speed=random(2)+2;
                }
            else{
                tempid=instance_create(x+2,y+15,obj_tasenblood);
                tempid.speed=random(2)+2;
                tempid.direction=180;
                }
            }
        else{
            dead=1;
            firingrocket=0;
            takingpain=1;
            if (targetrival==0 || !instance_exists(target))
                target=obj_iji;
            if (x
Collision Event with object obj_block:

execute code:

//Knockdown landing
if (state==4){
    if (vspeed<0){
        move_contact_solid(90,-1);
        vspeed=0;
        y+=3;
        }
    else{
        scr_sound("glo_land");
        state=5;
        image_single=-1;
        image_index=0;
        image_speed=0.5;
        if (knockdowntype==1)
            sprite_index=spr_tasencommander_hitfloor;
        if (knockdowntype==2)
            sprite_index=spr_tasencommander_hitfloorleft;
        alarm[4]=10;
        gravity=0;
        vspeed=0;
        move_contact_solid(270,-1);
    if ((x > obj_shakescreen.x-500) && (x < obj_shakescreen.x+500) && (y > obj_shakescreen.y-400) && (y < obj_shakescreen.y+400))
        script_execute(scr_shakescreen,1);
        }
    }
Collision Event with object obj_bullet:

execute code:

global.truce=0;
if (!other.stagger)
    ijikill=1;
targetiji=300;
if (angry==0 && (state==0 || state==1))
    alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+16,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+16,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0){
    if (other.stagger){
        if (state<4 || state==6){
            takingpain=1;
            firingrocket=0;
            state=3;
            alarm[1]=0;
            alarm[2]=10;
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            alarm[7]=0;
            image_index=0;
            if (facing==0)
                sprite_index=spr_tasencommander_painleft;
            else
                sprite_index=spr_tasencommander_pain;
            }
        }
    else{
        armor-=10*global.atmult;
        instance_create(other.x-3+random(7),other.y-3+random(7),obj_tasensplat);
        }
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stagger)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_pellet:

execute code:

global.truce=0;
if (!other.stun)
    ijikill=1;
targetiji=300;
if (angry==0 && (state==0 || state==1))
    alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+16,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+16,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0){
    if (other.stun){
        if (state<4 || state==6){
            takingpain=1;
            firingrocket=0;
            state=3;
            alarm[1]=0;
            alarm[2]=floor(15*(1+(global.attacklevel/10)));
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            alarm[7]=4;
            if (facing==0)
                sprite_index=spr_tasencommander_painleft;
            else
                sprite_index=spr_tasencommander_pain;
            image_index=0;
            image_single=-1;
            image_speed=0.5;
            }
        }
    else{
        armor-=9*global.atmult;
        instance_create(other.x-3+random(7),other.y-3+random(7),obj_tasensplat);
        }
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stun)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_kickbox:

execute code:

global.temp=0;
with (other){
    if (place_meeting(x,y,obj_door) || place_meeting(x,y,obj_cdoor))
        global.temp=1;
    if (sprite_index==spr_detonator)
        global.temp=0;
    }
if (global.temp==0){
if (other.image_index==0){
    scr_sound("glo_kick");
    global.truce=0;
    ijikill=1;
    targetiji=300;
    script_execute(scr_shakescreen,1);
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (global.facing==0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    
    if (angry==0 && (state==0 || state==1))
        alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+16,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+16,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    angry=1;
    alarm[5]=300;
    if (global.strengthlevel>=resistance){
        if (hp<=0 && milk<5){
            milk+=1;
            instance_create(bbox_left+(bbox_right-bbox_left)/2,bbox_top+(bbox_bottom-bbox_top)/2,obj_xp1);
            }
        hp-=1;
        if (other.sprite_index==spr_detonator){
            if (x>obj_iji.x)
                script_execute(scr_enemyknockdown,2);
            else
                script_execute(scr_enemyknockdown,1);
            }
        else
            script_execute(scr_enemyknockdown);
        }
    else{
        global.erasetop=0;
        global.topmessage="You need a Strength of "+string(resistance)+" to knock down a Tasen Commander";
        //Stagger
        if (hp>0 && (state==0 || state==1 || state==3)){
            takingpain=1;
            state=3;
            swiping=0;
            firingrocket=0;
            alarm[1]=0;
            alarm[2]=10;
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            image_index=0;
            if (facing==0)
                sprite_index=spr_tasencommander_painleft;
            else
                sprite_index=spr_tasencommander_pain;
            if (targetrival==0 || !instance_exists(target))
                target=obj_iji;
            }
        }
    }
}
Collision Event with object obj_rocketexplosion:

execute code:

{
if (other.dud==0){
    global.truce=0;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
if (angry==0){
    tempid=instance_create(x+6,y+16,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+16,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    hp-=2*global.atmult;
    force=11-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}
Collision Event with object obj_mpfbexplosion:

execute code:

{
if (other.dud==0){
    global.truce=0;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
if (angry==0){
    tempid=instance_create(x+6,y+16,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+16,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    hp-=3*global.atmult;
    if (hp<=0 && ijikill && killtype<5)
        killtype=5;
    if (other.banana && hp<=0 && ijikill && killtype<8)
        killtype=8;
    force=22-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}
Collision Event with object obj_pulse:

execute code:

global.truce=0;
if (!other.linker)
    ijikill=1;
targetiji=300;
if (other.hyper==1 && armor<33 && global.strengthlevel>=resistance){
    scr_sound("glo_kick");
    hp-=1;
    script_execute(scr_shakescreen,2);
    if (other.hspeed<0)
        script_execute(scr_enemyknockdown,1);
    else
        script_execute(scr_enemyknockdown,2);
    repeat(3){
        tempid=instance_create(other.x,other.y,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (other.hspeed<0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    }
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (angry==0 && (state==0 || state==1))
    alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+16,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+16,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0 && !other.linker){
    armor-=2*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_tasensplat);
    }
if (other.linker)
    scr_pulselink(4);
Collision Event with object obj_enemyrocketexplosion:

execute code:

{
if (other.dud==0){
    global.truce=0;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    hp-=2;
    force=11-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}
Collision Event with object obj_shockexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
if (angry==0){
    tempid=instance_create(x+6,y+16,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+16,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    hp-=2*global.atmult;
    force=13-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}
Collision Event with object obj_shockballexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
    if (dead==0)
        armor-=30*global.atmult;
    if (angry==0 && (state==0 || state==1))
        alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+16,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+16,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    angry=1;
    alarm[5]=300;
    }
}
Collision Event with object obj_enemympfbexplosion:

execute code:

{
if (other.dud==0){
    global.truce=0;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    hp-=3;
    force=22-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}
Collision Event with object obj_pushbox:

execute code:

{
if (dead==0){
    if (global.truce){
        tempid=instance_create(x+6,y+16,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+16,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    ijikill=1;
    if (global.cracklevel>=security){
        if (cracked==0){
            global.security=security;
            crackmark=1;
            if (global.suddendeath)
                global.cracktext="Tasen Commander#H1 A100 W6#Security: ";
            else
                global.cracktext="Tasen Commander#H5 A100 W6#Security: ";
            global.cracktext+=string(global.security);
            if (global.security==10)
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            else
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            script_execute(scr_begincrack);
            }
        else{
            global.erasetop=0;
            global.topmessage="Subject has already been cracked";
            }
        }
    else{
        global.erasetop=0;
        global.topmessage="You need a Crack skill of "+string(security)+" to crack a Tasen Commander";
        scr_sound("glo_crackfail");
        global.ignorestation=90;
        }
    }
else{
    global.erasetop=0;
    global.topmessage="Unable to connect to nanofield; subject is dead";
    }
}
Collision Event with object obj_meta:

execute code:

{
with (other)
    script_execute(scr_metabreak);
/*
if (other.sprite_index=spr_glass2 || other.sprite_index=spr_glass2small || other.sprite_index=spr_glass2short){
    repeat(3) instance_create(bbox_left+((bbox_right-bbox_left)/2),bbox_top+((bbox_bottom-bbox_top)/2),obj_tasenbloodspecial);
    hp-=1;
    }
*/
}
Collision Event with object obj_thor:

execute code:

if (!nukeimmune){
if (thored==0){
    ijikill=1;
    targetiji=300;
    if (angry==0 && (state==0 || state==1)){
        alarm[2]=1;
        tempid=instance_create(x+6,y+16,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+16,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    armor-=35*global.atmult;
    if (hp==1 && armor<=0 && ijikill && killtype<5)
        killtype=5;
    angry=1;
    alarm[5]=300;
    thored=1;
    }
}
Collision Event with object obj_enemyshockballexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    if (dead==0)
        armor-=30;
    if (angry==0 && (state==0 || state==1))
        alarm[2]=1;
    angry=1;
    alarm[5]=300;
    targetrival=300;
    target=other.target;
    }
}
Collision Event with object obj_enemyshockexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    hp-=2;
    targetrival=300;
    target=other.target;
    force=13-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}
Collision Event with object obj_enemypulse:

execute code:

ijikill=0;
if (other.hyper==1 && armor<30){
    ijikill=0;
    scr_sound("glo_kick");
    hp-=1;
    script_execute(scr_shakescreen,2);
    if (other.hspeed<0)
        script_execute(scr_enemyknockdown,1,8);
    else
        script_execute(scr_enemyknockdown,2,8);
    repeat(3){
        tempid=instance_create(other.x,other.y,obj_scrapwhite);
        tempid.speed=6;
        if (other.hspeed<0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    }
if (angry==0 && (state==0 || state==1))
    alarm[2]=1;
angry=1;
targetrival=300;
target=other.target;
alarm[5]=300;
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (dead==0){
    armor-=1;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_tasensplat);
    }
Collision Event with object obj_impulseexplosion:

execute code:

if (other.dud==0){
    if (angry==0){
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    global.truce=0;
    ijikill=0;
    targetiji=300;
    mutepainsound=1;
    force=11-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force,1);
    else
        script_execute(scr_enemyknockdown,2,force,1);
    }
______________________________________________________

Information about object: obj_swipe
Sprite: spr_swipe
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
dud=1;
alarm[0]=2;
alarm[1]=1;
}
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 1:

set variable dud to 0
______________________________________________________

Information about object: obj_tasenelite_weapon
Sprite: spr_tasenelite_weapon
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
image_speed=0.5;
gravity=0.8;
gravity_direction=270;
}
Collision Event with object obj_block:

execute code:

{
script_execute(scr_shakescreen,1);
script_execute(scr_nanoexplosion);
instance_destroy();
}
Collision Event with object obj_glass:

execute code:

with (other)
scr_glassbreak(2);

Collision Event with object obj_glass2:

execute code:

with (other)
scr_metabreak(3,0);
Collision Event with object obj_glass2short:

execute code:

with (other)
scr_metabreak(3,0);
______________________________________________________

Information about object: obj_tasenelite
Sprite: spr_tasenelite_basicleft
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_tasenenemy
Mask: 

Create Event:

execute code:

killtype=1;
image_speed=0.5;
state=1;
alarm[2]=25+random(10);
hp=15;
maxhp=15;
if (global.suddendeath){
    hp=1;
    maxhp=1;
    }
armor=100;
maxarmor=100;
enemytype=3;
resistance=9;
security=6;
walkspeed=4+global.specialtrigger16*2;

if (global.really){
    hp*=2;
    maxhp*=2;
    walkspeed*=2;
    armor*=2;
    maxarmor*=2;
    resistance*=2;
    security*=2;
    }
Alarm Event for alarm 0:

set variable reloading to 0
Alarm Event for alarm 1:

execute code:

{
if (swiping==0){
    if (facing==0)
        sprite_index=spr_tasenelite_basicleft;
    else
        sprite_index=spr_tasenelite_basic;
    }
}
Alarm Event for alarm 2:

execute code:

//Choose target
if (targetrival==0){
    if (targetiji>0)
        target=obj_iji.id;
    else{
        angry=0;
        alarm[5]=300;
        }
    }
if (!instance_exists(target)){
angry=0;
targetrival=0;
if (targetiji>0 && target!=obj_iji.id){
    if (!angry)
        alarm[2]=1;
    angry=1;
    alarm[5]=300;
    target=obj_iji.id;
    }
}

swiping=0;
//Adjust sprite
if (facing==0 && state==0)
    sprite_index=spr_tasenelite_basicleft;
if (facing==1 && state==0)
    sprite_index=spr_tasenelite_basic;
//Begin taking action
takingpain=0;
alarm[2]=25+random(10);
//Scour for seen health
if (!angry && scouring>0){
    state=1;
    if (scouringdir>0)
        facing=0;
    else
        facing=1;
    if (global.really)
        alarm[2]=5;
    exit;
    }
//Rocket has fired
if (firingrocket==1){
    state=1;
    firingrocket=0;
    if (x>target.x)
        facing=0;
    else
        facing=1;
    //Kick
    if (x>target.x && (place_meeting(x-30,y,obj_meta) || place_meeting(x-30,y,obj_glass))){
        state=0;
        idling=0;
        swiping=1;
        image_index=0;
        alarm[2]=14;
        sprite_index=spr_tasenelite_kickleft;
        }
    else if (x<=target.x && (place_meeting(x+30,y,obj_meta) || place_meeting(x+30,y,obj_glass))){
        state=0;
        idling=0;
        swiping=1;
        image_index=0;
        alarm[2]=14;
        sprite_index=spr_tasenelite_kick;
        }
    if (distance_to_object(target)<28){
        state=0;
        idling=0;
        swiping=1;
        alarm[2]=14;
        image_index=0;
        if (x>target.x){
            facing=0;
            sprite_index=spr_tasenelite_kickleft;
            }
        else{
            facing=1;
            sprite_index=spr_tasenelite_kick;
            }
        }
    exit;
    }
//Roam
randomstate=random(1);
if (angry==0){
    if (randomstate<0.6){
        state=0;
        alarm[2]=60+random(90);
        }
    else{
        state=1;
        facing=0;
        if (randomstate>0.8)
            facing=1;
        }
    }
//Angry
else{
    state=1;
    //Face target
    if (x>target.x)
        facing=0;
    else
        facing=1;

    if (idling==4){
        if (abs(target.y-y)<96)
            state=2;
        else
            state=1;
        idling=0;
        //Mach overload
        if (angry && obj_sabot.machtot>12){
            state=1;
            if (x>target.x)
                facing=0;
            else
               facing=1;
            exit;
            }
        }
    if (randomstate<0.4){
        state=1;
        idling+=1;
        //Kick (again)
        if (x>target.x && (place_meeting(x-30,y,obj_meta) || place_meeting(x-30,y,obj_glass))){
            state=0;
            idling=0;
            swiping=1;
            image_index=0;
            alarm[2]=14;
            sprite_index=spr_tasenelite_kickleft;
            }
        else if (x<=target.x && (place_meeting(x+30,y,obj_meta) || place_meeting(x+30,y,obj_meta))){
            state=0;
            idling=0;
            swiping=1;
            image_index=0;
            alarm[2]=14;
            sprite_index=spr_tasenelite_kick;
            }
        if (distance_to_object(target)<28){
            state=0;
            idling=0;
            swiping=1;
            image_index=0;
            alarm[2]=14;
            if (x>target.x){
                facing=0;
                sprite_index=spr_tasenelite_kickleft;
                }
            else{
                facing=1;
                sprite_index=spr_tasenelite_kick;
                }
            }
        }
    if (randomstate>=0.4){
        if (abs(target.y-y)<96)
            state=2;
        else
            state=1;
        //Face target
        if (x>target.x)
            facing=0;
        else
            facing=1;
        //Charge a rocket
        if (randomstate>=0.6 && abs(y-target.y)<192){
            idling=0;
            if (!oops && ((place_free(x+16,y-32) && place_free(x+32,y-32) && place_free(x+48,y-32) && place_free(x+64,y-32) && place_free(x+80,y-32) && place_free(x+96,y-32) && place_free(x+112,y-32) && place_free(x+128,y-32)) || (place_free(x+16,y) && place_free(x+32,y) && place_free(x+48,y) && place_free(x+64,y) && place_free(x+80,y) && place_free(x+96,y) && place_free(x+112,y) && place_free(x+128,y))) && !place_meeting(x+16,y-32,obj_glass) && !place_meeting(x+32,y-32,obj_glass) && !place_meeting(x+48,y-32,obj_glass) && !place_meeting(x+64,y-32,obj_glass) && !place_meeting(x+80,y-32,obj_glass) && !place_meeting(x+96,y-32,obj_glass) && !place_meeting(x+112,y-32,obj_glass) && !place_meeting(x+128,y-32,obj_glass) && !place_meeting(x+16,y-32,obj_meta) && !place_meeting(x+32,y-32,obj_meta) && !place_meeting(x+48,y-32,obj_meta) && !place_meeting(x+64,y-32,obj_meta) && !place_meeting(x+80,y-32,obj_meta) && !place_meeting(x+96,y-32,obj_meta) && !place_meeting(x+112,y-32,obj_meta) && !place_meeting(x+128,y-32,obj_meta) && x<=target.x){
                state=0;
                tempid=instance_create(x+55,y+35,obj_chargetell);
                tempid.tempid=id;
                sprite_index=spr_tasenelite_basic;
                alarm[2]=23;
                alarm[6]=20;
                firingrocket=1;
                if (randomstate>=0.9){
                    firingmpfb=1;
                    alarm[2]=38;
                    alarm[6]=35;
                    scr_sound("tor_gather");
                    }
                else{
                    firingmpfb=0;
                    scr_sound("wea_charge");
                    }
                }
            else if (!oops && ((place_free(x-16,y-32) && place_free(x-32,y-32) && place_free(x-48,y-32) && place_free(x-64,y-32) && place_free(x-80,y-32) && place_free(x-96,y-32) && place_free(x-112,y-32) && place_free(x-128,y-32)) || (place_free(x-16,y) && place_free(x-32,y) && place_free(x-48,y) && place_free(x-64,y) && place_free(x-80,y) && place_free(x-96,y) && place_free(x-112,y) && place_free(x-128,y))) && !place_meeting(x-16,y-32,obj_glass) && !place_meeting(x-32,y-32,obj_glass) && !place_meeting(x-48,y-32,obj_glass) && !place_meeting(x-64,y-32,obj_glass) && !place_meeting(x-80,y-32,obj_glass) && !place_meeting(x-96,y-32,obj_glass) && !place_meeting(x-112,y-32,obj_glass) && !place_meeting(x-128,y-32,obj_glass) && !place_meeting(x-16,y-32,obj_meta) && !place_meeting(x-32,y-32,obj_meta) && !place_meeting(x-48,y-32,obj_meta) && !place_meeting(x-64,y-32,obj_meta) && !place_meeting(x-80,y-32,obj_meta) && !place_meeting(x-96,y-32,obj_meta) && !place_meeting(x-112,y-32,obj_meta) && !place_meeting(x-128,y-32,obj_meta) && x>target.x){
                state=0;
                tempid=instance_create(x-22,y+35,obj_chargetell);
                tempid.tempid=id;
                sprite_index=spr_tasenelite_basicleft;
                alarm[2]=23;
                alarm[6]=20;
                firingrocket=1;
                if (randomstate>=0.9){
                    firingmpfb=1;
                    alarm[2]=38;
                    alarm[6]=35;
                    scr_sound("tor_gather");
                    }
                else{
                    firingmpfb=0;
                    scr_sound("wea_charge");
                    }
                }
            }
        else{
            //Rocket test failed
            if (abs(target.y-y)<96)
                state=2;
            else
                state=1;
            idling=0;
            if (x>target.x)
                facing=0;
            else
               facing=1;
            //Mach overload
            if (angry && obj_sabot.machtot>12){
                state=1;
                }
            }
        }
    }
if (global.really && state==1 && alarm[2]>5)
    alarm[2]=5;
Alarm Event for alarm 3:

execute code:

scr_sound("glo_land");
scr_shakescreen(1);
image_speed=0;
image_single=12;
image_index=12;

Alarm Event for alarm 4:

execute code:

if ((x > obj_shakescreen.x-500) && (x < obj_shakescreen.x+500) && (y > obj_shakescreen.y-400) && (y < obj_shakescreen.y+400)){
    script_execute(scr_shakescreen,2);
    (instance_create(obj_sabot.x,obj_sabot.y,obj_whiteblanket)).alarm[0]=2;
    }
if (facing==0){
    if ((x > obj_shakescreen.x-500) && (x < obj_shakescreen.x+500) && (y > obj_shakescreen.y-400) && (y < obj_shakescreen.y+400))
    script_execute(scr_nanoexplosion,-30,80);
    instance_create(x,y+75,obj_xp4);
    if (cracked)
        script_execute(scr_dropammo,0,75,1,5);
    else{
        script_execute(scr_dropammo,0,75,4,1);
        if (ammodrop>1)
            script_execute(scr_dropammo,0,75,4,3);
        if (ammodrop>1)
            script_execute(scr_dropammo,0,75,4,5);
        }
    }
else{
    if ((x > obj_shakescreen.x-500) && (x < obj_shakescreen.x+500) && (y > obj_shakescreen.y-400) && (y < obj_shakescreen.y+400))
    script_execute(scr_nanoexplosion,60,80);
    instance_create(x+30,y+75,obj_xp4);
    if (cracked)
        script_execute(scr_dropammo,10,75,1,5);
    else{
        script_execute(scr_dropammo,10,75,4,1);
        if (ammodrop>1)
            script_execute(scr_dropammo,10,75,4,3);
        if (ammodrop>1)
            script_execute(scr_dropammo,10,75,4,5);
        }
    }
if (ijikill){
tempid=instance_create(x+10,y+36,obj_visionchecke)
tempid.direction=0;
tempid.speed=16;
tempid=instance_create(x+10,y+36,obj_visionchecke)
tempid.direction=180;
tempid.speed=16;
}
instance_destroy();
Alarm Event for alarm 5:

set variable angry to 0
Alarm Event for alarm 6:

execute code:

//Rocket
if (firingmpfb==0){
    if (weapon==0){
    if (facing==0){
        if (cracked==0){
            scr_sound("wea_rock");
            tempid=instance_create(x-24,y+35,obj_enemyrocket);
            tempid.target=id;
            tempid.speed=-global.rocketspeed;
            tempid.image_single=1;
            tempid=instance_create(x-30,y+35,obj_rocketlaunch);
            tempid.sprite_index=spr_rocketlaunchleft;
            sprite_index=spr_tasenelite_fireleft;
            }
        else{
            tempid=instance_create(x-13,y+35,obj_enemyrocketexplosion);
            tempid.target=id;
            instance_create(x-13,y+35,obj_explosioncenter);
            script_execute(scr_shakescreen,2);
            oops=1;
            }
        }
    else{
        if (cracked==0){
            scr_sound("wea_rock");
            tempid=instance_create(x+42,y+35,obj_enemyrocket);
            tempid.target=id;
            tempid.speed=global.rocketspeed;
            tempid.image_single=0;
            instance_create(x+46,y+35,obj_rocketlaunch);
            sprite_index=spr_tasenelite_fire;
            }
        else{
            tempid=instance_create(x+42,y+35,obj_enemyrocketexplosion);
            tempid.target=id;
            instance_create(x+42,y+35,obj_explosioncenter);
            script_execute(scr_shakescreen,2);
            oops=1;
            }
        }
    }
    if (weapon==1){
    if (facing==0){
        if (cracked==0){
            scr_sound("wea_rock");
            tempid=instance_create(x-24,y+35,obj_enemyrocket);
            tempid.target=id;
            tempid.speed=-global.rocketspeed;
            tempid.image_single=1;
            tempid=instance_create(x-24,y+35,obj_enemyrocket);
            tempid.target=id;
            tempid.speed=global.rocketspeed-2;
            tempid.direction=174;
            tempid.image_single=1;
            tempid=instance_create(x-24,y+35,obj_enemyrocket);
            tempid.target=id;
            tempid.speed=global.rocketspeed-4;
            tempid.direction=186;
            tempid.image_single=1;
            tempid=instance_create(x-30,y+35,obj_rocketlaunch);
            tempid.sprite_index=spr_rocketlaunchleft;
            sprite_index=spr_tasenelite_fireleft;
            }
        else{
            tempid=instance_create(x-13,y+35,obj_enemyrocketexplosion);
            tempid.target=id;
            instance_create(x-13,y+35,obj_explosioncenter);
            script_execute(scr_shakescreen,2);
            oops=1;
            }
        }
    else{
        if (cracked==0){
            scr_sound("wea_rock");
            tempid=instance_create(x+42,y+35,obj_enemyrocket);
            tempid.target=id;
            tempid.speed=global.rocketspeed;
            tempid.image_single=0;
            tempid=instance_create(x+42,y+35,obj_enemyrocket);
            tempid.target=id;
            tempid.speed=global.rocketspeed-2;
            tempid.direction=6;
            tempid.image_single=0;
            tempid=instance_create(x+42,y+35,obj_enemyrocket);
            tempid.target=id;
            tempid.speed=global.rocketspeed-4;
            tempid.direction=-6;
            tempid.image_single=0;
            instance_create(x+46,y+35,obj_rocketlaunch);
            sprite_index=spr_tasenelite_fire;
            }
        else{
            tempid=instance_create(x+42,y+35,obj_enemyrocketexplosion);
            tempid.target=id;
            instance_create(x+42,y+35,obj_explosioncenter);
            script_execute(scr_shakescreen,2);
            oops=1;
            }
        }
    }
    }
//MPFB
else{
    script_execute(scr_shakescreen,1);
    if (facing==0){
        if (cracked==0){
            scr_sound("wea_mpfb");
            tempid=instance_create(x-24,y+35,obj_enemympfb);
            tempid.target=id;
            tempid.speed=global.mpfbspeed;
            tempid.direction=180;
            tempid=instance_create(x-24,y+35,obj_enemympfb);
            tempid.target=id;
            tempid.speed=global.mpfbspeed-4;
            tempid.direction=180;
            tempid=instance_create(x-24,y+35,obj_enemympfb);
            tempid.target=id;
            tempid.speed=global.mpfbspeed-8;
            tempid.direction=180;
            sprite_index=spr_tasenelite_fireleft;
            }
        else{
            scr_sound("exp_mpfb");
            tempid=instance_create(x-24,y+35,obj_enemympfbexplosion);
            tempid.target=id;
            instance_create(x-24,y+35,obj_explosioncenter);
            script_execute(scr_shakescreen,4);
            oops=1;
            }
        }
    else{
        if (cracked==0){
            scr_sound("wea_mpfb");
            tempid=instance_create(x+42,y+35,obj_enemympfb);
            tempid.target=id;
            tempid.speed=global.mpfbspeed;
            tempid=instance_create(x+42,y+35,obj_enemympfb);
            tempid.target=id;
            tempid.speed=global.mpfbspeed-4;
            tempid=instance_create(x+42,y+35,obj_enemympfb);
            tempid.target=id;
            tempid.speed=global.mpfbspeed-8;
            sprite_index=spr_tasenelite_fire;
            }
        else{
            scr_sound("exp_mpfb");
            tempid=instance_create(x+42,y+35,obj_enemympfbexplosion);
            tempid.target=id;
            instance_create(x+42,y+35,obj_explosioncenter);
            script_execute(scr_shakescreen,4);
            oops=1;
            }
        }
    }
Alarm Event for alarm 7:

execute code:

if (alarm[2]>=1 && state==3 && (sprite_index==spr_tasenelite_pain || sprite_index==spr_tasenelite_painleft)){
    alarm[7]=4;
    image_index=0;
    instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_nanospark);
    repeat(2)
        (instance_create(bbox_left-8+random(bbox_right-bbox_left+16),bbox_top-4+random(bbox_bottom-bbox_top+8),obj_glassspark)).image_index=4;
    }
Step Event:

execute code:

//"FIND"
if (angry && !prevangry){
    if (state==0 || state==1 || state==2)
        scr_sound("eli_find");
    }
prevangry=angry;
//"DEATH"
if (dead && !prevdead)
    scr_sound("eli_death");
prevdead=dead;

if (temphp>0 && hp<=0 && ijikill==1){
    obj_iji.killemote=1;
    }
temphp=hp;

scr_tasenvision(15,50);
if (targetiji>0)
targetiji-=1;
if (targetrival>0)
targetrival-=1;
if (scouring>0)
scouring-=1;
if (hp==maxhp)
scouring=0;
cfised=0;
thored=0;
plasmaed=0;
//Lose sight
if ((x < obj_shakescreen.x-1000) || (x > obj_shakescreen.x+1000) || (y < obj_shakescreen.y-800) || (y > obj_shakescreen.y+800)){
    angry=0;
    alarm[5]=0;
    if (state==2)
        state=0;
    }
//Fix sprite
if (sprite_index=spr_tasenelite_basic || sprite_index=spr_tasenelite_basicleft)
    image_speed=0.2;
else if (!(sprite_index=spr_tasenelite_death || sprite_index=spr_tasenelite_deathleft))
    image_speed=0.5;
//Crack fail
if (crackmark==1 && distance_to_object(obj_iji) > 50){
    script_execute(scr_crackfail);
    global.erasetop=0;
    global.topmessage="CRACKING FAILED: Subject is too far away";
    }
if (crackmark==1 && hp<=0){
    script_execute(scr_terminatecrack);
    global.erasetop=0;
    global.topmessage="CRACKING FAILED: Subject is dead";
    }
//Kick
if (image_index==2){
    if (sprite_index=spr_tasenelite_kick){
        scr_sound("glo_swipe");
        tempid=instance_create(x+5,y+26,obj_kickbox_elite);
        tempid.facing=1;
        tempid.target=id;
        }
    if (sprite_index=spr_tasenelite_kickleft){
        scr_sound("glo_swipe");
        tempid=instance_create(x-30,y+26,obj_kickbox_elite);
        tempid.target=id;
        }
    }
/*
//Autodeath
if (hp<=0){
    dead=1;
    if (crackmark==1){
        script_execute(scr_terminatecrack);
        global.erasetop=0;
        global.topmessage="Cracking failed; subject is dead";
        }
    }*/
//Smoke when charging
if (firingrocket==1 && state==0)
    smoking+=1;
if (smoking>=5){
    smoking=0;
    if (firingmpfb==0){
        if (facing==0)
            instance_create(x-22,y+35,obj_smoke);
        else
            instance_create(x+55,y+35,obj_smoke);
        }
    else{
        if (facing==0)
            instance_create(x-22,y+35,obj_mpfbspark);
        else
            instance_create(x+55,y+35,obj_mpfbspark);
        }
    }
//Armor
if (armor<99.9 && hp>0)
    armor+=0.1;
//Pain from armordrop
if (armor<1 && hp>0){
    hp-=1;
    scr_elitepain(1);
    }
//Fire
if (state==2 && reloading==0){
    scr_sound("wea_imach");
    reloading=1;
    alarm[0]=3;
    alarm[1]=3;
    if (weapon==0){
    if (facing==0){
        sprite_index=spr_tasenelite_fireleft;
        (instance_create(x+20,y+35,obj_enemybullet)).target=id;
        instance_create(x-20,y+35,obj_muzzleflash);
        if (instance_number(obj_shell)<40 && !global.specialbake){
            tempid=instance_create(x-9,y+30,obj_shell);
            tempid.speed=random(2)+5;
            tempid.direction=random(15)+40;
            }
        }
    else{
        sprite_index=spr_tasenelite_fire;
        (instance_create(x+10,y+35,obj_enemybullet2)).target=id;
        (instance_create(x+77,y+35,obj_muzzleflash)).image_single=floor(random(5))+5;
        if (instance_number(obj_shell)<40 && !global.specialbake){
            tempid=instance_create(x+40,y+30,obj_shell);
            tempid.speed=random(2)+5;
            tempid.direction=random(15)+130;
            }
        }
        }
    if (weapon==1){
    if (facing==0){
        sprite_index=spr_tasenelite_fireleft;
        (instance_create(x+14,y+30,obj_enemybullet)).target=id;
        instance_create(x-26,y+30,obj_muzzleflash);
        (instance_create(x+20,y+40,obj_enemybullet)).target=id;
        instance_create(x-20,y+40,obj_muzzleflash);
        if (instance_number(obj_shell)<40 && !global.specialbake){
            tempid=instance_create(x-9,y+30,obj_shell);
            tempid.speed=random(2)+5;
            tempid.direction=random(15)+40;
            tempid=instance_create(x-9,y+26,obj_shell);
            tempid.speed=random(2)+5;
            tempid.direction=random(15)+40;
            }
        }
    else{
        sprite_index=spr_tasenelite_fire;
        (instance_create(x+16,y+30,obj_enemybullet2)).target=id;
        (instance_create(x+82,y+30,obj_muzzleflash)).image_single=floor(random(5))+5;
        (instance_create(x+10,y+40,obj_enemybullet2)).target=id;
        (instance_create(x+77,y+40,obj_muzzleflash)).image_single=floor(random(5))+5;
        if (instance_number(obj_shell)<40 && !global.specialbake){
            tempid=instance_create(x+40,y+30,obj_shell);
            tempid.speed=random(2)+5;
            tempid.direction=random(15)+130;
            tempid=instance_create(x+40,y+26,obj_shell);
            tempid.speed=random(2)+5;
            tempid.direction=random(15)+130;
            }
        }
        }
    }
//Stand still
if (state==0 && firingrocket==0 && swiping==0){
    if (facing==0)
        sprite_index=spr_tasenelite_basicleft;
    else
        sprite_index=spr_tasenelite_basic;
    }
//Walk
if (state==1){
    if (facing==0){
        sprite_index=spr_tasenelite_walkleft;
        if (place_meeting(x-walkspeed,y,obj_glass) || place_meeting(x-walkspeed,y,obj_blockenemy) || place_free(x-20,y+20)){
            facing=1;
            exit;
            }
        if (place_free(x-walkspeed,y+1) && (place_meeting(x-walkspeed,y+10,obj_slopel) || place_meeting(x-walkspeed,y+10,obj_sloper))){
            x-=walkspeed;
            move_contact_solid(270,-1);
            }
        else if (place_free(x-walkspeed,y))
            x-=walkspeed;
        else{
            if (place_free(x-walkspeed,y-5) && (place_meeting(x,y+10,obj_slopel) || place_meeting(x,y+10,obj_sloper))){
                y-=5;
                x-=walkspeed;
                move_contact_solid(270,-1);
                }
            else
                facing=1;
            }
        }
    else{
        sprite_index=spr_tasenelite_walk;
        if (place_meeting(x+walkspeed,y,obj_glass) || place_meeting(x+walkspeed,y,obj_blockenemy) || place_free(x+20,y+20)){
            facing=0;
            exit;
            }
        if (place_free(x+walkspeed,y+1) && (place_meeting(x+walkspeed,y+10,obj_slopel) || place_meeting(x+walkspeed,y+10,obj_sloper))){
            x+=walkspeed;
            move_contact_solid(270,-1);
            }
        else if (place_free(x+walkspeed,y))
            x+=walkspeed;
        else{
            if (place_free(x+walkspeed,y-5) && (place_meeting(x,y+10,obj_slopel) || place_meeting(x,y+10,obj_sloper))){
                y-=5;
                x+=walkspeed;
                move_contact_solid(270,-1);
                }
            else
                facing=0;
            }
        }
    }
Collision Event with object obj_bullet:

execute code:

if (!other.stagger)
    ijikill=1;
targetiji=300;
if (angry==0){
    alarm[2]=1;
    tempid=instance_create(x+6,y+32,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+32,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0){
    if (other.stagger){
        takingpain=1;
        firingrocket=0;
        state=3;
        alarm[1]=0;
        alarm[2]=10;
        alarm[3]=0;
        alarm[4]=0;
        alarm[6]=0;
        alarm[7]=0;
        if (facing==0)
            sprite_index=spr_tasenelite_painleft;
        else
            sprite_index=spr_tasenelite_pain;
        image_index=0;
        image_single=-1;
        image_speed=0.5;
        }
    else{
        armor-=10*global.atmult;
        instance_create(other.x-3+random(7),other.y-3+random(7),obj_tasensplat);
        }
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stagger)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_pellet:

execute code:

if (!other.stun)
    ijikill=1;
targetiji=300;
if (angry==0){
    alarm[2]=1;
    tempid=instance_create(x+6,y+32,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+32,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0){
    if (other.stun){
        takingpain=1;
        firingrocket=0;
        state=3;
        alarm[1]=0;
        alarm[2]=floor(15*(1+(global.attacklevel/10)));
        alarm[3]=0;
        alarm[4]=0;
        alarm[6]=0;
        alarm[7]=4;
        if (facing==0)
            sprite_index=spr_tasenelite_painleft;
        else
            sprite_index=spr_tasenelite_pain;
        image_index=0;
        image_single=-1;
        image_speed=0.5;
        }
    else{
        armor-=9*global.atmult;
        instance_create(other.x-3+random(7),other.y-3+random(7),obj_tasensplat);
        }
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_kickbox:

execute code:

if (hp>=0){
global.temp=0;
with (other){
    if (place_meeting(x,y,obj_door) || place_meeting(x,y,obj_cdoor))
        global.temp=1;
    if (sprite_index==spr_detonator)
        global.temp=0;
    }
if (global.temp==0){
if (other.image_index==0){
    scr_sound("glo_kick");
    ijikill=1;
    targetiji=300;
    script_execute(scr_shakescreen,1);
    if (angry==0){
        alarm[2]=1;
        tempid=instance_create(x+6,y+32,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+32,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (global.facing==0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    
    if (global.strengthlevel>=resistance){
        hp-=1;
        script_execute(scr_elitepain);
        }
    else{
        global.erasetop=0;
        global.topmessage="You need a Strength of "+string(resistance)+" to damage a Tasen Elite";
        //Stagger
        if (hp>0 && (state==0 || state==1 || state==2 || state==3)){
            alarm[5]=300;
            takingpain=1;
            swiping=0;
            firingrocket=0;
            firingrocket2=0;
            firingmpfb=0;
            rapidfirempfb=0;
            state=3;
            alarm[1]=0;
            alarm[2]=10;
            alarm[6]=0;
            alarm[7]=0;
            image_index=0;
            if (facing==0)
                sprite_index=spr_tasenelite_painleft;
            if (facing==1)
                sprite_index=spr_tasenelite_pain;
            }
        }
    }
}
}
Collision Event with object obj_rocketexplosion:

execute code:

if (other.dud==0){
    global.truce=0;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
    if (angry==0){
        alarm[2]=1;
        tempid=instance_create(x+6,y+32,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+32,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    hp-=2*global.atmult;
    script_execute(scr_elitepain);
    }
Collision Event with object obj_mpfbexplosion:

execute code:

{
if (other.dud==0){
    global.truce=0;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
if (angry==0){
    alarm[2]=1;
    tempid=instance_create(x+6,y+32,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+32,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    hp-=3*global.atmult;
    if (hp<=0 && ijikill && killtype<5)
        killtype=5;
    if (other.banana && hp<=0 && ijikill && killtype<8)
        killtype=8;
    script_execute(scr_elitepain);
    }
}
Collision Event with object obj_pulse:

execute code:

global.truce=0;
if (!other.linker)
    ijikill=1;
targetiji=300;
if (other.hyper==1 && armor<33 && global.strengthlevel>=resistance){
    scr_sound("glo_kick");
    hp-=1;
    while (armor<100)
        armor+=1;
    script_execute(scr_elitepain);
    script_execute(scr_shakescreen,2);
    repeat(3){
        tempid=instance_create(other.x,other.y,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (other.hspeed<0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    }
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (angry==0)
    alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+32,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+32,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0 && !other.linker){
    armor-=2*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_tasensplat);
    }
if (other.linker)
    scr_pulselink(5);
Collision Event with object obj_enemyrocketexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    hp-=2;
    script_execute(scr_elitepain);
    }
}
Collision Event with object obj_shockexplosion:

execute code:

{
if (other.dud==0){
    global.truce=0;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
if (angry==0){
    tempid=instance_create(x+6,y+32,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+32,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    hp-=2*global.atmult;
    script_execute(scr_elitepain);
    }
}
Collision Event with object obj_shockballexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
    if (dead==0)
        armor-=30*global.atmult;
    if (angry==0)
        alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+32,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+32,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    angry=1;
    alarm[5]=300;
    }
}
Collision Event with object obj_enemympfbexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    hp-=3;
    script_execute(scr_elitepain);
    }
}
Collision Event with object obj_pushbox:

execute code:

{
if (dead==0){
    if (global.truce){
        tempid=instance_create(x+6,y+32,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+32,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    ijikill=1;
    if (global.cracklevel>=security){
        if (cracked==0){
            global.security=security;
            crackmark=1;
            if (global.suddendeath)
                global.cracktext="Tasen Elite#H1 A100 W9#Security: ";
            else
                global.cracktext="Tasen Elite#H15 A100 W9#Security: ";
            global.cracktext+=string(global.security);
            if (global.security==10)
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            else
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            script_execute(scr_begincrack);
            }
        else{
            global.erasetop=0;
            global.topmessage="Subject has already been cracked";
            }
        }
    else{
        global.erasetop=0;
        global.topmessage="You need a Crack skill of "+string(security)+" to crack a Tasen Elite";
        scr_sound("glo_crackfail");
        global.ignorestation=90;
        }
    }
else{
    global.erasetop=0;
    global.topmessage="Unable to connect to nanofield; subject is dead";
    }
}
Collision Event with object obj_thor:

execute code:

if (!nukeimmune){
if (thored==0){
    ijikill=1;
    targetiji=300;
    if (angry==0){
        alarm[2]=1;
        tempid=instance_create(x+6,y+32,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+32,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    armor-=35*global.atmult;
    if (hp==1 && armor<=0 && ijikill && killtype<5)
        killtype=5;
    angry=1;
    alarm[5]=300;
    thored=1;
    }
}
Collision Event with object obj_enemyshockballexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    if (dead==0)
        armor-=30;
    if (angry==0)
        alarm[2]=1;
    angry=1;
    alarm[5]=300;
    targetrival=300;
    target=other.target;
    }
}
Collision Event with object obj_enemyshockexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    hp-=2;
    script_execute(scr_elitepain);
    targetrival=300;
    target=other.target;
    }
}
Collision Event with object obj_enemypulse:

execute code:

ijikill=0;
if (other.hyper==1 && armor<30 && global.strengthlevel>=resistance){
    ijikill=0;
    scr_sound("glo_kick");
    hp-=1;
    while (armor<100)
        armor+=1;
    script_execute(scr_elitepain);
    script_execute(scr_shakescreen,2);
    repeat(3){
        tempid=instance_create(other.x,other.y,obj_scrapwhite);
        tempid.speed=6;
        if (other.hspeed<0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    }
if (angry==0)
    alarm[2]=1;
angry=1;
targetrival=300;
target=other.target;
alarm[5]=300;
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (dead==0){
    armor-=1;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_tasensplat);
    }
Collision Event with object obj_impulseexplosion:

execute code:

if (other.dud==0){
    global.truce=0;
    ijikill=0;
    targetiji=300;
    if (angry==0){
        alarm[2]=1;
        tempid=instance_create(x+6,y+32,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+32,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    script_execute(scr_elitepain,0,1);
    }

______________________________________________________

Information about object: obj_kickbox_elite
Sprite: spr_kickbox_elite
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
dud=1;
alarm[0]=2;
alarm[1]=1;
}
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 1:

set variable dud to 0
______________________________________________________

Information about object: obj_enemympfb
Sprite: spr_mpfb
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=1;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

execute code:

alarm[0]=5;
if (direction>90 && direction<270){
    tempid=instance_create(x-(speed+10),y,obj_mpfbwake);
    tempid.speed=-10;
    tempid.image_index=4;
    }
else
    (instance_create(x+(speed+10),y,obj_mpfbwake)).speed=10;
Step Event:

execute code:

if (speed==global.mpfbspeed && !global.specialbake)
scr_mpfbspark();
scr_outside();
Collision Event with object obj_iji:

execute script scr_mpfbhit with arguments (1,0,0,0,0)
Collision Event with object obj_block:

execute script scr_mpfbhit with arguments (1,0,0,0,0)
Collision Event with object obj_glass:

execute script scr_mpfbhit with arguments (1,1,0,0,0)
Collision Event with object obj_meta:

execute script scr_mpfbhit with arguments (1,0,0,0,0)
Collision Event with object obj_komatoenemy:

execute script scr_mpfbhit with arguments (1,0,0,0,0)
______________________________________________________

Information about object: obj_enemympfbexplosion
Sprite: spr_mpfbexplosion
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.25;
dud=1;
alarm[0]=28;
alarm[2]=1;
alarm[3]=2;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 2:

set variable dud to 0
Alarm Event for alarm 3:

set variable dud to 1
______________________________________________________

Information about object: obj_xp1
Sprite: spr_xp1
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_xp
Mask: 

______________________________________________________

Information about object: obj_nanoflash
Sprite: spr_nanoflash
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
alarm[0]=90;
randomfollow=2+random(12);
direction=random(360);
speed=randomfollow;
alarm[1]=randomfollow;
}
Alarm Event for alarm 0:

execute code:

instance_destroy();
instance_create(x,y,obj_ijisplat);
Alarm Event for alarm 1:

set variable follow to 1
Step Event:

execute script scr_nanofollow with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_xp2
Sprite: spr_xp2
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_xp
Mask: 

______________________________________________________

Information about object: obj_xp3
Sprite: spr_xp3
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_xp
Mask: 

______________________________________________________

Information about object: obj_xp4
Sprite: spr_xp4
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_xp
Mask: 

______________________________________________________

Information about object: obj_levelup
Sprite: spr_levelup
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

start moving in directions 000000010 with speed set to 0.5
set Alarm 0 to 90
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_pushbox
Sprite: spr_pushbox
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

set Alarm 0 to 1
Alarm Event for alarm 0:

destroy the instance
Collision Event with object obj_log1:

execute code:

if (!place_meeting(x,y,obj_enemy)){
with (other){
global.textid=textid;
if (textid=="text195" && x==10144){
    ultccyc+=1;
    if (ultccyc==2)
        textid="text194";
    }
if (sprite_index==spr_log1)
    global.outline=3;
if (sprite_index==spr_log2)
    global.outline=4;
if (sprite_index==spr_log3)
    global.outline=2;
if (sprite_index==spr_log4)
    global.outline=0;
scr_beginmessage(1);
obj_iji.readinglog=1;
with (obj_messagetext){
if (global.sector==1)
    scr_logs1();
else if (global.sector==2)
    scr_logs2();
else if (global.sector==3)
    scr_logs3();
else if (global.sector==4)
    scr_logs4();
else if (global.sector==5)
    scr_logs5();
else if (global.sector==6)
    scr_logs6();
else if (global.sector==7)
    scr_logs7();
else if (global.sector==8)
    scr_logs8();
else if (global.sector==9)
    scr_logs9();
else if (global.sector==0)
    scr_logsx();
}
}
}
Collision Event with object obj_tele:

execute code:

if (!place_meeting(x,y,obj_enemy)){
obj_iji.cannotpause=1;
obj_iji.cannotpausecyc=4;
scr_sound("glo_teleport");
obj_iji.dest=other.dest;
with (obj_nanoflash)
    instance_destroy();
instance_activate_object(obj_teledest);
obj_sabot.alarm[3]=1;
obj_sabot.alarm[4]=3;
obj_sabot.ignoresmooth=1;
instance_create(x,y,obj_whiteflash2);
with (obj_rocket) instance_destroy();
with (obj_mpfb) instance_destroy();
with (obj_shock) instance_destroy();
with (obj_shockball) instance_destroy();
with (obj_enemyrocket) instance_destroy();
with (obj_enemympfb) instance_destroy();
with (obj_komatompfb) instance_destroy();
with (obj_enemyshock) instance_destroy();
with (obj_enemyshockball) instance_destroy();
with (obj_banana) instance_destroy();
with (obj_detonator) instance_destroy();
with (obj_reflector) instance_destroy();
with (obj_harmlessexplosion) instance_destroy();
with (obj_enemydetonator) instance_destroy();
with (obj_glidesmoke) instance_destroy();
with (obj_rocketexplosion) instance_destroy();
with (obj_enemyrocketexplosion) instance_destroy();
with (obj_mpfbexplosion) instance_destroy();
with (obj_shockexplosion) instance_destroy();
with (obj_enemympfbexplosion) instance_destroy();
with (obj_enemyshockexplosion) instance_destroy();
with (obj_plasma) instance_destroy();
with (obj_pulse) instance_destroy();
with (obj_enemypulse) instance_destroy();
with (obj_smoke) instance_destroy();
with (obj_bigsmoke) instance_destroy();
with (obj_smokepoint) instance_destroy();
with (obj_airspark) instance_destroy();
with (obj_rocketlaunch) instance_destroy();
with (obj_mpfbwake) instance_destroy();
with (obj_mpfbspark) instance_destroy();
with (obj_mpfbspark2) instance_destroy();
with (obj_detonatorspark) instance_destroy();
with (obj_pulsespark) instance_destroy();
with (obj_shockballexplosion) instance_destroy();
with (obj_enemyshockballexplosion) instance_destroy();
with (obj_scrapbrown) instance_destroy();
with (obj_scrapwhite) instance_destroy();
with (obj_shard) instance_destroy();
with (obj_nanospark) instance_destroy();
with (obj_nanospark2) instance_destroy();
}
Collision Event with object obj_terminal:

execute script scr_terminals with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_station
Sprite: spr_block
Solid: false
Visible: true
Depth: 1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.25;
if (sprite_index=spr_station_health && global.healthlevel==10){
    sprite_index=spr_station_blank;
    type=0;
    }
if (sprite_index=spr_station_attack && global.attacklevel==10){
    sprite_index=spr_station_blank;
    type=1;
    }
if (sprite_index=spr_station_assimilate && global.assimilatelevel==10){
    sprite_index=spr_station_blank;
    type=2;
    }
if (sprite_index=spr_station_strength && global.strengthlevel==10){
    sprite_index=spr_station_blank;
    type=3;
    }
if (sprite_index=spr_station_crack && global.cracklevel==10){
    sprite_index=spr_station_blank;
    type=4;
    }
if (sprite_index=spr_station_tasen && global.tasenlevel==10){
    sprite_index=spr_station_blank;
    type=5;
    }
if (sprite_index=spr_station_komato && global.komatolevel==10){
    sprite_index=spr_station_blank;
    type=6;
    }

if (global.specialtrigger16 && sprite_index!=spr_station_health && sprite_index!=spr_readpaper)
    sprite_index=spr_station_blank;
if (global.really && sprite_index!=spr_readpaper)
    sprite_index=spr_station_blank;
if (global.suddendeath && sprite_index==spr_station_health)
    sprite_index=spr_station_blank;
Collision Event with object obj_pushbox:

execute script scr_station with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_ijiflash
Sprite: spr_ijiflash
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

set Alarm 0 to 5
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_ammo
Sprite: spr_block
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_deactivateme
Mask: 

Create Event:

execute code:

if (!place_free(x,y+4) && !place_meeting(x,y+4,obj_meta) && !place_meeting(x,y+4,obj_strikeblock))
    nofall=1;
Step Event:

execute code:

scr_ammofloat2();
scr_ammofall();
Collision Event with object obj_block:

execute code:

move_contact_solid(270,12);
speed=0;
gravity=0;
if (other.sprite_index==spr_block)
    nofall=1;
Draw Event:

execute code:

draw_sprite(sprite_index,floor(image_index),x,y+yadjust);
______________________________________________________

Information about object: obj_shell
Sprite: spr_shell
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
alarm[1]=90;
gravity=1;
gravity_direction=270;
image_speed=random(6)-3;
}
Alarm Event for alarm 1:

destroy the instance
Alarm Event for alarm 2:

execute code:

instance_create(x,y,obj_smoke)
alarm[2]=3+random(5);
Step Event:

execute code:

if (vspeed>12)
    vspeed=12;
scr_outside();
Collision Event with object obj_block:

execute code:

scr_sound("glo_shell");
bounce+=1;
if (bounce>1){
    instance_destroy();
    exit;
    }
move_bounce_solid(0);
speed*=0.5;
image_speed=random(6)-3;
Collision Event with object obj_glass:

execute code:

scr_sound("glo_shell");
bounce+=1;
if (bounce>1){
    instance_destroy();
    exit;
    }
move_bounce_all(0);
speed*=0.5;
image_speed=random(6)-3;
______________________________________________________

Information about object: obj_explosioncenter
Sprite: spr_sabot
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

set Alarm 0 to 2
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_glass
Sprite: spr_glass
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

if (other.shredder){
if (other.hspeed<0)
    scr_glassbreak(abs(other.hspeed),1);
else
    scr_glassbreak(abs(other.hspeed),2);
}
else{
if (global.state==6){
if (other.knockdowntype==1)
    scr_glassbreak(other.velocity,1);
else
    scr_glassbreak(other.velocity,2);
}
}
Collision Event with object obj_bullet:

execute script scr_glassbreak with arguments (2,0,0,0,0)
Collision Event with object obj_tasensoldier:

execute code:

{
//other.hp-=1;
//with (other){
//repeat(3) instance_create(bbox_left+((bbox_right-bbox_left)/2),bbox_top+((bbox_bottom-bbox_top)/2),obj_tasenbloodspecial);
//}
if (other.state==4){
if (other.knockdowntype==1)
scr_glassbreak(other.velocity,1);
else
scr_glassbreak(other.velocity,2);
}
}
Collision Event with object obj_pellet:

execute script scr_glassbreak with arguments (global.attacklevel+1,global.facing+1,0,0,0)
Collision Event with object obj_enemybullet:

execute script scr_glassbreak with arguments (2,0,0,0,0)
Collision Event with object obj_kickbox:

execute script scr_shakescreen with arguments (1,0,0,0,0)
execute script scr_glassbreak with arguments (global.strengthlevel+1,global.facing+1,0,0,0)
Collision Event with object obj_rocketexplosion:

execute code:

{
if (other.dud==0){
force=11-(distance_to_object(obj_explosioncenter)/10);
if (bbox_left+((bbox_right-bbox_left)/2) < other.bbox_left+((other.bbox_right-other.bbox_left)/2))
scr_glassbreak(force,1);
else
scr_glassbreak(force,2);
}
}
Collision Event with object obj_mpfbexplosion:

execute code:

{
if (other.dud==0){
force=22-(distance_to_object(obj_explosioncenter)/10);
if (bbox_left+((bbox_right-bbox_left)/2) < other.bbox_left+((other.bbox_right-other.bbox_left)/2))
scr_glassbreak(force,1);
else
scr_glassbreak(force,2);
}
}
Collision Event with object obj_tasenscout:

execute code:

{
//other.hp-=1;
//with (other){
//repeat(3) instance_create(bbox_left+((bbox_right-bbox_left)/2),bbox_top+((bbox_bottom-bbox_top)/2),obj_tasenbloodspecial);
//}
if (other.state==4){
if (other.knockdowntype==1)
scr_glassbreak(other.velocity,1);
else
scr_glassbreak(other.velocity,2);
}
}
Collision Event with object obj_pulse:

execute script scr_glassbreak with arguments (3,0,0,0,0)
Collision Event with object obj_enemyrocketexplosion:

execute code:

{
if (other.dud==0){
force=11-(distance_to_object(obj_explosioncenter)/10);
if (bbox_left+((bbox_right-bbox_left)/2) < other.bbox_left+((other.bbox_right-other.bbox_left)/2))
scr_glassbreak(force,1);
else
scr_glassbreak(force,2);
}
}
Collision Event with object obj_shockexplosion:

execute code:

{
if (other.dud==0){
force=13-(distance_to_object(obj_explosioncenter)/10);
if (bbox_left+((bbox_right-bbox_left)/2) < other.bbox_left+((other.bbox_right-other.bbox_left)/2))
scr_glassbreak(force,1);
else
scr_glassbreak(force,2);
}
}
Collision Event with object obj_shockballexplosion:

execute script scr_glassbreak with arguments (5,0,0,0,0)
Collision Event with object obj_cfistrace:

execute script scr_glassbreak with arguments (8,0,0,0,0)
Collision Event with object obj_tasencommander:

execute code:

{
//other.hp-=1;
//with (other){
//repeat(3) instance_create(bbox_left+((bbox_right-bbox_left)/2),bbox_top+((bbox_bottom-bbox_top)/2),obj_tasenbloodspecial);
//}
if (other.state==4){
if (other.knockdowntype==1)
scr_glassbreak(other.velocity,1);
else
scr_glassbreak(other.velocity,2);
}
}
Collision Event with object obj_swipe:

execute code:

{
if (other.facing==0)
scr_glassbreak(15,1);
else
scr_glassbreak(15,2);
}
Collision Event with object obj_kickbox_elite:

execute code:

{
if (other.facing==0)
scr_glassbreak(15,1);
else
scr_glassbreak(15,2);
}
Collision Event with object obj_enemympfbexplosion:

execute code:

{
if (other.dud==0){
force=22-(distance_to_object(obj_explosioncenter)/10);
if (bbox_left+((bbox_right-bbox_left)/2) < other.bbox_left+((other.bbox_right-other.bbox_left)/2))
scr_glassbreak(force,1);
else
scr_glassbreak(force,2);
}
}
Collision Event with object obj_thor:

execute script scr_glassbreak with arguments (15,0,0,0,0)
Collision Event with object obj_turret:

execute code:

if (other.hspeed<0)
scr_glassbreak(abs(other.hspeed),1);
else
scr_glassbreak(abs(other.hspeed),2);
Collision Event with object obj_enemyshockballexplosion:

execute script scr_glassbreak with arguments (5,0,0,0,0)
Collision Event with object obj_enemyshockexplosion:

execute code:

{
if (other.dud==0){
force=13-(distance_to_object(obj_explosioncenter)/10);
if (bbox_left+((bbox_right-bbox_left)/2) < other.bbox_left+((other.bbox_right-other.bbox_left)/2))
scr_glassbreak(force,1);
else
scr_glassbreak(force,2);
}
}
Collision Event with object obj_komatotrooper:

execute code:

{
//other.hp-=1;
//with (other){
//repeat(3) instance_create(bbox_left+((bbox_right-bbox_left)/2),bbox_top+((bbox_bottom-bbox_top)/2),obj_komatobloodspecial);
//}
if (other.state==4){
if (other.knockdowntype==1)
scr_glassbreak(other.velocity,1);
else
scr_glassbreak(other.velocity,2);
}
}
Collision Event with object obj_enemypulse:

execute script scr_glassbreak with arguments (3,0,0,0,0)
Collision Event with object obj_komatoberserker:

execute code:

{
//other.hp-=1;
//with (other){
//repeat(3) instance_create(bbox_left+((bbox_right-bbox_left)/2),bbox_top+((bbox_bottom-bbox_top)/2),obj_komatobloodspecial);
//}
if (other.state==4){
if (other.knockdowntype==1)
scr_glassbreak(other.velocity,1);
else
scr_glassbreak(other.velocity,2);
}
}
Collision Event with object obj_komatobeast:

execute code:

scr_glassbreak(other.velocity,other.facing+1);

Collision Event with object obj_impulseexplosion:

execute code:

{
if (other.dud==0){
force=11-(distance_to_object(obj_explosioncenter)/10);
if (bbox_left+((bbox_right-bbox_left)/2) < other.bbox_left+((other.bbox_right-other.bbox_left)/2))
scr_glassbreak(force,1);
else
scr_glassbreak(force,2);
}
}
______________________________________________________

Information about object: obj_shard
Sprite: spr_shard1
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
alarm[1]=90;
gravity=0.8;
gravity_direction=270;
image_speed=random(4)-2;
image_index=floor(random(4));
rand=random(3);
if (rand>1)
    sprite_index=spr_shard2;
if (rand>2)
    sprite_index=spr_shard3;
alarm[0]=random(40)+10;
}
Alarm Event for alarm 0:

execute code:

{
alarm[0]=random(40)+10;
instance_create(x-4+random(8),y-4+random(8),obj_glassspark);
}
Alarm Event for alarm 1:

destroy the instance
Step Event:

execute code:

if (speed>20 && !nolimit)
    speed=20;
scr_outside();
Collision Event with object obj_block:

execute code:

temprand=random(1)
if (temprand>0.6)
    scr_sound("glo_shard");
bounce+=1;
if (bounce>1){
    instance_destroy();
    exit;
    }
move_bounce_solid(0);
speed*=0.5;
Collision Event with object obj_glass:

execute code:

temprand=random(1)
if (temprand>0.6)
    scr_sound("glo_shard");
bounce+=1;
if (bounce>1){
    instance_destroy();
    exit;
    }
move_bounce_all(0);
speed*=0.5;
______________________________________________________

Information about object: obj_glassspark
Sprite: spr_glassspark
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

set Alarm 0 to 4
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_weaponpickup
Sprite: spr_block
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_deactivateme
Mask: 

Create Event:

execute code:

image_single=0;
if (!place_free(x,y+4) && !place_meeting(x,y+4,obj_meta))
    nofall=1;
Alarm Event for alarm 0:

set variable image_single to 0
Step Event:

execute code:

scr_ammofloat2();
scr_ammofall();
Collision Event with object obj_block:

execute code:

move_contact_solid(270,12);
speed=0;
gravity=0;
if (other.sprite_index==spr_block)
    nofall=1;
Draw Event:

execute code:

draw_sprite(sprite_index,floor(image_single),x,y+yadjust);
______________________________________________________

Information about object: obj_meta
Sprite: spr_block
Solid: true
Visible: true
Depth: 1
Persistent: false
Parent: obj_block
Mask: 

Create Event:

execute code:

ismeta=1;
if (sprite_index==spr_crackbox){
    hp=50;
    image_speed=0.333;
    if (security==0)
        security=1;
    }
if (sprite_index==spr_barrel)
    hp=15;
if (sprite_index==spr_leetbox)
    hp=4;
if (sprite_index==spr_screen)
    hp=4;
if (sprite_index==spr_lamp)
    hp=1;
if (sprite_index==spr_crate1)
    hp=20;
if (sprite_index==spr_crate2)
    hp=50;
if (sprite_index==spr_locker)
    hp=10;
if (sprite_index==spr_glass2)
    hp=1;
if (sprite_index==spr_glass2short)
    hp=1;
Step Event:

execute code:

if (place_meeting(x-12,y,obj_cfistrace) || place_meeting(x+12,y,obj_cfistrace) || place_meeting(x-12,y,obj_enemycfistrace) || place_meeting(x+12,y,obj_enemycfistrace))
    script_execute(scr_metabreak,15);
if (hp<1)
    script_execute(scr_metabreak,8);

//Block is meta
if (place_meeting(x,y-obj_iji.vspeed-4,obj_iji)){
if (obj_iji.shredder)
    script_execute(scr_metabreak,abs(obj_iji.hspeed));
else if (global.state==6 || sprite_index==spr_leetbox || sprite_index==spr_screen || (keyboard_check(vk_down) && global.state==2))
        script_execute(scr_metabreak,2);
else if (global.state==2 && (sprite_index==spr_leetbox || sprite_index==spr_screen || sprite_index==spr_lamp || sprite_index==spr_glass2 || sprite_index==spr_glass2short)){
        script_execute(scr_metabreak,3);
        if (global.sector==1 && sprite_index==spr_lamp)
            obj_iji.hitlamps+=1;
        }
    }

//Meet Shredder, Turret & Beast
if (place_meeting(x,y-8,obj_emptyshredder) || place_meeting(x,y-8,obj_tasenshredder) || place_meeting(x,y-8,obj_turret) || place_meeting(x-8,y-25,obj_komatobeast) || place_meeting(x+8,y-25,obj_komatobeast) || place_meeting(x-8,y,obj_komatoannihilator) || place_meeting(x+8,y,obj_komatoannihilator))
    script_execute(scr_metabreak,6);
Collision Event with object obj_kickbox:

execute code:

if (sprite_index==spr_crackbox){
    global.erasetop=0;
    global.topmessage="Press "+chr(global.usekey)+" to crack this box";
    scr_sound("glo_kick")
    scr_shakescreen(1);
    global.ignorestation=90;
    }
else
    scr_metabreak(global.strengthlevel+2,global.facing+1);
Collision Event with object obj_rocketexplosion:

execute code:

{
if (other.dud==0){
    force=11-(distance_to_object(obj_explosioncenter)/10)+3;
    if ((bbox_left+(bbox_right-bbox_left)/2) < (other.bbox_left + ((other.bbox_right-other.bbox_left)/2)))
        script_execute(scr_metabreak,force,1);
    else
        script_execute(scr_metabreak,force,2);
    }
}
Collision Event with object obj_mpfbexplosion:

execute code:

{
if (other.dud==0){
    force=22-(distance_to_object(obj_explosioncenter)/10)+3;
    if ((bbox_left+(bbox_right-bbox_left)/2) < (other.bbox_left + ((other.bbox_right-other.bbox_left)/2)))
        script_execute(scr_metabreak,force,1);
    else
        script_execute(scr_metabreak,force,2);
    }
}
Collision Event with object obj_pulse:

execute code:

if (!other.linker)
    hp-=1;
with (other){
    scr_pulseexplosion(1);
    instance_destroy();
    }
if (other.linker && sprite_index==spr_crackbox){
    if (global.topmessage=="0"){
        global.erasetop=0;
        global.topmessage="Pulse link could not be established";
        }
    }
else if (other.linker && sprite_index==spr_leetbox){
    if (global.topmessage=="0"){
        global.erasetop=0;
        global.topmessage="Incompatible technology for pulse linking";
        }
    }

Collision Event with object obj_enemyrocketexplosion:

execute code:

{
if (other.dud==0){
    force=11-(distance_to_object(obj_explosioncenter)/10)+3;
    if ((bbox_left+(bbox_right-bbox_left)/2) < (other.bbox_left + ((other.bbox_right-other.bbox_left)/2)))
        script_execute(scr_metabreak,force,1);
    else
        script_execute(scr_metabreak,force,2);
    }
}
Collision Event with object obj_shockexplosion:

execute code:

{
if (other.dud==0){
    force=13-(distance_to_object(obj_explosioncenter)/10)+3;
    if ((bbox_left+(bbox_right-bbox_left)/2) < (other.bbox_left + ((other.bbox_right-other.bbox_left)/2)))
        script_execute(scr_metabreak,force,1);
    else
        script_execute(scr_metabreak,force,2);
    }
}
Collision Event with object obj_shockballexplosion:

execute code:

{
if (other.dud==0)
    hp-=6;
}
Collision Event with object obj_swipe:

execute code:

{
if (other.facing==0)
    script_execute(scr_metabreak,16,1);
else
    script_execute(scr_metabreak,16,2);
}
Collision Event with object obj_kickbox_elite:

execute code:

{
if (other.facing==0)
    script_execute(scr_metabreak,10,1);
else
    script_execute(scr_metabreak,10,2);
}
Collision Event with object obj_enemympfbexplosion:

execute code:

{
if (other.dud==0){
    force=22-(distance_to_object(obj_explosioncenter)/10)+3;
    if ((bbox_left+(bbox_right-bbox_left)/2) < (other.bbox_left + ((other.bbox_right-other.bbox_left)/2)))
        script_execute(scr_metabreak,force,1);
    else
        script_execute(scr_metabreak,force,2);
    }
}
Collision Event with object obj_thor:

execute script scr_metabreak with arguments (15,0,0,0,0)
Collision Event with object obj_bullethit:

execute code:

{
if (other.image_index==0)
hp-=1;
}
Collision Event with object obj_pellethit:

execute code:

{
if (other.image_index==0){
if (hp<5)
    script_execute(scr_metabreak,global.strengthlevel+4,global.facing+1);
else
    hp-=1;
    }
}
Collision Event with object obj_enemyshockballexplosion:

execute code:

{
if (other.dud==0)
    hp-=6;
}
Collision Event with object obj_enemyshockexplosion:

execute code:

{
if (other.dud==0){
    force=13-(distance_to_object(obj_explosioncenter)/10)+3;
    if ((bbox_left+(bbox_right-bbox_left)/2) < (other.bbox_left + ((other.bbox_right-other.bbox_left)/2)))
        script_execute(scr_metabreak,force,1);
    else
        script_execute(scr_metabreak,force,2);
    }
}
Collision Event with object obj_enemypulse:

execute code:

hp-=1;
with (other){
    scr_pulseexplosion(1);
    instance_destroy();
}
Collision Event with object obj_enemydetonator:

execute code:

if (other.dud==0){
    if ((bbox_left+(bbox_right-bbox_left)/2) < (other.bbox_left + ((other.bbox_right-other.bbox_left)/2)))
        script_execute(scr_metabreak,10,1);
    else
        script_execute(scr_metabreak,10,2);
    }
Collision Event with object obj_assassin_uppercut:

execute code:

{
if (other.facing==0)
    script_execute(scr_metabreak,6,1);
else
    script_execute(scr_metabreak,6,2);
}
Collision Event with object obj_assassin_backstab:

execute code:

{
if (other.facing==0)
    script_execute(scr_metabreak,6,1);
else
    script_execute(scr_metabreak,6,2);
}
Collision Event with object obj_assassin_upslash:

execute code:

script_execute(scr_metabreak,6,0);

Collision Event with object obj_impulseexplosion:

execute code:

{
if (other.dud==0){
    force=11-(distance_to_object(obj_explosioncenter)/10)+3;
    if ((bbox_left+(bbox_right-bbox_left)/2) < (other.bbox_left + ((other.bbox_right-other.bbox_left)/2)))
        script_execute(scr_metabreak,force,1);
    else
        script_execute(scr_metabreak,force,2);
    }
}
______________________________________________________

Information about object: obj_scrapwhite
Sprite: spr_scrapwhite1
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
alarm[1]=90;
gravity=0.8;
gravity_direction=270;
image_speed=random(4)-2;
image_index=floor(random(4));
rand=random(3);
if (rand>1)
    sprite_index=spr_scrapwhite2;
if (rand>2)
    sprite_index=spr_scrapwhite3;
}
Alarm Event for alarm 1:

destroy the instance
Alarm Event for alarm 2:

execute code:

if (!global.specialbake){
alarm[2]=4;
instance_create(x,y,obj_smoke);
}
Step Event:

execute code:

if (speed>20 && !nolimit)
    speed=20;
scr_outside();
Collision Event with object obj_block:

execute code:

temprand=random(1)
if (temprand>0.8)
    scr_sound("glo_debris");
bounce+=1;
if (bounce>1){
    instance_destroy();
    if (!global.specialbake)
        instance_create(x,y,obj_smoke);
    exit;
    }
move_bounce_solid(0);
speed*=0.5;
Collision Event with object obj_glass:

execute code:

temprand=random(1)
if (temprand>0.8)
    scr_sound("glo_debris");
bounce+=1;
if (bounce>1){
    instance_destroy();
    instance_create(x,y,obj_smoke);
    exit;
    }
move_bounce_all(0);
speed*=0.5;
______________________________________________________

Information about object: obj_scrapbrown
Sprite: spr_scrapbrown1
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
alarm[1]=90;
gravity=0.8;
gravity_direction=270;
image_speed=random(4)-2;
image_index=floor(random(4));
rand=random(3);
if (rand>1)
    sprite_index=spr_scrapbrown2;
if (rand>2)
    sprite_index=spr_scrapbrown3;
}
Alarm Event for alarm 1:

destroy the instance
Alarm Event for alarm 2:

execute code:

if (!global.specialbake){
alarm[2]=3;
instance_create(x,y,obj_smoke);
}
Step Event:

execute code:

if (speed>20 && !nolimit)
    speed=20;
scr_outside();
Collision Event with object obj_block:

execute code:

temprand=random(1)
if (temprand>0.8)
    scr_sound("glo_debris");
bounce+=1;
if (bounce>1){
    instance_destroy();
    if (!global.specialbake)
        instance_create(x,y,obj_smoke);
    exit;
    }
move_bounce_solid(0);
speed*=0.5;
Collision Event with object obj_glass:

execute code:

temprand=random(1)
if (temprand>0.8)
    scr_sound("glo_debris");
bounce+=1;
if (bounce>1){
    instance_destroy();
    instance_create(x,y,obj_smoke);
    exit;
    }
move_bounce_all(0);
speed*=0.5;
______________________________________________________

Information about object: obj_crate1
Sprite: spr_crate1
Solid: true
Visible: true
Depth: 3
Persistent: false
Parent: obj_meta
Mask: 

______________________________________________________

Information about object: obj_leetbox
Sprite: spr_leetbox
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: obj_meta
Mask: 

______________________________________________________

Information about object: obj_screen
Sprite: spr_screen
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: obj_meta
Mask: 

______________________________________________________

Information about object: obj_lamp
Sprite: spr_lamp
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: obj_meta
Mask: 

______________________________________________________

Information about object: obj_crate2
Sprite: spr_crate2
Solid: true
Visible: true
Depth: 3
Persistent: false
Parent: obj_meta
Mask: 

______________________________________________________

Information about object: obj_pickupmach
Sprite: spr_pickupmach
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_weaponpickup
Mask: 

______________________________________________________

Information about object: obj_pickuprokt
Sprite: spr_pickuprokt
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_weaponpickup
Mask: 

______________________________________________________

Information about object: obj_pickupmpfb
Sprite: spr_pickupmpfb
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_weaponpickup
Mask: 

______________________________________________________

Information about object: obj_pickupreso
Sprite: spr_pickupreso
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_weaponpickup
Mask: 

______________________________________________________

Information about object: obj_pickuppuls
Sprite: spr_pickuppuls
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_weaponpickup
Mask: 

______________________________________________________

Information about object: obj_pickupshok
Sprite: spr_pickupshok
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_weaponpickup
Mask: 

______________________________________________________

Information about object: obj_pickupcfis
Sprite: spr_pickupcfis
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_weaponpickup
Mask: 

______________________________________________________

Information about object: obj_xp
Sprite: spr_block
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_deactivateme
Mask: 

Create Event:

execute code:

image_speed=0.5;
if (!place_free(x,y+4) && !place_meeting(x,y+4,obj_meta) && !place_meeting(x,y+4,obj_strikeblock))
    nofall=1;
Step Event:

execute code:

scr_ammofall();

Collision Event with object obj_block:

execute code:

move_contact_solid(270,12);
speed=0;
gravity=0;
if (other.sprite_index==spr_block)
    nofall=1;
______________________________________________________

Information about object: obj_station_health
Sprite: spr_station_health
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: obj_station
Mask: 

______________________________________________________

Information about object: obj_station_attack
Sprite: spr_station_attack
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: obj_station
Mask: 

______________________________________________________

Information about object: obj_station_assimilate
Sprite: spr_station_assimilate
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: obj_station
Mask: 

______________________________________________________

Information about object: obj_station_strength
Sprite: spr_station_strength
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: obj_station
Mask: 

______________________________________________________

Information about object: obj_station_crack
Sprite: spr_station_crack
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: obj_station
Mask: 

______________________________________________________

Information about object: obj_station_tasen
Sprite: spr_station_tasen
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: obj_station
Mask: 

______________________________________________________

Information about object: obj_station_komato
Sprite: spr_station_komato
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: obj_station
Mask: 

______________________________________________________

Information about object: obj_jumpupgrade
Sprite: spr_jumpupgrade
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: 
Mask: 

Step Event:

execute script scr_ammofloat with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_armorupgrade
Sprite: spr_armorupgrade
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=3;
Alarm Event for alarm 0:

execute code:

if (global.armorlevel==3)
    instance_destroy();
Step Event:

execute script scr_ammofloat with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_ammo1
Sprite: spr_ammo1
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_ammo
Mask: spr_block

______________________________________________________

Information about object: obj_ammo2
Sprite: spr_ammo2
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_ammo
Mask: spr_block

______________________________________________________

Information about object: obj_ammo3
Sprite: spr_ammo3
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_ammo
Mask: spr_block

______________________________________________________

Information about object: obj_ammo4
Sprite: spr_ammo4
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_ammo
Mask: spr_block

______________________________________________________

Information about object: obj_ammo5
Sprite: spr_ammo5
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_ammo
Mask: spr_block

______________________________________________________

Information about object: obj_ammo6
Sprite: spr_ammo6
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_ammo
Mask: spr_block

______________________________________________________

Information about object: obj_ammo7
Sprite: spr_ammo7
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_ammo
Mask: spr_block

______________________________________________________

Information about object: obj_ammo8
Sprite: spr_ammo8
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_ammo
Mask: spr_block

______________________________________________________

Information about object: obj_ammo9
Sprite: spr_ammo9
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_ammo
Mask: spr_block

______________________________________________________

Information about object: obj_ammo10
Sprite: spr_ammo10
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_ammo
Mask: spr_block

______________________________________________________

Information about object: obj_ammo11
Sprite: spr_ammo11
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_ammo
Mask: spr_block

______________________________________________________

Information about object: obj_ammo12
Sprite: spr_ammo12
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_ammo
Mask: spr_block

______________________________________________________

Information about object: obj_glass2
Sprite: spr_glass2
Solid: true
Visible: true
Depth: 3
Persistent: false
Parent: obj_meta
Mask: 

______________________________________________________

Information about object: obj_locker
Sprite: spr_locker
Solid: true
Visible: true
Depth: 3
Persistent: false
Parent: obj_meta
Mask: 

______________________________________________________

Information about object: obj_nuke
Sprite: spr_sabot
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_activateme
Mask: 

Create Event:

set variable cycle to 0
Step Event:

execute code:

repeat(7) instance_create(obj_sabot.x-100+random(1000),obj_sabot.y-100+random(800),obj_mpfbspark);
Draw Event:

execute code:

if (proxima)
    scr_nukedraw(1);
else
    scr_nukedraw(0);
______________________________________________________

Information about object: obj_harmlessexplosion
Sprite: spr_mpfbexplosion
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
alarm[0]=28;
image_speed=0.25;
alarm[1]=1;
alarm[2]=2;
dud=1;
}
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 1:

execute code:

dud=0;
Alarm Event for alarm 2:

execute code:

dud=1;
______________________________________________________

Information about object: obj_glass2short
Sprite: spr_glass2short
Solid: true
Visible: true
Depth: 3
Persistent: false
Parent: obj_meta
Mask: 

______________________________________________________

Information about object: obj_face
Sprite: spr_ijistance
Solid: false
Visible: true
Depth: 6
Persistent: false
Parent: 
Mask: 

Create Event:

COMMENT: IS MAIN SABOT
execute script scr_facecreate with arguments (0,0,0,0,0)
Alarm Event for alarm 0:

execute code:

scr_mainload();
Alarm Event for alarm 1:

execute code:

//New game / SSWARP
if (!global.sswarp || global.sector==1)
    global.specialtrigger8=1;
scr_init();
scr_readsum();
if (wrongsum){
    global.kickkey=ord("Z");
    global.firekey=ord("X");
    global.usekey=ord("C");
    global.weap5key=ord("Q");
    global.weap6key=ord("W");
    global.weap7key=ord("E");
    global.weap8key=ord("R");
    global.noshake=0;
    global.detaillevel=0;
    global.specialbake=0;
    global.nosound=0;
    global.nomusic=0;
    global.noitemtext=0;
    global.hidetime=1;
    }
else
    scr_save(0);
scr_setmaps();
if (!global.sswarp){
    if (tier=="new")
        global.difficulty=selected-1;
    else
        global.difficulty=2;
    }
else
    global.difficulty=0;
if (!global.sswarp)
    (instance_create(0,0,obj_loading)).destination="cut";
else{ //SSWARP
    tempid=instance_create(0,0,obj_loading);
    if (warp==1){
        tempid.destination="sector1";
        global.sector=1;
        }
    if (warp==2){
        tempid.destination="sector2";
        global.sector=2;
        }
    if (warp==3){
        tempid.destination="sector3";
        global.sector=3;
        }
    if (warp==4){
        tempid.destination="sector4";
        global.sector=4;
        }
    if (warp==5){
        tempid.destination="sector5";
        global.sector=5;
        }
    if (warp==6){
        tempid.destination="sector6";
        global.sector=6;
        }
    if (warp==7){
        tempid.destination="sector7";
        global.sector=7;
        }
    if (warp==8){
        tempid.destination="sector8";
        global.sector=8;
        }
    if (warp==9){
        tempid.destination="sector9";
        global.sector=9;
        }
    if (warp==10){
        tempid.destination="sectorx";
        global.sector=0;
        }
    if (warp==0){
        tempid.destination="sectorz";
        global.sector=1;
        }
    }
global.cut=1;
instance_create(0,0,obj_loadingback);

Alarm Event for alarm 2:

execute code:

//Load game
scr_save(0);
scr_setmaps();
scr_init();
scr_readsum();
if (wrongsum)
    game_restart();
else
    scr_load(selected-1);
Alarm Event for alarm 3:

execute script scr_mainsoundplay with arguments (0,0,0,0,0)
Alarm Event for alarm 4:

execute code:

alarm[4]=512;
if (seczmtrig<5)
    scr_seczmusicchange();
else
    seczmusic=0;
Step Event:

execute script scr_controlmapping with arguments (0,0,0,0,0)
execute script scr_mainmenu with arguments (0,0,0,0,0)
Draw Event:

execute script scr_facedraw with arguments (0,0,0,0,0)
Key Press Event for Key:

execute code:

if (menu==1 && !ignoreall && instance_number(obj_mainfullcover)==0 && tier="main"){
    if (code==0){
        if (keyboard_check(vk_up))
            code=1;
        else
            code=0;
        }
    else if (code==1){
        if (keyboard_check(vk_up))
            code=2;
        else
            code=0;
        }
    else if (code==2){
        if (keyboard_check(vk_down))
            code=3;
        else
            code=0;
        }
    else if (code==3){
        if (keyboard_check(vk_down))
            code=4;
        else
            code=0;
        }
    else if (code==4){
        if (keyboard_check(vk_left))
            code=5;
        else
            code=0;
        }
    else if (code==5){
        if (keyboard_check(vk_right))
            code=6;
        else
            code=0;
        }
    else if (code==6){
        if (keyboard_check(vk_left))
            code=7;
        else
            code=0;
        }
    else if (code==7){
        if (keyboard_check(vk_right)){
            code=10;
            drawkonami=1;
            ignoreall=1;
            konamitext="Version 1.7 was tough to make, but also a lot of fun. The conversion to GM7.0 took about two weeks, and I finally added the stuff I wanted for 1.6. Enjoy!";
            }
        else
            code=0;
        }
    }

if (menu==1 && !ignoreall && instance_number(obj_mainfullcover)==0 && tier="main"){
    if (hcode==0){
        if (keyboard_check(ord("H")))
            hcode=1;
        else
            hcode=0;
        }
    else if (hcode==1){
        if (keyboard_check(ord("O")))
            hcode=2;
        else
            hcode=0;
        }
    else if (hcode==2){
        if (keyboard_check(ord("R")))
            hcode=3;
        else
            hcode=0;
        }
    else if (hcode==3){
        if (keyboard_check(ord("S")))
            hcode=4;
        else
            hcode=0;
        }
    else if (hcode==4){
        if (keyboard_check(ord("E")))
            hcode=5;
        else
            hcode=0;
        }
    else if (hcode==5){
        if (keyboard_check(ord("G")))
            hcode=6;
        else
            hcode=0;
        }
    else if (hcode==6){
        if (keyboard_check(ord("U")))
            hcode=7;
        else
            hcode=0;
        }
    else if (hcode==7){
        if (keyboard_check(ord("N"))){
            hcode=10;
            ignoreall=1;
            with (obj_face)
                scr_stopmusic();
            instance_create(0,0,obj_horsebegin);
            global.ignoreall=1;
            }
        else
            hcode=0;
        }
    }

if (menu==1 && !ignoreall && instance_number(obj_mainfullcover)==0 && tier="main"){
    if (dcode==0){
        if (keyboard_check(ord("D")))
            dcode=1;
        else
            dcode=0;
        }
    else if (dcode==1){
        if (keyboard_check(ord("E")))
            dcode=2;
        else
            dcode=0;
        }
    else if (dcode==2){
        if (keyboard_check(ord("V")))
            dcode=3;
        else
            dcode=0;
        }
    else if (dcode==3){
        if (keyboard_check(ord("A")))
            dcode=4;
        else
            dcode=0;
        }
    else if (dcode==4){
        if (keyboard_check(ord("S")))
            dcode=5;
        else
            dcode=0;
        }
    else if (dcode==5){
        if (keyboard_check(ord("T")))
            dcode=6;
        else
            dcode=0;
        }
    else if (dcode==6){
        if (keyboard_check(ord("A")))
            dcode=7;
        else
            dcode=0;
        }
    else if (dcode==7){
        if (keyboard_check(ord("T")))
            dcode=8;
        else
            dcode=0;
        }
    else if (dcode==8){
        if (keyboard_check(ord("E"))){
            dcode=0;
            dcodego=0;
            if (global.extras1 && global.extras2 && global.extras3 && global.extras4 && global.extras5 && global.extras6 && global.extras7 && global.extras8 && global.poster1 && global.poster2 && global.poster3 && global.poster4 && global.poster5 && global.poster6 && global.poster7 && global.poster8 && global.poster9 && global.poster10){
                if (global.sds1 && global.sds2 && global.sds3 && global.sds4 && global.sds5 && global.sds6 && global.sds7 && global.sds8 && global.sds9 && global.sds10){
                    if (global.maxribbons==10 && global.hiddenskill1 && global.hiddenskill2 && global.hiddenskill3){
                        dcodego=1;
                        }
                    }
                }
            if (dcodego){
                selected=8;
                scr_menuselection();
                }
            else{
                drawkonami=1;
                ignoreall=1;
                konamitext="Not so fast! You must first achieve everything on the Records screen except beating Remar Games' speedrun times!";
                }
            }
        else
            dcode=0;
        }
    }

if (menu==1 && !ignoreall && instance_number(obj_mainfullcover)==0 && tier="main"){
    if (scode==0){
        if (keyboard_check(ord("A")))
            scode=1;
        else
            scode=0;
        }
    else if (scode==1){
        if (keyboard_check(ord("R")))
            scode=2;
        else
            scode=0;
        }
    else if (scode==2){
        if (keyboard_check(ord("E")))
            scode=3;
        else
            scode=0;
        }
    else if (scode==3){
        if (keyboard_check(ord("Y")))
            scode=4;
        else
            scode=0;
        }
    else if (scode==4){
        if (keyboard_check(ord("O")))
            scode=5;
        else
            scode=0;
        }
    else if (scode==5){
        if (keyboard_check(ord("U")))
            scode=6;
        else
            scode=0;
        }
    else if (scode==6){
        if (keyboard_check(ord("S")))
            scode=7;
        else
            scode=0;
        }
    else if (scode==7){
        if (keyboard_check(ord("E")))
            scode=8;
        else
            scode=0;
        }
    else if (scode==8){
        if (keyboard_check(ord("R")))
            scode=9;
        else
            scode=0;
        }
    else if (scode==9){
        if (keyboard_check(ord("I")))
            scode=10;
        else
            scode=0;
        }
    else if (scode==10){
        if (keyboard_check(ord("O")))
            scode=11;
        else
            scode=0;
        }
    else if (scode==11){
        if (keyboard_check(ord("U")))
            scode=12;
        else
            scode=0;
        }
    else if (scode==12){
        if (keyboard_check(ord("S"))){
            scode=0;
            scodego=0;
            if (global.extras1 && global.extras2 && global.extras3 && global.extras4 && global.extras5 && global.extras6 && global.extras7 && global.extras8 && global.poster1 && global.poster2 && global.poster3 && global.poster4 && global.poster5 && global.poster6 && global.poster7 && global.poster8 && global.poster9 && global.poster10){
                if (global.sds1 && global.sds2 && global.sds3 && global.sds4 && global.sds5 && global.sds6 && global.sds7 && global.sds8 && global.sds9 && global.sds10){
                    if (global.maxribbons==10 && global.hiddenskill1 && global.hiddenskill2 && global.hiddenskill3){
                        scodego=1;
                        }
                    }
                }
            if (scodego){
                selected=9;
                scr_menuselection();
                }
            else{
                drawkonami=1;
                ignoreall=1;
                konamitext="Not so fast! You must first achieve everything on the Records screen except beating Remar Games' speedrun times!";
                }
            }
        else
            scode=0;
        }
    }

Key Press Event for Key:

execute code:

if (!ignoreall)
scr_menuselection();
Key Press Event for Key:

execute code:

if (instance_number(obj_herosabot)==1){
    repeat(10)
        sound_stop_all();
    scr_music("mus_mainmenu");
    ignoreall=0;
    with (obj_herosabot)
        instance_destroy();
    scr_herodestroy();
    }
else
    scr_mainmenuescape();
Key Press Event for Key:

execute code:

if (!ignoreall && tier!="wait" && tier!="wait2" && tier!="wait3"){
if (menu){
    if (tier="extras3" && global.extras1 && selected==3 && soundtested){
        repeat(10)
            sound_stop_all();
        scr_stopmusic();
        seczmusic=0;
        }
    selected=selections;
    instance_create(obj_marker.x,obj_marker.y,obj_fade);
    scr_sound("glo_menumove");
    }
}
Key Press Event for Key:

execute code:

if (!ignoreall && tier!="wait" && tier!="wait2" && tier!="wait3"){
if (menu){
    if (tier="extras3" && global.extras1 && selected==3 && soundtested){
        repeat(10)
            sound_stop_all();
        scr_stopmusic();
        seczmusic=0;
        }
    selected=1;
    instance_create(obj_marker.x,obj_marker.y,obj_fade);
    scr_sound("glo_menumove");
    }
}
Key Press Event for Key:

execute code:

if (!ignoreall && tier!="wait" && tier!="wait2" && tier!="wait3"){
if (menu){
    //OPTIONS
    if(tier="options"){
        if(selected==2){
            if(global.noshake){
                global.noshake=0;
                scr_sound("glo_menuselect");
                }
            else{
                global.noshake=1;
                scr_sound("glo_menuback");
                }
            }
        else if(selected==3){
            if(global.novoice){
                global.novoice=0;
                scr_sound("glo_menuselect");
                }
            else{
                global.novoice=1;
                scr_sound("glo_menuback");
                }
            }
        else if(selected==4){
            if(global.nosound){
                global.nosound=0;
                scr_sound("glo_menuselect");
                }
            else{
                global.nosound=1;
                scr_sound("glo_menuback");
                }
            }
        else if(selected==5){
            if(global.nomusic){
                global.nomusic=0;
                scr_sound("glo_menuselect");
                //Play currently playing music
                scr_music("mus_mainmenu");
                soundtested=0;
                }
            else{
                global.nomusic=1;
                scr_sound("glo_menuback");
                with (obj_face)
                    scr_stopmusic();
                }
            }
        else if(selected==6){
            if(global.hidetime){
                global.hidetime=0;
                scr_sound("glo_menuselect");
                }
            else{
                global.hidetime=1;
                scr_sound("glo_menuback");
                }
            }
        else if (selected==7){
            if(global.nogamma){
                global.nogamma=0;
                scr_sound("glo_menuselect");
                }
            else{
                global.nogamma=1;
                scr_sound("glo_menuback");
                nocovers=1;
                waittype=4;
                scr_menufulltexts();
                instance_create(0,0,obj_mainfullcover);
                tier="wait";
                }
            }
        }
    //SINGLE SECTOR WARP
    if (tier=="extras" && selected==3 && global.extras1){
        scr_sound("glo_menumove");
        if ((warp==0 && global.extras5) || (warp==1 && !global.extras5))
            warp=10;
        else
            warp-=1;
        }
    //ALTERNATE OUTFIT
    if (tier=="extras" && selected==5 && global.extras3){
        scr_sound("glo_menumove");
        if (global.outfit==0)
            global.outfit=1;
        else
            global.outfit=0;
        }
    //WEAPON INFORMATION
    if (tier=="extras2" && selected==2 && global.extras4){
        scr_sound("glo_menumove");
        if (weaponinfo==1)
            weaponinfo=26;
        else
            weaponinfo-=1;
        }
    //ENEMY INFORMATION
    if (tier=="extras2" && selected==3 && global.extras6){
        scr_sound("glo_menumove");
        if (enemyinfo==1)
            enemyinfo=25;
        else
            enemyinfo-=1;
        }
    //SECTOR MAPS
    if (tier=="extras2" && selected==4 && global.extras1){
        scr_sound("glo_menumove");
        if (sectormaps==0)
            sectormaps=9;
        else
            sectormaps-=1;
        }
    //SUDDEN DEATH SECTOR
    if (tier=="extras2" && selected==5 && global.extras2){
        scr_sound("glo_menumove");
        if (sdwarp==0)
            sdwarp=9;
        else
            sdwarp-=1;
        }
    //TURBO MODE
    if (tier=="extras3" && selected==2 && global.extras8){
        scr_sound("glo_menumove");
        if (global.turbomode==0)
            global.turbomode=1;
        else
            global.turbomode=0;
        }
    //SCRAMBLER
    if (tier=="extras3" && selected==3 && global.extras7){
        scr_sound("glo_menumove");
        if (global.scrambler==0)
            global.scrambler=1;
        else
            global.scrambler=0;
        }
    //SOUND TEST
    if (tier=="extras3" && selected==4 && global.extras1){
        subtitle="";
        repeat(10)
            sound_stop_all();
        scr_stopmusic();
        soundtested=1;
        seczmusic=0;
        if (soundtest==0)
            soundtest=soundtestmax;
        else
            soundtest-=1;
        }
    }
}
Key Press Event for Key:

execute code:

if (!ignoreall && tier!="wait" && tier!="wait2" && tier!="wait3"){
if (menu){
    if (selected==1)
        selected=selections;
    else
        selected-=1;
    instance_create(obj_marker.x,obj_marker.y,obj_fade);
    if (tier="extras3" && global.extras1 && selected==3 && soundtested){
        repeat(10)
            sound_stop_all();
        scr_stopmusic();
        seczmusic=0;
        }
    scr_sound("glo_menumove");
    subtitle="";
    }
}
Key Press Event for Key:

execute code:

if (!ignoreall && tier!="wait" && tier!="wait2" && tier!="wait3"){
if (menu){
    //OPTIONS
    if(tier="options"){
        if(selected==2){
            if(global.noshake){
                global.noshake=0;
                scr_sound("glo_menuselect");
                }
            else{
                global.noshake=1;
                scr_sound("glo_menuback");
                }
            }
        else if(selected==3){
            if(global.novoice){
                global.novoice=0;
                scr_sound("glo_menuselect");
                }
            else{
                global.novoice=1;
                scr_sound("glo_menuback");
                }
            }
        else if(selected==4){
            if(global.nosound){
                global.nosound=0;
                scr_sound("glo_menuselect");
                }
            else{
                global.nosound=1;
                scr_sound("glo_menuback");
                }
            }
        else if(selected==5){
            if(global.nomusic){
                global.nomusic=0;
                scr_sound("glo_menuselect");
                //Play currently playing music
                scr_music("mus_mainmenu");
                soundtested=0;
                }
            else{
                global.nomusic=1;
                scr_sound("glo_menuback");
                with (obj_face)
                    scr_stopmusic();
                }
            }
        else if(selected==6){
            if(global.hidetime){
                global.hidetime=0;
                scr_sound("glo_menuselect");
                }
            else{
                global.hidetime=1;
                scr_sound("glo_menuback");
                }
            }
        else if (selected==7){
            if(global.nogamma){
                global.nogamma=0;
                scr_sound("glo_menuselect");
                }
            else{
                global.nogamma=1;
                scr_sound("glo_menuback");
                nocovers=1;
                waittype=4;
                scr_menufulltexts();
                instance_create(0,0,obj_mainfullcover);
                tier="wait";
                }
            }
        }
    //SINGLE SECTOR WARP
    if (tier=="extras" && selected==3 && global.extras1){
        scr_sound("glo_menumove");
        if (warp==10){
            if (global.extras5)
                warp=0;
            else
                warp=1;
            }
        else
            warp+=1;
        }
    //ALTERNATE OUTFIT
    if (tier=="extras" && selected==5 && global.extras3){
        scr_sound("glo_menumove");
        if (global.outfit==0)
            global.outfit=1;
        else
            global.outfit=0;
        }
    //WEAPON INFORMATION
    if (tier=="extras2" && selected==2 && global.extras4){
        scr_sound("glo_menumove");
        if (weaponinfo==26)
            weaponinfo=1;
        else
            weaponinfo+=1;
        }
    //ENEMY INFORMATION
    if (tier=="extras2" && selected==3 && global.extras6){
        scr_sound("glo_menumove");
        if (enemyinfo==25)
            enemyinfo=1;
        else
            enemyinfo+=1;
        }
    //SECTOR MAPS
    if (tier=="extras2" && selected==4 && global.extras1){
        scr_sound("glo_menumove");
        if (sectormaps==9)
            sectormaps=0;
        else
            sectormaps+=1;
        }
    //SUDDEN DEATH SECTOR
    if (tier=="extras2" && selected==5 && global.extras2){
        scr_sound("glo_menumove");
        if (sdwarp==9)
            sdwarp=0;
        else
            sdwarp+=1;
        }
    //TURBO MODE
    if (tier=="extras3" && selected==2 && global.extras8){
        scr_sound("glo_menumove");
        if (global.turbomode==0)
            global.turbomode=1;
        else
            global.turbomode=0;
        }
    //SCRAMBLER
    if (tier=="extras3" && selected==3 && global.extras7){
        scr_sound("glo_menumove");
        if (global.scrambler==0)
            global.scrambler=1;
        else
            global.scrambler=0;
        }
    //SOUND TEST
    if (tier=="extras3" && selected==4 && global.extras1){
        subtitle="";
        repeat(10)
            sound_stop_all();
        scr_stopmusic();
        soundtested=1;
        seczmusic=0;
        if (soundtest==soundtestmax)
            soundtest=0;
        else
            soundtest+=1;
        }
    }
}
Key Press Event for Key:

execute code:

if (!ignoreall && tier!="wait" && tier!="wait2" && tier!="wait3"){
if (menu){
    if (selected==selections)
        selected=1;
    else
        selected+=1;
    instance_create(obj_marker.x,obj_marker.y,obj_fade);
    if (tier="extras3" && global.extras1 && selected==1 && soundtested){
        repeat(10)
            sound_stop_all();
        scr_stopmusic();
        seczmusic=0;
        }
    scr_sound("glo_menumove");
    subtitle="";
    }
}
Key Press Event for F4 Key:

execute code:

if (keyboard_check(vk_alt)){
    sound_stop_all();
    game_end();
    }
______________________________________________________

Information about object: obj_eye
Sprite: 
Solid: false
Visible: false
Depth: 3
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
alarm[0]=4;
image_speed=0.5;
}
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_logotext
Sprite: spr_bigi
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if(x==497) sprite_index=spr_smallj;
if(x==574) sprite_index=spr_smalli;
if(x==496){ sprite_index=spr_dot1; x+=1;}
if(x==573){ sprite_index=spr_dot1; x+=1;}
y-=300;
Step Event:

execute code:

if (y
______________________________________________________

Information about object: obj_menuback
Sprite: spr_menuback
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

{
if (face.count>-1){
    if (place_meeting(x+4,y,obj_menuback) && place_free(x-4,y))
    image_single=0;
    if (place_meeting(x-4,y,obj_menuback) && place_free(x+4,y))
    image_single=2;
    if (place_meeting(x-4,y,obj_menuback) && place_meeting(x+4,y,obj_menuback))
    image_single=1;
    }
}
Draw Event:

execute code:

draw_self();

if (image_index == 0) {
    draw_sprite(spr_tastext, 0, x + 4, y + 252);
}

______________________________________________________

Information about object: obj_intro1
Sprite: spr_intro1
Solid: false
Visible: false
Depth: 1
Persistent: false
Parent: 
Mask: 

Create Event:

set Alarm 0 to 2
Alarm Event for alarm 0:

execute code:

visible=1;
if (obj_face.intropic==1){
    x=101;
    y=224;
    sprite_index=spr_intro3;
    }
______________________________________________________

Information about object: obj_introtext
Sprite: spr_introtext
Solid: false
Visible: false
Depth: 1
Persistent: false
Parent: 
Mask: 

Create Event:

set Alarm 0 to 2
Alarm Event for alarm 0:

execute code:

visible=1;
Draw Event:

execute code:

draw_self();
draw_sprite(spr_tastext, 0, x + 35, y + 57);

______________________________________________________

Information about object: obj_menutext
Sprite: spr_block
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: 
Mask: 

Draw Event:

execute script scr_menutext with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_intro2
Sprite: spr_intro2
Solid: false
Visible: false
Depth: 1
Persistent: false
Parent: 
Mask: 

Create Event:

set Alarm 0 to 2
Alarm Event for alarm 0:

execute code:

if (obj_face.intropic==0)
    visible=1;
______________________________________________________

Information about object: obj_marker
Sprite: spr_xp4
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

set variable image_speed to 0.5
Step Event:

execute code:

if (instance_number(obj_face)==1)
    y=265+(obj_face.selected*28);
else if (instance_number(obj_paused)==1){
    x=view_xview[0]+242;
    y=view_yview[0]+139+(obj_paused.selected*28);
    }
else
    y=220+(obj_clearsabot.selected*28);
______________________________________________________

Information about object: obj_onoff
Sprite: spr_onoff
Solid: false
Visible: true
Depth: -3
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

//Main menu
if (room==rom_main){
    if (obj_face.tier=="options"){
        if(y==311 && global.noshake==0)
        image_single=2;
        if(y==311 && global.noshake==1)
        image_single=3;
        if(y==339 && global.novoice==0)
        image_single=0;
        if(y==339 && global.novoice==1)
        image_single=1;
        if(y==367 && global.nosound==0)
        image_single=0;
        if(y==367 && global.nosound==1)
        image_single=1;
        if(y==395 && global.nomusic==0)
        image_single=0;
        if(y==395 && global.nomusic==1)
        image_single=1;
        if(y==423 && global.hidetime==0)
        image_single=0;
        if(y==423 && global.hidetime==1)
        image_single=1;
        }
    else if (obj_face.tier=="options2"){
        if(y==311 && global.nogamma==0)
        image_single=0;
        if(y==311 && global.nogamma==1)
        image_single=1;
        if(y==339 && global.specialbake==0)
        image_single=2;
        if(y==339 && global.specialbake==1)
        image_single=3;
        if(y==367 && global.noblood==0)
        image_single=0;
        if(y==367 && global.noblood==1)
        image_single=1;
    }
    else if (obj_face.tier=="secret"){
        if(y==339 && global.rrkills==0)
        image_single=0;
        if(y==339 && global.rrkills==1)
        image_single=1;
        if(y==367 && global.nomercy==1)
        image_single=0;
        if(y==367 && global.nomercy==0)
        image_single=1;
        if(y==395 && global.fireanytime==1)
        image_single=0;
        if(y==395 && global.fireanytime==0)
        image_single=1;
        if(y==423 && global.randomstations==1)
        image_single=0;
        if(y==423 && global.randomstations==0)
        image_single=1;
        if(y==451 && global.noreloads==1)
        image_single=0;
        if(y==451 && global.noreloads==0)
        image_single=1;
        }
    else if (obj_face.tier=="supersecret"){
        if(y==339 && global.debug==1)
        image_single=0;
        if(y==339 && global.debug==0)
        image_single=1;
        }
    }

//Pause menu
else{
    if(y==view_yview[0]+185 && global.noshake==0)
    image_single=2;
    if(y==view_yview[0]+185 && global.noshake==1)
    image_single=3;
    if(y==view_yview[0]+213 && global.novoice==0)
    image_single=0;
    if(y==view_yview[0]+213 && global.novoice==1)
    image_single=1;
    if(y==view_yview[0]+241 && global.nosound==0)
    image_single=0;
    if(y==view_yview[0]+241 && global.nosound==1)
    image_single=1;
    if(y==view_yview[0]+269 && global.nomusic==0)
    image_single=0;
    if(y==view_yview[0]+269 && global.nomusic==1)
    image_single=1;
    if(y==view_yview[0]+297 && global.hidetime==0)
    image_single=0;
    if(y==view_yview[0]+297 && global.hidetime==1)
    image_single=1;
    if(y==view_yview[0]+325 && global.noblood==0)
    image_single=0;
    if(y==view_yview[0]+325 && global.noblood==1)
    image_single=1;
    }
______________________________________________________

Information about object: obj_fade
Sprite: spr_fade
Solid: false
Visible: true
Depth: 1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
image_speed=0.5;
alarm[0]=8;
}
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_pickuphealth
Sprite: spr_pickuphealth
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_xp
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[1]=90;
if (global.specialtrigger16 || global.suddendeath)
    instance_destroy();
Alarm Event for alarm 0:

execute code:

instance_destroy();
Alarm Event for alarm 1:

execute code:

alarm[1]=90;
(instance_create(x,y,obj_visioncheckh)).speed=16;
(instance_create(x,y,obj_visioncheckh)).speed=-16;
______________________________________________________

Information about object: obj_pickuparmor
Sprite: spr_pickuparmor
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_xp
Mask: 

Create Event:

execute code:

image_speed=0.5;
if (global.specialtrigger16 || global.suddendeath)
    instance_destroy();
______________________________________________________

Information about object: obj_loading
Sprite: spr_loading
Solid: false
Visible: true
Depth: -1000001
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

x=view_xview[0]+400;
y=view_yview[0]+300;
alarm[0]=1;
destination="0";
Alarm Event for alarm 0:

execute code:

scr_loadingdestination();
______________________________________________________

Information about object: obj_plasmatrace
Sprite: spr_bullet
Solid: false
Visible: false
Depth: -5
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

scr_plasmatrace();
alarm[0]=1;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

destroy the instance
Step Event:

execute script scr_outside with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_plasma
Sprite: spr_plasma
Solid: false
Visible: true
Depth: -3
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
image_speed=0.5;
alarm[0]=16;
}
Alarm Event for alarm 0:

destroy the instance
Step Event:

execute script scr_outside with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_plasma2
Sprite: spr_plasma2
Solid: false
Visible: true
Depth: -3
Persistent: false
Parent: obj_plasma
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=16;
if (obj_sabot.annihilatorbeta){
    if (obj_annihilatorbeta.facing==1)
    image_index=8;
    }
else{
    if (global.facing==1)
    image_index=8;
    }
______________________________________________________

Information about object: obj_plasma3
Sprite: spr_plasma3
Solid: false
Visible: true
Depth: -4
Persistent: false
Parent: obj_plasma
Mask: 

______________________________________________________

Information about object: obj_frame
Sprite: spr_frame
Solid: false
Visible: true
Depth: -400
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (room==rom_cut){
    if (obj_cutsabot.firstscroll==5)
    y=ystart+obj_chatmessagetext.firstscroll*48;
    image_single=1;
    if (x==0)
        image_single=0;
    if (x==792)
        image_single=2;
    }

else{
    if (obj_sabot.firstscroll==5)
    y=ystart+obj_messagetext.firstscroll*48;
    image_single=1;
    if (x==obj_shakescreen.x-400)
        image_single=0;
    if (x==obj_shakescreen.x+392)
        image_single=2;
    }
______________________________________________________

Information about object: obj_messagetext
Sprite: spr_block
Solid: false
Visible: true
Depth: -401
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (obj_sabot.firstscroll==5)
firstscroll=1;
sabotscroll=1;
alarm[1]=1;
page=0;
prevpage=1000;
Alarm Event for alarm 0:

execute code:

scr_terminatemessage();
Alarm Event for alarm 1:

execute code:

sabotscroll=0;
Draw Event:

execute code:

//Portraits
if (portrait==1) draw_sprite(spr_portrait1,0,obj_shakescreen.x-392-firstscroll*64,obj_shakescreen.y+16);
if (portrait==2) draw_sprite(spr_portrait2,0,obj_shakescreen.x-392-firstscroll*64,obj_shakescreen.y+16);
if (portrait==3) draw_sprite(spr_portrait3,0,obj_shakescreen.x-392-firstscroll*64,obj_shakescreen.y+16);
if (portrait==4) draw_sprite(spr_portrait4,0,obj_shakescreen.x-392-firstscroll*64,obj_shakescreen.y+16);
if (portrait==5) draw_sprite(spr_portrait5,0,obj_shakescreen.x-392-firstscroll*64,obj_shakescreen.y+16);
if (portrait==6) draw_sprite(spr_portrait6,0,obj_shakescreen.x-392-firstscroll*64,obj_shakescreen.y+16);
if (portrait==7) draw_sprite(spr_portrait7,0,obj_shakescreen.x-392-firstscroll*64,obj_shakescreen.y+16);
if (portrait==70){
    draw_sprite(spr_portrait7,0,obj_shakescreen.x-392-firstscroll*64,obj_shakescreen.y+16);
    draw_sprite(spr_portrait7b,0,obj_shakescreen.x-392-firstscroll*64,obj_shakescreen.y+16);
    }
if (portrait==8) draw_sprite(spr_portrait8,0,obj_shakescreen.x-392-firstscroll*64,obj_shakescreen.y+16);
if (portrait==9) draw_sprite(spr_portrait9,0,obj_shakescreen.x-392-firstscroll*64,obj_shakescreen.y+16);
if (portrait==10) draw_sprite(spr_portrait10,0,obj_shakescreen.x-392-firstscroll*64,obj_shakescreen.y+16);
if (portrait==11) draw_sprite(spr_portrait11,0,obj_shakescreen.x-392-firstscroll*64,obj_shakescreen.y+16);
if (portrait==12) draw_sprite(spr_portrait12,0,obj_shakescreen.x-392-firstscroll*64,obj_shakescreen.y+16);
if (portrait==13) draw_sprite(spr_portrait13,0,obj_shakescreen.x-392-firstscroll*64,obj_shakescreen.y+16);

if (portrait==98) draw_sprite(spr_portrait98,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
if (portrait==99) draw_sprite(spr_portrait99,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
if (portrait==100) draw_sprite(spr_portrait100,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
if (portrait==101) draw_sprite(spr_portrait101,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
if (portrait==102) draw_sprite(spr_portrait102,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
if (portrait==103) draw_sprite(spr_portrait103,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
if (portrait==104) draw_sprite(spr_portrait104,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
if (portrait==106) draw_sprite(spr_portrait106,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
if (portrait==107) draw_sprite(spr_portrait107,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
if (portrait==108) draw_sprite(spr_portrait108,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
if (portrait==110) draw_sprite(spr_portrait110,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
if (portrait==111) draw_sprite(spr_portrait111,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
if (portrait==114) draw_sprite(spr_portrait114,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
if (portrait==115) draw_sprite(spr_portrait115,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
if (portrait==116) draw_sprite(spr_portrait116,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
if (portrait==117) draw_sprite(spr_portrait117,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
if (portrait==118) draw_sprite(spr_portrait118,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
if (portrait==119) draw_sprite(spr_portrait119,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
if (portrait==1000){
    draw_sprite(spr_portrait100,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
    draw_sprite(spr_portrait100b,0,obj_shakescreen.x+264+firstscroll*64,obj_shakescreen.y+16);
    }

if (global.squeak){
    if ((portrait>=1 && portrait<=13) || portrait==70)
        draw_sprite(spr_ammo10,0,obj_shakescreen.x-300-firstscroll*64,obj_shakescreen.y+80);
    }

//Text
if (page>=0){
    //scramble the text here
    if (global.scrambler){
        //if (page!=prevpage && !scrambled[page])
        //    scrambled[page]=0;
        //prevpage=page;
        if (instance_number(obj_chat)==0)
            global.scramblefactor=2;
        if (!scrambled[page]){
            scrambled[page]=1;
            scr_scramble();
            }
        }
    draw_set_font(global.fontgreen);
    draw_set_color(c_white);
    draw_text_ext(obj_shakescreen.x-390,obj_shakescreen.y+183+firstscroll*48,text[page],28,793);
    }
//Outline
if (!global.specialbake){
if (outline=0) //Neutral
    draw_set_color(make_color_rgb(140,140,140));
if (outline=1) //Iji
    draw_set_color(make_color_rgb(80,180,80));
if (outline=2) //Dan
    draw_set_color(make_color_rgb(170,160,70));
if (outline=3) //Tasen
    draw_set_color(make_color_rgb(130,10,110));
if (outline=4) //Komato
    draw_set_color(make_color_rgb(30,130,190));
draw_rectangle(x-399,y+173+firstscroll*48,x+398,y+298+firstscroll*48,1);
draw_rectangle(x-397,y+175+firstscroll*48,x+396,y+296+firstscroll*48,1);
if (outline=0) //Neutral light
    draw_set_color(make_color_rgb(210,210,210));
if (outline=1) //Iji light
    draw_set_color(make_color_rgb(120,220,120));
if (outline=2) //Dan light
    draw_set_color(make_color_rgb(210,200,100));
if (outline=3) //Tasen light
    draw_set_color(make_color_rgb(210,20,190));
if (outline=4) //Komato light
    draw_set_color(make_color_rgb(40,170,230));
draw_rectangle(x-398,y+174+firstscroll*48,x+397,y+297+firstscroll*48,1);
}

if (global.scrambler)
    draw_sprite(spr_scramblertext,0,x-400,y+168+firstscroll*48);
    
//Firstscroll
if (firstscroll==1)
    firstscroll=0;
Key Press Event for Key:

execute code:

if (global.ignoremessagescroll==0 && firstscroll==0 && sabotscroll==0){
page+=1;
with (obj_scrollarrow)
    bounce=1;
if (page==pages){
    page-=1;
    firstscroll=1;
    sabotscroll=1;
    alarm[0]=1;
    if (obj_iji.readinglog)
        obj_iji.cannotpause=0;
    }
}
Key Press Event for Key:

execute code:

if (!global.cannotskipchat){
if (firstscroll==0 && sabotscroll==0){
    page=pages-1;
    page-=1;
    firstscroll=1;
    sabotscroll=1;
    alarm[0]=1;
    obj_shakescreen.alarm[1]=3;
    global.chat=global.chats;
    }
    }
Key Press Event for Key:

execute code:

if (global.ignoremessagescroll==0 && firstscroll==0 && sabotscroll==0 && page!=0 && instance_number(obj_chat)==0){
    page-=1;
    with (obj_scrollarrow)
        bounce=2;
    }
Key Press Event for Key:

execute code:

if (global.ignoremessagescroll==0 && firstscroll==0 && sabotscroll==0){
page+=1;
obj_iji.ignoredown=1;
with (obj_scrollarrow)
    bounce=1;
if (page==pages){
    page-=1;
    firstscroll=1;
    sabotscroll=1;
    alarm[0]=1;
    if (obj_iji.readinglog)
        obj_iji.cannotpause=0;
    }
}
Key Press Event for C-key Key:

execute code:

if (global.ignoremessagescroll==0 && firstscroll==0 && sabotscroll==0){
page+=1;
with (obj_scrollarrow)
    bounce=1;
if (page==pages){
    page-=1;
    firstscroll=1;
    sabotscroll=1;
    alarm[0]=1;
    if (obj_iji.readinglog)
        obj_iji.cannotpause=0;
    }
}
______________________________________________________

Information about object: obj_log1
Sprite: spr_log1
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

if (sprite_index==spr_log1 || sprite_index==spr_log2 || sprite_index==spr_log3 || sprite_index==spr_log4)
    scr_ammofloat();
else
    image_speed=0.5;
______________________________________________________

Information about object: obj_scrollarrow
Sprite: spr_scrollarrow
Solid: false
Visible: false
Depth: -401
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=1;
alarm[1]=4;
Alarm Event for alarm 0:

execute code:

visible=1;
Alarm Event for alarm 1:

execute code:

alarm[1]=4;
if (imageframe==0)
    imageframe=1;
else
    imageframe=0;
Draw Event:

execute code:

if (bounce==1){
    bounce2=1;
    bounce=0;
    }
if (bounce==2){
    bounce3=1;
    bounce=0;
    }
if (bounce2){
    if (yadjust<8)
        yadjust+=4;
    else
        bounce2=0;
    }
else if (bounce3){
    if (yadjust>-8)
        yadjust-=4;
    else
        bounce3=0;
    }
else if (yadjust>0)
    yadjust-=4;
else if (yadjust<0)
    yadjust+=4;

if (instance_number(obj_chat)==1 || obj_messagetext.page==0)
    image=0+imageframe;
else if (obj_messagetext.page==obj_messagetext.pages-1)
    image=4+imageframe;
else
    image=2+imageframe;
//if (obj_messagetext.pages>1)
draw_sprite(sprite_index,image,x,y+yadjust);
______________________________________________________

Information about object: obj_log2
Sprite: spr_log2
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: obj_log1
Mask: 

______________________________________________________

Information about object: obj_barrel
Sprite: spr_barrel
Solid: true
Visible: true
Depth: 3
Persistent: false
Parent: obj_meta
Mask: 

______________________________________________________

Information about object: obj_door
Sprite: spr_door
Solid: true
Visible: true
Depth: 11
Persistent: false
Parent: obj_block
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=2;
Alarm Event for alarm 0:

execute code:

if (resistance==0)
resistance=1;
if (resistance>=4)
    sprite_index=spr_door2;
if (resistance>=7)
    sprite_index=spr_door3;
Collision Event with object obj_kickbox:

execute code:

if (other.image_index==0){
scr_sound("glo_kick");
script_execute(scr_shakescreen,1);
if (global.strengthlevel>=resistance){
    with (obj_iji){
        tempid=instance_create(x+16,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+16,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    if (other.sprite_index==spr_detonator){
        if (x
Collision Event with object obj_pushbox:

execute code:

global.erasetop=0;
global.topmessage="You cannot crack a Shield door; use your kick ("+chr(global.kickkey)+" key) instead";
global.ignorestation=90;

______________________________________________________

Information about object: obj_cdoor
Sprite: spr_cdoor
Solid: true
Visible: true
Depth: 11
Persistent: false
Parent: obj_block
Mask: 

Create Event:

execute code:

if (security==0)
security=1;
Alarm Event for alarm 0:

destroy the instance
Collision Event with object obj_kickbox:

execute code:

if (other.image_index==0){
scr_sound("glo_kick");
script_execute(scr_shakescreen,1);
global.erasetop=0;
global.topmessage="You cannot kick down a Security door; crack it ("+chr(global.usekey)+" key) instead";
global.ignorestation=90;
}
Collision Event with object obj_pushbox:

execute code:

if (cracked==0){
    if (global.cracklevel>=security){
        global.security=security;
        crackmark=1;
        global.cracktext="Security door#[Locked]#Security: ";
        global.cracktext+=string(global.security);
        if (global.security==10)
            global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
        else
            global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
        script_execute(scr_begincrack);
        }
    else{
        global.erasetop=0;
        global.topmessage="You need a Crack skill of ";
        global.topmessage+=string(security);
        global.topmessage+=" to crack this Security door";
        global.ignorestation=90;
        scr_sound("glo_crackfail");
        }
    }

Draw Event:

execute code:

draw_sprite(spr_cdoor,0,x,y);
if (security<=10 && !cracked)
draw_sprite(spr_doorcolors,security-1,x,y);
______________________________________________________

Information about object: obj_cracktext
Sprite: spr_sabot
Solid: false
Visible: true
Depth: -401
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

if (global.cracking){
    global.cracktime-=0.0333333333;
    global.cracktext="  -SYSTEM REPORT-#Emergency integrity#measures commencing#in: ";
    global.cracktext+=string(global.cracktime);
    global.cracktext+=" seconds";
    }
if (global.cracktime<0){
    global.erasetop=0;
    global.topmessage="Cracking failed";
    script_execute(scr_crackfail);
    global.cracking=0;
    }
Draw Event:

execute code:

draw_set_font(global.fontgreen);
draw_set_color(c_white);
draw_text_ext(obj_shakescreen.x-391,obj_shakescreen.y+184,global.cracktext,28,800);
Key Press Event for Key:

execute code:

{
//Abort cracking without penalty
if (global.cracking==0){
    script_execute(scr_terminatecrack);
    global.ignoreall=0;
    obj_iji.alarm[5]=0;
    global.erasetop=0;
    global.topmessage="Cracking aborted";
    }
//Abort cracking with penalty
else{
    global.erasetop=0;
    global.topmessage="CRACKING FAILED";
    script_execute(scr_crackfail);
    global.ignoreall=0;
    obj_iji.alarm[5]=0;
    }
}
Key Press Event for Key:

execute code:

{
//Abort cracking without penalty
if (global.cracking==0){
    script_execute(scr_terminatecrack);
    global.ignoreall=0;
    obj_iji.alarm[5]=0;
    global.erasetop=0;
    global.topmessage="Cracking aborted";
    }
//Abort cracking with penalty
else{
    global.erasetop=0;
    global.topmessage="CRACKING FAILED";
    script_execute(scr_crackfail);
    global.ignoreall=0;
    obj_iji.alarm[5]=0;
    }
}
Key Press Event for Key:

execute code:

if (global.cracking){
if (global.youcol>0){
    if (global.nodes[global.yourow,global.youcol-1]==1){
        global.erasetop=0;
        global.topmessage="CRACKING FAILED";
        script_execute(scr_crackfail);
        global.cracking=0;
        }
    else if (global.nodes[global.yourow,global.youcol-1]==3)
        scr_cracksuccess();
    else
        scr_sound("glo_cracktick");
    global.nodes[global.yourow,global.youcol]=1;
    global.youcol-=1;
    global.nodes[global.yourow,global.youcol]=2;
    }
}
Key Press Event for Key:

execute code:

if (global.cracking){
if (global.yourow>0){
    if (global.nodes[global.yourow-1,global.youcol]==1){
        global.erasetop=0;
        global.topmessage="CRACKING FAILED";
        script_execute(scr_crackfail);
        global.cracking=0;
        }
    else if (global.nodes[global.yourow-1,global.youcol]==3)
        scr_cracksuccess();
    else
        scr_sound("glo_cracktick");
    global.nodes[global.yourow,global.youcol]=1;
    global.yourow-=1;
    global.nodes[global.yourow,global.youcol]=2;
    }
}
Key Press Event for Key:

execute code:

if (global.cracking){
if (global.youcol
Key Press Event for Key:

execute code:

if (global.cracking){
if (global.yourow<4){
    if (global.nodes[global.yourow+1,global.youcol]==1){
        global.erasetop=0;
        global.topmessage="CRACKING FAILED";
        script_execute(scr_crackfail);
        global.cracking=0;
        }
    else if (global.nodes[global.yourow+1,global.youcol]==3)
        scr_cracksuccess();
    else
        scr_sound("glo_cracktick");
    global.nodes[global.yourow,global.youcol]=1;
    global.yourow+=1;
    global.nodes[global.yourow,global.youcol]=2;
    }
}
Key Press Event for C-key Key:

execute code:

//Begin cracking
if (global.cracking==0){
    scr_sound("glo_crackbegin");
    global.cracking=1;
    if (global.security=1) global.cracktime=6.50;
    if (global.security=2) global.cracktime=7.00;
    if (global.security=3) global.cracktime=7.50;
    if (global.security=4) global.cracktime=8.00;
    if (global.security=5) global.cracktime=8.50;
    if (global.security=6) global.cracktime=9.00;
    if (global.security=7) global.cracktime=9.50;
    if (global.security=8) global.cracktime=10.00;
    if (global.security=9) global.cracktime=10.50;
    if (global.security=10) global.cracktime=11.00;
    if (global.difficulty==1) global.cracktime-=2;
    if (global.difficulty==2) global.cracktime-=4;
    if (global.cracklevel==10) global.cracktime+=4;
    with (obj_tasenscout){
        if (crackmark && !angry && state==0){
            alarm[2]=90+random(90);
            }
        }
    with (obj_tasensoldier){
        if (crackmark && !angry && state==0)
            alarm[2]=90+random(90);
        }
    with (obj_tasencommander){
        if (crackmark && !angry && state==0)
            alarm[2]=90+random(90);
        }
    with (obj_tasenelite){
        if (crackmark && !angry && state==0)
            alarm[2]=90+random(90);
        }
    with (obj_tasenshredder){
        if (crackmark && !angry && state==0 && !driving)
            alarm[2]=90+random(90);
        }
    with (obj_komatotrooper){
        if (crackmark && !angry && state==0)
            alarm[2]=90+random(90);
        }
    with (obj_komatoberserker){
        if (crackmark && !angry && state==0)
            alarm[2]=90+random(90);
        }
    }
______________________________________________________

Information about object: obj_crackbar
Sprite: spr_crackbar
Solid: false
Visible: true
Depth: -401
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_nodecol
Sprite: spr_nodecol
Solid: false
Visible: true
Depth: -401
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_noderow
Sprite: spr_noderow
Solid: false
Visible: true
Depth: -402
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_younode
Sprite: spr_younode
Solid: false
Visible: true
Depth: -403
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_goalnode
Sprite: spr_goalnode
Solid: false
Visible: true
Depth: -403
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_icenode
Sprite: spr_icenode
Solid: false
Visible: true
Depth: -403
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_binary
Sprite: spr_binary
Solid: false
Visible: true
Depth: -401
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_loadingback
Sprite: spr_sabot
Solid: false
Visible: true
Depth: -1000000
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

{
draw_set_color(c_black);
draw_rectangle(view_xview[0]-2,view_yview[0]-2,view_xview[0]+view_wview[0]+2,view_yview[0]+view_hview[0]+2,0);
}
______________________________________________________

Information about object: obj_doorslide
Sprite: spr_doorslide
Solid: false
Visible: true
Depth: 10
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_colnumber
Sprite: spr_colnumber
Solid: false
Visible: true
Depth: -401
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_crackbox
Sprite: spr_crackbox
Solid: true
Visible: true
Depth: 1
Persistent: false
Parent: obj_meta
Mask: 

Collision Event with object obj_pushbox:

execute code:

with (other){
    if (place_meeting(x,y,obj_enemy))
    exit;
    }
if (global.cracklevel>security-1){
    global.security=security;
    crackmark=1;
    global.cracktext="Security box#[Locked]#Security: ";
    global.cracktext+=string(global.security);
    if (global.security==10)
        global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
    else
        global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
    script_execute(scr_begincrack);
    }
else{
    global.erasetop=0;
    global.topmessage="You need a Crack level of ";
    global.topmessage+=string(security);
    global.topmessage+=" to crack this Security box";
    global.ignorestation=90;
    scr_sound("glo_crackfail");
    }
______________________________________________________

Information about object: obj_bigsmoke
Sprite: spr_bigsmoke
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
image_speed=0.5;
direction=random(360);
speed=2+random(2);
alarm[0]=8;
}
Alarm Event for alarm 0:

destroy the instance
Step Event:

set variable speed to speed*0.7
______________________________________________________

Information about object: obj_smokepoint
Sprite: spr_sabot
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=15+floor(random(5));
direction=random(180);
speed=9+random(4);
gravity=1;
gravity_direction=270;
alarm[1]=2;
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 1:

execute code:

instance_create(x,y,obj_bigsmoke);
if (massive)
    alarm[1]=1;
else
    alarm[1]=2;

______________________________________________________

Information about object: obj_thor
Sprite: spr_thor
Solid: false
Visible: true
Depth: -5
Persistent: false
Parent: 
Mask: 

Create Event:

set Alarm 0 to 2
Alarm Event for alarm 0:

destroy the instance
Step Event:

execute script scr_outside with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_thor2
Sprite: spr_thor2
Solid: false
Visible: true
Depth: -5
Persistent: false
Parent: obj_thor
Mask: 

Create Event:

execute code:

{
if (global.facing==1)
    image_single=1;
else
    image_single=0;
alarm[0]=2;
}
Alarm Event for alarm 0:

destroy the instance
Step Event:

execute script scr_outside with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_thortrace
Sprite: spr_bullet
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

scr_thor();
obj_sabot.raveflash=0;
Step Event:

execute script scr_outside with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_thorsmoke
Sprite: spr_thorsmoke
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
alarm[0]=1;
image_single=floor(random(2));
}
Alarm Event for alarm 0:

destroy the instance
Step Event:

execute script scr_outside with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_thorspark
Sprite: spr_thorspark
Solid: false
Visible: true
Depth: -4
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
image_speed=0.5;
speed=6+random(6);
direction=random(360);
gravity=0.8;
gravity_direction=270;
alarm[0]=40;
}
Alarm Event for alarm 0:

destroy the instance
Collision Event with object obj_block:

destroy the instance
Collision Event with object obj_glass:

destroy the instance
______________________________________________________

Information about object: obj_enemybullet2
Sprite: spr_bullet
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: obj_enemybullet
Mask: 

Create Event:

execute script scr_enemybullet with arguments (1,0,0,0,0)
set Alarm 0 to 1
Alarm Event for alarm 0:

execute code:

if (hit){
    x+=(3-random(6));
    y+=(3-random(6));
    scr_sound("glo_rico");
    instance_create(x,y,obj_smoke);
    instance_create(x,y,obj_bullethit);
    }
instance_destroy();
______________________________________________________

Information about object: obj_teledest
Sprite: spr_teledest
Solid: false
Visible: true
Depth: 5
Persistent: false
Parent: obj_activateme
Mask: 

Create Event:

execute code:

image_single=0;
Collision Event with object obj_iji:

execute code:

if (obj_iji.trapmine && global.ignorestation==0){
    global.erasetop=0;
    global.topmessage="Duck and press "+chr(global.firekey)+" to set Trapmine";
    }
______________________________________________________

Information about object: obj_tele
Sprite: spr_tele
Solid: false
Visible: true
Depth: 5
Persistent: false
Parent: obj_activateme
Mask: 

______________________________________________________

Information about object: obj_paused
Sprite: 
Solid: false
Visible: true
Depth: -1000002
Persistent: false
Parent: 
Mask: 

Create Event:

execute script scr_pausecreate with arguments (0,0,0,0,0)
Alarm Event for alarm 0:

execute code:

alarm[0]=10;
if (marker==0)
    marker=1;
else
    marker=0;
Alarm Event for alarm 1:

execute code:

scr_sabotcreate2();
scr_sabotcreate3();

Alarm Event for alarm 2:

execute code:

ignoreall=0;
showloading=0;
tier="main";
selected=1;
selections=7;
obj_marker.visible=1;
obj_fade.visible=1;
Draw Event:

execute script scr_pausemenudraw with arguments (0,0,0,0,0)
Key Press Event for Key:

execute script scr_pauseselection with arguments (0,0,0,0,0)
Key Press Event for Key:

execute script scr_pausemenuescape with arguments (0,0,0,0,0)
Key Press Event for Key:

execute code:

if (!ignoreall && tier!="wait"){
    //SCRAMBLER
    if (tier=="help" && selected==7 && global.extras7){
        if (!global.scrambler){
            global.scrambler=1;
            scr_sound("glo_menuselect");
            }
        else{
            global.scrambler=0;
            scr_sound("glo_menuback");
            }
        }
    //OPTIONS
    if (tier=="options"){
        if (selected==2){
            if(global.noshake){
                global.noshake=0;
                scr_sound("glo_menuselect");
                }
            else{
                global.noshake=1;
                scr_sound("glo_menuback");
                }
            }
        else if (selected==3){
            if(global.novoice){
                global.novoice=0;
                scr_sound("glo_menuselect");
                }
            else{
                global.novoice=1;
                scr_sound("glo_menuback");
                }
            }
        else if (selected==4){
            if(global.nosound){
                global.nosound=0;
                scr_sound("glo_menuselect");
                }
            else{
                global.nosound=1;
                scr_sound("glo_menuback");
                }
            }
        else if (selected==5){
            if(global.nomusic){
                global.nomusic=0;
                scr_sound("glo_menuselect");
                //Play currently playing music
                with (obj_sabot){
                    forcemusic=1;
                    scr_music(music);
                    }
                }
            else{
                global.nomusic=1;
                scr_sound("glo_menuback");
                with (obj_sabot)
                    scr_stopmusic();
                }
            }
        else if (selected==6){
            if(global.hidetime){
                global.hidetime=0;
                scr_sound("glo_menuselect");
                }
            else{
                global.hidetime=1;
                scr_sound("glo_menuback");
                }
            }
        }
    //WEAPON INFORMATION
    if (tier=="help" && selected==4 && weaponlistlength>1){
        scr_sound("glo_menumove");
        if (weaponinfo==1)
            weaponinfo=weaponlistlength;
        else
            weaponinfo-=1;
        }
    //ENEMY INFORMATION
    if (tier=="help" && selected==5){
        scr_sound("glo_menumove");
        if (enemyinfo==1)
            enemyinfo=enemylistlength;
        else
            enemyinfo-=1;
        }
    }
//Flick sounds
if (instance_number(obj_pausefullcover)==1 && ((getinfo==10 && weaponlistlength>1) || getinfo==11))
    scr_sound("glo_menumove");
Key Press Event for Key:

execute code:

if (!ignoreall && tier!="wait"){
    if (selected==1)
        selected=selections;
    else
        selected-=1;
    (instance_create(obj_marker.x,obj_marker.y,obj_fade)).depth=-1000004;
    scr_sound("glo_menumove");
    }
Key Press Event for Key:

execute code:

if (!ignoreall && tier!="wait"){
    //SCRAMBLER
    if (tier=="help" && selected==7 && global.extras7){
        if (!global.scrambler){
            global.scrambler=1;
            scr_sound("glo_menuselect");
            }
        else{
            global.scrambler=0;
            scr_sound("glo_menuback");
            }
        }
    //OPTIONS
    if (tier=="options"){
        if (selected==2){
            if(global.noshake){
                global.noshake=0;
                scr_sound("glo_menuselect");
                }
            else{
                global.noshake=1;
                scr_sound("glo_menuback");
                }
            }
        else if (selected==3){
            if(global.novoice){
                global.novoice=0;
                scr_sound("glo_menuselect");
                }
            else{
                global.novoice=1;
                scr_sound("glo_menuback");
                }
            }
        else if (selected==4){
            if(global.nosound){
                global.nosound=0;
                scr_sound("glo_menuselect");
                }
            else{
                global.nosound=1;
                scr_sound("glo_menuback");
                }
            }
        else if (selected==5){
            if(global.nomusic){
                global.nomusic=0;
                scr_sound("glo_menuselect");
                //Play currently playing music
                with (obj_sabot){
                    forcemusic=1;
                    scr_music(music);
                    }
                }
            else{
                global.nomusic=1;
                scr_sound("glo_menuback");
                with (obj_sabot)
                    scr_stopmusic();
                }
            }
        else if (selected==6){
            if(global.hidetime){
                global.hidetime=0;
                scr_sound("glo_menuselect");
                }
            else{
                global.hidetime=1;
                scr_sound("glo_menuback");
                }
            }
        }
    //WEAPON INFORMATION
    if (tier=="help" && selected==4 && weaponlistlength>1){
        scr_sound("glo_menumove");
        if (weaponinfo==weaponlistlength)
            weaponinfo=1;
        else
            weaponinfo+=1;
        }
    //ENEMY INFORMATION
    if (tier=="help" && selected==5){
        scr_sound("glo_menumove");
        if (enemyinfo==enemylistlength)
            enemyinfo=1;
        else
            enemyinfo+=1;
        }
    }
//Flick sounds
if (instance_number(obj_pausefullcover)==1 && ((getinfo==10 && weaponlistlength>1) || getinfo==11))
    scr_sound("glo_menumove");
Key Press Event for Key:

execute code:

if (!ignoreall && tier!="wait"){
    if (selected==selections)
        selected=1;
    else
        selected+=1;
    (instance_create(obj_marker.x,obj_marker.y,obj_fade)).depth=-1000004;
    scr_sound("glo_menumove");
    }
Key Press Event for C-key Key:

execute script scr_pauseselection with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_reloader
Sprite: spr_sabot
Solid: false
Visible: true
Depth: -305
Persistent: false
Parent: 
Mask: 

Draw Event:

execute script scr_reloaderdraw with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_enemy
Sprite: spr_sabot
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: obj_deactivateme
Mask: 

______________________________________________________

Information about object: obj_slopel
Sprite: spr_slopel
Solid: true
Visible: false
Depth: 0
Persistent: false
Parent: obj_block
Mask: 

______________________________________________________

Information about object: obj_sloper
Sprite: spr_sloper
Solid: true
Visible: false
Depth: 0
Persistent: false
Parent: obj_block
Mask: 

______________________________________________________

Information about object: obj_weapstation
Sprite: spr_weapstation
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.25;
Alarm Event for alarm 0:

execute code:

script_execute(scr_beginmessage);
with (obj_messagetext)
    script_execute(scr_specialmessages);
goaround=0;
Step Event:

execute code:

/*
if (global.weapstation==1){
    global.erasetop=0;
    global.topmessage="PRESS THE NUMBER OF THE FIRST WEAPON TO USE IN THE COMBINATION";
    global.ignorestation=120;
    }
if (global.weapstation==2){
    global.erasetop=0;
    global.topmessage="PRESS THE NUMBER OF THE SECOND WEAPON TO USE IN THE COMBINATION";
    global.ignorestation=120;
    }
*/
if (touchstation){
if (global.weapstation==3){
    global.weapstation=4;
    weap3=0;
    security=0;
    if ((weap1==1 && weap2==2) || (weap1==2 && weap2==1)){
        weap3=9;
        security=3;
        global.cracktext="BUSTER GUN#[Nanoweapon mod]#Security: ";
        }
    else if ((weap1==2 && weap2==7) || (weap1==7 && weap2==2)){
        weap3=10;
        security=7;
        global.cracktext="SPLINTERGUN#[Nanoweapon mod]#Security: ";
        }
    else if ((weap1==1 && weap2==3) || (weap1==3 && weap2==1)){
        weap3=11;
        security=5;
        global.cracktext="SPREAD ROCKETS#[Nanoweapon mod]#Security: ";
        }
    else if ((weap1==3 && weap2==4) || (weap1==4 && weap2==3)){
        weap3=12;
        security=9;
        global.cracktext="NUKE#[Nanoweapon mod]#Security: ";
        }
    else if ((weap1==1 && weap2==5) || (weap1==5 && weap2==1)){
        weap3=13;
        security=4;
        global.cracktext="RESONANCE REFLECTOR#[Nanoweapon mod]#Security: ";
        }
    else if ((weap1==5 && weap2==6) || (weap1==6 && weap2==5)){
        weap3=14;
        security=6;
        global.cracktext="HYPER PULSE#[Nanoweapon mod]#Security: ";
        }
    else if ((weap1==6 && weap2==7) || (weap1==7 && weap2==6)){
        weap3=15;
        security=8;
        global.cracktext="PLASMA CANNON#[Nanoweapon mod]#Security: ";
        }
    else if ((weap1==4 && weap2==8) || (weap1==8 && weap2==4)){
        weap3=16;
        security=10;
        global.cracktext="VELOCITHOR V2-10#[Nanoweapon mod]#Security: ";
        }
    else{
        global.ignoreall=0;
        global.weapstation=0;
        touchstation=0;
        global.erasetop=0;
        global.topmessage="Error: Invalid combination of weapons";
        scr_sound("glo_crackfail");
        global.ignorestation=120;
        }
    if (global.cracklevel
Collision Event with object obj_pushbox:

execute code:

if (!place_meeting(x,y,obj_enemy)){
if (global.passive){
    global.erasetop=0;
    global.topmessage="Error: You cannot combine Nanoweapons in Passive mode";
    global.ignorestation=120;
    scr_sound("glo_crackfail");
    }
else if (!global.weapon2 && !global.weapon3 && !global.weapon4 && !global.weapon5 && !global.weapon6 && !global.weapon7 && !global.weapon8){
    global.erasetop=0;
    global.topmessage="Error: You must possess at least two Nanoweapons";
    global.ignorestation=120;
    scr_sound("glo_crackfail");
    }
else{
    global.ignoreall=1;
    global.weapstation=1;
    global.weappoke=1;
    global.tempwsweap1=0;
    global.refreshpoke=0;
    touchstation=1;
    scr_sound("glo_crackbegin");
    weap1=0;
    weap2=0;
    weap3=0;
    weap4=0;
    }
}
______________________________________________________

Information about object: obj_meta2
Sprite: spr_block
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=2;
if (place_meeting(x,y,obj_paper)){
    global.tempid=id;
    with (obj_paper){
        if (place_meeting(x,y,global.tempid))
            dead=1;
        }
    }
Alarm Event for alarm 0:

destroy the instance
Collision Event with object obj_meta:

execute code:

instance_destroy();
with (other){
    if (sprite_index!=spr_lamp && sprite_index!=spr_glass2 && sprite_index!=spr_glass2short && sprite_index!=spr_glass2small)
        script_execute(scr_metabreak,1);
    }
______________________________________________________

Information about object: obj_trigger
Sprite: spr_cdoor
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

if (followiji){
    if ((room==rom_sector8 && obj_iji.y>2200 && obj_iji.y<2400) || (room==rom_sector5 && obj_iji.y<2400) || (room!=rom_sector8 && room!=rom_sector5))
        y=obj_iji.y;
    }
______________________________________________________

Information about object: obj_chat
Sprite: spr_sabot
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[1]=1;
if (global.scrambler==1)
    global.scramblefactor=1;
Alarm Event for alarm 0:

execute code:

//Scramble
if (global.scrambler)
    global.scramblefactor+=0.5;

global.chat+=1;
global.textid=textid;
global.textid+="_"+string(global.chat);
scr_beginmessage();
if (room==rom_cut){
    with (obj_chatmessagetext)
        scr_cutchats();
    }
else{
    with (obj_messagetext)
        scr_chats();
    }
Alarm Event for alarm 1:

execute code:

global.chat=1;
global.textid=textid;
global.cannotskipchat=0;
script_execute(scr_chatlength);
global.textid+="_"+string(global.chat);
script_execute(scr_beginmessage);
if (room==rom_cut){
    obj_cutsabot.timeline_speed=0;
    with (obj_chatmessagetext)
        scr_cutchats();
    }
else{
    with (obj_messagetext)
        scr_chats();
    }
______________________________________________________

Information about object: obj_terminal
Sprite: spr_terminal
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
Step Event:

execute code:

if (trigger==17){
    if (instance_exists(obj_komatoassassin))
        flicker=1;
    else
        flicker=0;
    if (flicker){
        temprand=random(1)
        if (temprand>0.5)
            sprite_index=spr_terminal;
        else
            sprite_index=spr_sec7terminal;
        }
    else
        sprite_index=spr_terminal;
    }
______________________________________________________

Information about object: obj_end
Sprite: spr_cdoor
Solid: false
Visible: false
Depth: -10
Persistent: false
Parent: 
Mask: 

Alarm Event for alarm 0:

execute code:

scr_clearpickdest();
Step Event:

execute code:

//Sector 12 end
if (image_index>=4)
    image_single=4;

//Sparkling exit
if (sparkle){
cyc+=1;
if (cyc>=2){
cyc=0;
tempid=instance_create(x+8+random(16),y+random(64),obj_thorspark);
tempid.speed=random(3.5)-1.5;
tempid.direction=90;
tempid.gravity=0.2;
}
}
______________________________________________________

Information about object: obj_clearbinary
Sprite: spr_clearbinary
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
image_single=floor(random(3))*8;
}
Collision Event with object obj_clearzoom:

execute code:

{
if (image_single==0 || image_single==8 || image_single==16){
    image_index=image_single;
    image_single=-1;
    visible=1;
    image_speed=other.influence;
    }
}
______________________________________________________

Information about object: obj_clearzoom
Sprite: spr_glass2short
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

set Alarm 0 to 3
Alarm Event for alarm 0:

execute code:

x-=(random(60)*8)+96;
influence=random(0.2)+0.02;
speed=16;

if (obj_clearsabot.slow){
    influence=random(0.05)+0.005;
    speed=8;
    }

______________________________________________________

Information about object: obj_clearsabot
Sprite: spr_fade
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

//Loadmusic is at the bottom because of Sector changing
global.gamma=0;
global.gammagreen=0;
global.gammared=0;
global.gammablue=0;

alarm[0]=1;
alarm[4]=2;
instance_create(0,0,obj_gamma);

//ribbons
if (global.numribbons>global.maxribbons)
    global.maxribbons=global.numribbons;

//sudden death sector completions
if (global.suddendeath==1){
    if (global.sector==1)
        global.sds1=1;
    else if (global.sector==2)
        global.sds2=1;
    else if (global.sector==3)
        global.sds3=1;
    else if (global.sector==4)
        global.sds4=1;
    else if (global.sector==5)
        global.sds5=1;
    else if (global.sector==6)
        global.sds6=1;
    else if (global.sector==7)
        global.sds7=1;
    else if (global.sector==8)
        global.sds8=1;
    else if (global.sector==9)
        global.sds9=1;
    else if (global.sector==0)
        global.sds10=1;
    }

repeat(15)
    (instance_create(random(800),156,obj_clearpix)).direction=90;
repeat(15)
    (instance_create(random(800),444,obj_clearpix)).direction=270;
with (obj_clearpix)
    instance_create(x,y,obj_clearpixtrail);
global.sector+=1;
if (global.sector==10 || global.wty)
    global.sector=0;
global.totkills+=global.kills;
global.totdamage+=global.damage;
global.totcracks+=global.cracks;
global.totfails+=global.fails;
if (global.totkills>999)
    global.totkills=999;
if (global.totdamage>999)
    global.totdamage=999;
if (global.totcracks>999)
    global.totcracks=999;
if (global.totfails>999)
    global.totfails=999;
temptier=0;
tier=0;

//save keys
scr_readsum();
if (!wrongsum)
    scr_save(0);

Alarm Event for alarm 0:

execute code:

if (global.wty)
    global.sector=1;
if(global.sector==2){
with(obj_clearbinary2) instance_destroy();
with(obj_clearbinary3) instance_destroy();
with(obj_clearbinary4) instance_destroy();
with(obj_clearbinary5) instance_destroy();
with(obj_clearbinary6) instance_destroy();
with(obj_clearbinary7) instance_destroy();
with(obj_clearbinary8) instance_destroy();
with(obj_clearbinary9) instance_destroy();
with(obj_clearbinaryx) instance_destroy();
}
else if(global.sector==3){
with(obj_clearbinary1) instance_destroy();
with(obj_clearbinary3) instance_destroy();
with(obj_clearbinary4) instance_destroy();
with(obj_clearbinary5) instance_destroy();
with(obj_clearbinary6) instance_destroy();
with(obj_clearbinary7) instance_destroy();
with(obj_clearbinary8) instance_destroy();
with(obj_clearbinary9) instance_destroy();
with(obj_clearbinaryx) instance_destroy();
}
else if(global.sector==4){
with(obj_clearbinary1) instance_destroy();
with(obj_clearbinary2) instance_destroy();
with(obj_clearbinary4) instance_destroy();
with(obj_clearbinary5) instance_destroy();
with(obj_clearbinary6) instance_destroy();
with(obj_clearbinary7) instance_destroy();
with(obj_clearbinary8) instance_destroy();
with(obj_clearbinary9) instance_destroy();
with(obj_clearbinaryx) instance_destroy();
}
else if(global.sector==5){
with(obj_clearbinary1) instance_destroy();
with(obj_clearbinary2) instance_destroy();
with(obj_clearbinary3) instance_destroy();
with(obj_clearbinary5) instance_destroy();
with(obj_clearbinary6) instance_destroy();
with(obj_clearbinary7) instance_destroy();
with(obj_clearbinary8) instance_destroy();
with(obj_clearbinary9) instance_destroy();
with(obj_clearbinaryx) instance_destroy();
}
else if(global.sector==6){
with(obj_clearbinary1) instance_destroy();
with(obj_clearbinary2) instance_destroy();
with(obj_clearbinary3) instance_destroy();
with(obj_clearbinary4) instance_destroy();
with(obj_clearbinary6) instance_destroy();
with(obj_clearbinary7) instance_destroy();
with(obj_clearbinary8) instance_destroy();
with(obj_clearbinary9) instance_destroy();
with(obj_clearbinaryx) instance_destroy();
}
else if(global.sector==7){
with(obj_clearbinary1) instance_destroy();
with(obj_clearbinary2) instance_destroy();
with(obj_clearbinary3) instance_destroy();
with(obj_clearbinary4) instance_destroy();
with(obj_clearbinary5) instance_destroy();
with(obj_clearbinary7) instance_destroy();
with(obj_clearbinary8) instance_destroy();
with(obj_clearbinary9) instance_destroy();
with(obj_clearbinaryx) instance_destroy();
}
else if(global.sector==8){
with(obj_clearbinary1) instance_destroy();
with(obj_clearbinary2) instance_destroy();
with(obj_clearbinary3) instance_destroy();
with(obj_clearbinary4) instance_destroy();
with(obj_clearbinary5) instance_destroy();
with(obj_clearbinary6) instance_destroy();
with(obj_clearbinary8) instance_destroy();
with(obj_clearbinary9) instance_destroy();
with(obj_clearbinaryx) instance_destroy();
}
else if(global.sector==9){
with(obj_clearbinary1) instance_destroy();
with(obj_clearbinary2) instance_destroy();
with(obj_clearbinary3) instance_destroy();
with(obj_clearbinary4) instance_destroy();
with(obj_clearbinary5) instance_destroy();
with(obj_clearbinary6) instance_destroy();
with(obj_clearbinary7) instance_destroy();
with(obj_clearbinary9) instance_destroy();
with(obj_clearbinaryx) instance_destroy();
}
else if(global.sector==0){
with(obj_clearbinary1) instance_destroy();
with(obj_clearbinary2) instance_destroy();
with(obj_clearbinary3) instance_destroy();
with(obj_clearbinary4) instance_destroy();
with(obj_clearbinary5) instance_destroy();
with(obj_clearbinary6) instance_destroy();
with(obj_clearbinary7) instance_destroy();
with(obj_clearbinary8) instance_destroy();
with(obj_clearbinaryx) instance_destroy();
}
else if(global.sector==1){
with(obj_clearbinary1) instance_destroy();
with(obj_clearbinary2) instance_destroy();
with(obj_clearbinary3) instance_destroy();
with(obj_clearbinary4) instance_destroy();
with(obj_clearbinary5) instance_destroy();
with(obj_clearbinary6) instance_destroy();
with(obj_clearbinary7) instance_destroy();
with(obj_clearbinary8) instance_destroy();
with(obj_clearbinary9) instance_destroy();
}
if (global.wty)
    global.sector=0;
Alarm Event for alarm 1:

execute code:

scr_clearnextsector();
Alarm Event for alarm 2:

execute code:

//Load
stopfadingout=1;
if (!global.nogamma)
    global.gamma=0;
scr_readsum();
if (wrongsum)
    game_restart();
else
    scr_load(selected-1);
Alarm Event for alarm 3:

execute code:

//Restart
room_goto(rom_main);

Alarm Event for alarm 4:

execute code:

if ((global.sector==9 && global.specialtrigger1==0) || global.sector==3 || (global.sector==1 && global.killdata[797]>0)){
    scr_music("mus_calm");
    slow=1;
    }
else if (global.sector==1 && global.killdata[798]>0){
    scr_music("mus_dark");
    slow=1;
    }
else
    scr_music("mus_clear");

Draw Event:

execute script scr_cleardraw with arguments (0,0,0,0,0)
Key Press Event for Key:

execute script scr_clearselection with arguments (0,0,0,0,0)
Key Press Event for Key:

execute code:

scr_clearmenuescape();
Key Press Event for Key:

execute code:

//Options
if (tier==9){
    if(selected==2){
        if(global.noshake){
            global.noshake=0;
            scr_sound("glo_menuselect");
            }
        else{
            global.noshake=1;
            scr_sound("glo_menuback");
            }
        }
    if(selected==3){
        if(global.novoice){
            global.novoice=0;
            scr_sound("glo_menuselect");
            }
        else{
            global.novoice=1;
            scr_sound("glo_menuback");
            }
        }
    if(selected==4){
        if(global.nosound){
            global.nosound=0;
            scr_sound("glo_menuselect");
            }
        else{
            global.nosound=1;
            scr_sound("glo_menuback");
            }
        }
    if(selected==5){
        if(global.nomusic){
            global.nomusic=0;
            scr_sound("glo_menuselect");
            scr_music(music);
            }
        else{
            global.nomusic=1;
            scr_sound("glo_menuback");
            scr_stopmusic();
            }
        }
    if(selected==6){
        if(global.hidetime){
            global.hidetime=0;
            scr_sound("glo_menuselect");
            }
        else{
            global.hidetime=1;
            scr_sound("glo_menuback");
            }
        }
    }
Key Press Event for Key:

execute code:

if (!ignoreall){
if (tier>=2 && tier<100){
    scr_sound("glo_menumove");
    if (selected==1)
        selected=selections;
    else
        selected-=1;
    instance_create(obj_marker.x,obj_marker.y,obj_fade);
    }
}
Key Press Event for Key:

execute code:

//Options
if (tier==9){
    if(selected==2){
        if(global.noshake){
            global.noshake=0;
            scr_sound("glo_menuselect");
            }
        else{
            global.noshake=1;
            scr_sound("glo_menuback");
            }
        }
    if(selected==3){
        if(global.novoice){
            global.novoice=0;
            scr_sound("glo_menuselect");
            }
        else{
            global.novoice=1;
            scr_sound("glo_menuback");
            }
        }
    if(selected==4){
        if(global.nosound){
            global.nosound=0;
            scr_sound("glo_menuselect");
            }
        else{
            global.nosound=1;
            scr_sound("glo_menuback");
            }
        }
    if(selected==5){
        if(global.nomusic){
            global.nomusic=0;
            scr_sound("glo_menuselect");
            scr_music(music);
            }
        else{
            global.nomusic=1;
            scr_sound("glo_menuback");
            scr_stopmusic();
            }
        }
    if(selected==6){
        if(global.hidetime){
            global.hidetime=0;
            scr_sound("glo_menuselect");
            }
        else{
            global.hidetime=1;
            scr_sound("glo_menuback");
            }
        }
    }
Key Press Event for Key:

execute code:

if (!ignoreall){
if (tier>=2 && tier<100){
    scr_sound("glo_menumove");
    if (selected==selections)
        selected=1;
    else
        selected+=1;
    instance_create(obj_marker.x,obj_marker.y,obj_fade);    
    }
}
Key Press Event for C-key Key:

execute script scr_clearselection with arguments (0,0,0,0,0)
Key Press Event for X-key Key:

execute script scr_clearselection with arguments (0,0,0,0,0)
Key Press Event for Z-key Key:

execute script scr_clearselection with arguments (0,0,0,0,0)
Key Press Event for F4 Key:

execute code:

if (keyboard_check(vk_alt)){
    sound_stop_all();
    game_end();
    }
______________________________________________________

Information about object: obj_clearpix
Sprite: spr_clearpix
Solid: false
Visible: false
Depth: 1
Persistent: false
Parent: 
Mask: 

Create Event:

set Alarm 0 to 3
Alarm Event for alarm 0:

execute code:

speed=random(6)+1.5;
if (obj_clearsabot.slow)
    speed*=0.4;
Step Event:

execute code:

if (y<64){
    instance_create(x,64,obj_clearpixtrail)
    speed=random(6)+1.5;
    x=random(800);
    y=156;
    if (obj_clearsabot.slow)
        speed*=0.4;
    }
else if (y>536){
    instance_create(x,536,obj_clearpixtrail)
    speed=random(6)+1.5;
    x=random(800);
    y=444;
    if (obj_clearsabot.slow)
        speed*=0.4;
    }
if (abs(speed)>0)
instance_create(x,y,obj_clearpixtrail)
______________________________________________________

Information about object: obj_clearpixtrail
Sprite: spr_clearpix
Solid: false
Visible: true
Depth: 1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
alarm[0]=16;
}
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_cleariji
Sprite: spr_ijics
Solid: false
Visible: true
Depth: 10
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

x=-200;
speed=30;
alarm[0]=14;
image_single=0;
if ((global.sector==8 && global.specialtrigger1==0) || global.sector==2 || (global.sector==0 && global.killdata[798]>0))
    image_single=1;
if (global.killdata[797]>0 && global.sector==0){
    visible=0;
    with (obj_clearzoom)
        instance_destroy();
    }
Alarm Event for alarm 0:

execute code:

speed=0;
obj_clearsabot.tier=1;
//alarm[1]=30;
//alarm[2]=32;
//alarm[3]=34;
Alarm Event for alarm 1:

execute code:

image_single=1;
Alarm Event for alarm 2:

execute code:

image_single=2;
Alarm Event for alarm 3:

execute code:

image_single=3;
______________________________________________________

Information about object: obj_clearbinary1
Sprite: spr_clearbinary
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: obj_clearbinary
Mask: 

______________________________________________________

Information about object: obj_clearbinary2
Sprite: spr_clearbinary
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: obj_clearbinary
Mask: 

______________________________________________________

Information about object: obj_clearbinary3
Sprite: spr_clearbinary
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: obj_clearbinary
Mask: 

______________________________________________________

Information about object: obj_clearbinary4
Sprite: spr_clearbinary
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: obj_clearbinary
Mask: 

______________________________________________________

Information about object: obj_clearbinary5
Sprite: spr_clearbinary
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: obj_clearbinary
Mask: 

______________________________________________________

Information about object: obj_clearbinary6
Sprite: spr_clearbinary
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: obj_clearbinary
Mask: 

______________________________________________________

Information about object: obj_clearbinary7
Sprite: spr_clearbinary
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: obj_clearbinary
Mask: 

______________________________________________________

Information about object: obj_clearbinary8
Sprite: spr_clearbinary
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: obj_clearbinary
Mask: 

______________________________________________________

Information about object: obj_clearbinary9
Sprite: spr_clearbinary
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: obj_clearbinary
Mask: 

______________________________________________________

Information about object: obj_banana
Sprite: spr_banana
Solid: false
Visible: true
Depth: -1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
alarm[0]=100;
gravity=0.5;
gravity_direction=270;
if (!place_free(x,y)){
if (global.facing==0){
    move_outside_solid(0,64);
    x+=16;
    }
else{
    move_outside_solid(180,64);
    x-=16;
    }
}
}
Alarm Event for alarm 0:

execute code:

script_execute(scr_shakescreen,4);
tempid=instance_create(x,y,obj_mpfbexplosion);
tempid.banana=1
tempid.ijis=1;
instance_create(x,y,obj_explosioncenter);
repeat(30) instance_create(x-16+random(32),y-16+random(32),obj_mpfbspark2);
instance_destroy();
scr_sound("exp_mpfb");
Step Event:

execute code:

if (speed<2.2 && !place_free(x,y+2)){
    speed=0;
    move_contact_solid(270,-1);
    gravity=0;
    doit=1;
    }
if (doit==1)
    cycle+=1;
if (cycle==1)
    image_single=0;
if (cycle==4){
    image_single=1;
    }
if (cycle==7){
    image_single=2;
    x+=6;
    }
if (cycle==10){
    image_single=1;
    x-=6;
    }
if (cycle==13){
    image_single=0;
    x-=6;
    }
if (cycle==16){
    image_single=1;
    x+=6;
    }
scr_outside();
Collision Event with object obj_block:

execute code:

if (other.sprite_index==spr_lift){
instance_destroy();
instance_create(x,y,obj_bigsmoke);
}
else{
if (!doit){
move_bounce_solid(1);
if (speed>1)
    scr_sound("wea_banana");
speed*=0.5;
image_speed*=0.7;
}
}
Collision Event with object obj_glass:

execute code:

{
if (!doit){
move_bounce_all(1);
if (speed>1)
    scr_sound("wea_banana");
speed*=0.5;
image_speed*=0.7;
}
}
______________________________________________________

Information about object: obj_turret
Sprite: spr_turret
Solid: false
Visible: false
Depth: 2
Persistent: false
Parent: obj_enemy
Mask: 

Create Event:

execute code:

turret=1;
alarm[7]=2;
sprite_index=spr_turretappear;
image_single=0;
armor=200;
maxarmor=200;
if (global.suddendeath){
    armor=100;
    maxarmor=100;
    }
security=2;
resistance=1;
if (active){
    visible=1;
    sprite_index=spr_turret;
    image_single=0;
    if (facing==1)
        image_single=2;
    }
Alarm Event for alarm 0:

execute code:

sprite_index=spr_turret;
image_single=0;
alarm[2]=30;
alarm[3]=300;
angry=1;
if (x
Alarm Event for alarm 1:

execute code:

alarm[2]=30;
state=0;
scr_turretchargetell();
Alarm Event for alarm 2:

execute code:

if (!dead){
if (angry){
//Turn around
if (facing==0 && xobj_iji.x){
    facing=0;
    alarm[2]=4;
    image_single=1;
    }
else{
if (facing==0)
    image_single=0;
else
    image_single=2;
//Fire
if (weapon==0 || weapon==7){ //Machinegun
    alarm[1]=25+random(10);
    if (obj_sabot.machtot<=12)
        state=1;
   }
if (weapon==1){ //Rocket launcher
    alarm[1]=25+random(10);
    scr_sound("wea_rock");
    if (facing==0){
        tempid=instance_create(x-6,y+20,obj_enemyrocket);
        tempid.speed=-global.rocketspeed;
        tempid.image_single=1;
        tempid=instance_create(x-4,y+20,obj_rocketlaunch);
        tempid.sprite_index=spr_rocketlaunchleft;
        alarm[4]=3;
        image_single=3;
        }
    else{
        tempid=instance_create(x+16,y+20,obj_enemyrocket);
        tempid.speed=global.rocketspeed;
        tempid.image_single=0;
        instance_create(x+28,y+20,obj_rocketlaunch);
        alarm[4]=3;
        image_single=4;
        }
    }
if (weapon==2){ //Spread rockets
    scr_sound("wea_rock");
    alarm[1]=30+random(10);
    if (facing==0){
        tempid=instance_create(x-6,y+20,obj_enemyrocket);
        tempid.speed=-global.rocketspeed;
        tempid.image_single=1;
        tempid=instance_create(x-6,y+20,obj_enemyrocket);
        tempid.speed=global.rocketspeed-2;
        tempid.direction=174;
        tempid.image_single=1;
        tempid=instance_create(x-6,y+20,obj_enemyrocket);
        tempid.speed=global.rocketspeed-4;
        tempid.direction=186;
        tempid.image_single=1;
        tempid=instance_create(x-4,y+20,obj_rocketlaunch);
        tempid.sprite_index=spr_rocketlaunchleft;
        alarm[4]=3;
        image_single=3;
        }
    else{
        tempid=instance_create(x+16,y+20,obj_enemyrocket);
        tempid.speed=global.rocketspeed;
        tempid.image_single=0;
        tempid=instance_create(x+16,y+20,obj_enemyrocket);
        tempid.speed=global.rocketspeed-2;
        tempid.direction=6;
        tempid.image_single=0;
        tempid=instance_create(x+16,y+20,obj_enemyrocket);
        tempid.speed=global.rocketspeed-4;
        tempid.direction=-6;
        tempid.image_single=0;
        instance_create(x+28,y+20,obj_rocketlaunch);
        alarm[4]=3;
        image_single=4;
        }
    }
if (weapon==3){ //MPFB
    scr_sound("wea_mpfb");
    alarm[1]=35+random(20);
    script_execute(scr_shakescreen,1);
    if (facing==0){
        tempid=instance_create(x+4,y+18,obj_enemympfb);
        tempid.speed=global.mpfbspeed;
        tempid.direction=180;
        tempid=instance_create(x+4,y+18,obj_enemympfb);
        tempid.speed=global.mpfbspeed-4;
        tempid.direction=180;
        tempid=instance_create(x+4,y+18,obj_enemympfb);
        tempid.speed=global.mpfbspeed-8;
        tempid.direction=180;
        alarm[4]=3;
        image_single=3;
        }
    else{
        tempid=instance_create(x+36,y+18,obj_enemympfb);
        tempid.speed=global.mpfbspeed;
        tempid=instance_create(x+36,y+18,obj_enemympfb);
        tempid.speed=global.mpfbspeed-4;
        tempid=instance_create(x+36,y+18,obj_enemympfb);
        tempid.speed=global.mpfbspeed-8;
        alarm[4]=3;
        image_single=4;
        }
    }
if (weapon==4){ //Shocksplinter
    scr_sound("wea_shoc");
    alarm[1]=30+random(10);
    if (facing==0){
        tempid=instance_create(x+6,y+20,obj_enemyshock);
        tempid.speed=-global.shockspeed;
        (instance_create(x-4,y+20,obj_shockspark)).speed=-3;
        alarm[4]=3;
        image_single=3;
        }
    else{
        tempid=instance_create(x+4,y+20,obj_enemyshock);
        tempid.speed=global.shockspeed;
        (instance_create(x+28,y+20,obj_shockspark)).speed=3;
        alarm[4]=3;
        image_single=4;
        }
    }
if (weapon==5){ //Splintergun
    alarm[1]=25+random(10);
    state=1;
    }
if (weapon==6){ //Plasma cannon
    scr_sound("wea_plas");
    alarm[1]=35+random(20);
    scr_shakescreen(3);
    if (facing==0){
        tempid=instance_create(x+16,y+20,obj_enemyplasmatrace);
        with (tempid) scr_enemyplasmatrace(0);
        alarm[4]=3;
        image_single=3;
        }
    else{
        tempid=instance_create(x+16,y+20,obj_enemyplasmatrace);
        with (tempid) scr_enemyplasmatrace(1);
        alarm[4]=3;
        image_single=4;
        }
    }
}
}
}
Alarm Event for alarm 3:

execute code:

if (!dead && sprite_index==spr_turret){
    scr_sound("tur_lose");
state=0;
angry=0;
alarm[1]=0;
alarm[2]=0;
if (facing==0)
    image_single=0;
else
    image_single=2;
}
Alarm Event for alarm 4:

execute code:

if (!dead){
if (facing==0)
image_single=0;
else
image_single=2;
}
Alarm Event for alarm 5:

execute code:

if (!dropnothing){
if (weapon==0)
instance_create(x,y+32,obj_ammo1);
else if (weapon==1)
instance_create(x,y+32,obj_ammo3);
else if (weapon==2)
instance_create(x,y+32,obj_ammo3);
else if (weapon==3)
instance_create(x,y+32,obj_ammo5);
else if (weapon==4)
instance_create(x,y+32,obj_ammo9);
else if (weapon==5)
instance_create(x,y+32,obj_ammo9);
else if (weapon==6)
instance_create(x,y+32,obj_ammo10);
else if (weapon==7)
instance_create(x,y,obj_emptyshredder);
}
instance_destroy();
Alarm Event for alarm 6:

execute code:

alarm[5]=3;
sprite_index=spr_turretappear;
image_index=2;
image_speed=-1;
image_single=-1;
Alarm Event for alarm 7:

execute code:

kicked=0;
security=2+weapon;
Alarm Event for alarm 8:

execute code:

if (alarm[1]>=1){
    alarm[8]=4;
    instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_nanospark);
    repeat(2)
        (instance_create(bbox_left-8+random(bbox_right-bbox_left+16),bbox_top-4+random(bbox_bottom-bbox_top+8),obj_glassspark)).image_index=4;
    }
Step Event:

execute code:

if (countdown>0)
    countdown-=1;

if (angryprev==0 && angry==1 && !dead)
    scr_sound("tur_find");
angryprev=angry;

cfised=0;
thored=0;
//Lose sight
if ((x < obj_shakescreen.x-1000) || (x > obj_shakescreen.x+1000) || (y < obj_shakescreen.y-800) || (y > obj_shakescreen.y+800)){
    angry=0;
    alarm[1]=0;
    alarm[2]=0;
    alarm[3]=0;
    state=0;
    }
//Death
if (armor<=0){
if (!dead){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    scr_sound("exp_turret");
    instance_create(x,y,obj_turretdead);
    instance_create(x+16,y+32,obj_enemyrocketexplosion);
    instance_create(x+16,y+32,obj_explosioncenter);
    script_execute(scr_shakescreen,2);
    scr_turretdestroy();
    }
else
    scr_turretdestroy();
}
//Armor
if (armor20)
    speed=20;
if (dead && speed>0){
    if (hspeed<0)
        sprite_index=spr_turretheadright;
    else if (hspeed>0)
        sprite_index=spr_turretheadleft;
    }
Collision Event with object obj_block:

execute code:

scr_sound("glo_debris");
move_bounce_solid(1);
image_speed*=0.6;
speed*=0.6;

if (speed<2.5 && !place_free(x,y+2)){
    speed=0;
    move_contact_solid(270,-1);
    image_speed=0;
    gravity=0;
    }

if (other.ismeta){
with (other)
script_execute(scr_metabreak,8);
}
Collision Event with object obj_bullet:

execute code:

if (visible){
if (angry==0 && sprite_index==spr_turret){
    alarm[2]=30;
    scr_turretchargetell();
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
global.truce=0;
angry=1;
alarm[3]=300;
if (!stagger)
    armor-=10*global.atmult;
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stagger)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else{
        instance_create(x,y,obj_bullethit);
        instance_create(x,y,obj_smoke);
        }
    instance_destroy();
    }
}
Collision Event with object obj_pellet:

execute code:

if (visible){
if (angry==0 && sprite_index==spr_turret){
    alarm[2]=30;
    scr_turretchargetell();
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
global.truce=0;
angry=1;
alarm[3]=300;

if (other.stun){
    if (!dead){
        state=0;
        alarm[0]=0;
        alarm[1]=floor(15*(1+(global.attacklevel/10)));
        alarm[2]=0;
        alarm[8]=4;
        if (facing==0)
            image_single=0;
        else
            image_single=2;
        }
    }
else
    armor-=9*global.atmult;
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stun)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else{
        instance_create(x,y,obj_smoke);
        instance_create(x,y,obj_bullethit);
        }
    instance_destroy();
    }
}
Collision Event with object obj_kickbox:

execute code:

if (other.image_index==0 && active){
global.truce=0;
scr_sound("glo_kick");
if (other.sprite_index==spr_detonator){
    if (x>obj_iji.x)
    script_execute(scr_turretkick,2);
    else
    script_execute(scr_turretkick,1);
    }
else
    script_execute(scr_turretkick);
script_execute(scr_shakescreen,1);
}
Collision Event with object obj_rocketexplosion:

execute code:

if (!dead){
if (visible){
if (!other.dud)
armor=0;
}
}
else{
    if (!other.dud)
        scr_turretdestroy();
    }
Collision Event with object obj_mpfbexplosion:

execute code:

if (!dead){
if (visible){
if (!other.dud)
armor=0;
}
}
else{
    if (!other.dud)
        scr_turretdestroy();
    }
Collision Event with object obj_pulse:

execute code:

if (visible){
if (other.hyper==1 && armor<=maxarmor/3){
    if (global.voc_glo_kick==0)
        scr_sound("glo_kick");
    scr_shakescreen(1);
    if (other.hspeed<0)
        scr_turretkick(1);
    else
        scr_turretkick(2);
    }
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (angry==0 && sprite_index==spr_turret){
    alarm[2]=30;
    scr_turretchargetell();
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
global.truce=0;
angry=1;
alarm[3]=300;
if (!other.linker)
    armor-=2*global.atmult;
}
if (other.linker)
    scr_pulselink(2);
Collision Event with object obj_enemyrocketexplosion:

execute code:

if (!dead){
if (visible){
if (!other.dud)
armor=0;
}
}
else{
    if (!other.dud)
        scr_turretdestroy();
    }
Collision Event with object obj_shockexplosion:

execute code:

if (!dead){
if (visible){
if (!other.dud)
armor=0;
}
}
else{
    if (!other.dud)
        scr_turretdestroy();
    }
Collision Event with object obj_shockballexplosion:

execute code:

if (visible){
if (other.dud==0){
    armor-=30*global.atmult;
    if (angry==0 && sprite_index==spr_turret){
        alarm[2]=30;
        scr_turretchargetell();
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    angry=1;
    alarm[3]=300;
    }
}
Collision Event with object obj_enemympfbexplosion:

execute code:

if (!dead){
if (visible){
if (!other.dud)
armor=0;
}
}
else{
    if (!other.dud)
        scr_turretdestroy();
    }
Collision Event with object obj_pushbox:

execute code:

if (visible){
if (dead==0){
    if (global.truce){
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    if (global.cracklevel>=security){
        if (cracked==0){
            global.security=security;
            crackmark=1;
            if (weapon==0) global.cracktext="Machinegun Turret#H1 A"+string(maxarmor)+" W1#Security: ";
            else if (weapon==1) global.cracktext="Rocket Turret#H1 A"+string(maxarmor)+" W1#Security: ";
            else if (weapon==2) global.cracktext="Spread Turret#H1 A"+string(maxarmor)+" W1#Security: ";
            else if (weapon==3) global.cracktext="Devastator Turret#H1 A"+string(maxarmor)+" W1#Security: ";
            else if (weapon==4) global.cracktext="Shock Turret#H1 A"+string(maxarmor)+" W1#Security: ";
            else if (weapon==5) global.cracktext="Splinter Turret#H1 A"+string(maxarmor)+" W1#Security: ";
            else if (weapon==6) global.cracktext="Plasma Turret#H1 A"+string(maxarmor)+" W1#Security: ";
            else if (weapon==7) global.cracktext="Corrupted Turret#H1 A"+string(maxarmor)+" W1#Security: ";
            global.cracktext+=string(global.security);
            if (global.security==10)
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            else
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            script_execute(scr_begincrack);
            }
        else{
            global.erasetop=0;
            global.topmessage="Subject has already been cracked";
            }
        }
    else{
        global.erasetop=0;
        if (weapon==0) global.topmessage="You need a Crack skill of "+string(security)+" to crack a Machinegun Turret";
        else if (weapon==1) global.topmessage="You need a Crack skill of "+string(security)+" to crack a Rocket Turret";
        else if (weapon==2) global.topmessage="You need a Crack skill of "+string(security)+" to crack a Spread Turret";
        else if (weapon==3) global.topmessage="You need a Crack skill of "+string(security)+" to crack a Devastator Turret";
        else if (weapon==4) global.topmessage="You need a Crack skill of "+string(security)+" to crack a Shock Turret";
        else if (weapon==5) global.topmessage="You need a Crack skill of "+string(security)+" to crack a Splinter Turret";
        else if (weapon==6) global.topmessage="You need a Crack skill of "+string(security)+" to crack a Plasma Turret";
        else if (weapon==7) global.topmessage="You need a Crack skill of "+string(security)+" to crack a Corrupted Turret";
        scr_sound("glo_crackfail");
        global.ignorestation=90;
        }
    }
else{
    global.erasetop=0;
    global.topmessage="Unable to crack; malfunction detected";
    }
}
Collision Event with object obj_thor:

execute code:

{
if (!dead){
if (visible){
if (thored==0){
    if (angry==0 && sprite_index==spr_turret){
        alarm[2]=30;
        scr_turretchargetell();
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    armor-=35*global.atmult;
    angry=1;
    alarm[3]=300;
    thored=1;
    }
}
}
else{
    if (global.specialbake==0) maximum=25;
    else maximum=120;
    if (instance_number(obj_scrapwhite)
Collision Event with object obj_lift:

execute code:

if (global.specialbake==0) maximum=25;
else maximum=120;
if (instance_number(obj_scrapwhite)
Collision Event with object obj_enemyshockballexplosion:

execute code:

if (visible){
if (other.dud==0){
    armor-=30;
    }
}
Collision Event with object obj_enemyshockexplosion:

execute code:

if (!dead){
if (visible){
if (!other.dud)
armor=0;
}
}
else{
    if (!other.dud)
        scr_turretdestroy();
    }
Collision Event with object obj_alliedenemy:

execute code:

//Shredder
if (speed>6 && other.enemytype==5){
    other.shredderhp-=100;
    if (countdown>0)
        other.ijikill=1;
    else
        other.ijikill=0;
    if (other.shredderhp<=0 && other.ijikill && other.killtype<6)
        other.killtype=6;
    scr_sound("glo_kick");
    instance_destroy();
    script_execute(scr_shakescreen,1);
    if (global.specialbake==0) maximum=25;
    else maximum=120;
    if (instance_number(obj_scrapwhite)6 && other.enemytype==14){
    other.hp-=1;
    if (countdown>0)
        other.ijikill=1;
    else
        other.ijikill=0;
    if (other.hp<=0 && other.ijikill && other.killtype<6)
        other.killtype=6;
    if (other.state!=10){
        if (other.angry==0 && (other.state==0 || other.state==1))
            other.alarm[2]=1;
        other.angry=1;
        other.targetiji=300;
        other.alarm[5]=300;
        }
    scr_sound("glo_kick");
    instance_destroy();
    script_execute(scr_shakescreen,1);
    with (other){
        if (annihilatorbeta)
            scr_betaannihilatorpain();
        else
            scr_annihilatorpain();
        }
    if (global.specialbake==0) maximum=25;
    else maximum=120;
    if (instance_number(obj_scrapwhite)6 && other.hp>0 && !other.takingpain && !other.rapidfirempfb){
    other.armor=-10;
    other.angry=1;
    other.targetiji=300;
    if (countdown>0)
        other.ijikill=1;
    else
        other.ijikill=0;
    if (other.krotera && global.difficulty==0)
        other.hp-=2;
    if (other.krotera && global.difficulty==1)
        other.hp-=1;
    if (other.hp<=0)
        other.hp=1;
    if (other.hp<=1 && other.ijikill && other.killtype<6)
        other.killtype=6;
    scr_sound("glo_kick");
    instance_destroy();
    script_execute(scr_shakescreen,1);
    if (global.specialbake==0) maximum=25;
    else maximum=120;
    if (instance_number(obj_scrapwhite)
Collision Event with object obj_enemydetonator:

execute code:

if (other.image_index==0 && active){
scr_sound("glo_kick");
if (x>other.x)
    script_execute(scr_turretkick,2);
else
    script_execute(scr_turretkick,1);
script_execute(scr_shakescreen,1);
}
Collision Event with object obj_sec9elec:

execute code:

if (other.elec==1){
    if (global.specialbake==0) maximum=25;
    else maximum=120;
    if (instance_number(obj_scrapwhite)
Collision Event with object obj_impulseexplosion:

execute code:

if (visible && !other.dud){
    if (!dead){
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        (instance_create(x,y,obj_turretpole)).image_single=facing;
        scr_turretdestroy();
        }
    else
        scr_turretdestroy();
    }
Draw Event:

execute code:

draw_sprite(sprite_index,image_index,floor(x),floor(y));
if (sprite_index==spr_turret){
    drawlight=0;
    lightxoff=0;
    if (image_single==0){
        drawlight=1;
        lightxoff=19;
        }
    else if (image_single==2){
        drawlight=1;
        lightxoff=0;
        }
    else if (image_single==3){
        drawlight=1;
        lightxoff=19;
        }
    else if (image_single==4){
        drawlight=1;
        lightxoff=0;
        }
    if (drawlight)
        draw_sprite(spr_turretlight,weapon,x+5+lightxoff,y+15);
    }
______________________________________________________

Information about object: obj_turretdead
Sprite: spr_turretdead
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

{
if ((x < obj_shakescreen.x-1000) || (x > obj_shakescreen.x+1000) || (y < obj_shakescreen.y-800) || (y > obj_shakescreen.y+800))
    totcyc=300;
if (totcyc<250){
cycle+=1;
totcyc+=1;
}
if (cycle==5){
cycle=0;
instance_create(x+14+random(6),y+44+random(6),obj_smoke);
}
}
______________________________________________________

Information about object: obj_turretpole
Sprite: spr_turretpole
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_bullethit
Sprite: spr_bullethit
Solid: false
Visible: true
Depth: -3
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
alarm[0]=3;
}
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_pellethit
Sprite: spr_bullethit
Solid: false
Visible: true
Depth: -3
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
alarm[0]=3;
}
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_lift
Sprite: spr_lift
Solid: true
Visible: true
Depth: 1
Persistent: false
Parent: obj_block
Mask: 

Create Event:

execute code:

lift=1;
End Step Event:

execute code:

if (vspeedx>0){
    if (!place_free(x-1,y-16)){
        temprand=random(1);
        if (temprand>0.8 && !global.specialbake){
            tempid=instance_create(x+1,y-1,obj_pixspark);
            tempid.speed=1+random(4);
            tempid.direction=random(45);
            tempid.alarm[0]=5+floor(random(5));
            }
        }
    if (!place_free(x+1,y-16)){
        temprand=random(1);
        if (temprand>0.8 && !global.specialbake){
            tempid=instance_create(x+127,y-1,obj_pixspark);
            tempid.speed=1+random(4);
            tempid.direction=180-random(45);
            tempid.alarm[0]=5+floor(random(5));
            }
        }
    }
if (vspeedx<0){
    if (!place_free(x-1,y+16)){
        temprand=random(1);
        if (temprand>0.8 && !global.specialbake){
            tempid=instance_create(x+1,y+17,obj_pixspark);
            tempid.speed=1+random(4);
            tempid.direction=-random(45);
            tempid.alarm[0]=5+floor(random(5));
            }
        }
    if (!place_free(x+1,y+16)){
        temprand=random(1);
        if (temprand>0.8 && !global.specialbake){
            tempid=instance_create(x+127,y+17,obj_pixspark);
            tempid.speed=1+random(4);
            tempid.direction=180+random(45);
            tempid.alarm[0]=5+floor(random(5));
            }
        }
    }

______________________________________________________

Information about object: obj_liftpoint
Sprite: spr_visioncheck
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_blockenemy
Sprite: spr_crate1
Solid: false
Visible: false
Depth: 100
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_enemyshockball
Sprite: spr_shockball
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
direction=random(360);
speed+=6;
gravity=0.8;
gravity_direction=random(360);
dud=1;
alarm[0]=3;
alarm[1]=10;
alarm[2]=14;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

execute code:

{
alarm[0]=3;
instance_create(x,y,obj_shockballtrail);
}
Alarm Event for alarm 1:

set variable dud to 0
Alarm Event for alarm 2:

execute code:

tempid=instance_create(x,y,obj_enemyshockballexplosion);
tempid.target=target;
tempid.ijis=ijis;
script_execute(scr_shakescreen,1);
instance_destroy();
Step Event:

execute code:

if (speed>30)
    speed=30;
scr_outside();
Collision Event with object obj_iji:

execute code:

tempid=instance_create(x,y,obj_enemyshockballexplosion);
tempid.target=target;
tempid.ijis=ijis;
script_execute(scr_shakescreen,1);
instance_destroy();

Collision Event with object obj_block:

execute code:

{
tempid=instance_create(x,y,obj_enemyshockballexplosion);
tempid.target=target;
tempid.ijis=ijis;
script_execute(scr_shakescreen,1);
instance_destroy();
}
Collision Event with object obj_glass:

execute code:

{
tempid=instance_create(x,y,obj_enemyshockballexplosion);
tempid.target=target;
tempid.ijis=ijis;
script_execute(scr_shakescreen,1);
instance_destroy();
}
Collision Event with object obj_meta:

execute code:

{
tempid=instance_create(x,y,obj_enemyshockballexplosion);
tempid.target=target;
tempid.ijis=ijis;
script_execute(scr_shakescreen,1);
instance_destroy();
}
Collision Event with object obj_tasenenemy:

execute code:

{
if (dud==0){
    tempid=instance_create(x,y,obj_enemyshockballexplosion);
    tempid.target=target;
    tempid.ijis=ijis;
    script_execute(scr_shakescreen,1);
    instance_destroy();
    }
}
______________________________________________________

Information about object: obj_enemyshockballexplosion
Sprite: spr_shockexplosion
Solid: false
Visible: true
Depth: -4
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

scr_sound("exp_spli");
image_speed=0.5;
dud=1;
alarm[0]=14;
alarm[1]=2;
alarm[2]=1;
alarm[3]=2;
alarm[4]=4;
alarm[5]=8;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 1:

execute code:

alarm[1]=2;
if (global.specialbake==0)
instance_create(x+random(50)-25,y+random(50)-25,obj_shockspark);
Alarm Event for alarm 2:

set variable dud to 0
Alarm Event for alarm 3:

set variable dud to 1
Alarm Event for alarm 4:

execute code:

sprite_index=spr_shockexplosion2;
Alarm Event for alarm 5:

execute code:

sprite_index=spr_shockexplosion3;
______________________________________________________

Information about object: obj_enemyshock
Sprite: spr_shock
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=3;
obj_sabot.raveflash=0;
alarm[1]=1;
Alarm Event for alarm 0:

execute code:

{
alarm[0]=3;
instance_create(x,y,obj_shocktrail);
}
Alarm Event for alarm 1:

execute code:

if (!reflected && !global.specialbake){
tempid=instance_create(x-hspeed,y,obj_shockshell);
if (hspeed>0)
    tempid.hspeed=-tempid.hspeed;
    }
Step Event:

execute script scr_outside with arguments (0,0,0,0,0)
execute code:

if (floorable){
    if (!place_free(x,y+31)){
        tempy=y;
        move_contact_solid(270,30);
        instance_create(x+hspeed,y,obj_shockspark);
        y=tempy;
        }
    }
Collision Event with object obj_iji:

execute script scr_shockhit with arguments (1,0,0,0,0)
Collision Event with object obj_block:

execute script scr_shockhit with arguments (1,0,0,0,0)
Collision Event with object obj_glass:

execute script scr_shockhit with arguments (1,0,0,0,0)
Collision Event with object obj_meta:

execute script scr_shockhit with arguments (1,0,0,0,0)
Collision Event with object obj_tasenenemy:

execute script scr_shockhit with arguments (1,0,0,0,0)
______________________________________________________

Information about object: obj_enemyshockexplosion
Sprite: spr_shockexplosion
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
dud=1;
alarm[0]=14;
alarm[1]=2;
alarm[2]=1;
alarm[3]=2;
alarm[4]=4;
alarm[5]=8;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 1:

execute code:

alarm[1]=2;
if (global.specialbake==0)
instance_create(x+random(50)-25,y+random(50)-25,obj_shockspark);
Alarm Event for alarm 2:

set variable dud to 0
Alarm Event for alarm 3:

set variable dud to 1
Alarm Event for alarm 4:

execute code:

sprite_index=spr_shockexplosion2;
Alarm Event for alarm 5:

execute code:

sprite_index=spr_shockexplosion3;
______________________________________________________

Information about object: obj_enemyplasmatrace
Sprite: spr_longbullet
Solid: false
Visible: false
Depth: -5
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

//Don't execute scr_enemyplasmatrace here
//instead the enemy should do it
alarm[0]=1;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

destroy the instance
Step Event:

execute script scr_outside with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_mpfbspark2
Sprite: spr_mpfbspark
Solid: false
Visible: true
Depth: -3
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
image_speed=0.333;
alarm[0]=42-random(5);
speed=random(15)+8;
direction=random(360);
}
Alarm Event for alarm 0:

destroy the instance
Step Event:

execute code:

{
speed*=0.9;
}
______________________________________________________

Information about object: obj_slopeb
Sprite: spr_block
Solid: true
Visible: false
Depth: 0
Persistent: false
Parent: obj_slopel
Mask: 

______________________________________________________

Information about object: obj_fadeblack
Sprite: spr_block
Solid: false
Visible: true
Depth: -200
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
factor=random(6)+4;
}
Draw Event:

execute code:

{
if (stretch<1100)
    stretch+=factor;
draw_sprite_stretched(spr_block,0,x,y-250,8,stretch);
}
______________________________________________________

Information about object: obj_reflector
Sprite: spr_detonator2
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=7;
alarm[1]=4;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 1:

execute code:

{
dud=1;
}
Alarm Event for alarm 2:

execute script scr_reflectorexplo with arguments (1,0,0,0,0)
Collision Event with object obj_enemyrocket:

execute code:

if (dud==0){
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x+21,y,obj_rocket);
        tempid.impulse=impulse;
        if (impulse){
            tempid.sprite_index=spr_impulserocket;
            tempid.speed=-abs(speed);
            }
        else
            tempid.speed=-global.rocketspeed;
        tempid.image_single=1;
        tempid.ijis=ijis;
        if (global.rrkills==1)
            tempid.ijis=1;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x+10,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)>=bbox_left+((bbox_right-bbox_left)/2) && other.hspeed<0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x,y,obj_rocket);
        tempid.impulse=impulse;
        if (impulse){
            tempid.sprite_index=spr_impulserocket;
            tempid.speed=abs(speed);
            }
        else
            tempid.speed=global.rocketspeed;
        tempid.image_single=0;
        tempid.ijis=ijis;
        if (global.rrkills==1)
            tempid.ijis=1;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x+10,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
}
Collision Event with object obj_enemympfb:

execute code:

{
if (dud==0){
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x,y,obj_mpfb);
        tempid.ijis=ijis;
        if (global.rrkills==1)
            tempid.ijis=1;
        tempid.direction=direction+180;
        tempid.speed=speed;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)>=bbox_left+((bbox_right-bbox_left)/2) && other.hspeed<0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x,y,obj_mpfb);
        tempid.ijis=ijis;
        if (global.rrkills==1)
            tempid.ijis=1;
        tempid.direction=direction+180;
        tempid.speed=speed;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
}
}
Collision Event with object obj_enemyshockball:

execute code:

{
if (dud==0){
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x,y,obj_shockball);
        tempid.ijis=ijis;
        if (global.rrkills==1)
            tempid.ijis=1;
        tempid.speed=25;
        tempid.direction=180;
        tempid.dud=0;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)>=bbox_left+((bbox_right-bbox_left)/2) && other.hspeed<0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x,y,obj_shockball);
        tempid.ijis=ijis;
        if (global.rrkills==1)
            tempid.ijis=1;
        tempid.speed=25;
        tempid.direction=0;
        tempid.dud=0;   
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
}
}
Collision Event with object obj_enemyshock:

execute code:

{
if (dud==0){
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x,y,obj_shock);
        tempid.ijis=ijis;
        if (global.rrkills==1)
            tempid.ijis=1;
        tempid.speed=-global.shockspeed;
        tempid.reflected=1;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)>=bbox_left+((bbox_right-bbox_left)/2) && other.hspeed<0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x,y,obj_shock);
        tempid.ijis=ijis;
        if (global.rrkills==1)
            tempid.ijis=1;
        tempid.speed=global.shockspeed;
        tempid.reflected=1;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
}
}
Collision Event with object obj_komatorocket:

execute code:

{
if (dud==0){
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x+21,y,obj_rocket);
        tempid.ijis=ijis;
        if (global.rrkills==1)
            tempid.ijis=1;
        tempid.impulse=impulse;
        if (impulse){
            tempid.sprite_index=spr_impulserocket;
            tempid.speed=-abs(speed);
            }
        else
            tempid.speed=-global.rocketspeed;
        tempid.image_single=1;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x+10,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)>=bbox_left+((bbox_right-bbox_left)/2) && other.hspeed<0){
    with (other){
        tempid=instance_create(x,y,obj_rocket);
        tempid.ijis=ijis;
        if (global.rrkills==1)
            tempid.ijis=1;
        tempid.impulse=impulse;
        if (impulse){
            tempid.sprite_index=spr_impulserocket;
            tempid.speed=abs(speed);
            }
        else
            tempid.speed=global.rocketspeed;
        tempid.image_single=0;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x+10,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
}
}
Collision Event with object obj_komatompfb:

execute code:

if (dud==0){
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x,y,obj_mpfb);
        tempid.ijis=ijis;
        if (global.rrkills==1)
            tempid.ijis=1;
        tempid.direction=direction+180;
        tempid.speed=speed;
        if (global.sector==15)
            tempid.wakeless=1;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)>=bbox_left+((bbox_right-bbox_left)/2) && other.hspeed<0){
    with (other){
        tempid=instance_create(x,y,obj_mpfb);
        tempid.ijis=ijis;
        if (global.rrkills==1)
            tempid.ijis=1;
        tempid.direction=direction+180;
        tempid.speed=speed;
        if (global.sector==15)
            tempid.wakeless=1;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
}
Collision Event with object obj_laserdagger:

execute code:

if (!dud){
    if (other.speed<10)
        other.speed+=10;
    other.direction=point_direction(x,y,other.x,other.y);
    scr_sound("glo_reflect");
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(other.x,other.y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    }
Collision Event with object obj_rockethail:

execute code:

if (!dud && other.speed>0){
    if (other.speed<10)
        other.speed+=10;
    other.direction=point_direction(x,y,other.x,other.y);
    scr_sound("glo_reflect");
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(other.x,other.y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    }
Collision Event with object obj_enemythor:

execute script scr_reflectorexplo with arguments (0,0,0,0,0)
Collision Event with object obj_ripper:

execute script scr_reflectorexplo with arguments (0,0,0,0,0)
Collision Event with object obj_ripper4:

execute code:

if (other.image_single>2)
    scr_reflectorexplo();
Collision Event with object obj_ripper42:

execute code:

if (other.image_single>2)
    scr_reflectorexplo();
Collision Event with object obj_rageburst2:

execute code:

if (other.image_single>0)
    scr_reflectorexplo();
______________________________________________________

Information about object: obj_acmachine
Sprite: spr_acmachine
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
security=2;
Collision Event with object obj_iji:

execute code:

if (global.ignorestation==0){
global.erasetop=0;
if (cracked)
    global.topmessage="This machine displays `Cracked by Iji, losers`";
else
    global.topmessage="This machine displays the number `"+string(counter)+"`";
}
Collision Event with object obj_pushbox:

execute code:

if (global.cracklevel>=security){
    if (cracked==0){
        global.security=security;
        crackmark=1;
        global.cracktext="Programmed by Yuka#[Hello world!]#Security: ";
        global.cracktext+=string(global.security);
        if (global.security==10)
            global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
        else
            global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
        script_execute(scr_begincrack);
        }
    else{
        global.erasetop=0;
        global.topmessage="Subject has already been cracked";
        }
    }
else{
    global.ignorestation=60;
    global.erasetop=0;
    global.topmessage="You need a Crack skill of "+string(security)+" to crack this machine";
    }
______________________________________________________

Information about object: obj_birdie
Sprite: spr_birdie
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_enemy
Mask: 

Create Event:

execute code:

{
image_speed=0.5;
direction=random(90)+135;
speed=random(3)+1.5;
}
Step Event:

execute code:

{
if (x>8768)
    instance_destroy();

if (vspeed>0)
    image_single=image_index;
else{
    image_single=-1;
    image_speed=0.5;
    }

if (lengthnext<=0){
    rotnext=random(2);
    lengthnext=random(20)+5;
    }
lengthnext-=1;
if (x<8300){
    if (direction<180 && direction>90)
        rotnext=1.5;
    else if (direction>=180 && direction<270)
        rotnext=0.5;
    lengthnext=15;
    }
    
if (rotnext<1)
    direction+=3;
else
    direction-=3;

}
Collision Event with object obj_block:

bounce precisely against solid objects
Collision Event with object obj_bullet:

execute code:

{
instance_destroy();
obj_acmachine.counter+=1;
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
}
Collision Event with object obj_pellet:

execute code:

{
instance_destroy();
obj_acmachine.counter+=1;
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
}
Collision Event with object obj_rocket:

execute code:

{
with (other)
scr_rockethit();
}
Collision Event with object obj_rocketexplosion:

execute code:

{
if (!other.dud){
instance_destroy();
obj_acmachine.counter+=1;
}
}
Collision Event with object obj_blockenemy:

bounce precisely against all objects
______________________________________________________

Information about object: obj_birdnest
Sprite: spr_pushbox
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
alarm[0]=random(190)+800;
}
Alarm Event for alarm 0:

execute code:

{
if (instance_number(obj_birdie<40))
instance_create(x,y,obj_birdie);
alarm[0]=random(600);
}
______________________________________________________

Information about object: obj_crumble2
Sprite: spr_crumble2
Solid: true
Visible: true
Depth: 0
Persistent: false
Parent: obj_block
Mask: 

Collision Event with object obj_rocketexplosion:

execute code:

{
if (global.specialbake==0)
i=30;
else
i=10;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(80),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
Collision Event with object obj_enemyrocketexplosion:

execute code:

{
if (global.specialbake==0)
i=30;
else
i=10;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(80),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
Collision Event with object obj_impulseexplosion:

execute code:

{
if (global.specialbake==0)
i=30;
else
i=10;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(80),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
______________________________________________________

Information about object: obj_sec1reaver
Sprite: spr_sec1reaver
Solid: false
Visible: true
Depth: 10000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.2;
______________________________________________________

Information about object: obj_airspark
Sprite: spr_airspark
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=3;
Alarm Event for alarm 0:

execute code:

instance_destroy();
______________________________________________________

Information about object: obj_visionchecke
Sprite: spr_visioncheck
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

scr_outside();
cycle+=1;
if (cycle>=100)
    instance_destroy();
Collision Event with object obj_block:

destroy the instance
Collision Event with object obj_tasensoldier:

execute code:

with (other){
    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
    global.truce=0;
    angry=1;
    alarm[5]=300;
    targetiji=300;
    }
Collision Event with object obj_tasenscout:

execute code:

with (other){
    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
    global.truce=0;
    angry=1;
    alarm[5]=300;
    targetiji=300;
    }
Collision Event with object obj_tasencommander:

execute code:

with (other){
    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
    global.truce=0;
    angry=1;
    alarm[5]=300;
    targetiji=300;
    }
Collision Event with object obj_tasenelite:

execute code:

if (!other.krotera){
with (other){
    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
    global.truce=0;
    angry=1;
    alarm[5]=300;
    targetiji=300;
    }
}
Collision Event with object obj_komatotrooper:

execute code:

with (other){
    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
    angry=1;
    alarm[5]=300;
    targetiji=300;
    }
Collision Event with object obj_tasenshredder:

execute code:

with (other){
    if (angry==0)
        alarm[2]=1;
    angry=1;
    alarm[5]=300;
    targetiji=300;
    }
Collision Event with object obj_komatoberserker:

execute code:

with (other){
    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
    angry=1;
    alarm[5]=300;
    targetiji=300;
    }
Collision Event with object obj_komatobeast:

execute code:

with (other){
    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
    angry=1;
    alarm[5]=300;
    targetiji=300;
    }
Collision Event with object obj_komatoannihilator:

execute code:

with (other){
    if (state!=10){
    if (angry==0 && (state==0 || state==1))
        alarm[2]=1;
    angry=1;
    alarm[5]=300;
    targetiji=300;
    }
    }
Collision Event with object obj_skysmasher:

execute code:

with (other)
scr_smasherwake();
______________________________________________________

Information about object: obj_ribbon
Sprite: spr_ribbon
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

if (global.state==1 && !global.ignoreall){
global.ignoreall=1;
with (other){
timeline_index=tim_getribbon;
timeline_running=true;
timeline_position=0;
with (obj_visioncheck)
    instance_destroy();
with (obj_visionchecke)
    instance_destroy();
with (obj_alliedenemy)
    angry=0;
}
}

______________________________________________________

Information about object: obj_blit
Sprite: spr_blitjump
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: obj_enemy
Mask: 

Create Event:

execute code:

image_speed=0.5;
facing=floor(random(2));
image_single=facing;
alarm[0]=1;
Alarm Event for alarm 0:

execute code:

alarm[0]=ceil(random(15))+5;
if (!place_free(x,y+1)){
//People are close
if (distance_to_object(obj_alliedenemy)<128){
    scr_sound("glo_blit");
    action=0;
    walk=0;
    jump=1;
    vspeed=-(random(10)+2);
    tempid=instance_nearest(x,y,obj_alliedenemy);
    if (x<(tempid.x+tempid.bbox_right)/2)
        jumpspeed=random(8)+global.really*8;
    else
        jumpspeed=-random(8)+global.really*8;
    }
else if (distance_to_object(obj_iji)<128 && obj_iji.overload!=3){
    scr_sound("glo_blit");
    action=0;
    walk=0;
    jump=1;
    vspeed=-(random(10)+2);
    if (x
Step Event:

execute code:

//Fall
if (place_free(x,y+1)){
    gravity=1;
    gravity_direction=270;
    if (vspeed>20)
        vspeed=20;
    }
//Hit floor
if (!place_free(x,y+vspeed+1) && vspeed>0){
    jump=0;
    vspeed=0;
    gravity=0;
    move_contact_solid(270,32);
    }
//Hit cieling
if (!place_free(x,y+vspeed-1) && vspeed<0){
    vspeed=0;
    move_contact_solid(90,-1);
    }
//Walk
if (walk){
    image_single=-1;
    image_speed=0.5;
    if (facing==0){
        sprite_index=spr_blitleft;
        x-=1+global.really*3;
        if (!place_free(x,y)){
            if (place_free(x,y-1))
                y-=1;
            else
                facing=1;
            }
        if (place_free(x-1,y+16) || place_meeting(x-1,y,obj_blockenemy) || place_meeting(x-1,y,obj_glass))
            facing=1;
        }
    else{
        sprite_index=spr_blitright;
        x+=1+global.really*3;
        if (!place_free(x,y)){
            if (place_free(x,y-1))
                y-=1;
            else
                facing=0;
            }
        if (place_free(x+1,y+16) || place_meeting(x+1,y,obj_blockenemy) || place_meeting(x+1,y,obj_glass))
            facing=0;
        }
    }
//Jump
else if (jump){
    x+=jumpspeed;
    if (!place_free(x+jumpspeed,y+vspeed) || place_meeting(x+jumpspeed,y+vspeed,obj_blockenemy) || place_meeting(x+jumpspeed,y+vspeed,obj_glass)){
        jumpspeed*=-0.5;
        x=xprevious;
        y=yprevious;
        }
    sprite_index=spr_blitjump;
    if (jumpspeed>=0)
        image_single=0;
    else
        image_single=1;
    }
//Stand
else{
    image_single=0;
    if (facing==0)
        sprite_index=spr_blitleft;
    if (facing==1)
        sprite_index=spr_blitright;
    }

Collision Event with object obj_iji:

execute code:

if (!other.takingpain){
if (other.shredder)
    other.shredderhp-=1;
else
    global.armor-=(2/global.armorlevel);
if (instance_number(obj_ijisplat)<5)
instance_create(x,y,obj_ijisplat);
}
Collision Event with object obj_tasensoldier:

execute code:

other.ijikill=0;
other.armor-=2;
if (instance_number(obj_ijisplat)<5)
instance_create(x,y,obj_ijisplat);
if (other.angry==0 && other.sprite_index!=spr_tasensoldier_pain && other.sprite_index!=spr_tasensoldier_painleft){
other.alarm[2]=25+random(10);
other.state=1;
}
Collision Event with object obj_tasenscout:

execute code:

other.ijikill=0;
other.armor-=2;
if (instance_number(obj_ijisplat)<5)
instance_create(x,y,obj_ijisplat);
if (other.angry==0){
other.alarm[2]=25+random(10);
other.state=1;
}
Collision Event with object obj_tasencommander:

execute code:

other.ijikill=0;
other.armor-=2;
if (instance_number(obj_ijisplat)<5)
instance_create(x,y,obj_ijisplat);
if (other.angry==0 && other.sprite_index!=spr_tasencommander_pain && other.sprite_index!=spr_tasencommander_painleft){
other.alarm[2]=25+random(10);
other.state=1;
}
Collision Event with object obj_tasenelite:

execute code:

other.ijikill=0;
other.armor-=2;
if (instance_number(obj_ijisplat)<5)
instance_create(x,y,obj_ijisplat);
if (!other.angry && !other.dead && other.sprite_index!=spr_tasenelite_pain && other.sprite_index!=spr_tasenelite_painleft){
other.alarm[2]=25+random(10);
other.state=1;
}
Collision Event with object obj_komatotrooper:

execute code:

other.ijikill=0;
other.armor-=2;
if (instance_number(obj_ijisplat)<5)
instance_create(x,y,obj_ijisplat);
if (other.angry==0 && other.sprite_index!=spr_komatotrooper_pain && other.sprite_index!=spr_komatotrooper_painleft){
other.alarm[2]=25+random(10);
other.state=1;
}
Collision Event with object obj_komatoberserker:

execute code:

other.ijikill=0;
other.armor-=2;
if (instance_number(obj_ijisplat)<5)
instance_create(x,y,obj_ijisplat);
if (other.angry==0 && other.sprite_index!=spr_komatoberserker_pain && other.sprite_index!=spr_komatoberserker_painleft){
other.alarm[2]=25+random(10);
other.state=1;
}
Collision Event with object obj_komatoassassin:

execute code:

other.ijikill=0;
other.armor-=2;
if (instance_number(obj_ijisplat)<5)
instance_create(x,y,obj_ijisplat);

Collision Event with object obj_komatobeast:

execute code:

other.ijikill=0;
other.armor-=2;
if (instance_number(obj_ijisplat)<5)
instance_create(x,y,obj_ijisplat);
if (other.angry==0){
    other.alarm[2]=25+random(10);
    other.state=1;
    }
______________________________________________________

Information about object: obj_blitnest
Sprite: spr_blitright
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

if (triggered==0 && distance_to_object(obj_iji)<128){
    triggered=1;
    cyclemax=random(15)+2;
    }
if (triggered>0 && triggered<5){
    cycle+=1;
    if (cycle>=cyclemax){
        triggered+=1;
        cyclemax=random(15)+2;
        cycle=0;
        instance_create(x,y,obj_blit);
        }
    }
______________________________________________________

Information about object: obj_tasenenemy
Sprite: spr_sabot
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_alliedenemy
Mask: 

______________________________________________________

Information about object: obj_komatoenemy
Sprite: spr_sabot
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_alliedenemy
Mask: 

______________________________________________________

Information about object: obj_alliedenemy
Sprite: spr_sabot
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: obj_enemy
Mask: 

Collision Event with object obj_nanoflash:

execute code:

if (other.follow==1 && other.target==id){
    instance_create(other.x,other.y,obj_ijisplat);
    with (other)
        instance_destroy();
    }

Collision Event with object obj_xp:

execute code:

if (enemytype!=12 && enemytype!=13 && enemytype!=15 && enemytype!=16 && !krotera && !asha && !iosa && !annihilatorbeta)
scr_enemypickupxp();
______________________________________________________

Information about object: obj_crumble1
Sprite: spr_crumble1
Solid: true
Visible: true
Depth: 0
Persistent: false
Parent: obj_block
Mask: 

Collision Event with object obj_enemyrocketexplosion:

execute code:

if (global.specialbake==0)
i=10;
else
i=3;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(16),obj_scrapbrown);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
______________________________________________________

Information about object: obj_ztele
Sprite: spr_tele
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Alarm Event for alarm 0:

execute code:

instance_create(x,y,obj_loading);
instance_create(x,y,obj_loadingback);
obj_loading.destination="sectorz";

Collision Event with object obj_iji:

execute code:

if (global.ignorestation==0){
global.erasetop=0;
global.topmessage="WARNING: DESTINATION UNKNOWN";
}
Collision Event with object obj_pushbox:

execute code:

if (global.poster1 && global.poster2 && global.poster3 && global.poster4 && global.poster5 && global.poster6 && global.poster7 && global.poster8 && global.poster9 && global.poster10){

scr_sound("glo_teleport");
alarm[0]=14;
instance_create(x,y,obj_endtransition);
global.ignoreall=1;
obj_iji.visible=0;
obj_iji.invisible=1;

if (global.facing==1)
    instance_create(obj_iji.x-11,obj_iji.y-4,obj_ijiflash);
if (global.facing==0){
    tempid=instance_create(obj_iji.x-19,obj_iji.y-4,obj_ijiflash);
    tempid.image_index=5;
    }
}
else{
    global.ignorestation=60;
    global.erasetop=0;
    global.topmessage="Access denied; all ten posters required";
    scr_sound("glo_crackfail");
    }
______________________________________________________

Information about object: obj_zblocktele
Sprite: spr_zblock4
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

with (obj_sabot)
    scr_seczmusicchange();
scr_sound("glo_teleport");
obj_iji.dest=dest;
obj_sabot.ignoresmooth=1;
obj_sabot.alarm[4]=3;
instance_activate_object(obj_teledest);
with (obj_teledest){
    if (obj_iji.dest==dest){
        instance_create(obj_iji.x-11,obj_iji.y-4,obj_ijiflash);
        obj_iji.x=x+10;
        obj_iji.y=y-29;
        instance_create(x,y,obj_whiteflash);
        repeat(30){
            tempid=instance_create(x+random(32),y+12-random(64),obj_thorspark);
            tempid.speed=random(3.5)-1.5;
            tempid.direction=90;
            tempid.gravity=0.2;
            }
        }
    }
with (obj_sabot){
    metcyc=0;
    doteleport=1;
    zback+=1;
    if (zback==1){
        background_visible[0]=1;
        with (obj_zgback)
            instance_destroy();
        with (obj_zgbackback)
            instance_destroy();
        }
    if (zback==2){
        background_visible[0]=0;
        background_visible[1]=1;
        }
    if (zback==3)
        background_visible[1]=0;
    if (zback==4){
        global.viewxoffset=0;
        global.viewyoffset=0;
        repeat(150)
            instance_create(obj_iji.x-500+random(1000),obj_iji.y-400+random(800),obj_zxsquare);
        }
    }
______________________________________________________

Information about object: obj_whiteflash
Sprite: spr_sabot
Solid: false
Visible: true
Depth: -1000000
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

cyc+=1;
if (cyc==1)
    draw_set_color(c_black);
if (cyc==2)
    draw_set_color(c_black);
if (cyc==3)
    draw_set_color(c_white);
if (cyc==4){
    draw_set_color(c_white);
    instance_destroy();
    }
draw_rectangle(view_xview[0]-2,view_yview[0]-2,view_xview[0]+view_wview[0]+2,view_yview[0]+view_hview[0]+2,0);

______________________________________________________

Information about object: obj_zhwhite
Sprite: spr_zhwhite
Solid: true
Visible: true
Depth: 50
Persistent: false
Parent: obj_block
Mask: 

Create Event:

execute code:

if (image_single!=1)
    image_single=0;
______________________________________________________

Information about object: obj_zxsquare
Sprite: spr_zxsquare
Solid: false
Visible: true
Depth: 1000010
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

size=ceil(random(24))+8;
temprand=random(1);
if (temprand>0.25)
    image_single=0;
else{
    image_single=ceil(random(63));
    size=32;
    }
depth=1000100-size;

Step Event:

execute code:

y-=5-(size/8);
if (obj_iji.x>obj_iji.xprevious)
    x+=(8*(size))/80;
if (obj_iji.x
______________________________________________________

Information about object: obj_dustyblock
Sprite: spr_block
Solid: true
Visible: false
Depth: 0
Persistent: false
Parent: obj_block
Mask: 

Create Event:

execute code:

dusty=1;
______________________________________________________

Information about object: obj_zrfuzz
Sprite: spr_zrfuzz
Solid: false
Visible: true
Depth: 1
Persistent: false
Parent: obj_tasenenemy
Mask: 

Create Event:

execute code:

image_speed=0.5;
facing=0;
velocity=4;
Step Event:

execute code:

//Face down
if (facing==0){
    if (place_free(x+velocity,y))
        x+=velocity;
    else
        facing=1;
    if (place_free(x,y+velocity))
        facing=3;
    }
//Face right
else if (facing==1){
    if (place_free(x,y-velocity))
        y-=velocity;
    else
        facing=2;
    if (place_free(x+velocity,y))
        facing=0;
    }
//Face up
else if (facing==2){
    if (place_free(x-velocity,y))
        x-=velocity;
    else
        facing=3;
    if (place_free(x,y-velocity))
        facing=1;
    }
//Face left
else if (facing==3){
    if (place_free(x,y+velocity))
        y+=velocity;
    else
        facing=0;
    if (place_free(x-velocity,y))
        facing=2;
    }
Collision Event with object obj_iji:

execute code:

with (other){
if (takingpain==0 && recovering==0){
    global.armor-=5;
    instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
    }
}
Collision Event with object obj_bullet:

execute code:

repeat(5)
instance_create(x+12,y+12,obj_komatobloodspecial);
instance_destroy();
scr_sound("glo_reflect");
Collision Event with object obj_pellet:

execute code:

repeat(5)
instance_create(x+12,y+12,obj_komatobloodspecial);
instance_destroy();
scr_sound("glo_reflect");
Collision Event with object obj_kickbox:

execute code:

scr_shakescreen(1);
repeat(5)
instance_create(x+12,y+12,obj_komatobloodspecial);
instance_destroy();
scr_sound("glo_reflect");
Collision Event with object obj_pushbox:

execute code:

global.erasetop=0;
global.topmessage="Eww, creepy!";
______________________________________________________

Information about object: obj_zhdrone
Sprite: spr_zhdrone
Solid: false
Visible: true
Depth: 1
Persistent: false
Parent: obj_tasenenemy
Mask: 

Create Event:

execute code:

speed=4;
direction=random(360);
Step Event:

execute code:

cyc+=1;
if (cyc>=60){
cyc=0;
if (instance_number(obj_iji)==1 && point_distance(x,y,obj_iji.x+6,obj_iji.y+30)<500)
direction=point_direction(x,y,obj_iji.x+6,obj_iji.y+15);
else
direction=random(360);
}

if (x>2560 && y<6200)
    x=2560;
Collision Event with object obj_iji:

execute code:

with (other){
if (takingpain==0 && recovering==0){
    global.armor-=5;
    instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
    }
}

Collision Event with object obj_block:

execute code:

move_bounce_solid(1);
Collision Event with object obj_bullet:

execute code:

if (!dead){
dead=1;
repeat(8){
tempid=instance_create(x,y,obj_scrapwhite);
tempid.speed=random(10)+4;
tempid.direction=random(360);
}
scr_nanoexplosion(0,0);
scr_shakescreen(2);
instance_destroy();
}
Collision Event with object obj_pellet:

execute code:

if (!dead){
dead=1;
repeat(8){
tempid=instance_create(x,y,obj_scrapwhite);
tempid.speed=random(10)+4;
tempid.direction=random(360);
}
scr_nanoexplosion(0,0);
scr_shakescreen(2);
instance_destroy();
}
Collision Event with object obj_kickbox:

execute code:

repeat(8){
tempid=instance_create(x,y,obj_scrapwhite);
tempid.speed=random(10)+4;
tempid.direction=random(360);
}
scr_nanoexplosion(0,0);
instance_destroy();
scr_shakescreen(2);
Collision Event with object obj_pushbox:

execute code:

global.erasetop=0;
global.topmessage="Incompatible technology for cracking";
Draw Event:

execute code:

draw_sprite(sprite_index,0,round(x/4)*4,round(y/4)*4);
______________________________________________________

Information about object: obj_komatotrooper
Sprite: spr_komatotrooper_basicleft
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_komatoenemy
Mask: 

Create Event:

execute code:

killtype=1;
image_speed=0.5;
state=1;
alarm[2]=25+random(10);
hp=3;
maxhp=3;
armor=200;
maxarmor=200;
if (global.suddendeath){
    hp=1;
    maxhp=1;
    armor=100;
    maxarmor=100;
    }
enemytype=10;
resistance=6;
security=5;
walkspeed=3+global.specialtrigger16*2;
hyperstrength=6;
Alarm Event for alarm 0:

set variable reloading to 0
Alarm Event for alarm 1:

execute code:

{
if (facing==0)
    sprite_index=spr_komatotrooper_basicleft;
else
    sprite_index=spr_komatotrooper_basic;
}
Alarm Event for alarm 2:

execute code:

//Choose target
if (targetrival==0){
    if (targetiji>0)
        target=obj_iji.id;
    else{
        angry=0;
        alarm[5]=300;
        }
    }
if (!instance_exists(target)){
angry=0;
targetrival=0;
if (targetiji>0 && target!=obj_iji.id){
    if (!angry && (state==0 || state==1 || state==2))
        alarm[2]=1;
    angry=1;
    alarm[5]=300;
    target=obj_iji.id;
    }
}

//Adjust sprite
if (facing==0 && state==0)
    sprite_index=spr_komatotrooper_basicleft;
if (facing==1 && state==0)
    sprite_index=spr_komatotrooper_basic;
//Begin taking action
takingpain=0;
alarm[2]=25+random(10);

//Scour for seen health
if (!angry && scouring>0){
    state=1;
    if (scouringdir>0)
        facing=0;
    else
        facing=1;
    exit;
    }
//Rocket has fired
if (firingrocket==1 || state==2){
    state=1;
    firingrocket=0;
    exit;
    }
//Pulse overload
if (angry && obj_sabot.pulsetot>90){
    state=1;
    exit;
    }
//Roam
randomstate=random(1);
if (angry==0){
    if (randomstate<0.6){
        state=0;
        alarm[2]=60+random(90);
        }
    else{
        state=1;
        facing=0;
        if (randomstate>0.8)
            facing=1;
        }
    }
//Angry
else{
    if (randomstate<0.4)
        state=1;
    if (randomstate>=0.4 && randomstate<0.8){
        if (abs(target.x-x)<256 && abs(target.y-y)<128){
            state=2;
            if (x>target.x)
                facing=0;
            else
                facing=1;
            }
        else{
            state=1;
            if (randomstate>0.4)
                facing=0;
            else
                facing=1;
            }
        }
    //Charge a rocket
    if (randomstate>=0.8){
    if (x>target.x)
        facing=0;
    else
        facing=1;
    if (abs(y-target.y)<192 && distance_to_object(target)>128){
        state=2;
        if (!oops && ((place_free(x+16,y-32) && place_free(x+32,y-32) && place_free(x+48,y-32) && place_free(x+64,y-32) && place_free(x+80,y-32) && place_free(x+96,y-32)) || (place_free(x+16,y) && place_free(x+32,y) && place_free(x+48,y) && place_free(x+64,y) && place_free(x+80,y) && place_free(x+96,y))) && !place_meeting(x+16,y-32,obj_glass) && !place_meeting(x+32,y-32,obj_glass) && !place_meeting(x+48,y-32,obj_glass) && !place_meeting(x+64,y-32,obj_glass) && !place_meeting(x+80,y-32,obj_glass) && !place_meeting(x+96,y-32,obj_glass) && !place_meeting(x+16,y-32,obj_meta) && !place_meeting(x+32,y-32,obj_meta) && !place_meeting(x+48,y-32,obj_meta) && !place_meeting(x+64,y-32,obj_meta) && !place_meeting(x+80,y-32,obj_meta) && !place_meeting(x+96,y-32,obj_meta) && x<=target.x){
            tempid=instance_create(x+44,y+19,obj_chargetell);
            tempid.tempid=id;
            scr_sound("wea_charge");
            state=0;
            sprite_index=spr_komatotrooper_basic;
            alarm[2]=35;
            alarm[6]=32;
            firingrocket=1;
            }
        else if (!oops && ((place_free(x-16,y-32) && place_free(x-32,y-32) && place_free(x-48,y-32) && place_free(x-64,y-32) && place_free(x-80,y-32) && place_free(x-96,y-32)) || (place_free(x-16,y) && place_free(x-32,y) && place_free(x-48,y) && place_free(x-64,y) && place_free(x-80,y) && place_free(x-96,y))) && !place_meeting(x-16,y-32,obj_glass) && !place_meeting(x-32,y-32,obj_glass) && !place_meeting(x-48,y-32,obj_glass) && !place_meeting(x-64,y-32,obj_glass) && !place_meeting(x-80,y-32,obj_glass) && !place_meeting(x-96,y-32,obj_glass) && !place_meeting(x-16,y-32,obj_meta) && !place_meeting(x-32,y-32,obj_meta) && !place_meeting(x-48,y-32,obj_meta) && !place_meeting(x-64,y-32,obj_meta) && !place_meeting(x-80,y-32,obj_meta) && !place_meeting(x-96,y-32,obj_meta) && x>target.x){
            tempid=instance_create(x-28,y+19,obj_chargetell);
            tempid.tempid=id;
            scr_sound("wea_charge");
            state=0;
            sprite_index=spr_komatotrooper_basicleft;
            alarm[2]=35;
            alarm[6]=32;
            firingrocket=1;
            }
        }
    else{
        if (abs(target.y-y)<128)
            state=2;
        else
            state=1;
            }
        }
    }
Alarm Event for alarm 4:

execute code:

//Death
if (dead==1){
    if ((x > obj_shakescreen.x-500) && (x < obj_shakescreen.x+500) && (y > obj_shakescreen.y-400) && (y < obj_shakescreen.y+400))
    script_execute(scr_nanoexplosion,6,25);
    instance_create(x+8,y+45,obj_xp3);
    if (cracked)
        script_execute(scr_dropammo,8,45,1,9);
    else{
        script_execute(scr_dropammo,8,45,5,7);
        if (ammodrop>1)
            script_execute(scr_dropammo,8,45,8,9);
        }
    if (ijikill){
        tempid=instance_create(x+6,y+6,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+6,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    instance_destroy();
    }
//Get up
if (dead==0) && state==5{
    if (ijikill){
        tempid=instance_create(x+6,y+6,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+6,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    armor=200;
    state=6;
    takingpain=0;
    image_index=0;
    image_single=-1;
    image_speed=0.5;
    if (facing==0)
        sprite_index=spr_komatotrooper_getupleft;
    else
        sprite_index=spr_komatotrooper_getup;
    alarm[2]=12;
    }
Alarm Event for alarm 5:

set variable angry to 0
Alarm Event for alarm 6:

execute code:

if (facing==0){
    if (cracked==0){
        scr_sound("wea_shoc");
        tempid=instance_create(x-28,y+19,obj_enemyshock);
        tempid.speed=-global.shockspeed;
        tempid.target=id;
        instance_create(x-28,y+19,obj_shockspark);
        sprite_index=spr_komatotrooper_fireleft;
        }
    else{
        scr_sound("exp_shoc");
        tempid=instance_create(x-28,y+19,obj_enemyshockexplosion);
        tempid.target=id;
        instance_create(x-28,y+19,obj_explosioncenter);
        script_execute(scr_shakescreen,2);
        oops=1;
        }
    }
else{
    if (cracked==0){
        scr_sound("wea_shoc");
        tempid=instance_create(x+44,y+19,obj_enemyshock);
        tempid.speed=global.shockspeed;
        tempid.target=id;
        instance_create(x+44,y+19,obj_shockspark);
        sprite_index=spr_komatotrooper_fire;
        }
    else{
        scr_sound("exp_shoc");
        tempid=instance_create(x+44,y+19,obj_enemyshockexplosion);
        tempid.target=id;
        instance_create(x+44,y+19,obj_explosioncenter);
        script_execute(scr_shakescreen,2);
        oops=1;
        }
    }
Alarm Event for alarm 7:

execute code:

if (alarm[2]>=1 && state==3 && (sprite_index==spr_komatotrooper_pain || sprite_index==spr_komatotrooper_painleft)){
    alarm[7]=4;
    image_index=0;
    instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_nanospark);
    repeat(2)
        (instance_create(bbox_left-8+random(bbox_right-bbox_left+16),bbox_top-4+random(bbox_bottom-bbox_top+8),obj_glassspark)).image_index=4;
    }
Step Event:

execute code:

//"FIND"
if (angry && !prevangry){
    if (state==0 || state==1 || state==2)
        scr_sound("tro_find");
    }
prevangry=angry;
//"DEATH"
if (state==4 && prevstate!=4 && temphp>0){
    if (mutepainsound)
        mutepainsound=0;
    else
        scr_sound("tro_death");
    }
prevstate=state;

if (temphp>0 && hp<=0 && ijikill==1){
    obj_iji.killemote=1;
    }
temphp=hp;

scr_komatovision(8,12);
if (targetiji>0)
targetiji-=1;
if (targetrival>0)
targetrival-=1;
if (scouring>0)
scouring-=1;
if (hp==maxhp)
scouring=0;
cfised=0;
thored=0;
//Lose sight
if ((x < obj_shakescreen.x-1000) || (x > obj_shakescreen.x+1000) || (y < obj_shakescreen.y-800) || (y > obj_shakescreen.y+800)){
    angry=0;
    alarm[5]=0;
    if (state==2)
        state=0;
    }
//Crack fail
if (crackmark==1 && distance_to_object(obj_iji) > 50){
    script_execute(scr_crackfail);
    global.erasetop=0;
    global.topmessage="CRACKING FAILED: Subject is too far away";
    }
if (crackmark==1 && hp<=0){
    script_execute(scr_terminatecrack);
    global.erasetop=0;
    global.topmessage="CRACKING FAILED: Subject is dead";
    }
//Dodge projectile
perform=1;
if (global.difficulty==0){
    try=random(1);
    if (try>0.2)
    perform=0;
    }
if (global.difficulty==1){
    try=random(1);
    if (try>0.4)
    perform=0;
    }
if (global.difficulty==2){
    try=random(1);
    if (try>0.7)
    perform=0;
    }
if (perform==1){
    if (state==0 || state==1 || state==2){
        if (facing==0){
            if (place_meeting(x-64,y-25,obj_rocket) || place_meeting(x-64,y-25,obj_enemyrocket) || place_meeting(x-64,y-25,obj_shock) || place_meeting(x-64,y-25,obj_enemympfb) || place_meeting(x-64,y-25,obj_mpfb) || (place_meeting(x-32,y,obj_iji) && obj_iji.image_index==1 && obj_iji.sprite_index==spr_kickstrong)){
                state=7;
                sprite_index=spr_komatotrooper_duckleft;
                image_index=0;
                alarm[2]=12;
                alarm[0]=0;
                alarm[1]=0;
                alarm[5]=300;
                alarm[6]=0;
                angry=1;
                firingrocket=0;
                idling=0;
                reloading=0;
                }
            }
        if (facing==1){
            if (place_meeting(x+64,y-25,obj_rocket) || place_meeting(x+64,y-25,obj_enemyrocket) || place_meeting(x+64,y-25,obj_shock) || place_meeting(x+64,y-25,obj_enemympfb) || place_meeting(x+64,y-25,obj_mpfb) || (place_meeting(x+32,y,obj_iji) && obj_iji.image_index==1 && obj_iji.sprite_index==spr_kickstrongleft)){
                state=7;
                sprite_index=spr_komatotrooper_duck;
                image_index=0;
                alarm[2]=12;
                alarm[0]=0;
                alarm[1]=0;
                alarm[5]=300;
                alarm[6]=0;
                angry=1;
                firingrocket=0;
                idling=0;
                reloading=0;
                }
            }
        }
    }
//Fix hitting cieling
if (state==4 && place_meeting(x,y+vspeed-2,(obj_block)) && !place_meeting(x,y+vspeed-2,(obj_meta)) && vspeed<0){
    move_contact_solid(90,-1);
    vspeed=0;
    y+=3;
    }
//Stop animations
if (sprite_index=spr_komatotrooper_knockdown || sprite_index=spr_komatotrooper_knockdownleft){
    if (image_index==6)
        image_single=6;
    }
//Autodeath
if (hp<=0){
    dead=1;
    if (crackmark==1){
        script_execute(scr_terminatecrack);
        global.erasetop=0;
        global.topmessage="Cracking failed; subject is dead";
        }
    }
//Smoke when charging
if (firingrocket==1 && state==0)
    smoking+=1;
if (smoking>=5){
    smoking=0;
    if (facing==0)
        instance_create(x-28,y+19,obj_shockemit);
    else
        instance_create(x+44,y+19,obj_shockemit);
    }
//Knockdown
if (state==4){
    if (knockdowntype==1){
        if (place_free(x-velocity,y+vspeed+2) && !place_meeting(x-velocity,y,obj_blockenemy)){
            if (place_free(x-velocity,y+vspeed-2))
                x-=velocity;
            else if (place_free(x,y+vspeed+12)){
                velocity*=0.3;
                knockdowntype=2;
                sprite_index=spr_komatotrooper_knockdownleft;
                facing=0;
                }
            }
        else if (place_free(x,y+vspeed+12)){
            velocity*=0.3;
            knockdowntype=2;
            sprite_index=spr_komatotrooper_knockdownleft;
            facing=0;
            }
        }
    if (knockdowntype==2){
        if (place_free(x+velocity,y+vspeed+2) && !place_meeting(x+velocity,y,obj_blockenemy)){
            if (place_free(x+velocity,y+vspeed-2))
                x+=velocity;
            else if (place_free(x,y+vspeed+12)){
                velocity*=0.3;
                knockdowntype=1;
                sprite_index=spr_komatotrooper_knockdown;
                facing=1;
                }
            }
        else if (place_free(x,y+vspeed+12)){
            velocity*=0.3;
            knockdowntype=1;
            sprite_index=spr_komatotrooper_knockdown;
            facing=1;
            }
        }
    //Fall
    if (place_free(x,y+1)){
        gravity=1;
        gravity_direction=270;
        }
    }
//Limit fall speed
if (vspeed>20)
    vspeed=20;
//Armor
if (armor0.001){
            scr_sound("tro_pain");
            takingpain=1;
            firingrocket=0;
            while(armor<1)
                armor+=200;
            state=3;
            alarm[1]=0;
            alarm[2]=10;
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            image_index=0;
            if (facing==0)
                sprite_index=spr_komatotrooper_painleft;
            else
                sprite_index=spr_komatotrooper_pain;
            if (x>obj_iji.x){
                tempid=instance_create(x+29,y+15,obj_komatoblood);
                tempid.image_index=6;
                tempid.speed=random(2)+2;
                }
            else{
                tempid=instance_create(x-4,y+15,obj_komatoblood);
                tempid.speed=random(2)+2;
                tempid.direction=180;
                }
            }
        else{
            dead=1;
            firingrocket=0;
            takingpain=1;
            if (x
Collision Event with object obj_block:

execute code:

//Knockdown landing
if (state==4){
    if (vspeed<0){
        move_contact_solid(90,-1);
        vspeed=0;
        y+=3;
        }
    else{
        scr_sound("glo_land");
        state=5;
        image_single=-1;
        image_index=0;
        image_speed=0.5;
        if (knockdowntype==1){
            if (hp>0)
                sprite_index=spr_komatotrooper_hitfloor;
            else
                sprite_index=spr_komatotrooper_death;
            }
        if (knockdowntype==2){
            if (hp>0)
                sprite_index=spr_komatotrooper_hitfloorleft;
            else
                sprite_index=spr_komatotrooper_deathleft;
            }
        if (hp>0)
            alarm[4]=8;
        else
            alarm[4]=10;
        gravity=0;
        vspeed=0;
        move_contact_solid(270,-1);
        }
    }
Collision Event with object obj_bullet:

execute code:

if (!other.stagger)
    ijikill=1;
targetiji=300;
if (angry==0 && (state==0 || state==1 || state==2))
    alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0){
    if (other.stagger){
        if (state<4 || state==6){
            takingpain=1;
            firingrocket=0;
            state=3;
            alarm[1]=0;
            alarm[2]=10;
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            alarm[7]=0;
            image_index=0;
            if (facing==0)
                sprite_index=spr_komatotrooper_painleft;
            else
                sprite_index=spr_komatotrooper_pain;
            }
        }
    else{
        armor-=10*global.atmult;
        instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
        }
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stagger)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_pellet:

execute code:

if (!other.stun)
    ijikill=1;
targetiji=300;
if (angry==0 && (state==0 || state==1 || state==2))
    alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0){
    if (other.stun){
        if (state<4 || state==6){
            takingpain=1;
            firingrocket=0;
            state=3;
            alarm[1]=0;
            alarm[2]=floor(15*(1+(global.attacklevel/10)));
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            alarm[7]=4;
            if (facing==0)
                sprite_index=spr_komatotrooper_painleft;
            else
                sprite_index=spr_komatotrooper_pain;
            image_index=0;
            image_single=-1;
            image_speed=0.5;
            }
        }
    else{
        armor-=9*global.atmult;
        instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
        }
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stun)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_enemybullet:

execute code:

ijikill=0;
if (angry==0 && (state==0 || state==1 || state==2))
    alarm[2]=1;
angry=1;
targetrival=300;
target=other.target;
alarm[5]=300;
if (dead==0){
    armor-=4;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_kickbox:

execute code:

global.temp=0;
with (other){
    if (place_meeting(x,y,obj_door) || place_meeting(x,y,obj_cdoor))
        global.temp=1;
    if (sprite_index==spr_detonator)
        global.temp=0;
    }
if (global.temp==0){
if (other.image_index==0){
    scr_sound("glo_kick");
    ijikill=1;
    targetiji=300;
    script_execute(scr_shakescreen,1);
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (global.facing==0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }

    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    angry=1;
    alarm[5]=300;
    if (global.strengthlevel>=resistance){
        if (hp<=0 && milk<5){
            milk+=1;
            instance_create(bbox_left+(bbox_right-bbox_left)/2,bbox_top+(bbox_bottom-bbox_top)/2,obj_xp1);
            }
        hp-=1;
        if (other.sprite_index==spr_detonator){
            if (x>obj_iji.x)
                script_execute(scr_enemyknockdown,2);
            else
                script_execute(scr_enemyknockdown,1);
            }
        else
            script_execute(scr_enemyknockdown);
        }
    else{
        global.erasetop=0;
        global.topmessage="You need a Strength of "+string(resistance)+" to knock down a Komato Trooper";
        //Stagger
        if (hp>0 && (state==0 || state==1 || state==2 || state==3 || state==7)){
            takingpain=1;
            state=3;
            firingrocket=0;
            alarm[1]=0;
            alarm[2]=10;
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            image_index=0;
            if (facing==0)
                sprite_index=spr_komatotrooper_painleft;
            else
                sprite_index=spr_komatotrooper_pain;
            if (targetrival==0 || !instance_exists(target))
                target=obj_iji;
            }
        }
    }
}
Collision Event with object obj_rocketexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    hp-=2*global.atmult;
    force=11-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}
Collision Event with object obj_mpfbexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    hp-=3*global.atmult;
    if (hp<=0 && ijikill && killtype<5)
        killtype=5;
    if (other.banana && hp<=0 && ijikill && killtype<8)
        killtype=8;
    force=22-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}
Collision Event with object obj_pulse:

execute code:

if (!other.linker)
    ijikill=1;
targetiji=300;
if (other.hyper==1 && armor=resistance){
    scr_sound("glo_kick");
    hp-=1;
    armor=maxarmor;
    script_execute(scr_shakescreen,2);
    if (other.hspeed<0)
        script_execute(scr_enemyknockdown,1);
    else
        script_execute(scr_enemyknockdown,2);
    repeat(3){
        tempid=instance_create(other.x,other.y,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (other.hspeed<0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    }
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (angry==0 && (state==0 || state==1 || state==2))
    alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0 && !other.linker){
    armor-=2*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
    }
if (other.linker)
    scr_pulselink(3);
Collision Event with object obj_enemyrocketexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    hp-=2;
    targetrival=300;
    target=other.target;
    force=11-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}
Collision Event with object obj_shockexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    hp-=2*global.atmult;
    force=13-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}
Collision Event with object obj_shockballexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
    if (dead==0)
        armor-=30*global.atmult;
    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    angry=1;
    alarm[5]=300;
    }
}
Collision Event with object obj_swipe:

execute code:

if (other.dud==0){
    scr_sound("glo_kick");
    ijikill=0;
    hp-=1;
    targetrival=300;
    target=other.target;
    scr_shakescreen(2);
    if (other.facing==1)
        script_execute(scr_enemyknockdown,2,12);
    else
        script_execute(scr_enemyknockdown,1,12);
        }
Collision Event with object obj_kickbox_elite:

execute code:

if (other.dud==0){
    scr_sound("glo_kick");
    ijikill=0;
    hp-=1;
    targetrival=300;
    target=other.target;
    scr_shakescreen(2);
    if (other.facing==1)
        script_execute(scr_enemyknockdown,2,10);
    else
        script_execute(scr_enemyknockdown,1,10);
        }
Collision Event with object obj_enemympfbexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    hp-=3;
    targetrival=300;
    target=other.target;
    force=22-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}
Collision Event with object obj_pushbox:

execute code:

if (dead==0){
    ijikill=1;
    if (global.cracklevel>=security){
        if (cracked==0){
            global.security=security;
            crackmark=1;
            if (global.suddendeath)
                global.cracktext="Komato Trooper#H1 A100 W6#Security: ";
            else
                global.cracktext="Komato Trooper#H3 A200 W6#Security: ";
            global.cracktext+=string(global.security);
            if (global.security==10)
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            else
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            script_execute(scr_begincrack);
            }
        else{
            global.erasetop=0;
            global.topmessage="Subject has already been cracked";
            }
        }
    else{
        global.erasetop=0;
        global.topmessage="You need a Crack skill of "+string(security)+" to crack a Komato Trooper";
        scr_sound("glo_crackfail");
        global.ignorestation=90;
        }
    }
else{
    global.erasetop=0;
    global.topmessage="Unable to connect to nanofield; subject is dead";
    }
Collision Event with object obj_meta:

execute code:

{
with (other)
    script_execute(scr_metabreak);
/*
if (other.sprite_index=spr_glass2 || other.sprite_index=spr_glass2small || other.sprite_index=spr_glass2short){
    repeat(3) instance_create(bbox_left+((bbox_right-bbox_left)/2),bbox_top+((bbox_bottom-bbox_top)/2),obj_komatobloodspecial);
    hp-=1;
    }
*/
}
Collision Event with object obj_thor:

execute code:

{
if (thored==0){
    ijikill=1;
    targetiji=300;
    if (angry==0 && (state==0 || state==1 || state==2)){
        alarm[2]=1;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    armor-=35*global.atmult;
    if (hp==1 && armor<=0 && ijikill && killtype<5)
        killtype=5;
    angry=1;
    alarm[5]=300;
    thored=1;
    }
}
Collision Event with object obj_enemyshockballexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    if (dead==0)
        armor-=30;
    }
}
Collision Event with object obj_enemyshockexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    hp-=2;
    force=13-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}
Collision Event with object obj_impulseexplosion:

execute code:

if (other.dud==0){
    if (angry==0){
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    ijikill=0;
    targetiji=300;
    mutepainsound=1;
    force=11-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force,1);
    else
        script_execute(scr_enemyknockdown,2,force,1);
    }
______________________________________________________

Information about object: obj_komatosplat
Sprite: spr_komatosplat
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: obj_tasensplat
Mask: 

______________________________________________________

Information about object: obj_komatoblood
Sprite: spr_komatoblood
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: obj_tasenblood
Mask: 

______________________________________________________

Information about object: obj_komatobloodspecial
Sprite: spr_komatoblood
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: obj_tasenbloodspecial
Mask: 

______________________________________________________

Information about object: obj_shockemit
Sprite: spr_shockemit
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
image_speed=0.5;
alarm[0]=10;
gravity=0.3;
gravity_direction=270;
}
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_enemypulse
Sprite: spr_pulse
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=7;
obj_sabot.raveflash=0;
Alarm Event for alarm 0:

destroy the instance
Step Event:

execute code:

if (hyper==0)
    y=ystart+(random(21)-10);
rand=random(1);
if (rand>0.92){
    if (hyper){
        tempid=instance_create(x+random(16)-8+hspeed,y+random(32)-16,obj_pulsespark);
        tempid.speed=random(4)-2;
        tempid.image_index=6;
        }
    else
        (instance_create(x+random(16)-8+hspeed,y+random(32)-16,obj_pulsespark)).speed=random(4)-2;
    }
Collision Event with object obj_block:

execute code:

scr_pulseexplosion(1);
instance_destroy();
______________________________________________________

Information about object: obj_visioncheckt
Sprite: spr_visioncheck
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

scr_outside();
cycle+=1;
if (cycle>=100)
    instance_destroy();
Collision Event with object obj_block:

destroy the instance
Collision Event with object obj_komatotrooper:

execute code:

other.target=target;
with (other){
    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
    angry=1;
    targetrival=300;
    alarm[5]=300;
    }
Collision Event with object obj_komatoberserker:

execute code:

other.target=target;
with (other){
    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
    angry=1;
    targetrival=300;
    alarm[5]=300;
    }
Collision Event with object obj_komatobeast:

execute code:

other.target=target;
with (other){
    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
    angry=1;
    targetrival=300;
    alarm[5]=300;
    }
Collision Event with object obj_komatoannihilator:

execute code:

if (state!=10){
other.target=target;
with (other){
    if (angry==0 && (state==0 || state==1))
        alarm[2]=1;
    angry=1;
    targetrival=300;
    alarm[5]=300;
    }
    }
______________________________________________________

Information about object: obj_visioncheckk
Sprite: spr_visioncheck
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

scr_outside();
cycle+=1;
if (cycle>=100)
    instance_destroy();
Collision Event with object obj_block:

destroy the instance
Collision Event with object obj_tasensoldier:

execute code:

other.target=target;
with (other){
    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
    angry=1;
    targetrival=300;
    alarm[5]=300;
    }
Collision Event with object obj_tasenscout:

execute code:

other.target=target;
with (other){
    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
    angry=1;
    targetrival=300;
    alarm[5]=300;
    }
Collision Event with object obj_tasencommander:

execute code:

other.target=target;
with (other){
    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
    angry=1;
    targetrival=300;
    alarm[5]=300;
    }
Collision Event with object obj_tasenelite:

execute code:

other.target=target;
with (other){
    if (angry==0 && (state==0 || state==1 || state==2))
        alarm[2]=1;
    angry=1;
    targetrival=300;
    alarm[5]=300;
    }
Collision Event with object obj_tasenshredder:

execute code:

other.target=target;
with (other){
    if (angry==0)
        alarm[2]=1;
    angry=1;
    targetrival=300;
    alarm[5]=300;
    }
______________________________________________________

Information about object: obj_mapmaker
Sprite: spr_block
Solid: false
Visible: true
Depth: -1000000
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

//obsolete - removed
______________________________________________________

Information about object: obj_visioncheckh
Sprite: spr_visioncheck
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

scr_outside();
cycle+=1;
if (cycle>=100)
    instance_destroy();
Collision Event with object obj_block:

destroy the instance
Collision Event with object obj_alliedenemy:

execute code:

if (other.scouring<=0 && !other.krotera && !other.iosa && (other.enemytype==0 || other.enemytype==1 || other.enemytype==2 || other.enemytype==3 || other.enemytype==10 || other.enemytype==11)){
    other.scouringdir=hspeed;
    with (other){
        if (angry==0 && firingrocket==0 && (state==0 || state==1) && hp0)
                facing=0;
            else
                facing=1;
            state=1;
            scouring=300;
            }
        }
    }
______________________________________________________

Information about object: obj_nanoflutter
Sprite: spr_nanoflutter
Solid: false
Visible: true
Depth: 5
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=random(0.9)+0.1;
direction=180;
velocity=random(0.1)+0.1;
Step Event:

execute code:

if (slow==0){
    if (direction==90)
        speed+=velocity*2;
    if (direction==180)
        speed+=velocity;
    if (speed>2)
    slow=1;
    }
else{
    if (direction==90)
        speed-=velocity*2;
    if (direction==180)
        speed-=velocity;
    if (speed<0.2){
        slow=0;
        speed=0.2;
        velocity=random(0.1)+0.1;
        if (direction==180)
            direction=90;
        else
            direction=180;
        }
    }
if (y<-10)
    instance_destroy();
______________________________________________________

Information about object: obj_cloudb
Sprite: spr_crate1
Solid: false
Visible: true
Depth: 1000001
Persistent: false
Parent: obj_activateme
Mask: 

Create Event:

execute code:

if (room==rom_sector2)
sprite_index=spr_sec2cloudb;
if (room==rom_sector3 || room==rom_sector11)
sprite_index=spr_sec3cloudb;
if (room==rom_sector5 || room==rom_sector12)
sprite_index=spr_sec5cloudb;
if (room==rom_sector7)
sprite_index=spr_sec7cloudb;
if (room==rom_sectorx)
sprite_index=spr_secxcloudb;
image_single=floor(random(4));
speed=-1;
Collision Event with object obj_cloudd:

execute code:

instance_destroy();
______________________________________________________

Information about object: obj_cloudc
Sprite: spr_crate1
Solid: false
Visible: false
Depth: 1000001
Persistent: false
Parent: obj_cloudb
Mask: 

Create Event:

execute code:

if (top)
    instance_create(x,y,obj_cloudt);
else
    instance_create(x,y,obj_cloudb);

______________________________________________________

Information about object: obj_cloudd
Sprite: spr_crate1
Solid: false
Visible: false
Depth: 1000001
Persistent: false
Parent: obj_cloudb
Mask: 

Create Event:

execute code:

//Do nothing
______________________________________________________

Information about object: obj_cloudt
Sprite: spr_crate1
Solid: false
Visible: true
Depth: 1000001
Persistent: false
Parent: obj_cloudb
Mask: 

Create Event:

execute code:

if (room==rom_sector2)
sprite_index=spr_sec2cloudt;
if (room==rom_sector3 || room==rom_sector11)
sprite_index=spr_sec3cloudt;
if (room==rom_sector5 || room==rom_sector12)
sprite_index=spr_sec5cloudt;
if (room==rom_sector7)
sprite_index=spr_sec7cloudt;
if (room==rom_sectorx)
sprite_index=spr_secxcloudt;
image_single=floor(random(4));
speed=-2;
______________________________________________________

Information about object: obj_crumble3
Sprite: spr_crumble3
Solid: true
Visible: true
Depth: 0
Persistent: false
Parent: obj_block
Mask: 

Collision Event with object obj_rocketexplosion:

execute code:

{
if (global.specialbake==0)
i=10;
else
i=3;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(16),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
Collision Event with object obj_enemyrocketexplosion:

execute code:

{
if (global.specialbake==0)
i=10;
else
i=3;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(16),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
Collision Event with object obj_impulseexplosion:

execute code:

{
if (global.specialbake==0)
i=10;
else
i=3;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(16),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
______________________________________________________

Information about object: obj_activateme
Sprite: spr_block
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_krotera
Sprite: spr_krotera_basicleft
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_tasenenemy
Mask: 

Create Event:

execute code:

killtype=1;
angry=1;
krotera=1;
image_speed=0.5;
state=0;
hp=25;
maxhp=25;
spawncount=25;
if (global.suddendeath){
    hp=1;
    maxhp=1;
    spawncount=0;
    }
armor=100;
maxarmor=100;
enemytype=3;
resistance=9;
security=25;
walkspeed=4;
killdataid=95
Alarm Event for alarm 0:

set variable reloading to 0
Alarm Event for alarm 1:

execute code:

{
if (swiping==0){
    if (facing==0)
        sprite_index=spr_krotera_basicleft;
    else
        sprite_index=spr_krotera_basic;
    }
}
Alarm Event for alarm 2:

execute code:

if (!dead){

target=obj_iji;
swiping=0;
//Adjust sprite
if (facing==0)
    sprite_index=spr_krotera_basicleft;
else
    sprite_index=spr_krotera_basic;
//Begin taking action
takingpain=0;
alarm[2]=25+random(10);
//Rocket has fired
if (firingrocket==1){
    state=1;
    firingrocket=0;
    firingrocket2=1;
    if (x>target.x)
        facing=0;
    else
        facing=1;
    //Kick
    if (x>target.x && (place_meeting(x-30,y,obj_meta) || place_meeting(x-30,y,obj_glass))){
        state=0;
        idling=0;
        swiping=1;
        image_index=0;
        alarm[2]=14;
        sprite_index=spr_krotera_kickleft;
        }
    else if (x<=target.x && (place_meeting(x+30,y,obj_meta) || place_meeting(x+30,y,obj_glass))){
        state=0;
        idling=0;
        swiping=1;
        image_index=0;
        alarm[2]=14;
        sprite_index=spr_krotera_kick;
        }
    if (distance_to_object(target)<28){
        state=0;
        idling=0;
        swiping=1;
        alarm[2]=14;
        image_index=0;
        if (x>target.x){
            facing=0;
            sprite_index=spr_krotera_kickleft;
            }
        else{
            facing=1;
            sprite_index=spr_krotera_kick;
            }
        }
    exit;
    }
//Iji is dead
if (!angry){
state=0;
if (facing==0)
    sprite_index=spr_krotera_basicleft;
else
    sprite_index=spr_krotera_basic;
}
//Always angry
else{
randomstate=random(1);
state=1;
//Face target
if (x>target.x)
    facing=0;
else
    facing=1;
if (idling==4){
    if (abs(target.y-y)<128)
        state=2;
    else
        state=1;
    idling=0;
    }
if (randomstate<0.4){
    state=1;
    idling+=1;
    //Kick (again)
    if (x>target.x && (place_meeting(x-30,y,obj_meta) || place_meeting(x-30,y,obj_glass))){
        state=0;
        idling=0;
        swiping=1;
        image_index=0;
        alarm[2]=14;
        sprite_index=spr_krotera_kickleft;
        }
    else if (x<=target.x && (place_meeting(x+30,y,obj_meta) || place_meeting(x+30,y,obj_meta))){
        state=0;
        idling=0;
        swiping=1;
        image_index=0;
        alarm[2]=14;
        sprite_index=spr_krotera_kick;
        }
    if (distance_to_object(target)<28){
        state=0;
        idling=0;
        swiping=1;
        image_index=0;
        alarm[2]=14;
        if (x>target.x){
            facing=0;
            sprite_index=spr_krotera_kickleft;
            }
        else{
            facing=1;
            sprite_index=spr_krotera_kick;
            }
        }
    }
if (randomstate>=0.4){
    if (abs(target.y-y)<128)
        state=2;
    else
        state=1;
    //Face target
    if (x>target.x)
        facing=0;
    else
        facing=1;
    //Charge a rocket
    if (randomstate>=0.9 && abs(y-target.y)<256){
        idling=0;
        if (place_free(x+16,y-32) && place_free(x+32,y-32) && place_free(x+48,y-32) && place_free(x+64,y-32) && place_free(x+80,y-32) && place_free(x+96,y-32) && !place_meeting(x+16,y-32,obj_glass) && !place_meeting(x+32,y-32,obj_glass) && !place_meeting(x+48,y-32,obj_glass) && !place_meeting(x+64,y-32,obj_glass) && !place_meeting(x+80,y-32,obj_glass) && !place_meeting(x+96,y-32,obj_glass) && !place_meeting(x+16,y-32,obj_meta) && !place_meeting(x+32,y-32,obj_meta) && !place_meeting(x+48,y-32,obj_meta) && !place_meeting(x+64,y-32,obj_meta) && !place_meeting(x+80,y-32,obj_meta) && !place_meeting(x+96,y-32,obj_meta) && x<=target.x){
            tempid=instance_create(x+55,y+35,obj_chargetell);
            tempid.tempid=id;
            state=0;
            sprite_index=spr_krotera_basic;
            alarm[2]=22;
            alarm[6]=19;
            firingrocket=1;
            if (randomstate>=0.95){
                firingmpfb=1;
                alarm[2]=38;
                alarm[6]=35;
                if (randomstate>=0.98){
                    rapidfirempfb=7;
                    alarm[2]=130;
                    alarm[6]=90;
                    stopthis=30;
                    }
                else{
                    scr_sound("tor_gather");
                    }
                }
            else{
                firingmpfb=0;
                scr_sound("wea_charge");
                }
            }
        else if (place_free(x-16,y-32) && place_free(x-32,y-32) && place_free(x-48,y-32) && place_free(x-64,y-32) && place_free(x-80,y-32) && place_free(x-96,y-32) && !place_meeting(x-16,y-32,obj_glass) && !place_meeting(x-32,y-32,obj_glass) && !place_meeting(x-48,y-32,obj_glass) && !place_meeting(x-64,y-32,obj_glass) && !place_meeting(x-80,y-32,obj_glass) && !place_meeting(x-96,y-32,obj_glass) && !place_meeting(x-16,y-32,obj_meta) && !place_meeting(x-32,y-32,obj_meta) && !place_meeting(x-48,y-32,obj_meta) && !place_meeting(x-64,y-32,obj_meta) && !place_meeting(x-80,y-32,obj_meta) && !place_meeting(x-96,y-32,obj_meta) && x>target.x){
            tempid=instance_create(x-22,y+35,obj_chargetell);
            tempid.tempid=id;
            state=0;
            sprite_index=spr_krotera_basicleft;
            alarm[2]=22;
            alarm[6]=19;
            firingrocket=1;
            if (randomstate>=0.95){
                firingmpfb=1;
                alarm[2]=38;
                alarm[6]=35;
                if (randomstate>=0.98){
                    rapidfirempfb=7;
                    alarm[2]=130;
                    alarm[6]=90;
                    stopthis=30;
                    }
                else{
                    scr_sound("tor_gather");
                    }
                }
            else{
                firingmpfb=0;
                scr_sound("wea_charge");
                }
            }
        }
    else{
        //Rocket test failed
        state=2;
        idling=0;
        }
    }
}

if (state==1 && firingrocket2==0){
    //"HOLD STILL"
    if (holdstill>=300 && obj_iji.y<2330){
        holdstillwait=200+ceil(random(200));
        holdstill=0;
        scr_sound("kro_ambient1");
        canthidewait=100+ceil(random(100));
        }
    //"CAN'T HIDE"
    else if (canthidewait==0 && obj_iji.y>2384 && collision_line(x+15,y+76,obj_iji.x+6,obj_iji.y+44,obj_meta,0,1)){
        scr_sound("kro_ambient2");
        canthidewait=200+ceil(random(200));
        holdstill=0;
        }
    }
firingrocket2=0;
}
Alarm Event for alarm 3:

execute code:

scr_sound("glo_land");
scr_shakescreen(1);
image_speed=0;
image_single=12;
image_index=12;

Alarm Event for alarm 6:

execute code:

//Rocket
if (firingmpfb==0){
    scr_sound("wea_rock");
    if (facing==0){
        tempid=instance_create(x-24,y+35,obj_enemyrocket);
        tempid.target=id;
        tempid.speed=-global.rocketspeed;
        tempid.image_single=1;
        tempid=instance_create(x-30,y+35,obj_rocketlaunch);
        tempid.sprite_index=spr_rocketlaunchleft;
        sprite_index=spr_krotera_fireleft;
        }
    else{
        tempid=instance_create(x+42,y+35,obj_enemyrocket);
        tempid.target=id;
        tempid.speed=global.rocketspeed;
        tempid.image_single=0;
        instance_create(x+46,y+35,obj_rocketlaunch);
        sprite_index=spr_krotera_fire;
        }
    }
//MPFB
else{
    script_execute(scr_shakescreen,1);
    scr_sound("wea_mpfb");
    if (facing==0){
        tempid=instance_create(x-24,y+35,obj_enemympfb);
        tempid.target=id;
        tempid.speed=global.mpfbspeed;
        tempid.direction=180;
        if (rapidfirempfb>0)
            tempid.direction=160+random(25);
        tempid=instance_create(x-24,y+35,obj_enemympfb);
        tempid.target=id;
        tempid.speed=global.mpfbspeed-4;
        tempid.direction=180;
        if (rapidfirempfb>0)
            tempid.direction=160+random(25);
        tempid=instance_create(x-24,y+35,obj_enemympfb);
        tempid.target=id;
        tempid.speed=global.mpfbspeed-8;
        tempid.direction=180;
        if (rapidfirempfb>0)
            tempid.direction=160+random(25);
        sprite_index=spr_krotera_fireleft;
        }
    else{
        tempid=instance_create(x+42,y+35,obj_enemympfb);
        tempid.target=id;
        tempid.speed=global.mpfbspeed;
        if (rapidfirempfb>0)
            tempid.direction=-10+random(25);
        tempid=instance_create(x+42,y+35,obj_enemympfb);
        tempid.target=id;
        if (rapidfirempfb>0)
            tempid.direction=-10+random(25);
        tempid.speed=global.mpfbspeed-4;
        tempid=instance_create(x+42,y+35,obj_enemympfb);
        tempid.target=id;
        tempid.speed=global.mpfbspeed-8;
        if (rapidfirempfb>0)
            tempid.direction=-10+random(25);
        sprite_index=spr_krotera_fire;
        }
    if (rapidfirempfb>0){
        rapidfirempfb-=1;
        alarm[6]=5;
        }
    }
Alarm Event for alarm 7:

execute code:

if (hspeed==3)
sprite_index=spr_krotera_basic;
if (hspeed=-3)
sprite_index=spr_krotera_basicleft;
ignorestand=0;
hspeed=0;
Step Event:

execute code:

//"TRY TO STOP THIS"
if (stopthis>0)
    stopthis-=1;
if (stopthis==1 && (sprite_index==spr_krotera_flash || sprite_index==spr_krotera_flashleft))
    scr_sound("kro_ambient3");

//"WIN"
if (obj_sabot.gameover && !winquote && hp>0){
    winquote=1;
    win=30;
    }
if (win>0)
    win-=1;
if (win==1)
    scr_sound("kro_win");

//"HOLD STILL"
if (ijihp==global.hp && holdstillwait==0 && !global.ignoreall)
    holdstill+=1;
else
    holdstill=0;
ijihp=global.hp;
if (holdstillwait>0)
    holdstillwait-=1;
//"CAN'T HIDE"
if (canthidewait>0)
    canthidewait-=1;

//Calm down
if (calmdown){
state=0;
angry=0;
alarm[2]=0;
alarm[6]=0;
firingrocket=0;
firingmpfb=0;
rapidfirempfb=0;
firing=0;
if (facing==0)
    sprite_index=spr_krotera_basicleft;
else
    sprite_index=spr_krotera_basic;
}

//Spawn turrets
if (hp6 && maxhp>10){
    spawncount-=3;
    instance_create(x,y,obj_kroteraspawner);}

cfised=0;
thored=0;
//Fix sprite
if (sprite_index=spr_krotera_basic || sprite_index=spr_krotera_basicleft)
    image_speed=0.2;
else if (!(sprite_index=spr_krotera_death || sprite_index=spr_krotera_deathleft))
    image_speed=0.5;
//Kick
if (image_index==2){
    if (sprite_index=spr_krotera_kick){
        scr_sound("glo_swipe");
        tempid=instance_create(x+5,y+26,obj_kickbox_elite);
        tempid.facing=1;
        tempid.target=id;
        }
    if (sprite_index=spr_krotera_kickleft){
        scr_sound("glo_swipe");
        tempid=instance_create(x-30,y+26,obj_kickbox_elite);
        tempid.target=id;
        }
    }
/*
//Autodeath
if (hp<=0){
    dead=1;
    }
*/
//Smoke when charging
if (firingrocket==1 && state==0)
    smoking+=1;
if (smoking>=5){
    smoking=0;
    if (firingmpfb==0){
        if (facing==0)
            instance_create(x-22,y+35,obj_smoke);
        else
            instance_create(x+55,y+35,obj_smoke);
        }
    else{
        if (facing==0)
            instance_create(x-22,y+35,obj_mpfbspark);
        else
            instance_create(x+55,y+35,obj_mpfbspark);
        }
    }
//Armor
if (armor<99.9 && hp>0)
    armor+=0.1;
//Pain from armordrop
if (armor<1 && hp>0){
    hp-=1;
    script_execute(scr_elitepain,1);
    }
//Fire
if (state==2 && reloading==0){
    scr_sound("wea_imach");
    reloading=1;
    alarm[0]=3;
    alarm[1]=3;
    if (facing==0){
        sprite_index=spr_krotera_fireleft;
        (instance_create(x+14,y+30,obj_enemybullet)).target=id;
        instance_create(x-26,y+30,obj_muzzleflash);
        (instance_create(x+20,y+40,obj_enemybullet)).target=id;
        instance_create(x-20,y+40,obj_muzzleflash);
        if (instance_number(obj_shell)<40 && !global.specialbake){
            tempid=instance_create(x-9,y+30,obj_shell);
            tempid.speed=random(2)+5;
            tempid.direction=random(15)+40;
            tempid=instance_create(x-9,y+26,obj_shell);
            tempid.speed=random(2)+5;
            tempid.direction=random(15)+40;
            }
        }
    else{
        sprite_index=spr_krotera_fire;
        (instance_create(x+16,y+30,obj_enemybullet2)).target=id;
        (instance_create(x+82,y+30,obj_muzzleflash)).image_single=floor(random(5))+5;
        (instance_create(x+10,y+40,obj_enemybullet2)).target=id;
        (instance_create(x+77,y+40,obj_muzzleflash)).image_single=floor(random(5))+5;
        if (instance_number(obj_shell)<40 && !global.specialbake){
            tempid=instance_create(x+40,y+30,obj_shell);
            tempid.speed=random(2)+5;
            tempid.direction=random(15)+130;
            tempid=instance_create(x+40,y+26,obj_shell);
            tempid.speed=random(2)+5;
            tempid.direction=random(15)+130;
            }
        }
    }
//Stand still
if (state==0 && firingrocket==0 && swiping==0 && !ignorestand && !dead){
    if (facing==0)
        sprite_index=spr_krotera_basicleft;
    else
        sprite_index=spr_krotera_basic;
    }
//Walk
if (state==1 && !dead){
    if (facing==0){
        sprite_index=spr_krotera_walkleft;
        if (place_meeting(x-walkspeed,y,obj_glass) || place_meeting(x-walkspeed,y,obj_blockenemy) || place_free(x-20,y+20)){
            facing=1;
            exit;
            }
        if (place_free(x-walkspeed,y+1) && (place_meeting(x-walkspeed,y+10,obj_slopel) || place_meeting(x-walkspeed,y+10,obj_sloper))){
            x-=walkspeed;
            move_contact_solid(270,-1);
            }
        else if (place_free(x-walkspeed,y))
            x-=walkspeed;
        else{
            if (place_free(x-walkspeed,y-5) && (place_meeting(x,y+10,obj_slopel) || place_meeting(x,y+10,obj_sloper))){
                y-=5;
                x-=walkspeed;
                move_contact_solid(270,-1);
                }
            else
                facing=1;
            }
        }
    else{
        sprite_index=spr_krotera_walk;
        if (place_meeting(x+walkspeed,y,obj_glass) || place_meeting(x+walkspeed,y,obj_blockenemy) || place_free(x+20,y+20)){
            facing=0;
            exit;
            }
        if (place_free(x+walkspeed,y+1) && (place_meeting(x+walkspeed,y+10,obj_slopel) || place_meeting(x+walkspeed,y+10,obj_sloper))){
            x+=walkspeed;
            move_contact_solid(270,-1);
            }
        else if (place_free(x+walkspeed,y))
            x+=walkspeed;
        else{
            if (place_free(x+walkspeed,y-5) && (place_meeting(x,y+10,obj_slopel) || place_meeting(x,y+10,obj_sloper))){
                y-=5;
                x+=walkspeed;
                move_contact_solid(270,-1);
                }
            else
                facing=0;
            }
        }
    }

//Supermove flash
if (rapidfirempfb>0){
chargesoundcyc+=1;
if (chargesoundcyc>=8){
    chargesoundcyc=0;
    scr_sound("tor_gather_q03");
    }
if (facing==0)
    sprite_index=spr_krotera_flashleft;
else
    sprite_index=spr_krotera_flash;
if (facing==0)
    instance_create(x-32+random(20),y+25+random(20),obj_mpfbspark);
else
    instance_create(x+45+random(20),y+25+random(20),obj_mpfbspark);
}
Collision Event with object obj_bullet:

execute code:

{
if (dead==0 && rapidfirempfb==0){
    ijikill=1;
    if (!other.stagger){
        armor-=10*global.atmult;
        instance_create(other.x-3+random(7),other.y-3+random(7),obj_tasensplat);
        }
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stagger)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
}
Collision Event with object obj_pellet:

execute code:

if (dead==0 && rapidfirempfb==0){
    ijikill=1;
    if (!other.stun){
        armor-=9*global.atmult;
        instance_create(other.x-3+random(7),other.y-3+random(7),obj_tasensplat);
        }
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stun)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_kickbox:

execute code:

if (other.image_index==0 && !rapidfirempfb && !dead){
    scr_sound("glo_kick");
    ijikill=1;
    script_execute(scr_shakescreen,1);
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (global.facing==0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    
    if (global.strengthlevel>=resistance){
        hp-=1;
        script_execute(scr_elitepain);
        }
    else{
        global.erasetop=0;
        global.topmessage="You need a Strength of "+string(resistance)+" to damage Elite Krotera by knockdown";
        script_execute(scr_shakescreen,1);
        //Stagger
        if (hp>0 && (state==0 || state==1 || state==2 || state==3)){
            alarm[5]=300;
            takingpain=1;
            swiping=0;
            firingrocket=0;
            firingrocket2=0;
            firingmpfb=0;
            rapidfirempfb=0;
            state=3;
            alarm[1]=0;
            alarm[2]=10;
            alarm[6]=0;
            alarm[7]=0;
            image_index=0;
            if (facing==0)
                sprite_index=spr_krotera_painleft;
            if (facing==1)
                sprite_index=spr_krotera_pain;
            }
        }
    }
Collision Event with object obj_rocketexplosion:

execute code:

{
if (other.dud==0 && rapidfirempfb==0){
    hp-=2*global.atmult;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    script_execute(scr_elitepain);
    }
}
Collision Event with object obj_mpfbexplosion:

execute code:

{
if (other.dud==0 && rapidfirempfb==0){
    hp-=3*global.atmult;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    script_execute(scr_elitepain);
    }
}
Collision Event with object obj_pulse:

execute code:

if (other.hyper==1 && armor<30 && global.strengthlevel>=resistance && rapidfirempfb==0){
    ijikill=1;
    hp-=1;
    while (armor<100)
        armor+=1;
    script_execute(scr_elitepain);
    script_execute(scr_shakescreen,1);
    scr_sound("glo_kick");
    repeat(3){
        tempid=instance_create(other.x,other.y,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (other.hspeed<0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    }
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (dead==0 && rapidfirempfb==0 && !other.linker){
    ijikill=1;
    armor-=2*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_tasensplat);
    }
if (other.linker){
    if (global.topmessage=="0"){
        global.erasetop=0;
        global.topmessage="Pulse link could not be established";
        }
    }
Collision Event with object obj_enemyrocketexplosion:

execute code:

{
if (other.dud==0 && rapidfirempfb==0){
    hp-=2;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    script_execute(scr_elitepain);
    }
}
Collision Event with object obj_enemympfbexplosion:

execute code:

{
if (other.dud==0 && rapidfirempfb==0){
    hp-=3;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    script_execute(scr_elitepain);
    }
}
Collision Event with object obj_pushbox:

execute code:

if (dead==0){
    global.erasetop=0;
    global.topmessage="You need a Crack skill of "+string(security)+" to crack Elite Krotera";
    scr_sound("glo_crackfail");
    }
Collision Event with object obj_impulseexplosion:

execute code:

if (other.dud==0 && rapidfirempfb==0){
    ijikill=0;
    script_execute(scr_elitepain,0,1);
    }
______________________________________________________

Information about object: obj_kroteratrigger
Sprite: spr_block
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Alarm Event for alarm 0:

execute code:

obj_iji.sprite_index=spr_basic;
Alarm Event for alarm 1:

execute code:

kroteradead=1;
Alarm Event for alarm 2:

execute code:

with (obj_cdoor)
vspeed=0;
Step Event:

execute code:

if (obj_iji.x>x-32 && !ultrigger){
    ultrigger=1;
    obj_sabot.ultimatecannotpause=1;
    }

if (!triggered2 && !global.ignoreall){
triggered2=1;
obj_krotera.alarm[2]=30;
instance_create(x,y,obj_kroterabar);
scr_sound("kro_emote2");
}

if (!superkd && kroteradead && ((abs(obj_iji.x-obj_krotera.x-80)<96 && obj_krotera.sprite_index==spr_krotera_death) || (abs(obj_iji.x-obj_krotera.x+50)<96 && obj_krotera.sprite_index==spr_krotera_deathleft)) && global.hp>0 && !obj_iji.takingpain && (obj_iji.sprite_index==spr_basic || obj_iji.sprite_index==spr_basicleft || obj_iji.sprite_index==spr_run || obj_iji.sprite_index==spr_runleft)){
superkd=1;
obj_iji.takingpain=1;
global.ignoreall=1;
if (obj_krotera.sprite_index==spr_krotera_death)
    obj_krotera.kdx=83;
else
    obj_krotera.kdx=-70;
if (obj_iji.x>obj_krotera.x+obj_krotera.kdx){
    global.facing=0;
    obj_iji.sprite_index=spr_basicleft;
    }
else{
    global.facing=1;
    obj_iji.sprite_index=spr_basic;
    }
(instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chat35";
}
Collision Event with object obj_iji:

execute code:

if (!triggered){
triggered=1;
with (obj_cdoor){
    if (tag){
        scr_sound("glo_doorclose");
        vspeed=16;
        }
    }
alarm[2]=7;
obj_iji.speed=0;
obj_iji.sprite_index=spr_basic;
(instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chat34";
}
______________________________________________________

Information about object: obj_kroteraspawner
Sprite: spr_block
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

y=2432;
x=random(992)+2304;
if (place_free(x,y) && !obj_krotera.dead && distance_to_object(obj_iji)>128){
    scr_sound("tur_appear");
    tempid=instance_create(x,y-32,obj_turret);
    tempid.active=1;
    tempid.visible=1;
    tempid.image_single=-1;
    tempid.alarm[0]=3;
    if (obj_krotera.hp<18){
        temprand=random(1);
        if (temprand<(0.0+(global.difficulty*0.3)))
        tempid.weapon=1;
        }
    instance_destroy();
    }
______________________________________________________

Information about object: obj_kroterabar
Sprite: spr_bossbar
Solid: false
Visible: true
Depth: -100
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=2/3;
originalwidth=(obj_krotera.maxhp)*2;
yadjust=-48;
Draw Event:

execute code:

if (yadjust<0 && !obj_krotera.dead)
yadjust+=8;

x=floor(x);
y=floor(y);

if (!global.specialbake){
draw_set_color(c_black);
draw_rectangle(x-originalwidth-1,y-1,x+originalwidth,y+15,0);
draw_set_color(c_white);
draw_rectangle(x-originalwidth-1,y-1,x+originalwidth,y+15,1);
}
draw_sprite(spr_bossnames,0,x,y-10);

if (obj_krotera.hp>0){
if (!global.specialbake){
    width=(obj_krotera.hp)*2;
    draw_sprite_stretched(sprite_index,image_index,x-width,y,width*2,15);
    }
else{
    draw_sprite(spr_hpbarback,9,x-81,y);
    draw_sprite(spr_hpbar,ceil((obj_krotera.hp/obj_krotera.maxhp)*20),x-80,y);
    }
}

if (obj_krotera.dead){
    yadjust-=8;
    if (yadjust<-64)
        instance_destroy();
    }
______________________________________________________

Information about object: obj_kroteraflash
Sprite: spr_nanoflash
Solid: false
Visible: true
Depth: -10
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (distance_to_object(obj_krotera)>100)
    instance_destroy();
direction=point_direction(x,y,obj_krotera.x+15,obj_krotera.y+50);
direction+=180;
speed=random(16)+2;
Step Event:

execute code:

speed*=0.94;
if (speed<0.05){
    instance_create(x,y,obj_ijisplat);
    instance_destroy();
    }
______________________________________________________

Information about object: obj_starttransition
Sprite: spr_block
Solid: false
Visible: true
Depth: -1000000
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

draw_sprite_stretched(spr_block,0,obj_shakescreen.x-448,obj_shakescreen.y-320,(14-cycle)*32,640);
draw_sprite_stretched(spr_block,0,obj_shakescreen.x+cycle*32,obj_shakescreen.y-320,(14-cycle)*32,640);
cycle+=1;
if (cycle==14)
instance_destroy();

______________________________________________________

Information about object: obj_endtransition
Sprite: spr_block
Solid: false
Visible: true
Depth: -1000000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

cycle=13;
obj_sabot.lastfadeout=1;
obj_clearsabot.lastfadeout=1;
obj_face.lastfadeout=1;

Draw Event:

execute code:

if (room=rom_main || room=rom_clear){
draw_sprite_stretched(spr_block,0,-48,-20,(14-cycle)*32,640);
draw_sprite_stretched(spr_block,0,400+cycle*32,-20,(14-cycle)*32,640);
}
else{
draw_sprite_stretched(spr_block,0,obj_shakescreen.x-448,obj_shakescreen.y-320,(14-cycle)*32,640);
draw_sprite_stretched(spr_block,0,obj_shakescreen.x+cycle*32,obj_shakescreen.y-320,(14-cycle)*32,640);
}
cycle-=1;
______________________________________________________

Information about object: obj_tasenship
Sprite: spr_tasenship
Solid: false
Visible: true
Depth: 1000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (global.sector==2){
    image_single=floor(random(3)+3);
    smallness=image_single-3;
    }
if (global.sector==3 || global.sector==11){
    image_single=floor(random(3)+6);
    smallness=image_single-6;
    }
if (global.sector==5 || global.sector==12){
    image_single=floor(random(3)+9);
    smallness=image_single-9;
    }
if (global.sector==7){
    image_single=floor(random(3)+12);
    smallness=image_single-12;
    }
bob=(random(1)*smallness)+0.4;
Alarm Event for alarm 0:

execute code:

instance_destroy();
Step Event:

execute code:

if (global.sector==5 || global.sector==12 || global.sector==7){
    temprand=random(1);
    if (temprand<0.08)
    instance_create(x-5+random(40),y+random(15),obj_distantexplosion);
    }

cycle+=0.05;
if (cycle>=bob){
    cycle=0;
    bob2+=1;
    if (bob2==1)
        y+=1;
    if (bob2==3)
        y-=1;
    if (bob2==4)
        y-=1;
    if (bob2==6){
        y+=1;
        bob2=0;
        }
    }

//crash
if (global.sector==5 || global.sector==12 || global.sector==7){
    temprand=random(1);
    if (temprand<0.0002 && obj_sabot.crashedships<30 && !crashing){
        if (x>obj_sabot.x && xobj_sabot.y && y
______________________________________________________

Information about object: obj_emptyshredder
Sprite: spr_tasenshredder_emptyleft
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_enemy
Mask: 

Create Event:

execute code:

shredder=1;
facing=0;
shredderhp=1000;
if (global.suddendeath){
    shredderhp=100;
    }

Step Event:

execute code:

temphspeed=hspeed;
if (iji>0)
    iji-=1;

//Slow down
if (!goingleft && !goingright && !place_free(x,y+1)){
    if (hspeed<-1)
        hspeed+=0.4;
    if (hspeed>1)
        hspeed-=0.4;
    if (hspeed>=-1 && hspeed<=1)
        hspeed=0;
    }

//Limit speed
if (hspeed<-18)
    hspeed=-18;
if (hspeed>18)
    hspeed=18;

//Fall
if (place_free(x,y+1)){
    gravity=0.7;
    gravity_direction=270;
    if (place_free(x+hspeed,y+vspeed+2)){
        if (place_free(x+hspeed,y+vspeed-2)){
            donothing=1;
            }
        else if (place_free(x+hspeed,y+vspeed+12)){
            x-=hspeed;
            if (hspeed<0)
                move_contact_solid(180,32)
            else
                move_contact_solid(0,32)
            hspeed*=-0.5;
            if (abs(hspeed)<8)
                hspeed=0;
            }
        }
    else if (place_free(x+hspeed,y+vspeed+12)){
        x-=hspeed;
        if (hspeed<0)
            move_contact_solid(180,32)
        else
            move_contact_solid(0,32)
        hspeed*=-0.5;
        if (abs(hspeed)<8)
            hspeed=0;
        }
    }
if (vspeed>18)
    vspeed=18;

//Travel up slopes
if (hspeed<0 && place_meeting(x+hspeed-2,y,obj_sloper) && place_free(x+hspeed-2,y-24)){
    y-=10;
    move_contact_solid(270,32);
    }
else if (hspeed>0 && place_meeting(x+hspeed+2,y,obj_slopel) && place_free(x+hspeed+2,y-24)){
    y-=10;
    move_contact_solid(270,32);
    }

//Travel down slopes
else if (hspeed<0 && place_meeting(x,y+16,obj_slopel)){
    move_contact_solid(270,32);
    vspeed=0;
    gravity=0;
    }
else if (hspeed>0 && place_meeting(x,y+16,obj_sloper)){
    move_contact_solid(270,32);
    vspeed=0;
    gravity=0;
    }

//Bounce on walls
else if (hspeed<0 && !place_free(x+hspeed-2,y)){
    if (!place_meeting(x+hspeed-8,y,obj_meta) && !place_meeting(x+hspeed-8,y,obj_door) && !place_meeting(x+hspeed-8,y,obj_glass)){
        hspeed*=-0.5;
        if (hspeed<8){
            move_contact_solid(180,32)
            hspeed=0;
            }
        else
            scr_sound("glo_land");
        }
    }
else if (hspeed>0 && !place_free(x+hspeed+2,y)){
    if (!place_meeting(x+hspeed+8,y,obj_meta) && !place_meeting(x+hspeed+8,y,obj_door) && !place_meeting(x+hspeed+8,y,obj_glass)){
        hspeed*=-0.5;
        if (hspeed>-8){
            move_contact_solid(0,32)
            hspeed=0;
            }
        else
            scr_sound("glo_land");
        }
    }

//Land
if (hspeed==0 && !place_free(x,y+vspeed+2)){
    vspeed=0;
    gravity=0;
    move_contact_solid(270,32);
    }
if (vspeed>0){
    if (hspeed<0){
        if (!place_free(x+hspeed-2,y)){
            hspeed=0;
            move_contact_solid(180,32);
            }
        if (!place_free(x,y+vspeed+2)){
            vspeed=0;
            gravity=0;
            move_contact_solid(270,32);
            }
        }
    if (hspeed>0){
        if (!place_free(x+hspeed+2,y)){
            hspeed=0;
            move_contact_solid(0,32);
            }
        if (!place_free(x,y+vspeed+2)){
            vspeed=0;
            gravity=0;
            move_contact_solid(270,32);
            }
        }
    }


//Jump
if(hspeed<-10 && !place_meeting(x-140,y,obj_sloper) && place_meeting(x-46,y+4,obj_sloper))
    vspeed=-abs(hspeed)/2;
if(hspeed>10 && !place_meeting(x+140,y,obj_slopel) && place_meeting(x+46,y+4,obj_slopel))
    vspeed=-abs(hspeed)/2;

//Fix
if (place_meeting(x,y+16,obj_slopel) || place_meeting(x,y+16,obj_sloper)){
if ((hspeed<1 && temphspeed>4) || (hspeed>-1 && temphspeed<-4))
        hspeed=temphspeed;
    }
if (place_meeting(x,y,obj_block)){
    if (place_free(x-4,y))
        x-=4;
    else if (place_free(x+4,y))
        x+=4;
    move_outside_solid(90,32);
    }

//Shredder damaged
if (shredderhp<500)
    ssmokecyc+=1;
if (shredderhp<250)
    ssmokecyc+=2;
if (ssmokecyc>=10){
    ssmokecyc=0;
    instance_create(x-40+random(80),y-20+random(40),obj_bigsmoke);
    }

//Shredder explodes
if (shredderhp<=0){
    instance_destroy();
    instance_create(x,y,obj_enemyrocketexplosion);
    instance_create(x,y,obj_explosioncenter);
    if (global.specialbake==0)
        maxdebris=200;
    else
        maxdebris=40;
    if (instance_number(obj_scrapwhite)
Collision Event with object obj_tasensoldier:

execute code:

if (speed>8 && other.state!=4 && other.state!=5){
    scr_sound("glo_kick");
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=hspeed;
        tempid.direction=random(360);
        }
    scr_shakescreen(2);
    if (iji>0){
        other.ijikill=1;
        other.killtype=7;
        }
    else
        other.ijikill=0;
    other.hp-=1;
    global.tempshred=hspeed;
    if (hspeed<0){
        with (other)
            scr_enemyknockdown(1,abs(global.tempshred)-resistance);
        }
    if (hspeed>0){
        with (other)
            scr_enemyknockdown(2,abs(global.tempshred)-resistance);
        }
    }

Collision Event with object obj_rocketexplosion:

execute code:

if (!other.dud)
    shredderhp-=200*global.atmult;

Collision Event with object obj_mpfbexplosion:

execute code:

if (!other.dud)
    shredderhp-=300*global.atmult;

Collision Event with object obj_tasenscout:

execute code:

if (speed>8 && other.state!=4 && other.state!=5){
    scr_sound("glo_kick");
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=hspeed;
        tempid.direction=random(360);
        }
    scr_shakescreen(2);
    if (iji>0){
        other.ijikill=1;
        other.killtype=7;
        }
    else
        other.ijikill=0;
    other.hp-=1;
    global.tempshred=hspeed;
    if (hspeed<0){
        with (other)
            scr_enemyknockdown(1,abs(global.tempshred)-resistance);
        }
    if (hspeed>0){
        with (other)
            scr_enemyknockdown(2,abs(global.tempshred)-resistance);
        }
    }

Collision Event with object obj_enemyrocketexplosion:

execute code:

if (!other.dud)
    shredderhp-=200;
Collision Event with object obj_shockexplosion:

execute code:

if (!other.dud)
    shredderhp-=200*global.atmult;

Collision Event with object obj_shockballexplosion:

execute code:

if (!other.dud)
    shredderhp-=30*global.atmult;

Collision Event with object obj_tasencommander:

execute code:

if (speed>8 && other.state!=4 && other.state!=5){
    scr_sound("glo_kick");
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=hspeed;
        tempid.direction=random(360);
        }
    scr_shakescreen(2);
    if (iji>0){
        other.ijikill=1;
        other.killtype=7;
        }
    else
        other.ijikill=0;
    other.hp-=1;
    global.tempshred=hspeed;
    if (hspeed<0){
        with (other)
            scr_enemyknockdown(1,abs(global.tempshred)-resistance);
        }
    if (hspeed>0){
        with (other)
            scr_enemyknockdown(2,abs(global.tempshred)-resistance);
        }
    }

Collision Event with object obj_tasenelite:

execute code:

if (speed>8 && !other.dead && !other.takingpain){
    scr_sound("glo_kick");
    repeat(3){
        tempid=instance_create(other.x+30,other.y+15,obj_scrapwhite);
        tempid.speed=hspeed;
        tempid.direction=random(360);
        }
    if (iji>0){
        other.ijikill=1;
        other.killtype=7;
        }
    else
        other.ijikill=0;
    with (other){
        hp-=1;
        scr_shakescreen(2);
        scr_elitepain();
        }
    }
Collision Event with object obj_enemympfbexplosion:

execute code:

if (!other.dud)
    shredderhp-=300;
Collision Event with object obj_glass:

execute code:

global.tempshred=hspeed;
if (hspeed<0){
    with (other)
    scr_glassbreak(abs(global.tempshred),1);
    }
else{
    with (other)
    scr_glassbreak(abs(global.tempshred),2);
    }
Collision Event with object obj_meta:

execute code:

global.tempshred=speed;
with (other)
    script_execute(scr_metabreak,global.tempshred/2);
Collision Event with object obj_door:

execute code:

script_execute(scr_shakescreen,1);
global.tempshred=hspeed;
if (hspeed<0){
    with (other)
    script_execute(scr_metabreak,abs(global.tempshred),1);
    }
else{
    with (other)
    script_execute(scr_metabreak,abs(global.tempshred),2);
    }
global.erasetop=0;
global.topmessage="Level "+string(other.resistance)+" Shield door destroyed";
Collision Event with object obj_turret:

execute code:

if (speed>8 && other.kicked==0){
    scr_sound("glo_kick");
    script_execute(scr_shakescreen,1);
    global.tempshred=abs(hspeed);
    if (hspeed<0){
        with (other){
            scr_turretkick(1,global.tempshred);
            kicked=1;
            alarm[7]=20;
            }
        }
    else{
        with (other){
            scr_turretkick(2,global.tempshred);
            kicked=1;
            alarm[7]=20;
            }
        }
    }

Collision Event with object obj_enemyshockballexplosion:

execute code:

if (!other.dud)
    shredderhp-=30;
Collision Event with object obj_enemyshockexplosion:

execute code:

if (!other.dud)
    shredderhp-=200;
Collision Event with object obj_komatotrooper:

execute code:

if (speed>8 && other.state!=4 && other.state!=5){
    scr_sound("glo_kick");
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=hspeed;
        tempid.direction=random(360);
        }
    scr_shakescreen(2);
    if (iji>0){
        other.ijikill=1;
        other.killtype=7;
        }
    else
        other.ijikill=0;
    other.hp-=1;
    global.tempshred=hspeed;
    if (hspeed<0){
        with (other)
            scr_enemyknockdown(1,abs(global.tempshred)-resistance);
        }
    if (hspeed>0){
        with (other)
            scr_enemyknockdown(2,abs(global.tempshred)-resistance);
        }
    }

Collision Event with object obj_komatoberserker:

execute code:

if (speed>8 && other.state!=4 && other.state!=5){
    scr_sound("glo_kick");
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=hspeed;
        tempid.direction=random(360);
        }
    scr_shakescreen(2);
    if (iji>0){
        other.ijikill=1;
        other.killtype=7;
        }
    else
        other.ijikill=0;
    other.hp-=1;
    global.tempshred=hspeed;
    if (hspeed<0){
        with (other)
            scr_enemyknockdown(1,abs(global.tempshred)-resistance);
        }
    if (hspeed>0){
        with (other)
            scr_enemyknockdown(2,abs(global.tempshred)-resistance);
        }
    }

Draw Event:

execute code:

if (!place_free(x,y+16))
bobcycle+=1-(abs(hspeed)/60);

if (bobcycle>=22){
    bob=0;
    bobcycle=0;
    }
else if (bobcycle>=20)
    bob=-1;
else if (bobcycle>=16)
    bob=-2;
else if (bobcycle>=12)
    bob=-1;
else if (bobcycle>=10)
    bob=0;
else if (bobcycle>=8)
    bob=1;
else if (bobcycle>=4)
    bob=2;
else if (bobcycle>=2)
    bob=1;

draw_sprite(sprite_index,floor(image_index),x,y+bob);
______________________________________________________

Information about object: obj_slopel2
Sprite: spr_block
Solid: true
Visible: false
Depth: 0
Persistent: false
Parent: obj_slopel
Mask: 

______________________________________________________

Information about object: obj_sloper2
Sprite: spr_block
Solid: true
Visible: false
Depth: 0
Persistent: false
Parent: obj_sloper
Mask: 

______________________________________________________

Information about object: obj_tasenshredder
Sprite: spr_tasenshredder_basicleft
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_tasenenemy
Mask: 

Create Event:

execute code:

killtype=1;
image_speed=0.5;
image_index=7;
shredder=1;
facing=0;
shredderhp=1000;
if (global.suddendeath){
    shredderhp=100;
    }
enemytype=5;
security=5;
resistance=4;
alarm[2]=30+random(90);
Alarm Event for alarm 0:

set variable reloading to 0
Alarm Event for alarm 2:

execute code:

//Choose target
if (targetrival==0){
    if (targetiji>0)
        target=obj_iji.id;
    else{
        angry=0;
        alarm[5]=300;
        }
    }
if (!instance_exists(target)){
angry=0;
targetrival=0;
if (targetiji>0 && target!=obj_iji.id){
    if (!angry)
    alarm[2]=1;
    angry=1;
    alarm[5]=300;
    target=obj_iji.id;
    }
}

randomstate=random(1);
//Roam
if (!angry){
    driving=0;
    state=0;
    alarm[2]=60+random(90);
    if (randomstate>0.5)
        facing=0;
    else
        facing=1;
    }
//Angry
else{
    alarm[2]=20+random(20);
    driving=1;
    if (x>target.x){
        if (place_meeting(x-16,y-24,obj_block) && !place_meeting(x-16,y-24,obj_sloper))
            facing=1;
        else
            facing=0;
        }
    else{
        if (place_meeting(x+16,y-24,obj_block) && !place_meeting(x+16,y-24,obj_slopel))
            facing=0;
        else
            facing=1;
            }
    if (randomstate<0.5 && abs(y-obj_iji.y)<100)
        state=1;
    else
        state=0;
    }
Alarm Event for alarm 5:

set variable angry to 0
Step Event:

execute code:

//"FIND"
if (angry && !prevangry)
    scr_sound("sol_find");
prevangry=angry;

scr_tasenvision(0,-20);
if (targetiji>0)
targetiji-=1;
if (targetrival>0)
targetrival-=1;
cfised=0;
thored=0;
plasmaed=0;
//Block shredder
if (place_meeting(x,y,obj_blockshredder)){
    alarm[2]=30;
    facing=0;
    driving=1;
    }
//Lose sight
if ((x < obj_shakescreen.x-1000) || (x > obj_shakescreen.x+1000) || (y < obj_shakescreen.y-800) || (y > obj_shakescreen.y+800)){
    angry=0;
    alarm[5]=0;
    if (state==2)
        state=0;
    }
//Crack fail
if (crackmark==1 && distance_to_object(obj_iji) > 50){
    script_execute(scr_crackfail);
    global.erasetop=0;
    global.topmessage="CRACKING FAILED: Subject is too far away";
    }
if (crackmark==1 && shredderhp<=0){
    script_execute(scr_terminatecrack);
    global.erasetop=0;
    global.topmessage="CRACKING FAILED: Subject was destroyed";
    }
//Fire
if (angry==1 && reloading==0 && image_index>=7 && state==1){
    scr_sound("wea_mach");
    reloading=1;
    alarm[0]=3;
    alarm[1]=3;
    if (facing==0 && sprite_index==spr_tasenshredder_basicleft){
        (instance_create(x-5,y+12,obj_enemybullet)).target=id;
        (instance_create(x-5,y+12,obj_enemybullet)).target=id;
        instance_create(x-31+hspeed,y+16+vspeed,obj_muzzleflash);
        if (instance_number(obj_shell)<40 && !global.specialbake){
            tempid=instance_create(x-10+hspeed,y+14+vspeed,obj_shell);
            tempid.speed=random(2)+5;
            tempid.direction=random(15)+40;
            }
        }
    else if (facing==1 && sprite_index==spr_tasenshredder_basic){
        (instance_create(x+5,y+12,obj_enemybullet2)).target=id;
        (instance_create(x+5,y+12,obj_enemybullet2)).target=id;
        (instance_create(x+62+hspeed,y+16+vspeed,obj_muzzleflash)).image_single=floor(random(5))+5;
        if (instance_number(obj_shell)<40 && !global.specialbake){
            tempid=instance_create(x+10+hspeed,y+14+vspeed,obj_shell);
            tempid.speed=random(2)+5;
            tempid.direction=random(15)+130;
            }
        }
    }





temphspeed=hspeed;
//Drive
if (driving && facing==0){
    hspeed-=1.49;
    facing=0;
    }
if (driving && facing==1){
    hspeed+=1.49;
    facing=1;
    }

//Slow down
if (!goingleft && !goingright && !place_free(x,y+1)){
    if (hspeed<-1)
        hspeed+=0.4;
    if (hspeed>1)
        hspeed-=0.4;
    if (hspeed>=-1 && hspeed<=1)
        hspeed=0;
    }

//Limit speed
if (hspeed<-18)
    hspeed=-18;
if (hspeed>18)
    hspeed=18;

//Fall
if (place_free(x,y+1)){
    gravity=0.7;
    gravity_direction=270;
    if (place_free(x+hspeed,y+vspeed+2)){
        if (place_free(x+hspeed,y+vspeed-2)){
            donothing=1;
            }
        else if (place_free(x+hspeed,y+vspeed+12)){
            x-=hspeed;
            if (hspeed<0)
                move_contact_solid(180,32)
            else
                move_contact_solid(0,32)
            hspeed*=-0.5;
            if (abs(hspeed)<8)
                hspeed=0;
            }
        }
    else if (place_free(x+hspeed,y+vspeed+12)){
        x-=hspeed;
        if (hspeed<0)
            move_contact_solid(180,32)
        else
            move_contact_solid(0,32)
        hspeed*=-0.5;
        if (abs(hspeed)<8)
            hspeed=0;
        }
    }
if (vspeed>18)
    vspeed=18;

//Travel up slopes
if (hspeed<0 && place_meeting(x+hspeed-2,y+1,obj_sloper) && place_free(x+hspeed-2,y-24)){
    y-=10;
    move_contact_solid(270,32);
    }
else if (hspeed>0 && place_meeting(x+hspeed+2,y+1,obj_slopel) && place_free(x+hspeed+2,y-24)){
    y-=10;
    move_contact_solid(270,32);
    }

//Travel down slopes
else if (hspeed<0 && place_meeting(x,y+16,obj_slopel)){
    move_contact_solid(270,32);
    vspeed=0;
    gravity=0;
    }
else if (hspeed>0 && place_meeting(x,y+16,obj_sloper)){
    move_contact_solid(270,32);
    vspeed=0;
    gravity=0;
    }

//Bounce on walls
else if (hspeed<0 && !place_free(x+hspeed-2,y)){
    if (!place_meeting(x+hspeed-8,y,obj_meta) && !place_meeting(x+hspeed-8,y,obj_door) && !place_meeting(x+hspeed-8,y,obj_glass)){
        hspeed*=-0.5;
        if (hspeed<8){
            move_contact_solid(180,32)
            hspeed=0;
            }
        else
            scr_sound("glo_land");
        }
    }
else if (hspeed>0 && !place_free(x+hspeed+2,y)){
    if (!place_meeting(x+hspeed+8,y,obj_meta) && !place_meeting(x+hspeed+8,y,obj_door) && !place_meeting(x+hspeed+8,y,obj_glass)){
        hspeed*=-0.5;
        if (hspeed>-8){
            move_contact_solid(0,32)
            hspeed=0;
            }
        else
            scr_sound("glo_land");
        }
    }

//Land
if (hspeed==0 && !place_free(x,y+vspeed+2)){
    vspeed=0;
    gravity=0;
    move_contact_solid(270,32);
    }
if (vspeed>0){
    if (hspeed<0){
        if (!place_free(x+hspeed-2,y)){
            hspeed=0;
            move_contact_solid(180,32);
            }
        if (!place_free(x,y+vspeed+2)){
            vspeed=0;
            gravity=0;
            move_contact_solid(270,32);
            }
        }
    if (hspeed>0){
        if (!place_free(x+hspeed+2,y)){
            hspeed=0;
            move_contact_solid(0,32);
            }
        if (!place_free(x,y+vspeed+2)){
            vspeed=0;
            gravity=0;
            move_contact_solid(270,32);
            }
        }
    }


//Jump
if(hspeed<-10 && !place_meeting(x-140,y,obj_sloper) && place_meeting(x-46,y+4,obj_sloper))
    vspeed=-abs(hspeed)/2;
if(hspeed>10 && !place_meeting(x+140,y,obj_slopel) && place_meeting(x+46,y+4,obj_slopel))
    vspeed=-abs(hspeed)/2;

//Animate
if (facing==0 && image_index>=7 && sprite_index==spr_tasenshredder_basic){
    image_index=0;
    sprite_index=spr_tasenshredder_basicleft;
    }
if (facing==1 && image_index>=7 && sprite_index==spr_tasenshredder_basicleft){
    image_index=0;
    sprite_index=spr_tasenshredder_basic;
    }

//Stop animations
if (image_index>7)
    image_index=7;

//Fix
if (place_meeting(x,y+16,obj_slopel) || place_meeting(x,y+16,obj_sloper)){
if ((hspeed<1 && temphspeed>4) || (hspeed>-1 && temphspeed<-4))
        hspeed=temphspeed;
    }
if (place_meeting(x,y,obj_block)){
    if (place_free(x-4,y))
        x-=4;
    else if (place_free(x+4,y))
        x+=4;
    move_outside_solid(90,32);
    }

//Shredder damaged
if (shredderhp<500)
    ssmokecyc+=1;
if (shredderhp<250)
    ssmokecyc+=2;
if (ssmokecyc>=10){
    ssmokecyc=0;
    instance_create(x-40+random(80),y-20+random(40),obj_bigsmoke);
    }

//Shredder explodes
if (shredderhp<=0){
    scr_shakescreen(2);
    instance_destroy();
    scr_sound("sol_death");
    tempid=instance_create(x,y-30,obj_tasensoldier);
    tempid.hp=0;
    tempid.dead=1;
    tempid.killdataid=killdataid;
    tempid.killtype=killtype;
    if (ijikill)
        tempid.ijikill=1;
    if (facing==0){
        with (tempid)
            script_execute(scr_enemyknockdown,2,11);
        }
    else{
        with (tempid)
            script_execute(scr_enemyknockdown,1,11);
        }
    instance_create(x,y,obj_enemyrocketexplosion);
    instance_create(x,y,obj_explosioncenter);
    if (global.specialbake==0)
        maxdebris=200;
    else
        maxdebris=40;
    if (instance_number(obj_scrapwhite)
Collision Event with object obj_bullet:

execute code:

if (angry==0){
    alarm[2]=1;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
if (!other.stagger)
    ijikill=1;
targetiji=300;
alarm[5]=300;
shredderhp-=10*global.atmult;
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stagger)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_pellet:

execute code:

if (angry==0)
    alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
if (!other.stun)
    ijikill=1;
targetiji=300;
alarm[5]=300;
if (!other.stun)
    shredderhp-=9*global.atmult;
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stun)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_kickbox:

execute code:

global.temp=0;
with (other){
    if (place_meeting(x,y,obj_door) || place_meeting(x,y,obj_cdoor))
        global.temp=1;
    if (sprite_index==spr_detonator)
        global.temp=0;
    }
if (global.temp==0){
if (other.image_index==0){
scr_sound("glo_kick");
scr_shakescreen(1);
targetiji=300;
if (angry==0)
    alarm[2]=15;
alarm[5]=300;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
if (global.strengthlevel>=resistance){
    //shredderhp-=(100*(1+(global.attacklevel/10)));
    if (shredderhp>0){
        scr_sound("sol_death");
        tempid=instance_create(x,y-30,obj_tasensoldier);
        tempid.hp=1;
        tempid.killdataid=killdataid;
        tempid.angry=1;
        tempid.targetiji=300;
        tempid.alarm[5]=300;
        if (obj_iji.x+6
Collision Event with object obj_rocketexplosion:

execute code:

if (!other.dud){
    shredderhp-=200*global.atmult;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    if (shredderhp>0){
        scr_sound("sol_death");
        tempid=instance_create(x,y-30,obj_tasensoldier);
        tempid.hp=0;
        tempid.dead=1;
        tempid.ijikill=1;
        tempid.killdataid=killdataid;
        if (facing==0){
            with (tempid)
                script_execute(scr_enemyknockdown,2,11);
            }
        else{
            with (tempid)
                script_execute(scr_enemyknockdown,1,11);
            }
        instance_destroy();
        tempid=instance_create(floor(x),floor(y)-1,obj_emptyshredder);
        tempid.shredderhp=shredderhp;
        if (sprite_index==spr_tasenshredder_basicleft)
            tempid.sprite_index=spr_tasenshredder_emptyleft;
        else
            tempid.sprite_index=spr_tasenshredder_empty;
        tempid.facing=facing;
        tempid.hspeed=hspeed;
        tempid.vspeed=vspeed;
        }
    }
Collision Event with object obj_mpfbexplosion:

execute code:

if (!other.dud){
    shredderhp-=300*global.atmult;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    if (shredderhp>0){
        scr_sound("sol_death");
        tempid=instance_create(x,y-30,obj_tasensoldier);
        tempid.hp=0;
        tempid.dead=1;
        tempid.ijikill=1;
        tempid.killdataid=killdataid;
        tempid.killtype=5;
        if (other.banana)
            tempid.killtype=8;
        if (facing==0){
            with (tempid)
                script_execute(scr_enemyknockdown,2,22);
            }
        else{
            with (tempid)
                script_execute(scr_enemyknockdown,1,22);
            }
        instance_destroy();
        tempid=instance_create(floor(x),floor(y)-1,obj_emptyshredder);
        tempid.shredderhp=shredderhp;
        if (sprite_index==spr_tasenshredder_basicleft)
            tempid.sprite_index=spr_tasenshredder_emptyleft;
        else
            tempid.sprite_index=spr_tasenshredder_empty;
        tempid.facing=facing;
        tempid.hspeed=hspeed;
        tempid.vspeed=vspeed;
        }
    }

Collision Event with object obj_pulse:

execute code:

with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (angry==0)
    alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
if (!other.linker)
    ijikill=1;
angry=1;
targetiji=300;
alarm[5]=300;
if (!other.linker)
    shredderhp-=2*global.atmult;
if (other.linker)
    scr_pulselink(3);
Collision Event with object obj_enemyrocketexplosion:

execute code:

if (!other.dud){
    shredderhp-=200;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    if (shredderhp>0){
        scr_sound("sol_death");
        tempid=instance_create(x,y-30,obj_tasensoldier);
        tempid.hp=0;
        tempid.dead=1;
        tempid.killdataid=killdataid;
        if (facing==0){
            with (tempid)
                script_execute(scr_enemyknockdown,2,11);
            }
        else{
            with (tempid)
                script_execute(scr_enemyknockdown,1,11);
            }
        instance_destroy();
        tempid=instance_create(floor(x),floor(y)-1,obj_emptyshredder);
        tempid.shredderhp=shredderhp;
        if (sprite_index==spr_tasenshredder_basicleft)
            tempid.sprite_index=spr_tasenshredder_emptyleft;
        else
            tempid.sprite_index=spr_tasenshredder_empty;
        tempid.facing=facing;
        tempid.hspeed=hspeed;
        tempid.vspeed=vspeed;
        }
    }
Collision Event with object obj_shockexplosion:

execute code:

if (!other.dud){
    shredderhp-=200*global.atmult;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    if (shredderhp>0){
        scr_sound("sol_death");
        tempid=instance_create(x,y-30,obj_tasensoldier);
        tempid.hp=0;
        tempid.dead=1;
        tempid.ijikill=1;
        tempid.killdataid=killdataid;
        if (facing==0){
            with (tempid)
                script_execute(scr_enemyknockdown,2,13);
            }
        else{
            with (tempid)
                script_execute(scr_enemyknockdown,1,13);
            }
        instance_destroy();
        tempid=instance_create(floor(x),floor(y)-1,obj_emptyshredder);
        tempid.shredderhp=shredderhp;
        if (sprite_index==spr_tasenshredder_basicleft)
            tempid.sprite_index=spr_tasenshredder_emptyleft;
        else
            tempid.sprite_index=spr_tasenshredder_empty;
        tempid.facing=facing;
        tempid.hspeed=hspeed;
        tempid.vspeed=vspeed;
        }
    }
Collision Event with object obj_shockballexplosion:

execute code:

if (!other.dud){
    shredderhp-=30*global.atmult;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    alarm[2]=1;
    }
angry=1;
targetiji=300;
ijikill=1;
alarm[5]=300;
}
Collision Event with object obj_enemympfbexplosion:

execute code:

if (!other.dud){
    shredderhp-=300;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    if (shredderhp>0){
        scr_sound("sol_death");
        tempid=instance_create(x,y-30,obj_tasensoldier);
        tempid.hp=0;
        tempid.dead=1;
        tempid.killdataid=killdataid;
        if (facing==0){
            with (tempid)
                script_execute(scr_enemyknockdown,2,22);
            }
        else{
            with (tempid)
                script_execute(scr_enemyknockdown,1,22);
            }
        instance_destroy();
        tempid=instance_create(floor(x),floor(y)-1,obj_emptyshredder);
        tempid.shredderhp=shredderhp;
        if (sprite_index==spr_tasenshredder_basicleft)
            tempid.sprite_index=spr_tasenshredder_emptyleft;
        else
            tempid.sprite_index=spr_tasenshredder_empty;
        tempid.facing=facing;
        tempid.hspeed=hspeed;
        tempid.vspeed=vspeed;
        }
    }
Collision Event with object obj_pushbox:

execute code:

ijikill=1;
if (global.cracklevel>=security){
    global.security=security;
    crackmark=1;
    if (global.suddendeath)
        global.cracktext="Tasen Shredder#H1 A100 W4#Security: ";
    else
        global.cracktext="Tasen Shredder#H1 A1000 W4#Security: ";
    global.cracktext+=string(global.security);
    if (global.security==10)
        global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
    else
        global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
    script_execute(scr_begincrack);
    }
else{
    global.erasetop=0;
    global.topmessage="You need a Crack skill of "+string(security)+" to crack a Tasen Shredder";
    scr_sound("glo_crackfail");
    global.ignorestation=90;
    }
Collision Event with object obj_glass:

execute code:

global.tempshred=hspeed;
if (hspeed<0){
    with (other)
    scr_glassbreak(abs(global.tempshred),1);
    }
else{
    with (other)
    scr_glassbreak(abs(global.tempshred),2);
    }
Collision Event with object obj_meta:

execute code:

global.tempshred=speed;
with (other)
    script_execute(scr_metabreak,global.tempshred/2);
Collision Event with object obj_door:

execute code:

script_execute(scr_shakescreen,1);
global.tempshred=hspeed;
if (hspeed<0){
    with (other)
    script_execute(scr_metabreak,abs(global.tempshred),1);
    }
else{
    with (other)
    script_execute(scr_metabreak,abs(global.tempshred),2);
    }
global.erasetop=0;
global.topmessage="Level "+string(other.resistance)+" Shield door destroyed";
Collision Event with object obj_thor:

execute code:

if (thored==0){
    ijikill=1;
    targetiji=300;
    if (angry==0){
        alarm[2]=1;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    ijikill=1;
    shredderhp-=35*global.atmult;
    if (shredderhp<=0 && ijikill && killtype<5)
        killtype=5;
    angry=1;
    alarm[5]=300;
    thored=1;
    }
Collision Event with object obj_enemyshockballexplosion:

execute code:

if (!other.dud){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    shredderhp-=30;
    targetrival=300;
    target=other.target;
    }
Collision Event with object obj_enemyshockexplosion:

execute code:

if (!other.dud){
    shredderhp-=200;
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    if (shredderhp>0){
        scr_sound("sol_death");
        tempid=instance_create(x,y-30,obj_tasensoldier);
        tempid.hp=0;
        tempid.dead=1;
        tempid.killdataid=killdataid;
        if (facing==0){
            with (tempid)
                script_execute(scr_enemyknockdown,2,13);
            }
        else{
            with (tempid)
                script_execute(scr_enemyknockdown,1,13);
            }
        instance_destroy();
        tempid=instance_create(floor(x),floor(y)-1,obj_emptyshredder);
        tempid.shredderhp=shredderhp;
        if (sprite_index==spr_tasenshredder_basicleft)
            tempid.sprite_index=spr_tasenshredder_emptyleft;
        else
            tempid.sprite_index=spr_tasenshredder_empty;
        tempid.facing=facing;
        tempid.hspeed=hspeed;
        tempid.vspeed=vspeed;
        }
    }
Collision Event with object obj_komatotrooper:

execute code:

if (speed>8 && other.state!=4 && other.state!=5){
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=hspeed;
        tempid.direction=random(360);
        }
    scr_shakescreen(2);
    scr_sound("glo_kick");
    other.ijikill=0;
    other.hp-=1;
    other.targetrival=300;
    other.target=id;
    global.tempshred=hspeed;
    if (hspeed<0){
        with (other)
            scr_enemyknockdown(1,abs(global.tempshred)-resistance);
        }
    if (hspeed>0){
        with (other)
            scr_enemyknockdown(2,abs(global.tempshred)-resistance);
        }
    }

Collision Event with object obj_enemypulse:

execute code:

with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (angry==0)
    alarm[2]=1;
angry=1;
ijikill=0;
target=other.target;
targetrival=300;

alarm[5]=300;
shredderhp+=-(2*(1+(global.attacklevel/10)));
Collision Event with object obj_komatoberserker:

execute code:

if (speed>8 && other.state!=4 && other.state!=5){
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=hspeed;
        tempid.direction=random(360);
        }
    scr_shakescreen(2);
    scr_sound("glo_kick");
    other.ijikill=0;
    other.hp-=1;
    other.targetrival=300;
    other.target=id;
    global.tempshred=hspeed;
    if (hspeed<0){
        with (other)
            scr_enemyknockdown(1,abs(global.tempshred)-resistance);
        }
    if (hspeed>0){
        with (other)
            scr_enemyknockdown(2,abs(global.tempshred)-resistance);
        }
    }

Collision Event with object obj_impulseexplosion:

execute code:

if (!other.dud){
    ijikill=0;
    if (shredderhp>0){
        tempid=instance_create(x,y-30,obj_tasensoldier);
        tempid.killdataid=killdataid;
        tempid.angry=1;
        tempid.targetiji=300;
        tempid.alarm[5]=300;
        if (x
Draw Event:

execute code:

if (!place_free(x,y+16))
bobcycle+=1-(abs(hspeed)/60);

if (bobcycle>=22){
    bob=0;
    bobcycle=0;
    }
else if (bobcycle>=20)
    bob=-1;
else if (bobcycle>=16)
    bob=-2;
else if (bobcycle>=12)
    bob=-1;
else if (bobcycle>=10)
    bob=0;
else if (bobcycle>=8)
    bob=1;
else if (bobcycle>=4)
    bob=2;
else if (bobcycle>=2)
    bob=1;

draw_sprite(sprite_index,floor(image_index),x,y+bob);
______________________________________________________

Information about object: obj_hologram
Sprite: spr_basic
Solid: false
Visible: true
Depth: -1
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

x=obj_iji.x;
y=obj_iji.y;

if (!obj_iji.shredder)
    instance_destroy();

if (!place_free(obj_iji.x,obj_iji.y+16))
bobcycle+=1-(abs(obj_iji.hspeed)/60);

if (bobcycle>=22){
    bob=0;
    bobcycle=0;
    }
else if (bobcycle>=20)
    bob=-1;
else if (bobcycle>=16)
    bob=-2;
else if (bobcycle>=12)
    bob=-1;
else if (bobcycle>=10)
    bob=0;
else if (bobcycle>=8)
    bob=1;
else if (bobcycle>=4)
    bob=2;
else if (bobcycle>=2)
    bob=1;

draw_sprite_ext(obj_iji.sprite_index,floor(obj_iji.image_index),obj_iji.x,obj_iji.y+bob,1,1,0,c_white,obj_iji.image_alpha);
______________________________________________________

Information about object: obj_crumble4
Sprite: spr_crumble4
Solid: true
Visible: true
Depth: 0
Persistent: false
Parent: obj_block
Mask: 

Collision Event with object obj_rocketexplosion:

execute code:

if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(88),y+8+random(16),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
Collision Event with object obj_mpfbexplosion:

execute code:

if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(88),y+8+random(16),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
Collision Event with object obj_enemyrocketexplosion:

execute code:

if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(88),y+8+random(16),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
Collision Event with object obj_impulseexplosion:

execute code:

if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(88),y+8+random(16),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
______________________________________________________

Information about object: obj_s4reactor
Sprite: spr_s4reactor
Solid: false
Visible: true
Depth: 50
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

if (!active)
draw_sprite(sprite_index,0,x,y);

else{
scr_ammofloat();
animcyc+=1;
if (animcyc>2)
animcyc=1;
draw_sprite(sprite_index,animcyc,x,y);
//Lines
draw_set_color(c_white);
temprand=random(64)-32;
temprand2=random(64)-32;
temprand3=random(64)-32;
temprand4=random(64)-32;
draw_line(x+temprand,y-80,x+temprand,y+80);
draw_line(x+temprand2,y-80,x+temprand2,y+80);
draw_line(x+temprand3,y-80,x+temprand3,y+80);
draw_line(x+temprand4,y-80,x+temprand4,y+80);
}
______________________________________________________

Information about object: obj_blockshredder
Sprite: spr_crate1
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_s4stopflash
Sprite: spr_cdoor
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

obj_sabot.s4flash=2;
______________________________________________________

Information about object: obj_poster
Sprite: spr_poster
Solid: false
Visible: true
Depth: 100
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

ready=1;
if (global.sector==0)
    image_single=9;
else
    image_single=global.sector-1;
if (room==rom_sectorz)
    image_single=10;
if (room==rom_sector1 && global.wty)
    image_single=11;
Alarm Event for alarm 0:

execute code:

ready=1;
Step Event:

execute code:

if (place_meeting(x,y,obj_iji)){
    obj_hud.touchposter=1;
    if (!used && ready){
        ready=0;
        alarm[0]=30;
        if (room==rom_sector1 && global.wty){
            global.erasetop=0;
            global.topmessage="THIS POSTER CANNOT BE UNLOCKED FOR THE SAKE OF MANKIND";
            global.ignorestation=90;
            }
        else if (room==rom_sectorz){
            global.erasetop=0;
            global.topmessage="THIS POSTER IS TOO EPIC TO UNLOCK! /REALLYJOEL";
            global.ignorestation=90;
            }

        //Get poster
        else{
            if ((room==rom_sector1 && global.poster1) || (room==rom_sector2 && global.poster2) || (room==rom_sector3 && global.poster3) || (room==rom_sector4 && global.poster4) || (room==rom_sector5 && global.poster5) || (room==rom_sector6 && global.poster6) || (room==rom_sector7 && global.poster7) || (room==rom_sector8 && global.poster8) || (room==rom_sector9 && global.poster9) || (room==rom_sectorx && global.poster10)){
                global.erasetop=0;
                global.topmessage="POSTER ALREADY UNLOCKED";
                global.ignorestation=90;
                }
            else{
                scr_readsum();
                if (wrongsum){
                    global.erasetop=0;
                    global.topmessage="SAVEFILE CORRUPT, UNABLE TO UNLOCK POSTER";
                    global.ignorestation=90;
                    }
                else{
                    used=1;
                    scr_sound("glo_cracksuccess");
                    global.erasetop=0;
                    global.topmessage="POSTER PERMANENTLY UNLOCKED IN THE EXTRAS MENU";
                    if (global.sector==1)
                        global.poster1=1;
                    if (global.sector==2)
                        global.poster2=1;
                    if (global.sector==3)
                        global.poster3=1;
                    if (global.sector==4)
                        global.poster4=1;
                    if (global.sector==5)
                        global.poster5=1;
                    if (global.sector==6)
                        global.poster6=1;
                    if (global.sector==7)
                        global.poster7=1;
                    if (global.sector==8)
                        global.poster8=1;
                    if (global.sector==9)
                        global.poster9=1;
                    if (global.sector==0)
                        global.poster10=1;
                    scr_save();
                    }
                }
            }
        }
    }
else
    obj_hud.touchposter=0;
______________________________________________________

Information about object: obj_destroyturret
Sprite: spr_crate1
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_turret:

execute code:

with (other){
    instance_destroy();
    script_execute(scr_shakescreen,1);
    if (global.specialbake==0) maximum=25;
    else maximum=120;
    if (instance_number(obj_scrapwhite)
______________________________________________________

Information about object: obj_komatoberserker
Sprite: spr_komatoberserker_basicleft
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_komatoenemy
Mask: 

Create Event:

execute code:

killtype=2;
image_speed=0.5;
state=1;
alarm[2]=25+random(10);
hp=10;
maxhp=10;
armor=200;
maxarmor=200;
if (global.suddendeath){
    hp=1;
    maxhp=1;
    armor=100;
    maxarmor=100;
    }
enemytype=11;
resistance=8;
security=7;
walkspeed=4+global.specialtrigger16*2;

Alarm Event for alarm 0:

set variable reloading to 0
Alarm Event for alarm 1:

execute code:

{
if (facing==0)
    sprite_index=spr_komatoberserker_basicleft;
else
    sprite_index=spr_komatoberserker_basic;
}
Alarm Event for alarm 2:

execute code:

//Charged Detonator fix
if (firedetonator){
    firedetonator=0;
    firingrocket=0;
    }

//Choose target
if (targetrival==0){
    if (targetiji>0)
        target=obj_iji.id;
    else{
        angry=0;
        alarm[5]=300;
        }
    }
if (!instance_exists(target)){
angry=0;
targetrival=0;
if (targetiji>0 && target!=obj_iji.id){
    if (!angry && (state==0 || state==1))
        alarm[2]=1;
    angry=1;
    alarm[5]=300;
    target=obj_iji.id;
    }
}

//Adjust sprite
if (facing==0 && state==0)
    sprite_index=spr_komatoberserker_basicleft;
if (facing==1 && state==0)
    sprite_index=spr_komatoberserker_basic;
//Begin taking action
takingpain=0;
alarm[2]=25+random(10);
//Scour for seen health
if (!angry && scouring>0){
    state=1;
    if (scouringdir>0)
        facing=0;
    else
        facing=1;
    exit;
    }
//Rocket has fired
if (firingrocket==1){
    state=1;
    firingrocket=0;
    if (x>target.x)
        facing=0;
    else
        facing=1;
    exit;
    }
//Roam
randomstate=random(1);
if (angry==0){
    if (randomstate<0.6 && !goodgrief){
        state=0;
        alarm[2]=60+random(90);
        }
    else{
        state=1;
        facing=0;
        if (randomstate>0.8 || goodgrief)
            facing=1;
        }
    }
//Angry
else{
    state=1;
    idling+=1;
    if (idling==4){
        idling=0;
        if (abs(target.y-y)<128)
            randomstate=1;
        }
    //Face target
    if (x>target.x)
        facing=0;
    else
        facing=1;
    //Charge Detonate
    if (randomstate>0.3){
        if (x>target.x && (place_meeting(x-40,y,obj_meta) || place_meeting(x-40,y,obj_glass)) && detocool==0){
            idling=0;
            tempid=instance_create(x-15,y+30,obj_chargetell);
            tempid.tempid=id;
            state=0;
            facing=0;
            firedetonator=1;
            detocool=45;
            sprite_index=spr_komatoberserker_basicleft;
            firingrocket=1;
            scr_sound("wea_charge");
            alarm[2]=15;
            alarm[6]=12;
            }
        else if (x<=target.x && (place_meeting(x+40,y,obj_meta) || place_meeting(x+40,y,obj_glass)) && detocool==0){
            idling=0;
            tempid=instance_create(x+45,y+30,obj_chargetell);
            tempid.tempid=id;
            state=0;
            facing=1;
            firedetonator=1;
            detocool=45;
            sprite_index=spr_komatoberserker_basic;
            firingrocket=1;
            scr_sound("wea_charge");
            alarm[2]=15;
            alarm[6]=12;
            }
        if (distance_to_object(target)<60 && detocool==0){
            idling=0;
            state=0;
            firedetonator=1;
            detocool=45;
            firingrocket=1;
            scr_sound("wea_charge");
            alarm[2]=15;
            alarm[6]=12;
            if (x>target.x){
                facing=0;
                sprite_index=spr_komatoberserker_basicleft;
                tempid=instance_create(x-15,y+30,obj_chargetell);
                tempid.tempid=id;
                }
            else{
                facing=1;
                sprite_index=spr_komatoberserker_basic;
                tempid=instance_create(x+45,y+30,obj_chargetell);
                tempid.tempid=id;
                }
            }
        }
    //Get ready for rocket
    if (!firingrocket && randomstate>0.6 && distance_to_object(target)>=60 && abs(y-target.y)<192 && (weapon==0 || (weapon==1 && abs((x+50)-target.x)<400))){
        if (x+20>target.x)
            facing=0;
        else
            facing=1;
        //Charge a shocksplinter
        idling=0;
        if (!oops && !(goodgrief && obj_iji.x>7168) && ((place_free(x+16,y-32) && place_free(x+32,y-32) && place_free(x+48,y-32) && place_free(x+64,y-32) && place_free(x+80,y-32) && place_free(x+96,y-32)) || (place_free(x+16,y) && place_free(x+32,y) && place_free(x+48,y) && place_free(x+64,y) && place_free(x+80,y) && place_free(x+96,y))) && !place_meeting(x+16,y-32,obj_glass) && !place_meeting(x+32,y-32,obj_glass) && !place_meeting(x+48,y-32,obj_glass) && !place_meeting(x+64,y-32,obj_glass) && !place_meeting(x+80,y-32,obj_glass) && !place_meeting(x+96,y-32,obj_glass) && !place_meeting(x+16,y-32,obj_meta) && !place_meeting(x+32,y-32,obj_meta) && !place_meeting(x+48,y-32,obj_meta) && !place_meeting(x+64,y-32,obj_meta) && !place_meeting(x+80,y-32,obj_meta) && !place_meeting(x+96,y-32,obj_meta) && x+20<=target.x){
            tempid=instance_create(x+45,y+30,obj_chargetell);
            tempid.tempid=id;
            state=0;
            facing=1;
            firedetonator=0;
            sprite_index=spr_komatoberserker_basic;
            firingrocket=1;
            if (weapon==0){
                scr_sound("wea_charge");
                alarm[2]=23;
                alarm[6]=20;
                }
            else if (weapon==1 && abs((x+20)-obj_iji.x)<350){
                scr_sound("tor_gather");
                alarm[2]=38;
                alarm[6]=35;
                }
            else{
                state=1;
                firingrocket=0;
                sprite_index=spr_komatoberserker_walk;
                alarm[2]=25+random(10);
                }
            }
        else if (!oops && ((place_free(x-16,y-32) && place_free(x-32,y-32) && place_free(x-48,y-32) && place_free(x-64,y-32) && place_free(x-80,y-32) && place_free(x-96,y-32)) || (place_free(x-16,y) && place_free(x-32,y) && place_free(x-48,y) && place_free(x-64,y) && place_free(x-80,y) && place_free(x-96,y))) && !place_meeting(x-16,y-32,obj_glass) && !place_meeting(x-32,y-32,obj_glass) && !place_meeting(x-48,y-32,obj_glass) && !place_meeting(x-64,y-32,obj_glass) && !place_meeting(x-80,y-32,obj_glass) && !place_meeting(x-96,y-32,obj_glass) && !place_meeting(x-16,y-32,obj_meta) && !place_meeting(x-32,y-32,obj_meta) && !place_meeting(x-48,y-32,obj_meta) && !place_meeting(x-64,y-32,obj_meta) && !place_meeting(x-80,y-32,obj_meta) && !place_meeting(x-96,y-32,obj_meta) && x+20>target.x){
            tempid=instance_create(x-15,y+30,obj_chargetell);
            tempid.tempid=id;
            state=0;
            facing=0;
            firedetonator=0;
            sprite_index=spr_komatoberserker_basicleft;
            firingrocket=1;
            if (weapon==0){
                scr_sound("wea_charge");
                alarm[2]=23;
                alarm[6]=20;
                }
            else if (weapon==1 && abs((x+20)-obj_iji.x)<350){
                scr_sound("tor_gather");
                alarm[2]=38;
                alarm[6]=35;
                }
            else{
                state=1;
                firingrocket=0;
                sprite_index=spr_komatoberserker_walkleft;
                alarm[2]=25+random(10);
                }
            }
        }
    }
Alarm Event for alarm 4:

execute code:

//Get up
if (dead==0) && state==5{
    if (ijikill){
    tempid=instance_create(x+6,y+20,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+20,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    armor=200;
    state=6;
    takingpain=0;
    image_index=0;
    image_single=-1;
    image_speed=0.5;
    if (facing==0)
        sprite_index=spr_komatoberserker_getupleft;
    else
        sprite_index=spr_komatoberserker_getup;
    alarm[2]=6;
    if (global.sector==6){
        if (x>6624 && x<6880 && y>2280 && y<3104)
            goodgrief=1;
        else
            goodgrief=0;
        }
    }
Alarm Event for alarm 5:

set variable angry to 0
Alarm Event for alarm 6:

execute code:

//Charged Resonance detonator
if (firedetonator){
    if (facing==0){
        state=0;
        image_index=0;
        sprite_index=spr_komatoberserker_fireleft;
        instance_create(x-5,y+20,obj_enemydetonator);
        }
    else{
        state=0;
        image_index=0;
        sprite_index=spr_komatoberserker_fire;
        instance_create(x+50,y+20,obj_enemydetonator);
        }
    }

else{
//Shocksplinter
if (weapon==0){
if (facing==0){
    if (cracked==0){
        scr_sound("wea_shoc");
        tempid=instance_create(x-15,y+30,obj_enemyshock);
        tempid.speed=-global.shockspeed;
        tempid.target=id;
        instance_create(x-15,y+30,obj_shockspark);
        sprite_index=spr_komatoberserker_fireleft;
        }
    else{
        scr_sound("exp_shoc");
        tempid=instance_create(x-15,y+30,obj_enemyshockexplosion);
        tempid.target=id;
        instance_create(x-15,y+30,obj_explosioncenter);
        script_execute(scr_shakescreen,2);
        oops=1;
        }
    }
else{
    if (cracked==0){
        scr_sound("wea_shoc");
        tempid=instance_create(x+40,y+30,obj_enemyshock);
        tempid.speed=global.shockspeed;
        tempid.target=id;
        instance_create(x+40,y+30,obj_shockspark);
        sprite_index=spr_komatoberserker_fire;
        }
    else{
        scr_sound("exp_shoc");
        tempid=instance_create(x+40,y+30,obj_enemyshockexplosion);
        tempid.target=id;
        instance_create(x+40,y+30,obj_explosioncenter);
        script_execute(scr_shakescreen,2);
        oops=1;
        }
    }
    }
//Plasma cannon
if (weapon==1){
scr_shakescreen(3);
if (facing==0){
    if (cracked==0){
        scr_sound("wea_plas");
        tempid=instance_create(x,y+30,obj_enemyplasmatrace);
        with (tempid) scr_enemyplasmatrace(0);
        tempid.target=id;
        sprite_index=spr_komatoberserker_fireleft;
        }
    else{
        scr_sound("exp_shoc");
        tempid=instance_create(x-15,y+30,obj_enemyshockexplosion);
        tempid.target=id;
        instance_create(x-15,y+30,obj_explosioncenter);
        oops=1;
        }
    }
else{
    if (cracked==0){
        scr_sound("wea_plas");
        tempid=instance_create(x+25,y+30,obj_enemyplasmatrace);
        with (tempid) scr_enemyplasmatrace(1);
        sprite_index=spr_komatoberserker_fire;
        }
    else{
        scr_sound("exp_shoc");
        tempid=instance_create(x+40,y+30,obj_enemyshockexplosion);
        tempid.target=id;
        instance_create(x+40,y+30,obj_explosioncenter);
        oops=1;
        }
    }
    }
}
Alarm Event for alarm 7:

execute code:

if (alarm[2]>=1 && state==3 && (sprite_index==spr_komatoberserker_pain || sprite_index==spr_komatoberserker_painleft)){
    alarm[7]=4;
    image_index=0;
    instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_nanospark);
    repeat(2)
        (instance_create(bbox_left-8+random(bbox_right-bbox_left+16),bbox_top-4+random(bbox_bottom-bbox_top+8),obj_glassspark)).image_index=4;
    }
Step Event:

execute code:

//"FIND"
if (angry && !prevangry){
    if (state==0 || state==1 || state==2){
        if (target.annihilatorbeta==1)
            scr_sound("ber_ciretako");
        else
            scr_sound("ber_find");
        }
    }
prevangry=angry;
if (detocool>0)
    detocool-=1;

//"PAIN"
if (hp0)
    scr_sound("ber_pain");

if (temphp>0 && hp<=0 && ijikill==1){
    obj_iji.killemote=1;
    }
temphp=hp;

scr_komatovision(15,36);
if (targetiji>0)
targetiji-=1;
if (targetrival>0)
targetrival-=1;
if (scouring>0)
scouring-=1;
if (hp==maxhp)
scouring=0;
cfised=0;
thored=0;
//Sparks when dying
if (hp<=0){
    if (instance_number(obj_ijisplat)<50)
    instance_create(x+random(30),y+random(75),obj_ijisplat);
    }
//Lose sight
if ((x < obj_shakescreen.x-1000) || (x > obj_shakescreen.x+1000) || (y < obj_shakescreen.y-800) || (y > obj_shakescreen.y+800)){
    angry=0;
    alarm[5]=0;
    }
//Alter sprite speed
if (sprite_index=spr_komatoberserker_basic || sprite_index=spr_komatoberserker_basicleft)
    image_speed=0.2;
else
    image_speed=0.5;
//Crack fail
if (crackmark==1 && distance_to_object(obj_iji) > 50){
    script_execute(scr_crackfail);
    global.erasetop=0;
    global.topmessage="CRACKING FAILED: Subject is too far away";
    }
if (crackmark==1 && hp<=0){
    script_execute(scr_terminatecrack);
    global.erasetop=0;
    global.topmessage="CRACKING FAILED: Subject is dead";
    }
//Reflect projectile
perform=1;
if (global.difficulty==0){
    try=random(1);
    if (try>0.1)
    perform=0;
    }
if (global.difficulty==1){
    try=random(1);
    if (try>0.3)
    perform=0;
    }
if (global.difficulty==2){
    try=random(1);
    if (try>0.5)
    perform=0;
    }
if (goodgrief){
    if (place_meeting(x+64,y,obj_mpfb)){
        perform=1;
        facing=1;
        }
    }
if (perform==1){
    if (state==0 || state==1){
        if (facing==0){
            if (place_meeting(x-64,y,obj_rocket) || place_meeting(x-64,y,obj_enemyrocket) || place_meeting(x-64,y,obj_shock) || place_meeting(x-64,y,obj_shockball) || place_meeting(x-64,y,obj_enemympfb) || place_meeting(x-64,y,obj_mpfb)){
                instance_create(x-15,y+30,obj_enemyreflector);
                state=0;
                sprite_index=spr_komatoberserker_fireleft;
                image_index=0;
                alarm[2]=3;
                alarm[0]=0;
                alarm[1]=0;
                alarm[5]=300;
                alarm[6]=0;
                angry=1;
                firingrocket=0;
                idling=0;
                reloading=0;
                }
            }
        if (facing==1){
            if (place_meeting(x+64,y,obj_rocket) || place_meeting(x+64,y,obj_enemyrocket) || place_meeting(x+64,y,obj_shock) || place_meeting(x+64,y,obj_shockball) || place_meeting(x+64,y,obj_enemympfb) || place_meeting(x+64,y,obj_mpfb)){
                instance_create(x+45,y+30,obj_enemyreflector);
                state=0;
                sprite_index=spr_komatoberserker_fire;
                image_index=0;
                alarm[2]=3;
                alarm[0]=0;
                alarm[1]=0;
                alarm[5]=300;
                alarm[6]=0;
                angry=1;
                firingrocket=0;
                idling=0;
                reloading=0;
                }
            }
        }
    }
//Fix hitting cieling
if (state==4 && place_meeting(x,y+vspeed-2,(obj_block)) && !place_meeting(x,y+vspeed-2,(obj_meta)) && vspeed<0){
    move_contact_solid(90,-1);
    vspeed=0;
    y+=3;
    }
//Stop animations
if (sprite_index=spr_komatoberserker_knockdown || sprite_index=spr_komatoberserker_knockdownleft){
    if (image_index>=7)
        image_single=7;
    }
//Autodeath
if (hp<=0){
    dead=1;
    if (crackmark==1){
        script_execute(scr_terminatecrack);
        global.erasetop=0;
        global.topmessage="Cracking failed; subject is dead";
        }
    }
//Smoke when charging
if (firingrocket==1 && state==0)
    smoking+=1;
if (smoking>=5){
    smoking=0;
    if (firedetonator){
        if (facing==0)
            instance_create(x-15,y+30,obj_detonatorspark);
        else
            instance_create(x+45,y+30,obj_detonatorspark);
        }
    else{
        if (facing==0)
            instance_create(x-15,y+30,obj_shockemit);
        else
            instance_create(x+45,y+30,obj_shockemit);
        }
    }
//Knockdown
if (state==4){
    if (knockdowntype==1){
        if (place_free(x-velocity,y+vspeed+2) && !place_meeting(x-velocity,y,obj_blockenemy)){
            if (place_free(x-velocity,y+vspeed-2))
                x-=velocity;
            else if (place_free(x,y+vspeed+12)){
                velocity*=0.3;
                knockdowntype=2;
                sprite_index=spr_komatoberserker_knockdownleft;
                facing=0;
                }
            }
        else if (place_free(x,y+vspeed+12)){
            velocity*=0.3;
            knockdowntype=2;
            sprite_index=spr_komatoberserker_knockdownleft;
            facing=0;
            }
        }
    if (knockdowntype==2){
        if (place_free(x+velocity,y+vspeed+2) && !place_meeting(x+velocity,y,obj_blockenemy)){
            if (place_free(x+velocity,y+vspeed-2))
                x+=velocity;
            else if (place_free(x,y+vspeed+12)){
                velocity*=0.3;
                knockdowntype=1;
                sprite_index=spr_komatoberserker_knockdown;
                facing=1;
                }
            }
        else if (place_free(x,y+vspeed+12)){
            velocity*=0.3;
            knockdowntype=1;
            sprite_index=spr_komatoberserker_knockdown;
            facing=1;
            }
        }
    //Fall
    if (place_free(x,y+1)){
        gravity=1;
        gravity_direction=270;
        }
    }
//Limit fall speed
if (vspeed>20)
    vspeed=20;
//Armor
if (armor0.001){
            takingpain=1;
            firingrocket=0;
            while(armor<1)
                armor+=200;
            state=3;
            alarm[1]=0;
            alarm[2]=10;
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            image_index=0;
            if (facing==0)
                sprite_index=spr_komatoberserker_painleft;
            else
                sprite_index=spr_komatoberserker_pain;
            if (x>obj_iji.x){
                tempid=instance_create(x+29,y+15,obj_komatoblood);
                tempid.image_index=6;
                tempid.speed=random(2)+2;
                }
            else{
                tempid=instance_create(x-4,y+15,obj_komatoblood);
                tempid.speed=random(2)+2;
                tempid.direction=180;
                }
            }
        else{
            dead=1;
            firingrocket=0;
            takingpain=1;
            if (x0 && armor>0 && hp>0){
        hp=1;
        armor=-1000;
        }
    }
Collision Event with object obj_block:

execute code:

//Fall
if (sprite_index==spr_komatoberserker_fall || sprite_index==spr_komatoberserker_fallleft){
tempid=instance_create(x+15,y+36,obj_visioncheckk);
tempid.speed=16;
tempid.target=id;
tempid.direction=0;
tempid=instance_create(x+15,y+36,obj_visioncheckk);
tempid.speed=16;
tempid.target=id;
tempid.direction=180;
}

//Knockdown landing
if (state==4){
    if (vspeed<0){
        move_contact_solid(90,32);
        vspeed=0;
        y+=3;
        }
    //Death
    else if (hp<=0 || (hp<=1 && armor<=0)){
        scr_sound("glo_land");
        move_contact_solid(270,64);
        if ((x > obj_shakescreen.x-500) && (x < obj_shakescreen.x+500) && (y > obj_shakescreen.y-400) && (y < obj_shakescreen.y+400)){
            script_execute(scr_nanoexplosion,6,25);
            scr_shakescreen(2);
            }
        instance_create(x+15,y+30,obj_enemyrocketexplosion);
        instance_create(x+15,y+30,obj_explosioncenter);
        instance_create(x+15,y+55,obj_xp4);
        if (cracked)
            script_execute(scr_dropammo,15,55,1,10);
        else
            script_execute(scr_dropammo,15,55,8,9);
        if (ijikill){
        tempid=instance_create(x+10,y+16,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+10,y+16,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
        instance_destroy();
        }
    else if (hp>0){
        scr_sound("glo_land");
        if ((x > obj_shakescreen.x-500) && (x < obj_shakescreen.x+500) && (y > obj_shakescreen.y-400) && (y < obj_shakescreen.y+400))
            scr_shakescreen(1);
        state=5;
        image_single=-1;
        image_index=0;
        image_speed=0.5;
        if (knockdowntype==1){
            sprite_index=spr_komatoberserker_hitfloor;
            }
        if (knockdowntype==2){
            sprite_index=spr_komatoberserker_hitfloorleft;
            }
        alarm[4]=6;
        gravity=0;
        vspeed=0;
        move_contact_solid(270,64);
        }
    }
Collision Event with object obj_bullet:

execute code:

if (!other.stagger)
    ijikill=1;
targetiji=300;
if (angry==0 && (state==0 || state==1))
    alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+12,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+12,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0){
    if (other.stagger){
        if (state<4 || state==6){
            takingpain=1;
            firingrocket=0;
            state=3;
            alarm[1]=0;
            alarm[2]=10;
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            image_index=0;
            if (facing==0)
                sprite_index=spr_komatoberserker_painleft;
            else
                sprite_index=spr_komatoberserker_pain;
            }
        }
    else{
        armor-=10*global.atmult;
        instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
        }
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stagger)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_pellet:

execute code:

if (!other.stun)
    ijikill=1;
targetiji=300;
if (angry==0 && (state==0 || state==1))
    alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+12,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+12,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0){
    if (other.stun){
        if (state<4 || state==6){
            takingpain=1;
            firingrocket=0;
            state=3;
            alarm[1]=0;
            alarm[2]=floor(15*(1+(global.attacklevel/10)));
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            alarm[7]=4;
            if (facing==0)
                sprite_index=spr_komatoberserker_painleft;
            else
                sprite_index=spr_komatoberserker_pain;
            image_index=0;
            image_single=-1;
            image_speed=0.5;
            }
        }
    else{
        armor-=9*global.atmult;
        instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
        }
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stun)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_enemybullet:

execute code:

ijikill=0;
if (angry==0 && (state==0 || state==1))
    alarm[2]=1;
angry=1;
targetrival=300;
target=other.target;
alarm[5]=300;
if (dead==0){
    armor-=4;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_kickbox:

execute code:

global.temp=0;
with (other){
    if (place_meeting(x,y,obj_door) || place_meeting(x,y,obj_cdoor))
        global.temp=1;
    if (sprite_index==spr_detonator)
        global.temp=0;
    }
if (global.temp==0){
if (other.image_index==0){
    scr_sound("glo_kick");
    ijikill=1;
    targetiji=300;
    script_execute(scr_shakescreen,1);
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (global.facing==0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }

    if (angry==0 && (state==0 || state==1))
        alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+12,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+12,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    angry=1;
    alarm[5]=300;
    if (global.strengthlevel>=resistance){
        if (hp<=0 && milk<5){
            milk+=1;
            instance_create(bbox_left+(bbox_right-bbox_left)/2,bbox_top+(bbox_bottom-bbox_top)/2,obj_xp2);
            }
        hp-=1;
        if (other.sprite_index==spr_detonator){
            if (x>obj_iji.x)
                script_execute(scr_enemyknockdown,2);
            else
                script_execute(scr_enemyknockdown,1);
            }
        else
            script_execute(scr_enemyknockdown);
        }
    else{
        global.erasetop=0;
        global.topmessage="You need a Strength of "+string(resistance)+" to knock down a Komato Berserker";
        //Stagger
        if (hp>0 && (state==0 || state==1 || state==3)){
            takingpain=1;
            state=3;
            firingrocket=0;
            alarm[1]=0;
            alarm[2]=10;
            alarm[3]=0;
            alarm[4]=0;
            alarm[6]=0;
            image_index=0;
            if (facing==0)
                sprite_index=spr_komatoberserker_painleft;
            else
                sprite_index=spr_komatoberserker_pain;
            if (targetrival==0 || !instance_exists(target))
                target=obj_iji;
            }
        }
    }
}
Collision Event with object obj_rocketexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
if (angry==0){
    tempid=instance_create(x+6,y+12,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+12,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    hp-=2*global.atmult;
    force=11-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}
Collision Event with object obj_mpfbexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
if (angry==0){
    tempid=instance_create(x+6,y+12,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+12,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    hp-=3*global.atmult;
    if (hp<=0 && ijikill && killtype<5)
        killtype=5;
    if (other.banana && hp<=0 && ijikill && killtype<8)
        killtype=8;
    force=22-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}
Collision Event with object obj_pulse:

execute code:

if (!other.linker)
    ijikill=1;
targetiji=300;
if (other.hyper==1 && armor=resistance){
    scr_sound("glo_kick");
    hp-=1;
    armor=maxarmor;
    script_execute(scr_shakescreen,2);
    if (other.hspeed<0)
        script_execute(scr_enemyknockdown,1);
    else
        script_execute(scr_enemyknockdown,2);
    repeat(3){
        tempid=instance_create(other.x,other.y,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (other.hspeed<0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    }
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (angry==0 && (state==0 || state==1))
    alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+12,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+12,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0 && !other.linker){
    armor-=2*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
    }
if (other.linker)
    scr_pulselink(4);
Collision Event with object obj_enemyrocketexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    hp-=2;
    targetrival=300;
    target=other.target;
    force=11-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}
Collision Event with object obj_shockexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
    hp-=2*global.atmult;
    force=13-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}
Collision Event with object obj_shockballexplosion:

execute code:

if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    if (!obj_sabot.annihilatorbeta)
        targetiji=300;
    if (dead==0)
        armor-=30*global.atmult;
    if (!obj_sabot.annihilatorbeta){
    if (angry==0 && (state==0 || state==1))
        alarm[2]=1;
    angry=1;
    alarm[5]=300;
    }
    }
Collision Event with object obj_swipe:

execute code:

if (other.dud==0){
    scr_sound("glo_kick");
    ijikill=0;
    hp-=1;
    targetrival=300;
    target=other.target;
    scr_shakescreen(2);
    if (other.facing==1)
        script_execute(scr_enemyknockdown,2,12);
    else
        script_execute(scr_enemyknockdown,1,12);
        }
Collision Event with object obj_kickbox_elite:

execute code:

if (other.dud==0){
    scr_sound("glo_kick");
    ijikill=0;
    hp-=1;
    targetrival=300;
    target=other.target;
    scr_shakescreen(2);
    if (other.facing==1)
        script_execute(scr_enemyknockdown,2,10);
    else
        script_execute(scr_enemyknockdown,1,10);
        }
Collision Event with object obj_enemympfbexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    hp-=3;
    targetrival=300;
    target=other.target;
    force=22-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}
Collision Event with object obj_pushbox:

execute code:

if (dead==0){
    ijikill=1;
    if (global.cracklevel>=security){
        if (cracked==0){
            global.security=security;
            crackmark=1;
            if (global.suddendeath)
                global.cracktext="Komato Berserker#H1 A100 W8#Security: ";
            else
                global.cracktext="Komato Berserker#H10 A200 W8#Security: ";
            global.cracktext+=string(global.security);
            if (global.security==10)
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            else
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            script_execute(scr_begincrack);
            }
        else{
            global.erasetop=0;
            global.topmessage="Subject has already been cracked";
            }
        }
    else{
        global.erasetop=0;
        global.topmessage="You need a Crack skill of "+string(security)+" to crack a Komato Berserker";
        scr_sound("glo_crackfail");
        global.ignorestation=90;
        }
    }
else{
    global.erasetop=0;
    global.topmessage="Unable to connect to nanofield; subject is dead";
    }
Collision Event with object obj_meta:

execute code:

{
with (other)
    script_execute(scr_metabreak);
/*
if (other.sprite_index=spr_glass2 || other.sprite_index=spr_glass2small || other.sprite_index=spr_glass2short){
    repeat(3) instance_create(bbox_left+((bbox_right-bbox_left)/2),bbox_top+((bbox_bottom-bbox_top)/2),obj_komatobloodspecial);
    hp-=1;
    }
*/
}
Collision Event with object obj_thor:

execute code:

if (thored==0){
    ijikill=1;
    targetiji=300;
    if (angry==0 && (state==0 || state==1)){
        alarm[2]=1;
        tempid=instance_create(x+6,y+12,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+12,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    armor-=35*global.atmult;
    if (hp==1 && armor<=0 && ijikill && killtype<5)
        killtype=5;
    angry=1;
    alarm[5]=300;
    thored=1;
    }
Collision Event with object obj_enemyshockballexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    if (dead==0)
        armor-=30;
    }
}
Collision Event with object obj_enemyshockexplosion:

execute code:

{
if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    hp-=2;
    force=13-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force);
    else
        script_execute(scr_enemyknockdown,2,force);
    }
}
Collision Event with object obj_impulseexplosion:

execute code:

if (other.dud==0){
    if (angry==0){
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    ijikill=0;
    targetiji=300;
    mutepainsound=1;
    force=11-(distance_to_object(obj_explosioncenter)/10);
    if ((bbox_left+(bbox_right-bbox_left)/2)) < (other.bbox_left+((other.bbox_right-other.bbox_left)/2))
        script_execute(scr_enemyknockdown,1,force,1);
    else
        script_execute(scr_enemyknockdown,2,force,1);
    }
______________________________________________________

Information about object: obj_enemydetonator
Sprite: spr_detonator
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

scr_sound("wea_reso");
alarm[0]=7;
alarm[1]=1;
alarm[3]=2;
alarm[2]=3;
dud=1;
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 1:

execute code:

dud=0;
Alarm Event for alarm 2:

execute code:

dud=1;
Step Event:

execute code:

repeat(3) instance_create(x+random(130)-65,y+random(130)-65,obj_detonatorspark);
Collision Event with object obj_iji:

execute code:

if (!dud && !global.dead && !other.takingpain){
global.armor=100;
global.hp-=1;
global.damage+=1;
scr_shakescreen(2);
scr_sound("glo_kick");
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)
Collision Event with object obj_tasenenemy:

execute code:

if (!dud && !other.dead && !other.annihilatorbeta){
other.hp-=1;
other.armor=100;
other.ijikill=0;
scr_sound("glo_kick");
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)0){
            tempid=instance_create(x,y-30,obj_tasensoldier);
            tempid.hp=0;
            tempid.dead=1;
            tempid.ijikill=0;
            tempid.killdataid=killdataid;
            tempid.killawarded=1;
            if (global.facing==0){
                with (tempid)
                    script_execute(scr_enemyknockdown,1,12+random(3));
                }
            else{
                with (tempid)
                    script_execute(scr_enemyknockdown,2,12+random(3));
                }
            tempid=instance_create(floor(x),floor(y)-1,obj_emptyshredder);
            tempid.shredderhp=shredderhp;
            if (sprite_index==spr_tasenshredder_basicleft)
                tempid.sprite_index=spr_tasenshredder_emptyleft;
            else
                tempid.sprite_index=spr_tasenshredder_empty;
            tempid.facing=facing;
            tempid.hspeed=hspeed;
            tempid.vspeed=vspeed;
            instance_destroy();
            }
        }
    }

______________________________________________________

Information about object: obj_enemyreflector
Sprite: spr_detonator2
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

scr_sound("wea_reso");
alarm[0]=7;
alarm[1]=2;
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 1:

execute code:

{
dud=1;
}
Collision Event with object obj_rocket:

execute code:

if (dud==0){
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x+21,y,obj_komatorocket);
        tempid.ijis=ijis;
        tempid.impulse=impulse;
        if (impulse){
            tempid.sprite_index=spr_impulserocket;
            tempid.speed=-abs(speed);
            }
        else
            tempid.speed=-global.rocketspeed;
        tempid.image_single=1;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x+10,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)>=bbox_left+((bbox_right-bbox_left)/2) && other.hspeed<0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x,y,obj_komatorocket);
        tempid.ijis=ijis;
        tempid.impulse=impulse;
        if (impulse){
            tempid.sprite_index=spr_impulserocket;
            tempid.speed=abs(speed);
            }
        else
            tempid.speed=global.rocketspeed;
        tempid.image_single=0;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x+10,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
}
Collision Event with object obj_mpfb:

execute code:

if (dud==0){
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x,y,obj_komatompfb);
        tempid.ijis=ijis;
        tempid.direction=direction+180;
        tempid.speed=speed;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)>=bbox_left+((bbox_right-bbox_left)/2) && other.hspeed<0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x,y,obj_komatompfb);
        tempid.ijis=ijis;
        tempid.direction=direction+180;
        tempid.speed=speed;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
}
Collision Event with object obj_enemyrocket:

execute code:

if (dud==0){
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x+21,y,obj_komatorocket);
        tempid.ijis=ijis;
        tempid.impulse=impulse;
        if (impulse){
            tempid.sprite_index=spr_impulserocket;
            tempid.speed=-abs(speed);
            }
        else
            tempid.speed=-global.rocketspeed;
        tempid.image_single=1;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x+10,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)>=bbox_left+((bbox_right-bbox_left)/2) && other.hspeed<0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x,y,obj_komatorocket);
        tempid.ijis=ijis;
        tempid.impulse=impulse;
        if (impulse){
            tempid.sprite_index=spr_impulserocket;
            tempid.speed=abs(speed);
            }
        else
            tempid.speed=global.rocketspeed;
        tempid.image_single=0;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x+10,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
}
Collision Event with object obj_shock:

execute code:

if (dud==0){
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x,y,obj_enemyshock);
        tempid.ijis=ijis;
        tempid.speed=-global.shockspeed;
        tempid.image_single=1;
        tempid.reflected=1;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x+10,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)>=bbox_left+((bbox_right-bbox_left)/2) && other.hspeed<0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x,y,obj_enemyshock);
        tempid.ijis=ijis;
        tempid.speed=global.shockspeed;
        tempid.image_single=0;
        tempid.reflected=1;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x+10,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
}
Collision Event with object obj_shockball:

execute code:

if (dud==0){
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x,y,obj_enemyshockball);
        tempid.ijis=ijis;
        tempid.speed=25;
        tempid.direction=180;
        tempid.image_single=1;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x+10,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)>=bbox_left+((bbox_right-bbox_left)/2) && other.hspeed<0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x,y,obj_enemyshockball);
        tempid.ijis=ijis;
        tempid.speed=25;
        tempid.direction=0;
        tempid.image_single=0;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x+10,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
}
Collision Event with object obj_enemympfb:

execute code:

if (dud==0){
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x,y,obj_komatompfb);
        tempid.ijis=ijis;
        tempid.direction=direction+180;
        tempid.speed=speed;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
if (other.bbox_left+((other.bbox_right-other.bbox_left)/2)>=bbox_left+((bbox_right-bbox_left)/2) && other.hspeed<0){
    with (other){
        scr_sound("glo_reflect");
        tempid=instance_create(x,y,obj_komatompfb);
        tempid.ijis=ijis;
        tempid.direction=direction+180;
        tempid.speed=speed;
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
}
______________________________________________________

Information about object: obj_komatorocket
Sprite: spr_rocket
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

set Alarm 0 to 2
Alarm Event for alarm 0:

execute code:

alarm[0]=1;
if (hspeed<0){
    (instance_create(x+14,y+2+floor(random(2)-1),obj_glidesmoke)).hspeed=random(4)+4;
    (instance_create(x+14,y+2+floor(random(2)-1),obj_glidesmoke)).hspeed=random(4);
    }
else{
    (instance_create(x+8,y+2+floor(random(2)-1),obj_glidesmoke)).hspeed=-(random(4)+4);
    (instance_create(x+8,y+2+floor(random(2)-1),obj_glidesmoke)).hspeed=-random(4);
    }

Step Event:

execute script scr_outside with arguments (0,0,0,0,0)
Collision Event with object obj_iji:

execute script scr_rockethit with arguments (1,0,0,0,0)
Collision Event with object obj_block:

execute script scr_rockethit with arguments (1,0,1,0,0)
Collision Event with object obj_glass:

execute script scr_rockethit with arguments (1,1,0,0,0)
Collision Event with object obj_meta:

execute script scr_rockethit with arguments (1,0,0,0,0)
Collision Event with object obj_tasenenemy:

execute script scr_rockethit with arguments (1,0,0,0,0)
______________________________________________________

Information about object: obj_komatompfb
Sprite: spr_mpfb
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
image_speed=0.5;
alarm[0]=1;
}
Alarm Event for alarm 0:

execute code:

if (!wakeless){
alarm[0]=5;
if (direction>90 && direction<270){
    tempid=instance_create(x-(speed+10),y,obj_mpfbwake);
    tempid.speed=-10;
    tempid.image_index=4;
    }
else
    (instance_create(x+(speed+10),y,obj_mpfbwake)).speed=10;
}
Step Event:

execute code:

if ((speed=global.mpfbspeed || global.sector==15 || global.sector==13) && !global.specialbake){
    if (!sparkless)
        scr_mpfbspark();
    }
scr_outside();
if (global.sector==15 && (x<200 || y<0 || x>1700 || y>1000))
    instance_destroy();
Collision Event with object obj_iji:

execute script scr_mpfbhit with arguments (1,0,0,0,0)
Collision Event with object obj_block:

execute script scr_mpfbhit with arguments (1,0,0,0,0)
Collision Event with object obj_glass:

execute script scr_mpfbhit with arguments (1,1,0,0,0)
Collision Event with object obj_meta:

execute script scr_mpfbhit with arguments (1,0,0,0,0)
Collision Event with object obj_tasenenemy:

execute script scr_mpfbhit with arguments (1,0,0,0,0)
______________________________________________________

Information about object: obj_megaflash
Sprite: spr_megaflash5
Solid: false
Visible: true
Depth: -10
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_glass:

execute code:

with (other)
    scr_glassbreak(12);
Collision Event with object obj_meta:

execute code:

with (other)
    scr_metabreak(12);
Draw Event:

execute code:

cycle+=1;
if (cycle==1)
draw_sprite(spr_megaflash,0,x,y);
if (cycle==2){
if (!mute)
scr_sound("glo_teleport");
draw_sprite(spr_megaflash2,0,x,y);
}
if (cycle==3)
draw_sprite(spr_megaflash3,0,x,y);
if (cycle==4)
draw_sprite(spr_megaflash4,0,x,y);
if (cycle==5)
draw_sprite(spr_megaflash5,0,x,y);
if (cycle==6)
instance_destroy();
______________________________________________________

Information about object: obj_berserkertrigger
Sprite: spr_hud
Solid: false
Visible: false
Depth: 10
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

temprand=random(1);
if (temprand>0.95 || instant){
if (amount>=1){
    scr_sound("ber_find");
    instance_create(x1,y1,obj_megaflash);
    tempid=instance_create(x1-15,y1-40,obj_komatoberserker);
    if (weapon1)
        tempid.weapon=1;
    tempid.killdataid=killdataid1;
    with (tempid){
        nullresistant=1;
        alarm[2]=0;
        angry=1;
        targetijii=300;
        alarm[5]=300;
        state=4;
        if (x>obj_iji.x){
            sprite_index=spr_komatoberserker_fallleft;
            facing=0;
            knockdowntype=2;
            }
        else{
            sprite_index=spr_komatoberserker_fall;
            facing=1;
            knockdowntype=1;
            }
        }
    }

if (amount>=2){
    instance_create(x2,y2,obj_megaflash);
    tempid=instance_create(x2-15,y2-40,obj_komatoberserker);
    if (weapon2)
        tempid.weapon=1;
    tempid.killdataid=killdataid2;
    with (tempid){
        nullresistant=1;
        alarm[2]=0;
        angry=1;
        targetijii=300;
        alarm[5]=300;
        state=4;
        if (x>obj_iji.x){
            sprite_index=spr_komatoberserker_fallleft;
            facing=0;
            knockdowntype=2;
            }
        else{
            sprite_index=spr_komatoberserker_fall;
            facing=1;
            knockdowntype=1;
            }
        }
    }

if (amount>=3){
    instance_create(x3,y3,obj_megaflash);
    tempid=instance_create(x3-15,y3-40,obj_komatoberserker);
    tempid.killdataid=killdataid3;
    if (weapon3)
        tempid.weapon=1;
    with (tempid){
        nullresistant=1;
        alarm[2]=0;
        angry=1;
        targetijii=300;
        alarm[5]=300;
        state=4;
        if (x>obj_iji.x){
            sprite_index=spr_komatoberserker_fallleft;
            facing=0;
            knockdowntype=2;
            }
        else{
            sprite_index=spr_komatoberserker_fall;
            facing=1;
            knockdowntype=1;
            }
        }
    }

instance_destroy();
}
______________________________________________________

Information about object: obj_crumble5
Sprite: spr_crumble5
Solid: true
Visible: true
Depth: 0
Persistent: false
Parent: obj_block
Mask: 

Collision Event with object obj_rocketexplosion:

execute code:

{
if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(80),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
Collision Event with object obj_mpfbexplosion:

execute code:

{
if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(80),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
Collision Event with object obj_enemyrocketexplosion:

execute code:

{
if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(80),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
Collision Event with object obj_shockexplosion:

execute code:

{
if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(80),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
Collision Event with object obj_enemympfbexplosion:

execute code:

{
if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(80),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
Collision Event with object obj_enemyshockexplosion:

execute code:

{
if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(80),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
Collision Event with object obj_impulseexplosion:

execute code:

{
if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(80),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
______________________________________________________

Information about object: obj_crumble52
Sprite: spr_crumble52
Solid: true
Visible: true
Depth: 0
Persistent: false
Parent: obj_block
Mask: 

Collision Event with object obj_rocketexplosion:

execute code:

if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(48),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_create(x+32,y+32,obj_enemyrocketexplosion);
instance_create(x+32,y+32,obj_explosioncenter);
instance_destroy();
with (obj_trigger){
    if (textid="chat56")
        instance_destroy();
    }

Collision Event with object obj_mpfbexplosion:

execute code:

if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(48),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_create(x+32,y+32,obj_enemyrocketexplosion);
instance_create(x+32,y+32,obj_explosioncenter);
instance_destroy();
with (obj_trigger){
    if (textid="chat56")
        instance_destroy();
    }

Collision Event with object obj_enemyrocketexplosion:

execute code:

if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(48),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_create(x+32,y+32,obj_enemyrocketexplosion);
instance_create(x+32,y+32,obj_explosioncenter);
instance_destroy();
with (obj_trigger){
    if (textid="chat56")
        instance_destroy();
    }

Collision Event with object obj_shockexplosion:

execute code:

if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(48),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_create(x+32,y+32,obj_enemyrocketexplosion);
instance_create(x+32,y+32,obj_explosioncenter);
instance_destroy();
with (obj_trigger){
    if (textid="chat56")
        instance_destroy();
    }

Collision Event with object obj_enemympfbexplosion:

execute code:

if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(48),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_create(x+32,y+32,obj_enemyrocketexplosion);
instance_create(x+32,y+32,obj_explosioncenter);
instance_destroy();
with (obj_trigger){
    if (textid="chat56")
        instance_destroy();
    }

Collision Event with object obj_enemyshockexplosion:

execute code:

if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(48),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_create(x+32,y+32,obj_enemyrocketexplosion);
instance_create(x+32,y+32,obj_explosioncenter);
instance_destroy();
with (obj_trigger){
    if (textid="chat56")
        instance_destroy();
    }

Collision Event with object obj_impulseexplosion:

execute code:

if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(48),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_create(x+32,y+32,obj_enemyrocketexplosion);
instance_create(x+32,y+32,obj_explosioncenter);
instance_destroy();
with (obj_trigger){
    if (textid="chat56")
        instance_destroy();
    }

______________________________________________________

Information about object: obj_sec5trigger
Sprite: spr_block
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

if (!global.ignoreall){
scr_shakescreen(3);
(instance_create(1130,6560,obj_tasensoldier)).killawarded=1;
instance_create(1142,6560,obj_enemyshockexplosion);
instance_create(1142,6560,obj_explosioncenter);
(instance_create(1260,6563,obj_komatotrooper)).killdataid=504;
(instance_create(1250,6563,obj_tasensoldier)).killdataid=156;
instance_destroy();
scr_sound("exp_shoc");
}
______________________________________________________

Information about object: obj_distantexplosion
Sprite: spr_distantexplosion
Solid: false
Visible: true
Depth: 999
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

temprand=random(1);
if (temprand<0.25)
image_index=5;
image_speed=0.5;
alarm[0]=10;
Alarm Event for alarm 0:

execute code:

instance_destroy();
______________________________________________________

Information about object: obj_komatoship
Sprite: spr_komatoship
Solid: false
Visible: true
Depth: 1000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (global.sector==5 || global.sector==12){
    image_single=floor(random(3)+3);
    smallness=image_single-3;
    }
if (global.sector==7){
    image_single=floor(random(3)+6);
    smallness=image_single-6;
    }
bob=(random(1)*smallness)+0.4;
Alarm Event for alarm 0:

execute code:

instance_destroy();
Step Event:

execute code:

if (global.sector==5 || global.sector==12){
    temprand=random(1);
    if (temprand<0.02)
    instance_create(x-5+random(40),y+random(15),obj_distantexplosion);
    }
if (global.sector==7){
    temprand=random(1);
    if (temprand<0.004)
    instance_create(x-5+random(40),y+random(15),obj_distantexplosion);
    }

cycle+=0.05;
if (cycle>=bob){
    cycle=0;
    bob2+=1;
    if (bob2==1)
        y+=1;
    if (bob2==3)
        y-=1;
    if (bob2==4)
        y-=1;
    if (bob2==6){
        y+=1;
        bob2=0;
        }
    }

//crash
if (global.sector==5 || global.sector==12 || global.sector==7){
    temprand=random(1);
    if (temprand<=0.0001 && obj_sabot.crashedships<30){
        if (x>obj_sabot.x && xobj_sabot.y && y
______________________________________________________

Information about object: obj_komatoscreen1
Sprite: spr_komatoscreen1
Solid: false
Visible: true
Depth: 100
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_komatoscreen2
Sprite: spr_komatoscreen2
Solid: false
Visible: true
Depth: 100
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_komatoassassin
Sprite: spr_komatoassassin_basicleft
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_komatoenemy
Mask: 

Create Event:

execute code:

lastx=x;
lasty=y;
image_speed=0.5;
hp=3+global.difficulty;
maxhp=3+global.difficulty;
armor=200;
maxarmor=200;
if (global.suddendeath){
    hp=1;
    maxhp=1;
    armor=100;
    maxarmor=100;
    }
enemytype=12;
resistance=1;
security=9;
nod=floor(random(90)+15);

Alarm Event for alarm 0:

execute code:

//Uppercut, Backstab, Upslash
if (sprite_index==spr_komatoassassin_uppercut || sprite_index==spr_komatoassassin_uppercutleft || sprite_index==spr_komatoassassin_backstab || sprite_index==spr_komatoassassin_backstableft || sprite_index==spr_komatoassassin_upslash){
    image_single=-1;
    image_speed=1;
    image_index=1;
    scr_sound("glo_swipe");
    }

//Firing in pose1
if (sprite_index==spr_komatoassassin_pose1 || sprite_index==spr_komatoassassin_pose1left){
scr_sound("wea_plas");
scr_shakescreen(3);
shotcount+=1;
if (sprite_index==spr_komatoassassin_pose1){
    tempid=instance_create(x+49,y+10,obj_enemyplasmatrace);
    with (tempid)
        scr_enemyplasmatrace(1);
    }
else{
    tempid=instance_create(x-24,y+10,obj_enemyplasmatrace);
    with (tempid)
        scr_enemyplasmatrace(0);
    }

if (sprite_index==spr_komatoassassin_pose1)
    sprite_index=spr_komatoassassin_pose1fire;
else
    sprite_index=spr_komatoassassin_pose1fireleft;
if (shotcount!=5){
    alarm[3]=5;
    alarm[0]=8;
    }
}
Alarm Event for alarm 1:

execute code:

//Visibility time is up
//Firing in pose 2
if (sprite_index==spr_komatoassassin_pose2){
    scr_sound("wea_plas");
    scr_shakescreen(3);
    tempid=instance_create(x+54,y+2,obj_enemyplasmatrace);
    with(tempid)
        scr_enemyplasmatrace(1);
    tempid=instance_create(x+29,y+42,obj_enemyplasmatrace);
    with(tempid)
        scr_enemyplasmatrace(1);
    }
if (sprite_index==spr_komatoassassin_pose2left){
    //SPECIAL
    if (global.sector==9 && special9){
        special9=0;
        with (obj_crumble91)
            if (y>4000){
                if (global.specialbake==0)
                    i=25;
                else
                    i=5;
                repeat(i){
                    tempid=instance_create(x+8+random(48),y+8+random(80),obj_scrapwhite);
                    tempid.direction=random(180)+90;
                    tempid.speed=random(10)+5;
                    }
                instance_destroy();
                }
        }
    //SPECIAL
    scr_sound("wea_plas");
    scr_shakescreen(3);
    tempid=instance_create(x-21,y+2,obj_enemyplasmatrace);
    with(tempid)
        scr_enemyplasmatrace(0);
    tempid=instance_create(x+4,y+42,obj_enemyplasmatrace);
    with(tempid)
        scr_enemyplasmatrace(0);
    }

alarm[2]=random(20-(global.difficulty*5))+20-(global.difficulty*5);
instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
visible=0;
image_single=0;
image_index=0;
sprite_index=spr_komatoassassin_basic;

//Crack fail
if (crackmark==1){
    script_execute(scr_crackfail);
    script_execute(scr_terminatecrack);
    global.erasetop=0;
    global.topmessage="Subject is too far away to crack";
    }
Alarm Event for alarm 2:

execute code:

//Recieve orders, appear and execute
if (global.hp>0){

upslashing=0;
upslashwait=0;
image_index=0;
image_single=0;
perform=0;
fakeperform=0;
randomfakes=0;

repeat(10){

if (!perform){
x=obj_sabot.x;
y=obj_sabot.y;
sprite_index=spr_komatoassassin_basic;
if (cracked)
    randomstate=floor(random(6)+2);
else
    randomstate=floor(random(8));
temprand=0;

//Five-shot in front of Iji
if (randomstate==0){
temprand=random(150)+100;
if (global.facing==0){
    sprite_index=spr_komatoassassin_pose1;
    if (place_free(obj_iji.x-temprand,obj_iji.y-20)){
        x=obj_iji.x-temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
else if (global.facing==1){
    sprite_index=spr_komatoassassin_pose1left;
    if (place_free(obj_iji.x+temprand,obj_iji.y-20)){
        x=obj_iji.x+temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) && !place_free(x,y+1) && !collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1)){
        alarm[1]=85-(global.difficulty*10);
        alarm[0]=50-(global.difficulty*10);
        shotcount=0;
        scr_sound("tor_gather");
        if (sprite_index==spr_komatoassassin_pose1)
            (instance_create(x+65,y+10,obj_chargetell)).tempid=id;
        if (sprite_index==spr_komatoassassin_pose1left)
            (instance_create(x-40,y+10,obj_chargetell)).tempid=id;
        }
    else
        perform=0;
    }
}

//Dual-shot behind Iji
if (randomstate==1){
temprand=random(150)+100;
if (global.facing==0){
    sprite_index=spr_komatoassassin_pose2left;
    if (place_free(obj_iji.x+temprand,obj_iji.y-20)){
        x=obj_iji.x+temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
else if (global.facing==1){
    sprite_index=spr_komatoassassin_pose2;
    if (place_free(obj_iji.x-temprand,obj_iji.y-20)){
        x=obj_iji.x-temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) && !place_free(x,y+1) && !collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1)){
        alarm[1]=45-global.difficulty*5;
        scr_sound("tor_gather");
        if (sprite_index==spr_komatoassassin_pose2){
            (instance_create(x+70,y+2,obj_chargetell)).tempid=id;
            (instance_create(x+45,y+42,obj_chargetell)).tempid=id;
            }
        if (sprite_index==spr_komatoassassin_pose2left){
            (instance_create(x-37,y+2,obj_chargetell)).tempid=id;
            (instance_create(x-12,y+42,obj_chargetell)).tempid=id;
            }
        }
    else
        perform=0;
    }
}

//Downstab
if (randomstate==2){
temprand=random(128)+256;
sprite_index=spr_komatoassassin_downstab;
if (place_free(obj_iji.x,obj_iji.y-temprand)){
    x=obj_iji.x;
    y=obj_iji.y-temprand;
    if (!collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1)){
        gravity=1;
        gravity_direction=270;
        perform=1;
        }
    else
        sprite_index=spr_komatoassassin_basic;
    }
}

//Uppercut
if (randomstate==3 && global.difficulty!=0){
temprand=random(1);
if (temprand>0.5){
    sprite_index=spr_komatoassassin_uppercut;
    if (place_free(obj_iji.x-50,obj_iji.y-20) && !place_free(obj_iji.x-50,obj_iji.y+64)){
        x=obj_iji.x-50;
        y=obj_iji.y-20;
        perform=1;
        }
    }
else{
    sprite_index=spr_komatoassassin_uppercutleft;
    if (place_free(obj_iji.x+32,obj_iji.y-20) && !place_free(obj_iji.x+32,obj_iji.y+64)){
        x=obj_iji.x+32;
        y=obj_iji.y-20;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) && !place_free(x,y+1)){
        image_single=0;
        alarm[1]=44-(global.difficulty*5);
        alarm[0]=39-(global.difficulty*5);
        }
    else
        perform=0;
    }
}

//Backstab
if (randomstate==4){
if (global.facing==0){
    sprite_index=spr_komatoassassin_backstableft;
    if (place_free(obj_iji.x+50,obj_iji.y-30) && !place_free(obj_iji.x+32,obj_iji.y+32)){
        x=obj_iji.x+50;
        y=obj_iji.y-30;
        perform=1;
        }
    }
else if (global.facing==1){
    sprite_index=spr_komatoassassin_backstab;
    if (place_free(obj_iji.x-50,obj_iji.y-30) && !place_free(obj_iji.x-50,obj_iji.y+32)){
        x=obj_iji.x-50;
        y=obj_iji.y-30;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) && !place_free(x,y+1)){
        image_single=0;
        alarm[1]=44-(global.difficulty*5);
        alarm[0]=40-(global.difficulty*5);
        }
    else
        perform=0;
    }
}

//Upslash
if (randomstate==5){
sprite_index=spr_komatoassassin_upslash;
x=obj_iji.x;
y=obj_iji.y;
if (place_free(x,y)){
    move_contact_solid(270,384);
    if (!place_free(x,y+1) && (y-obj_iji.y)>128 && obj_iji.vspeed<2){
        perform=1;
        image_single=0;
        }
    else{
        x=obj_sabot.x;
        y=obj_sabot.y;
        }
    }
}

//Laser daggers
if (randomstate==6){
    x=random(800)+obj_iji.x-400;
    y=random(300)+obj_iji.y-300;
    if (place_free(x,y) && distance_to_object(obj_iji)>192 && !collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1)){
        perform=1;
        fakeperform=1;
        alarm[2]=random(25-(global.difficulty*5))+25-(global.difficulty*5);
        instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
        if (x>obj_iji.x){
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=225;
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=180;
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=135;
            }
        else{
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=-45;
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=0;
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=45;
            }
        }
    }

//Fake attack
if (randomstate==7){
    randomfakes=ceil(random(4))+4;
    alarm[4]=5;
    perform=1;
    fakeperform=1;
    }

} //End of perform
} //End of repeat

//Perform
if (perform){
    if (!fakeperform && sprite_index!=spr_komatoassassin_basic && sprite_index!=spr_komatoassassin_basicleft){
        instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
        visible=1;
        }
    }
else
    alarm[2]=random(25-(global.difficulty*5))+25-(global.difficulty*5);
}
Alarm Event for alarm 3:

execute code:

//Revert to pose1 animation
if (sprite_index==spr_komatoassassin_pose1fire)
    sprite_index=spr_komatoassassin_pose1;
else if (sprite_index==spr_komatoassassin_pose1fireleft)
    sprite_index=spr_komatoassassin_pose1left;
Alarm Event for alarm 4:

execute code:

if (randomfakes>0){
    randomfakes-=1;
    instance_create(random(600)+obj_iji.x-300,random(400)+obj_iji.y-200,obj_megaflash);
    if (randomfakes==0)
        alarm[4]=4;
    else
        alarm[4]=5;
    }
else
    alarm[2]=1;
Step Event:

execute code:

thored=0;
plasmaed=0;
cfised=0;

//Cracking failed
if (crackmark==1 && hp<=0){
    script_execute(scr_terminatecrack);
    global.erasetop=0;
    global.topmessage="CRACKING FAILED: Subject is dead";
    }
else if (crackmark==1 && !visible){
    script_execute(scr_crackfail);
    global.erasetop=0;
    global.topmessage="CRACKING FAILED: Subject is too far away";
    }
//Execute upslash
if (sprite_index==spr_komatoassassin_upslash && visible){
    upslashwait+=1;
    if (upslashwait>60 && !upslashing){
        upslashing=1;
        alarm[1]=1;
        }
    if (obj_iji.y>y-32 && !upslashing){
        upslashing=1;
        alarm[1]=1;
        }
    if (distance_to_object(obj_iji)<64 && !upslashing){
        upslashing=1;
        alarm[0]=1;
        alarm[1]=5;
        }
    }

//Upercut box
if (sprite_index==spr_komatoassassin_uppercut && image_index==2)
    (instance_create(x,y-45,obj_assassin_uppercut)).facing=1;
if (sprite_index==spr_komatoassassin_uppercutleft && image_index==2)
    instance_create(x-50,y-45,obj_assassin_uppercut);

//Backstab box
if (sprite_index==spr_komatoassassin_backstab && image_index==1)
    (instance_create(x-10,y-5,obj_assassin_backstab)).facing=1;
if (sprite_index==spr_komatoassassin_backstableft && image_index==1)
    instance_create(x-65,y-5,obj_assassin_backstab);

//Upslash box
if (sprite_index==spr_komatoassassin_upslash&& image_index==1)
    instance_create(x-35,y-64,obj_assassin_upslash);

//Downstab recovery
if(!place_free(x,y) && sprite_index==spr_komatoassassin_downstab && visible){
    alarm[2]=random(60-(global.difficulty*20))+30-(global.difficulty*10);
    instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
    visible=0;
    gravity=0;
    vspeed=0;
    sprite_index=spr_komatoassassin_basic;
    }
if (vspeed>20)
    vspeed=20;
if (visible && sprite_index==spr_komatoassassin_downstab && y>obj_iji.y+64)
    scr_assassinpain(1);

//Nod
if (!angry){
if (nod>0)
    nod-=1;
if (nod==0 && sprite_index==spr_komatoassassin_basic){
    sprite_index=spr_komatoassassin_nod;
    nod=floor(random(90)+15);
    nodcounter=6;
    }
if (nod==0 && sprite_index==spr_komatoassassin_basicleft){
    sprite_index=spr_komatoassassin_nodleft;
    nod=floor(random(90)+15);
    nodcounter=6;
    }
if (nodcounter>0)
    nodcounter-=1;
if (nodcounter==0 && sprite_index==spr_komatoassassin_nod)
    sprite_index=spr_komatoassassin_basic;
if (nodcounter==0 && sprite_index==spr_komatoassassin_nodleft)
    sprite_index=spr_komatoassassin_basicleft;
}

//Weapon sparks
if (visible){
smoke+=1;
if (smoke==5){
    smoke=0;
    if (sprite_index==spr_komatoassassin_pose1)
        instance_create(x+65,y+10,obj_shockemit);
    if (sprite_index==spr_komatoassassin_pose1left)
        instance_create(x-40,y+10,obj_shockemit);
    if (sprite_index==spr_komatoassassin_pose2){
        instance_create(x+70,y+2,obj_shockemit);
        instance_create(x+45,y+42,obj_shockemit);
        }
    if (sprite_index==spr_komatoassassin_pose2left){
        instance_create(x-37,y+2,obj_shockemit);
        instance_create(x-12,y+42,obj_shockemit);
        }
    }
}

//Change of plans
if (sprite_index==spr_komatoassassin_uppercut || sprite_index==spr_komatoassassin_uppercutleft || sprite_index==spr_komatoassassin_backstab || sprite_index==spr_komatoassassin_backstableft){
    if (visible && distance_to_object(obj_iji)>100){
        scr_assassinpain(1);
        alarm[2]=10;
        }
    if (visible && ((sprite_index==spr_komatoassassin_uppercut && (obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2 < bbox_left+(bbox_right-bbox_left)/2+10)) || (sprite_index==spr_komatoassassin_uppercutleft && (obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2 > bbox_left+(bbox_right-bbox_left)/2-10)))){
        if (alarm[1]>6){
            alarm[1]=5;
            alarm[0]=2;
            }
        }
    if (visible && ((sprite_index==spr_komatoassassin_backstab && (obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2 < bbox_left+(bbox_right-bbox_left)/2+10)) || (sprite_index==spr_komatoassassin_backstableft && (obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2 > bbox_left+(bbox_right-bbox_left)/2-10)))){
        if (alarm[1]>6){
            alarm[1]=4;
            alarm[0]=2;
            }
        }
    }
if (sprite_index==spr_komatoassassin_pose1 || sprite_index==spr_komatoassassin_pose1left || sprite_index==spr_komatoassassin_pose1fire || sprite_index==spr_komatoassassin_pose1fireleft || sprite_index==spr_komatoassassin_pose2 || sprite_index==spr_komatoassassin_pose2left){
    if (visible && distance_to_object(obj_iji)<30){
        scr_assassinpain(1);
        alarm[2]=10;
        }
    }
End Step Event:

execute code:

//Armor
if (armor
Collision Event with object obj_bullet:

execute code:

if (other.stagger)
    scr_assassinpain(1);
else{
    armor-=10*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
    }

if (angry==0){
    alarm[2]=random(60-(global.difficulty*20))+30-(global.difficulty*10);
    angry=1;
    visible=0;
    instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
    }

with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stagger)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_pellet:

execute code:

if (other.stun)
    scr_assassinpain(1);
else{
    armor-=9*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
    }

if (angry==0){
    alarm[2]=random(60-(global.difficulty*20))+30-(global.difficulty*10);
    angry=1;
    visible=0;
    instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
    }

with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stun)
        (instance_create(x,y,obj_bullethit)).image_single=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_kickbox:

execute code:

if (visible){
if (other.image_index==0){
    randomkick=random(1);
    if (randomkick<0.3+(0.3*global.difficulty))
        scr_assassinpain(1);
    else{
        scr_sound("glo_kick");
        hp-=1;
        scr_assassinpain(0);
        scr_shakescreen(2);
        }
    }
}
Collision Event with object obj_rocketexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_mpfbexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_pulse:

execute code:

if (visible){
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (!other.linker){
    armor-=2*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
    }

if (angry==0){
    alarm[2]=random(60-(global.difficulty*20))+30-(global.difficulty*10);
    angry=1;
    visible=0;
    instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
    }

if (other.hyper==1 && armor
Collision Event with object obj_enemyrocketexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_shockexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_shockballexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_enemympfbexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_pushbox:

execute code:

if (visible){
if (dead==0){
    ijikill=1;
    if (global.cracklevel>=security){
        if (cracked==0){
            global.security=security;
            crackmark=1;
            if (global.suddendeath)
                global.cracktext="Komato Assassin#H1 A100 W1#Security: ";
            else
                global.cracktext="Komato Assassin#H"+string(maxhp)+" A200 W1#Security: ";
            global.cracktext+=string(global.security);
            if (global.security==10)
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            else
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            script_execute(scr_begincrack);
            }
        else{
            global.erasetop=0;
            global.topmessage="Subject has already been cracked";
            }
        }
    else{
        global.erasetop=0;
        global.topmessage="You need a Crack skill of "+string(security)+" to crack a Komato Assassin";
        scr_sound("glo_crackfail");
        global.ignorestation=90;
        }
    }
else{
    global.erasetop=0;
    global.topmessage="Unable to connect to nanofield; subject is dead";
    }
}
Collision Event with object obj_thor:

execute code:

if (thored==0 && visible){
    armor-=35*global.atmult;
    thored=1;
    if (angry==0){
        alarm[2]=random(60-(global.difficulty*20))+30-(global.difficulty*10);
        angry=1;
        visible=0;
        instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
        }
    }
Collision Event with object obj_enemyshockballexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_enemyshockexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_visionchecke:

execute code:

if ((sprite_index==spr_komatoassassin_basicleft || sprite_index==spr_komatoassassin_basic) && visible)
    scr_assassinpain(1);
Collision Event with object obj_enemyreflector:

execute code:

if (angry==0 && visible){
    alarm[2]=random(60-(global.difficulty*20))+30-(global.difficulty*10);
    angry=1;
    visible=0;
    instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
    }
Collision Event with object obj_impulseexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
______________________________________________________

Information about object: obj_assassin_uppercut
Sprite: spr_assassin_uppercut
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

dud=1;
alarm[0]=2;
alarm[1]=1;
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 1:

set variable dud to 0
______________________________________________________

Information about object: obj_assassin_backstab
Sprite: spr_assassin_backstab
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

dud=1;
alarm[0]=2;
alarm[1]=1;
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 1:

set variable dud to 0
______________________________________________________

Information about object: obj_assassin_upslash
Sprite: spr_assassin_upslash
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

dud=1;
alarm[0]=2;
alarm[1]=1;
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 1:

set variable dud to 0
______________________________________________________

Information about object: obj_laserdagger
Sprite: spr_laserdagger
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

gravity=1;
gravity_direction=270;
speed=15;
Collision Event with object obj_iji:

execute code:

instance_destroy();
instance_create(x,y,obj_enemyshockballexplosion);
Collision Event with object obj_block:

execute code:

instance_destroy();
instance_create(x,y,obj_enemyshockballexplosion);
Collision Event with object obj_glass:

execute code:

instance_destroy();
instance_create(x,y,obj_enemyshockballexplosion);
______________________________________________________

Information about object: obj_ashatrigger
Sprite: spr_block
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Alarm Event for alarm 1:

execute code:

ashadead=1;
Alarm Event for alarm 2:

execute code:

with (obj_cdoor)
vspeed=0;
Alarm Event for alarm 3:

execute code:

if (global.facing==0)
    obj_iji.sprite_index=spr_basicleft;
else
    obj_iji.sprite_index=spr_basic;

Alarm Event for alarm 4:

execute code:

with (obj_iji){
    if (global.totkills+global.kills>global.neutralkc*berserkkills && global.hp<=global.healthlevel/2 && global.hp>0)
        scr_sound("iji_berserk",1);
    }
Step Event:

execute code:

if (obj_iji.x>x-32 && !ultrigger){
    ultrigger=1;
    obj_sabot.ultimatecannotpause=1;
    }

//Begin
if (!triggered2 && !global.ignoreall){
triggered2=1;
instance_create(obj_asha.bbox_left+((obj_asha.bbox_right-obj_asha.bbox_left)/2), obj_asha.bbox_top+((obj_asha.bbox_bottom-obj_asha.bbox_top)/2), obj_megaflash);
if (obj_asha.hp>0){
    if (global.voc_ash_death==0)
        scr_sound("ash_ambient3");
    }
obj_asha.visible=0;
obj_asha.x=obj_sabot.x;
obj_asha.y=obj_sabot.y;
obj_asha.alarm[2]=45;
obj_asha.angry=1;
instance_create(x,y,obj_ashabar);
}

//Asha dead
if (!donetrigger && ashadead && instance_number(obj_supercharge)==0 && global.hp>0 && !obj_iji.takingpain && (obj_iji.sprite_index==spr_basic || obj_iji.sprite_index==spr_basicleft || obj_iji.sprite_index==spr_run || obj_iji.sprite_index==spr_runleft)){
donetrigger=1;
obj_iji.takingpain=1;
global.ignoreall=1;
if (global.facing==0)
    obj_iji.sprite_index=spr_basicleft;
else
    obj_iji.sprite_index=spr_basic;
(instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chat55";
}
Collision Event with object obj_iji:

execute code:

if (!triggered){
triggered=1;
with (obj_cdoor){
    if (tag){
        scr_sound("glo_doorclose");
        vspeed=16;
        }
    }
alarm[2]=7;
obj_iji.speed=0;
obj_iji.sprite_index=spr_basic;
obj_asha.visible=1;
instance_create(obj_asha.bbox_left+((obj_asha.bbox_right-obj_asha.bbox_left)/2), obj_asha.bbox_top+((obj_asha.bbox_bottom-obj_asha.bbox_top)/2), obj_megaflash);
(instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chat54";
}
______________________________________________________

Information about object: obj_ashaflash
Sprite: spr_nanoflash
Solid: false
Visible: true
Depth: -10
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (distance_to_object(obj_asha)>100)
    instance_destroy();
direction=point_direction(x,y,obj_asha.x+15,obj_asha.y+50);
direction+=180;
speed=random(16)+2;
Step Event:

execute code:

speed*=0.94;
if (speed<0.05){
    instance_create(x,y,obj_ijisplat);
    instance_destroy();
    }
______________________________________________________

Information about object: obj_asha
Sprite: spr_asha_pose1left
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_komatoassassin
Mask: 

Create Event:

execute code:

lastx=x;
lasty=y;
hp=8;
maxhp=8;
armor=200;
maxarmor=200;
if (global.suddendeath){
    hp=1;
    maxhp=1;
    armor=100;
    maxarmor=100;
    }
enemytype=12;
resistance=1;
security=20;
asha=1;
asha2=0;
visible=0;
Alarm Event for alarm 0:

execute code:

if (hp>0){
//Uppercut, Backstab, Upslash
if (sprite_index==spr_asha_uppercut || sprite_index==spr_asha_uppercutleft || sprite_index==spr_asha_backstab || sprite_index==spr_asha_backstableft || sprite_index==spr_asha_upslash){
    image_single=-1;
    image_speed=1;
    image_index=1;
    scr_sound("glo_swipe");
    }

//Firing in pose1
if (sprite_index==spr_asha_pose1 || sprite_index==spr_asha_pose1left){
scr_sound("wea_plas");
scr_shakescreen(3);
shotcount+=1;
if (sprite_index==spr_asha_pose1){
    tempid=instance_create(x+49,y+10,obj_enemyplasmatrace);
    with (tempid)
        scr_enemyplasmatrace(1);
    }
else{
    tempid=instance_create(x-24,y+10,obj_enemyplasmatrace);
    with (tempid)
        scr_enemyplasmatrace(0);
    }

if (sprite_index==spr_asha_pose1)
    sprite_index=spr_asha_pose1fire;
else
    sprite_index=spr_asha_pose1fireleft;
if (shotcount!=5){
    alarm[3]=5;
    alarm[0]=8;
    }
}
}
Alarm Event for alarm 1:

execute code:

if (hp>0){
//Visibility time is up
if (sprite_index==spr_asha_pose2){
    scr_sound("wea_plas");
    scr_shakescreen(3);
    tempid=instance_create(x+29,y+42,obj_enemyplasmatrace);
    with(tempid)
        scr_enemyplasmatrace(1);
    }
if (sprite_index==spr_asha_pose2left){
    scr_sound("wea_plas");
    scr_shakescreen(3);
    tempid=instance_create(x+4,y+42,obj_enemyplasmatrace);
    with(tempid)
        scr_enemyplasmatrace(0);
    }
alarm[2]=random(15-(global.difficulty*5))+20-(global.difficulty*5);
instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
visible=0;
image_single=0;
image_index=0;
sprite_index=spr_asha_basic;

}
Alarm Event for alarm 2:

execute code:

//Receive orders, appear and execute
if (global.hp>0 && hp>0){

upslashing=0;
upslashwait=0;
image_index=0;
image_single=0;
perform=0;
fakeperform=0;
randomfakes=0;

repeat(10){

if (!perform){
x=obj_sabot.x;
y=obj_sabot.y;
sprite_index=spr_asha_basic;
randomstate=floor(random(7));
temprand=0;

breakout=0;
for (i=maxhp-1;i>0;i-=1){
    if (hp<=i && !eleced[i] && !breakout){
        eleced[i]=1;
        randomstate=7;
        breakout=1;
        }
    }

randomsuper=random(1);
if (randomsuper>0.98 && randomstate!=7){
    scr_sound("ash_ambient2");
    scr_sound("glo_teleport");
    alarm[2]=60;
    perform=1;
    fakeperform=1;
    randomstate=100;
    for (i=0; i<18; i+=1){
        tempid=instance_create(2816,1792,obj_laserdagger);
        tempid.direction=i*20;
        tempid.speed=random(15)+10;
        tempid.vspeed-=8;
        }
    }

//Five-shot in front of Iji
if (randomstate==0){
temprand=random(150)+100;
if (global.facing==0){
    sprite_index=spr_asha_pose1;
    if (place_free(obj_iji.x-temprand,obj_iji.y-20)){
        x=obj_iji.x-temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
else if (global.facing==1){
    sprite_index=spr_asha_pose1left;
    if (place_free(obj_iji.x+temprand,obj_iji.y-20)){
        x=obj_iji.x+temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) && !place_free(x,y+1) && !collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1)){
        alarm[1]=80-(global.difficulty*5);
        alarm[0]=45-(global.difficulty*5);
        shotcount=0;
        scr_sound("tor_gather");
        if (sprite_index==spr_asha_pose1)
            (instance_create(x+65,y+10,obj_chargetell)).tempid=id;
        if (sprite_index==spr_asha_pose1left)
            (instance_create(x-40,y+10,obj_chargetell)).tempid=id;
        }
    else
        perform=0;
    }
}

//Dual-shot behind Iji
if (randomstate==1){
temprand=random(150)+100;
if (global.facing==0){
    sprite_index=spr_asha_pose2left;
    if (place_free(obj_iji.x+temprand,obj_iji.y-20)){
        x=obj_iji.x+temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
else if (global.facing==1){
    sprite_index=spr_asha_pose2;
    if (place_free(obj_iji.x-temprand,obj_iji.y-20)){
        x=obj_iji.x-temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) && !place_free(x,y+1) && !collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1)){
        alarm[1]=45-global.difficulty*5;
        scr_sound("tor_gather");
        if (sprite_index==spr_asha_pose2)
            (instance_create(x+45,y+42,obj_chargetell)).tempid=id;
        if (sprite_index==spr_asha_pose2left)
            (instance_create(x-12,y+42,obj_chargetell)).tempid=id;
        }
    else
        perform=0;
    }
}

//Downstab
if (randomstate==2){
temprand=random(128)+256;
sprite_index=spr_asha_downstab;
if (place_free(obj_iji.x,obj_iji.y-temprand)){
    x=obj_iji.x;
    y=obj_iji.y-temprand;
    if (!collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1)){
        gravity=1;
        gravity_direction=270;
        perform=1;
        }
    else
        sprite_index=spr_asha_basic;
    }
}

//Uppercut
if (randomstate==3 && global.difficulty!=0){
temprand=random(1);
if (temprand>0.5){
    sprite_index=spr_asha_uppercut;
    if (place_free(obj_iji.x-50,obj_iji.y-20) && !place_free(obj_iji.x-50,obj_iji.y+64)){
        x=obj_iji.x-50;
        y=obj_iji.y-20;
        perform=1;
        }
    }
else{
    sprite_index=spr_asha_uppercutleft;
    if (place_free(obj_iji.x+32,obj_iji.y-20) && !place_free(obj_iji.x+32,obj_iji.y+64)){
        x=obj_iji.x+32;
        y=obj_iji.y-20;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) && !place_free(x,y+1)){
        image_single=0;
        alarm[1]=44-(global.difficulty*5);
        alarm[0]=39-(global.difficulty*5);
        }
    else
        perform=0;
    }
}

//Backstab
if (randomstate==4){
if (global.facing==0){
    sprite_index=spr_asha_backstableft;
    if (place_free(obj_iji.x+50,obj_iji.y-30) && !place_free(obj_iji.x+32,obj_iji.y+32)){
        x=obj_iji.x+50;
        y=obj_iji.y-30;
        perform=1;
        }
    }
else if (global.facing==1){
    sprite_index=spr_asha_backstab;
    if (place_free(obj_iji.x-50,obj_iji.y-30) && !place_free(obj_iji.x-50,obj_iji.y+32)){
        x=obj_iji.x-50;
        y=obj_iji.y-30;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) && !place_free(x,y+1)){
        image_single=0;
        alarm[1]=44-(global.difficulty*5);
        alarm[0]=40-(global.difficulty*5);
        }
    else
        perform=0;
    }
}

//Upslash
if (randomstate==5){
sprite_index=spr_asha_upslash;
x=obj_iji.x;
y=obj_iji.y;
if (place_free(x,y)){
    move_contact_solid(270,384);
    if (!place_free(x,y+1) && (y-obj_iji.y)>128 && obj_iji.vspeed<2){
        perform=1;
        image_single=0;
        }
    else{
        x=obj_sabot.x;
        y=obj_sabot.y;
        }
    }
}

//Laser daggers
/*
if (randomstate==6){
    x=random(800)+obj_iji.x-400;
    y=random(300)+obj_iji.y-300;
    if (place_free(x,y) && distance_to_object(obj_iji)>192 && !collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1)){
        perform=1;
        fakeperform=1;
        alarm[2]=random(15-(global.difficulty*5))+15-(global.difficulty*5);
        instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
        if (x>obj_iji.x){
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=225;
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=180;
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=135;
            }
        else{
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=-45;
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=0;
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=45;
            }
        }
    }
*/
//Fake attack
if (randomstate==6){
    randomfakes=ceil(random(4))+4;
    alarm[4]=5;
    perform=1;
    fakeperform=1;
    }

//Elecbomb
if (randomstate==7){
temprand=random(32)+96;
sprite_index=spr_asha_downstab;
if (place_free(obj_iji.x+6,obj_iji.y-temprand)){
    x=obj_iji.x+6;
    y=obj_iji.y-temprand;
    if (!collision_line(x,y,obj_iji.x+6,obj_iji.y,obj_block,0,1)){
        perform=1;
        elecbomb=1;
        }
    }
}

} //End of perform
} //End of repeat

//Perform
if (perform){
    if (elecbomb){
        instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
        tempid=instance_create(x,y,obj_elecbomb);
        tempid.permanent=1;
        alarm[2]=random(15-(global.difficulty*5))+15-(global.difficulty*5);
        elecbomb=0;
        }
    else if (!fakeperform && sprite_index!=spr_asha_basic){
        instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
        visible=1;
        }
    }
else
    alarm[2]=random(15-(global.difficulty*5))+15-(global.difficulty*5);
}
Alarm Event for alarm 3:

execute code:

//Revert to pose1 animation
if (hp>0){
if (sprite_index==spr_asha_pose1fire)
    sprite_index=spr_asha_pose1;
else if (sprite_index==spr_asha_pose1fireleft)
    sprite_index=spr_asha_pose1left;
    }
Alarm Event for alarm 4:

execute code:

if (randomfakes>0){
    randomfakes-=1;
    instance_create(random(600)+obj_iji.x-300,random(400)+obj_iji.y-200,obj_megaflash);
    if (randomfakes==0)
        alarm[4]=4-global.difficulty;
    else
        alarm[4]=5-global.difficulty;
    }
else
    alarm[2]=1;
Alarm Event for alarm 5:

execute code:

if (deadfakes>0){
    deadfakes-=1;
    instance_create(random(600)+obj_iji.x-300,random(400)+obj_iji.y-200,obj_megaflash);
    if (deadfakes>0)
        alarm[5]=5;
    }
Step Event:

execute code:

thored=0;
plasmaed=0;
cfised=0;

//"WIN"
if (obj_sabot.gameover && !winquote && hp>0){
    winquote=1;
    win=30;
    }
if (win>0)
    win-=1;
if (win==1)
    scr_sound("ash_win");

//Execute upslash
if (sprite_index==spr_asha_upslash && visible){
    upslashwait+=1;
    if (upslashwait>60 && !upslashing){
        upslashing=1;
        alarm[1]=1;
        }
    if (obj_iji.y>y-32 && !upslashing){
        upslashing=1;
        alarm[1]=1;
        }
    if (distance_to_object(obj_iji)<64 && !upslashing){
        upslashing=1;
        alarm[0]=1;
        alarm[1]=5;
        }
    }

//Upercut box
if (sprite_index==spr_asha_uppercut && image_index==2)
    (instance_create(x,y-45,obj_assassin_uppercut)).facing=1;
if (sprite_index==spr_asha_uppercutleft && image_index==2)
    instance_create(x-50,y-45,obj_assassin_uppercut);

//Backstab box
if (sprite_index==spr_asha_backstab && image_index==1)
    (instance_create(x-10,y-5,obj_assassin_backstab)).facing=1;
if (sprite_index==spr_asha_backstableft && image_index==1)
    instance_create(x-65,y-5,obj_assassin_backstab);

//Upslash box
if (sprite_index==spr_asha_upslash && image_index==1)
    instance_create(x-35,y-64,obj_assassin_upslash);

//Downstab recovery
if(!place_free(x,y) && sprite_index==spr_asha_downstab && visible){
    alarm[2]=random(15-(global.difficulty*5))+20-(global.difficulty*5);
    instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
    visible=0;
    gravity=0;
    vspeed=0;
    sprite_index=spr_asha_pose1;
    }
if (vspeed>22)
    vspeed=22;
if (visible && sprite_index==spr_asha_downstab && y>obj_iji.y+64)
    scr_assassinpain(1);

//Weapon sparks
if (visible && instance_number(obj_ashabar)==1){
smoke+=1;
if (smoke==5){
    smoke=0;
    if (sprite_index==spr_asha_pose1)
        instance_create(x+65,y+10,obj_shockemit);
    if (sprite_index==spr_asha_pose1left)
        instance_create(x-40,y+10,obj_shockemit);
    if (sprite_index==spr_asha_pose2)
        instance_create(x+45,y+42,obj_shockemit);
    if (sprite_index==spr_asha_pose2left)
        instance_create(x-12,y+42,obj_shockemit);
    }
}

//Change of plans
if (sprite_index==spr_asha_uppercut || sprite_index==spr_asha_uppercutleft || sprite_index==spr_asha_backstab || sprite_index==spr_asha_backstableft){
    if (visible && distance_to_object(obj_iji)>100){
        scr_assassinpain(1);
        alarm[2]=10;
        }
    if (visible && ((sprite_index==spr_asha_uppercut && (obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2 < bbox_left+(bbox_right-bbox_left)/2+10)) || (sprite_index==spr_asha_uppercutleft && (obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2 > bbox_left+(bbox_right-bbox_left)/2-10)))){
        if (alarm[1]>6){
            alarm[1]=5;
            alarm[0]=2;
            }
        }
    if (visible && ((sprite_index==spr_asha_backstab && (obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2 < bbox_left+(bbox_right-bbox_left)/2+10)) || (sprite_index==spr_asha_backstableft && (obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2 > bbox_left+(bbox_right-bbox_left)/2-10)))){
        if (alarm[1]>6){
            alarm[1]=4;
            alarm[0]=2;
            }
        }
    }
if (sprite_index==spr_asha_pose1 || sprite_index==spr_asha_pose1left || sprite_index==spr_asha_pose1fire || sprite_index==spr_asha_pose1fireleft || sprite_index==spr_asha_pose2 || sprite_index==spr_asha_pose2left){
    if (visible && distance_to_object(obj_iji)<30){
        scr_assassinpain(1);
        alarm[2]=10;
        }
    }
End Step Event:

execute code:

//Armor
if (armor<199.9)
    armor+=0.1;

//Pain from armordrop
if (armor<=0){
    hp-=1;
    scr_assassinpain();
    }

//Return to sabot
if (!visible && angry){
    x=obj_sabot.x;
    y=obj_sabot.y;
    }
Collision Event with object obj_bullet:

execute code:

if (other.stagger)
    scr_assassinpain(1);
else{
    armor-=10*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
    }

with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stagger)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_pellet:

execute code:

if (other.stun)
    scr_assassinpain(1);
else{
    armor-=9*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stun)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_kickbox:

execute code:

if (visible){
if (other.image_index==0){
    randomkick=random(1);
    if (randomkick<0.3+(0.3*global.difficulty))
        scr_assassinpain(1);
    else{
        scr_sound("glo_kick");
        hp-=1;
        scr_assassinpain(0);
        scr_shakescreen(2);
        }
    }
}
Collision Event with object obj_rocketexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_mpfbexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_pulse:

execute code:

if (visible){
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (!other.linker){
    armor-=2*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
    }

if (other.hyper==1 && armor
Collision Event with object obj_enemyrocketexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_shockexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_shockballexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_enemympfbexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_pushbox:

execute code:

if (visible){
global.erasetop=0;
global.topmessage="You need a Crack skill of "+string(security)+" to crack Assassin Asha";
scr_sound("glo_crackfail");
}
Collision Event with object obj_enemyshockballexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_enemyshockexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_impulseexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
______________________________________________________

Information about object: obj_ashabar
Sprite: spr_bossbar
Solid: false
Visible: true
Depth: -100
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=2/3;
originalwidth=(obj_asha.maxhp)*2;
yadjust=-48;
Draw Event:

execute code:

if (yadjust<0 && obj_asha.hp>0)
yadjust+=8;

x=floor(x);
y=floor(y);

if (!global.specialbake){
draw_set_color(c_black);
draw_rectangle(x-originalwidth-1,y-1,x+originalwidth,y+15,0);
draw_set_color(c_white);
draw_rectangle(x-originalwidth-1,y-1,x+originalwidth,y+15,1);
}
draw_sprite(spr_bossnames,1,x,y-10);

if (obj_asha.hp>0){
if (!global.specialbake){
    width=(obj_asha.hp)*2;
    draw_sprite_stretched(sprite_index,image_index,x-width,y,width*2,15);
    }
else{
    draw_sprite(spr_hpbarback,9,x-81,y);
    draw_sprite(spr_hpbar,ceil((obj_asha.hp/obj_asha.maxhp)*20),x-80,y);
    }
}

if (obj_asha.hp<=0){
    yadjust-=8;
    if (yadjust<-64)
        instance_destroy();
    }
______________________________________________________

Information about object: obj_destroyassassin
Sprite: spr_crate1
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

with (obj_komatoassassin){
if (angry)
destroyme=1;
}
______________________________________________________

Information about object: obj_crumble6
Sprite: spr_crumble6
Solid: true
Visible: true
Depth: 0
Persistent: false
Parent: obj_block
Mask: 

Collision Event with object obj_rocketexplosion:

execute code:

{
if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(48),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
Collision Event with object obj_mpfbexplosion:

execute code:

{
if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(48),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
Collision Event with object obj_enemyrocketexplosion:

execute code:

{
if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(48),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
Collision Event with object obj_shockexplosion:

execute code:

{
if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(48),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
Collision Event with object obj_enemympfbexplosion:

execute code:

{
if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(48),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
Collision Event with object obj_enemyshockexplosion:

execute code:

{
if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(48),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
Collision Event with object obj_impulseexplosion:

execute code:

{
if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(48),y+8+random(48),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
}
______________________________________________________

Information about object: obj_herosabot
Sprite: spr_herobox
Solid: false
Visible: true
Depth: -10000000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

repeat(10)
    sound_stop_all();
scr_stopmusic();
Draw Event:

execute code:

if (playing==1)
    scr_herosabot();
else
    scr_heromain();
Key Press Event for Key:

execute code:

if (keyboard_check(vk_pagedown)){
    if (global.debug)
        instance_create(obj_hero.x,obj_hero.y,obj_herogoal);
    }
Key Press Event for 1-key Key:

execute code:

if (!startplaying && !playing){
    startplaying=1;
    }
Key Press Event for 2-key Key:

execute code:

if (!startplaying && !playing){
    startplaying=1;
    }
Key Press Event for Keypad 1 Key:

execute code:

if (!startplaying && !playing){
    startplaying=1;
    }
Key Press Event for Keypad 2 Key:

execute code:

if (!startplaying && !playing){
    startplaying=1;
    }
Key Press Event for F4 Key:

execute code:

if (keyboard_check_pressed(vk_alt)){
    sound_stop_all();
    game_end();
    }
______________________________________________________

Information about object: obj_hero
Sprite: spr_herobox
Solid: false
Visible: true
Depth: -10000010
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_herodrone:

execute code:

scr_herodeath();
Collision Event with object obj_herocrusher:

execute code:

scr_herodeath();
Collision Event with object obj_herogenerator:

execute code:

scr_herodeath();
Collision Event with object obj_heromine:

execute code:

scr_herodeath();
with (other){
    scr_heroexplo();
    instance_destroy();
    }
Collision Event with object obj_herolife:

execute code:

if (obj_herosabot.herolives<5)
    obj_herosabot.herolives+=1;
with (other)
    instance_destroy();
Collision Event with object obj_herogoal:

execute code:

with (obj_herosabot){
    level+=1;
    if (level==9){
        level=0;
        if (skill<242)
            skill+=1;
        if (skill2==1)
            skill2=3;
        }
    scr_herospawnlevel();
    }
Collision Event with object obj_herorobo:

execute code:

scr_herodeath();
Draw Event:

execute code:

scr_hero();
Key Press Event for 1-key Key:

execute code:

if (instance_number(obj_heroshot)<5){
(instance_create(392,300,obj_heroshot)).hspeed=-10;
facing=0;
}
Key Press Event for 2-key Key:

execute code:

if (instance_number(obj_heroshot)<5){
(instance_create(408,300,obj_heroshot)).hspeed=10;
facing=1;
}
Key Press Event for Keypad 1 Key:

execute code:

if (instance_number(obj_heroshot)<5){
(instance_create(392,300,obj_heroshot)).hspeed=-10;
facing=0;
}
Key Press Event for Keypad 2 Key:

execute code:

if (instance_number(obj_heroshot)<5){
(instance_create(408,300,obj_heroshot)).hspeed=10;
facing=1;
}
______________________________________________________

Information about object: obj_heroshot
Sprite: spr_herobox
Solid: false
Visible: true
Depth: -10000020
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

fade+=1;
if (fade>=30)
    instance_destroy();
Collision Event with object obj_herodrone:

execute code:

scr_heroexplo();
instance_destroy();
with (other){
    hp-=1;
    if (hp==0){
        instance_destroy();
        scr_heroexplo();
        }
    }
Collision Event with object obj_herocrusher:

execute code:

scr_heroexplo();
instance_destroy();
with (other){
    hp-=1;
    if (hp==0){
        instance_destroy();
        scr_heroexplo();
        scr_heroexplo(-16,-16);
        scr_heroexplo(-16,+16);
        scr_heroexplo(+16,-16);
        scr_heroexplo(+16,+16);
        }
    }
Collision Event with object obj_herogenerator:

execute code:

scr_heroexplo();
instance_destroy();
with (other){
    hp-=1;
    obj_herosabot.fgrf=10;
    obj_herosabot.ultrashake=5;
    if (hp==0){
        if (obj_herosabot.level==7){
            obj_herosabot.sentineldestroyed=1;
            obj_herosabot.screenflash=250;
            repeat(50)
                instance_create(400-(obj_herosabot.viewx/10)-32+random(64),300-(obj_herosabot.viewy/10)+random(128),obj_heroexplo2);
            }
        instance_destroy();
        obj_herosabot.fgrf=80;
        obj_herosabot.ultrashake=15;
        scr_heroexplo();
        scr_heroexplo(-16,-16);
        scr_heroexplo(-16,+16);
        scr_heroexplo(+16,-16);
        scr_heroexplo(+16,+16);
        with (obj_herobarrier)
            instance_destroy();
        with (obj_herosabot){
            for (i=0; i<15; i+=1){
                for (j=0; j<15; j+=1){
                    if (levelarray[i,j]=="6")
                        levelarray[i,j]="0";
                    }
                }
            }
        }
    }
Collision Event with object obj_herorobo:

execute code:

scr_heroexplo();
instance_destroy();
with (other){
    hp-=1;
    if (hp==0){
        instance_destroy();
        scr_heroexplo();
        scr_heroexplo(-16,-16);
        scr_heroexplo(-16,+16);
        scr_heroexplo(+16,-16);
        scr_heroexplo(+16,+16);
        }
    }
Draw Event:

execute code:

draw_set_color(c_white);
if (pulse==0){
    pulse=1;
    draw_line(x-12+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-12+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+12+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+12+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
    draw_line(x+12+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-12+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x-12+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+12+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
    }
else{
    pulse=0;
    draw_line(x+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
    draw_line(x+16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
    }

______________________________________________________

Information about object: obj_heromegamissile
Sprite: spr_herobox
Solid: false
Visible: false
Depth: -10000001
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

direction=random(160)+10;
speed=18;
size=1000;
clouds=90;
Step Event:

execute code:

if (clouds>0){
    clouds-=1;
    if (clouds mod 5==0)
    instance_create(x,y,obj_heroexplo2);
    }
fade+=0.1;
size*=1.021;
if (speed<0.01)
    homing=1;
if (!homing)
    speed*=0.93;
else{
direction=point_direction(x,y,400,300);
speed*=1.078;
if (abs(x-400)
______________________________________________________

Information about object: obj_herodrone
Sprite: spr_herobox
Solid: false
Visible: true
Depth: -10000020
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

direction=random(360);
speed=4;
hp=2+2*obj_herosabot.skill;
Draw Event:

execute code:

if (x>-32 && x<832 && y>-32 && y<632){
draw_set_color(c_white);
draw_line(x-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+8+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+8+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-8+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-8+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
}
______________________________________________________

Information about object: obj_heroexplo
Sprite: spr_herobox
Solid: false
Visible: true
Depth: -10000030
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=10;
speed=random(8);
direction=random(360);
gravity=0.6;
Alarm Event for alarm 0:

execute code:

instance_destroy();
Draw Event:

execute code:

draw_set_color(c_white);
draw_circle(x,y,alarm[0]/2,1);
______________________________________________________

Information about object: obj_herocrusher
Sprite: spr_herobox
Solid: false
Visible: true
Depth: -10000020
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

direction=random(360);
speed=6;
hp=8+8*obj_herosabot.skill;
Draw Event:

execute code:

if (x>-32 && x<832 && y>-32 && y<632){
draw_set_color(c_white);
draw_line(x-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+8+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+8+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+8+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+8+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x-8+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+8+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x-12+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+13+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x-8+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x-12+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+12+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x+8+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+8+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+12+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+13+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x+8+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+12+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+12+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x-7+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-7+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x+7+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-7+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
}
______________________________________________________

Information about object: obj_herogenerator
Sprite: spr_herobox
Solid: false
Visible: true
Depth: -10000020
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

hp=16;
Draw Event:

execute code:

if (x>-32 && x<832 && y>-32 && y<632){
pulse+=1;
if (pulse mod 2==1){
    draw_set_color(c_black);
    draw_circle(x,y,32,0);
    draw_set_color(c_white);
    draw_circle(x,y,32,1);
    }
if (pulse<3){
    draw_set_color(c_black);
    draw_circle(x,y,26,0);
    draw_set_color(c_white);
    draw_circle(x,y,26,1);
    draw_circle(x-12,y-12,5,1);
    draw_circle(x+12,y+12,3,1);
    }
else{
    draw_set_color(c_black);
    draw_circle(x,y,24,0);
    draw_set_color(c_white);
    draw_circle(x,y,24,1);
    draw_circle(x-12,y-12,4,1);
    draw_circle(x+12,y+12,2,1);
    }
if (pulse>4)
    pulse=0;
    }

//FIRE
mine+=1;
if (mine>=60 && instance_number(obj_hero)==1){
    mine=0;
    instance_create(x,y,obj_heromine);
    scr_heroexplo();
    }
______________________________________________________

Information about object: obj_heroexplo2
Sprite: spr_herobox
Solid: false
Visible: false
Depth: -10000030
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=30;
Alarm Event for alarm 0:

execute code:

instance_destroy();
______________________________________________________

Information about object: obj_herobarrier
Sprite: spr_herobox
Solid: false
Visible: true
Depth: -10000030
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

draw_set_color(c_white);
pulse+=1;
if (pulse<2){
    if (x>-64 && x<864 && y>-64 && y<664){
    draw_line(x-60+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-60+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x-60+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+60+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
    draw_line(x-30+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-60+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x-30+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+60+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
    draw_line(x+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-60+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+60+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
    draw_line(x+30+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-60+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+30+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+60+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
    draw_line(x+60+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-60+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+60+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+60+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
    }
}
if (pulse>2)
    pulse=0;

______________________________________________________

Information about object: obj_heromine
Sprite: spr_herobox
Solid: false
Visible: true
Depth: -10000020
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

direction=point_direction(x,y,obj_hero.x,obj_hero.y);
speed=8;
Draw Event:

execute code:

if (x>-32 && x<832 && y>-32 && y<632){
draw_set_color(c_white);
if (pulse==0){
    draw_circle(x,y,random(24)+8,0);
    pulse=1;
    }
else{
    draw_circle(x,y,24,0);
    pulse=0;
    }
}
______________________________________________________

Information about object: obj_herolife
Sprite: spr_herobox
Solid: false
Visible: true
Depth: -10000020
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

if (x>-32 && x<832 && y>-32 && y<632){
draw_set_color(c_white);
pulse+=1;
if (pulse<3){
    draw_line(x-8,y+16,x-8,y-16);
    draw_line(x-8,y-16,x+8,y-8);
    draw_line(x+8,y-8,x-8,y);
    }
if (pulse>4)
    pulse=0;
}
______________________________________________________

Information about object: obj_herogoal
Sprite: spr_herobox
Solid: false
Visible: true
Depth: -10000020
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

if (x>-96 && x<896 && y>-96 && y<696){
rf=distance_to_point(400,300)/2-40;
if (rf<0)
    rf=0;
cd=distance_to_point(400,300)/2;
if (cd>255)
    cd=255;
draw_set_color(make_color_rgb(255-cd,255-cd,255-cd));
draw_line(x+16+random(rf)-(rf/2),y+32+random(rf)-(rf/2),x+16+random(rf)-(rf/2),y-32+random(rf)-(rf/2));
draw_line(x+16+random(rf)-(rf/2),y-32+random(rf)-(rf/2),x+32+random(rf)-(rf/2),y-16+random(rf)-(rf/2));
draw_line(x+32+random(rf)-(rf/2),y-16+random(rf)-(rf/2),x-32+random(rf)-(rf/2),y-16+random(rf)-(rf/2));
draw_line(x-32+random(rf)-(rf/2),y-16+random(rf)-(rf/2),x-16+random(rf)-(rf/2),y-32+random(rf)-(rf/2));
draw_line(x-16+random(rf)-(rf/2),y-32+random(rf)-(rf/2),x-16+random(rf)-(rf/2),y+32+random(rf)-(rf/2));
draw_line(x-16+random(rf)-(rf/2),y+32+random(rf)-(rf/2),x-32+random(rf)-(rf/2),y+16+random(rf)-(rf/2));
draw_line(x-32+random(rf)-(rf/2),y+16+random(rf)-(rf/2),x+32+random(rf)-(rf/2),y+16+random(rf)-(rf/2));
draw_line(x+32+random(rf)-(rf/2),y+16+random(rf)-(rf/2),x+16+random(rf)-(rf/2),y+32+random(rf)-(rf/2));
}
______________________________________________________

Information about object: obj_herorobo
Sprite: spr_herobox
Solid: false
Visible: true
Depth: -10000020
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

direction=random(360);
speed=4;
hp=8+8*obj_herosabot.skill;
Draw Event:

execute code:

if (x>-32 && x<832 && y>-32 && y<632){
draw_set_color(c_white);
if (x>400)
    facing=-1;
else
    facing=1;
draw_line(x-1*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+15+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x-1*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x-1*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+5*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x+5*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+8*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-13+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x+8*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-13+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+8*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-9+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x+8*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-9+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+5*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-6+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x+5*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-6+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x-5*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-6+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x-5*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-6+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x-9*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-2+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x-9*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-2+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x-9*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+4+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x-9*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+4+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x-5*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+8+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x-5*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+8+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x-1*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+8+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x-1*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+8+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+7*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+16+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x-1*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-1+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+9*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-1+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x+9*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y-1+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x+7*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+1+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
draw_line(x+7*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+1+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),x-1*facing+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2),y+1+random(obj_herosabot.ultrashake)-(obj_herosabot.ultrashake/2));
}
______________________________________________________

Information about object: obj_heroflower
Sprite: spr_herobox
Solid: false
Visible: true
Depth: -10000001
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

randompulse=random(0.5)+0.5;
Draw Event:

execute code:

if (pulsedirection==0)
    pulse+=9*randompulse;
else
    pulse-=9*randompulse;
if (pulse>=245 && pulsedirection==0)
    pulsedirection=1;
if (pulse<=10 && pulsedirection==1)
    pulsedirection=0;

if (pulse2direction==0)
    pulse2+=8*randompulse;
else
    pulse2-=8*randompulse;
if (pulse2>=245 && pulse2direction==0)
    pulse2direction=1;
if (pulse2<=10 && pulse2direction==1)
    pulse2direction=0;

if (pulse3direction==0)
    pulse3+=7*randompulse;
else
    pulse3-=7*randompulse;
if (pulse3>=245 && pulse3direction==0)
    pulse3direction=1;
if (pulse3<=10 && pulse3direction==1)
    pulse3direction=0;
if (x>-96 && x<800 && y>-128 && y<600){
draw_set_color(make_color_rgb(pulse,pulse2,pulse3));
draw_line(x+64,y+128,x+64,y+32);
draw_line(x+80,y+64,x+48,y);
draw_line(x+48,y,x+32,y+16);
draw_line(x+32,y+16,x+96,y+48);
draw_line(x+96,y+48,x+80,y+64);
draw_line(x+48,y+64,x+80,y);
draw_line(x+80,y,x+96,y+16);
draw_line(x+96,y+16,x+32,y+48);
draw_line(x+32,y+48,x+48,y+64);
draw_line(x+64,y+128,x+32,y+96);
draw_line(x+64,y+112,x+96,y+80);
draw_line(x+64,y+96,x+48,y+80);
}
______________________________________________________

Information about object: obj_starthero3d
Sprite: 
Solid: false
Visible: true
Depth: -10000000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

width=128;
height=96;
Draw Event:

execute code:

cycle+=1;
draw_set_color(c_black);
draw_rectangle(obj_shakescreen.x-width/2,obj_shakescreen.y-height/2,obj_shakescreen.x+width/2,obj_shakescreen.y+height/2,0);
width+=16;
height+=12;

if (cycle>=45 && cycle<50){
obj_sabot.heroxprev=obj_sabot.x;
obj_sabot.heroyprev=obj_sabot.y;
view_xview[0]=0;
view_yview[0]=0;
instance_create(0,0,obj_herosabot);
obj_sabot.alarm[7]=1;
cycle=60;
}
______________________________________________________

Information about object: obj_maincover
Sprite: spr_maincover
Solid: false
Visible: true
Depth: -10
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=0;
Alarm Event for alarm 0:

execute code:

instance_destroy();
______________________________________________________

Information about object: obj_clearcover
Sprite: spr_clearcover
Solid: false
Visible: true
Depth: -10
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=0;
Alarm Event for alarm 0:

execute code:

instance_destroy();
______________________________________________________

Information about object: obj_komatobeast
Sprite: spr_komatobeast_basicleft
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_komatoenemy
Mask: 

Create Event:

execute code:

killtype=2;
image_speed=0.5;
state=1;
alarm[2]=25+random(10);
hp=1;
maxhp=1;
armor=100;
maxarmor=100;
enemytype=13;
resistance=7;
security=6;
walkspeed=4;
runspeed=8+global.specialtrigger16*2;
Alarm Event for alarm 2:

execute code:

alarm[7]=0;
if (state!=3){
//Choose target
if (targetrival==0){
    if (targetiji>0)
        target=obj_iji.id;
    else{
        angry=0;
        alarm[5]=300;
        }
    }
if (!instance_exists(target)){
angry=0;
targetrival=0;
if (targetiji>0 && target!=obj_iji.id){
    if (!angry)
        alarm[2]=1;
    angry=1;
    alarm[5]=300;
    target=obj_iji.id;
    }
}

//Adjust sprite
if (facing==0 && state==0)
    sprite_index=spr_komatobeast_basicleft;
if (facing==1 && state==0)
    sprite_index=spr_komatobeast_basic;

//Begin taking action
alarm[2]=25+random(10);

//Roam
randomstate=random(1);
if (angry==0){
    if (randomstate<0.6){
        state=0;
        alarm[2]=60+random(90);
        }
    else{
        state=1;
        facing=0;
        if (randomstate>0.8)
            facing=1;
        }
    }

//Angry
else{
    state=2;
    //Face target
    if (x>target.x)
        facing=0;
    else
        facing=1;
    }

//Jump!
randomstate=random(1);
if (state==2 && randomstate>0.6 && place_free(x-64,y) && place_free(x+64,y)){
    if (x>target.x)
        facing=0;
    else
        facing=1;
    scr_sound("bea_jump");
    state=3;
    velocity=runspeed;
    vspeed=-18;
    gravity=1;
    gravity_direction=270;
    if (facing==0)
        sprite_index=spr_komatobeast_runleft;
    else
        sprite_index=spr_komatobeast_run;
    image_single=1;
    }
}
Alarm Event for alarm 5:

set variable angry to 0
Alarm Event for alarm 7:

execute code:

if (alarm[2]>=1){
    alarm[7]=4;
    image_index=0;
    instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_nanospark);
    repeat(2)
        (instance_create(bbox_left-8+random(bbox_right-bbox_left+16),bbox_top-4+random(bbox_bottom-bbox_top+8),obj_glassspark)).image_index=4;
    }
Step Event:

execute code:

//"FIND"
if (angry && !prevangry)
    scr_sound("bea_find");
prevangry=angry;

scr_komatovision(40,12);
if (targetiji>0)
targetiji-=1;
if (targetrival>0)
targetrival-=1;
cfised=0;
thored=0;
//Jump over rockets
randomstate=random(1+0.25*global.difficulty);
if (state==2 && (randomstate>0.75)){
if ((facing==0 && place_free(x-160,y) && (place_meeting(x-160,y,obj_rocket) || place_meeting(x-160,y,obj_mpfb) || place_meeting(x-160,y,obj_shock) || place_meeting(x-160,y,obj_enemyrocket) || place_meeting(x-160,y,obj_enemympfb))) || (facing==1 && place_free(x-160,y) && (place_meeting(x+160,y,obj_rocket) || place_meeting(x+160,y,obj_mpfb) || place_meeting(x+160,y,obj_shock) || place_meeting(x+160,y,obj_enemyrocket) || place_meeting(x+160,y,obj_enemympfb)))){
    scr_sound("bea_jump");
    state=3;
    velocity=runspeed;
    vspeed=-18;
    gravity=1;
    gravity_direction=270;
    if (facing==0)
        sprite_index=spr_komatobeast_runleft;
    else
        sprite_index=spr_komatobeast_run;
    image_single=1;
    image_speed=0;
    }
}

//Lose sight
if ((x < obj_shakescreen.x-1000) || (x > obj_shakescreen.x+1000) || (y < obj_shakescreen.y-800) || (y > obj_shakescreen.y+800)){
    angry=0;
    alarm[5]=0;
    if (state==2)
        state=0;
    }
//Alter sprite speed
if (sprite_index=spr_komatobeast_basic || sprite_index=spr_komatobeast_basicleft)
    image_speed=0.25;
else if (state!=3)
    image_speed=0.5;

//Crack fail
if (crackmark==1 && distance_to_object(obj_iji) > 50){
    script_execute(scr_crackfail);
    script_execute(scr_terminatecrack);
    global.erasetop=0;
    global.topmessage="Subject is too far away to crack";
    }
//Fix hitting cieling
if (state==3 && place_meeting(x,y+vspeed-2,(obj_block)) && !place_meeting(x,y+vspeed-2,(obj_meta)) && vspeed<0){
    move_contact_solid(90,-1);
    vspeed=0;
    y+=3;
    }
//Autodeath
if (hp<=0 || armor<1)
    scr_beastdeath();
//Jump
if (state==3){
    if (facing==0){
        if (place_free(x-velocity,y+vspeed+2) && !place_meeting(x-velocity,y,obj_blockenemy)){
            if (place_free(x-velocity,y+vspeed-2))
                x-=velocity;
            else if (place_free(x,y+vspeed+12)){
                velocity*=0.3;
                sprite_index=spr_komatobeast_run;
                facing=1;
                }
            }
        else if (place_free(x,y+vspeed+12)){
            velocity*=0.3;
            sprite_index=spr_komatobeast_run;
            facing=1;
            }
        }
    else if (facing==1){
        if (place_free(x+velocity,y+vspeed+2) && !place_meeting(x+velocity,y,obj_blockenemy)){
            if (place_free(x+velocity,y+vspeed-2))
                x+=velocity;
            else if (place_free(x,y+vspeed+12)){
                velocity*=0.3;
                sprite_index=spr_komatobeast_runleft;
                facing=0;
                }
            }
        else if (place_free(x,y+vspeed+12)){
            velocity*=0.3;
            sprite_index=spr_komatobeast_runleft;
            facing=0;
            }
        }
    //Fall
    if (place_free(x,y+1)){
        gravity=1;
        gravity_direction=270;
        }
    }
//Limit fall speed
if (vspeed>20)
    vspeed=20;
//Armor
if (armor<199.9)
    armor+=0.1;
//Stand still
if (state==0){
    if (facing==0)
        sprite_index=spr_komatobeast_basicleft;
    else
        sprite_index=spr_komatobeast_basic;
    }

//Walk
if (state==1){
    if (facing==0){
        sprite_index=spr_komatobeast_walkleft;
        if (place_meeting(x-walkspeed,y,obj_blockenemy) || place_free(x-80,y+20))
            facing=1;
        else if (place_free(x-walkspeed,y))
            x-=walkspeed;
        else
            facing=1;
        }
    else{
        sprite_index=spr_komatobeast_walk;
        if (place_meeting(x+walkspeed,y,obj_blockenemy) || place_free(x+80,y+20))
            facing=0;
        else if (place_free(x+walkspeed,y))
            x+=walkspeed;
        else
            facing=0;
        }
    }

//Run
if (state==2){
    if (facing==0){
        sprite_index=spr_komatobeast_runleft;
        if (place_meeting(x-runspeed,y,obj_blockenemy) || place_free(x-80,y+20))
            facing=1;
        else if (place_free(x-runspeed,y))
            x-=runspeed;
        else
            facing=1;
        }
    else{
        sprite_index=spr_komatobeast_run;
        if (place_meeting(x+runspeed,y,obj_blockenemy) || place_free(x+80,y+20))
            facing=0;
        else if (place_free(x+runspeed,y))
            x+=runspeed;
        else
            facing=0;
        }
    }

Collision Event with object obj_block:

execute code:

//Jump landing
if (state==3){
    if (vspeed<0){
        move_contact_solid(90,-1);
        vspeed=0;
        y+=3;
        }
    else{
        scr_sound("glo_land");
        if ((x > obj_shakescreen.x-500) && (x < obj_shakescreen.x+500) && (y > obj_shakescreen.y-400) && (y < obj_shakescreen.y+400))
            scr_shakescreen(1);
        gravity=0;
        vspeed=0;
        image_speed=0.5;
        move_contact_solid(270,-1);
        if (wanttostun){
            wanttostun=0;
            state=4;
            if (facing==0)
                sprite_index=spr_komatobeast_painleft;
            else
                sprite_index=spr_komatobeast_pain;
            image_single=-1;
            image_index=0;
            }
        else{
            alarm[2]=10+random(10);
            state=2;
            if (facing==0)
                sprite_index=spr_komatobeast_runleft;
            else
                sprite_index=spr_komatobeast_run;
            image_single=-1;
            image_index=2;
            }
        }
    }
Collision Event with object obj_bullet:

execute code:

if (!other.stagger)
    ijikill=1;
targetiji=300;
if (angry==0)
    alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0){
    if (other.stagger){
        if (state==0 || state==1 || state==2 || state==4){
            takingpain=1;
            state=4;
            alarm[2]=10;
            alarm[7]=0;
            image_index=0;
            if (facing==0)
                sprite_index=spr_komatobeast_painleft;
            else
                sprite_index=spr_komatobeast_pain;
            }
        }
    else{
        armor-=10*global.atmult;
        instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
        }
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stagger)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_tasensoldier:

execute code:

if ((state==2 || state==3) && other.state!=4 && other.state!=5){
    scr_sound("glo_kick");
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=hspeed;
        tempid.direction=random(360);
        }
    scr_shakescreen(2);
    other.ijikill=0;
    other.hp-=1;
    other.targetrival=300;
    other.target=id;
    if (facing==0){
        with (other)
            scr_enemyknockdown(1,10-resistance);
        }
    else{
        with (other)
            scr_enemyknockdown(2,10-resistance);
        }
    }

Collision Event with object obj_pellet:

execute code:

if (!other.stun)
    ijikill=1;
targetiji=300;
if (angry==0)
    alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0){
    if (other.stun){
        if (state==0 || state==1 || state==2 || state==4){
            state=4;
            alarm[2]=floor(15*(1+(global.attacklevel/10)));
            alarm[7]=4;
            if (facing==0)
                sprite_index=spr_komatobeast_painleft;
            else
                sprite_index=spr_komatobeast_pain;
            image_single=-1;
            image_index=0;
            image_speed=0.5;
            }
        }
    else{
        armor-=9*global.atmult;
        instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
        }
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stun)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_enemybullet:

execute code:

ijikill=0;
if (angry==0)
    alarm[2]=1;
angry=1;
targetrival=300;
target=other.target;
alarm[5]=300;
if (dead==0){
    armor-=4;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_kickbox:

execute code:

global.temp=0;
with (other){
    if (place_meeting(x,y,obj_door) || place_meeting(x,y,obj_cdoor))
        global.temp=1;
    if (sprite_index==spr_detonator)
        global.temp=0;
    }
if (global.temp==0){
if (other.image_index==0){
    scr_sound("glo_kick");
    ijikill=1;
    targetiji=300;
    script_execute(scr_shakescreen,1);
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (global.facing==0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }

    if (angry==0)
        alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    angry=1;
    alarm[5]=300;
    if (global.strengthlevel>=resistance)
        scr_beastdeath();
    else{
        global.erasetop=0;
        global.topmessage="You need a Strength of "+string(resistance)+" to knock down a Komato Beast";
        }
    }
}
Collision Event with object obj_rocketexplosion:

execute code:

if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    scr_beastdeath();
    }
Collision Event with object obj_mpfbexplosion:

execute code:

if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    if (ijikill && killtype<5)
        killtype=5;
    if (other.banana && ijikill && killtype<8)
        killtype=8;
    scr_beastdeath();
    }
Collision Event with object obj_pulse:

execute code:

if (!other.linker)
    ijikill=1;
targetiji=300;
if (other.hyper==1 && armor<60 && global.strengthlevel>=resistance){
    scr_sound("glo_kick");
    script_execute(scr_shakescreen,2);
    scr_beastdeath();
    repeat(3){
        tempid=instance_create(other.x,other.y,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (other.hspeed<0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    }
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (angry==0)
    alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
angry=1;
alarm[5]=300;
if (dead==0 && !other.linker){
    armor-=2*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
    }
if (other.linker)
    scr_pulselink(2);
Collision Event with object obj_enemyrocketexplosion:

execute code:

if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    scr_beastdeath();
    }
Collision Event with object obj_shockexplosion:

execute code:

if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    scr_beastdeath();
    }
Collision Event with object obj_shockballexplosion:

execute code:

if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    targetiji=300;
    if (dead==0)
        armor-=30*global.atmult;
    if (angry==0)
        alarm[2]=1;
if (angry==0){
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+6,y+8,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    angry=1;
    alarm[5]=300;
    }
Collision Event with object obj_tasencommander:

execute code:

if ((state==2 || state==3) && other.state!=4 && other.state!=5){
    scr_sound("glo_kick");
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=hspeed;
        tempid.direction=random(360);
        }
    scr_shakescreen(2);
    other.ijikill=0;
    other.hp-=1;
    other.targetrival=300;
    other.target=id;
    global.tempshred=hspeed;
    if (facing==0){
        with (other)
            scr_enemyknockdown(1,10-resistance);
        }
    else{
        with (other)
            scr_enemyknockdown(2,10-resistance);
        }
    }

Collision Event with object obj_swipe:

execute code:

if (other.dud==0){
    scr_sound("glo_kick");
    ijikill=0;
    scr_beastdeath();
    }
Collision Event with object obj_tasenelite:

execute code:

if ((state==2 || state==3) && !other.dead && other.sprite_index!=spr_tasenelite_pain && other.sprite_index!=spr_tasenelite_painleft){
    scr_sound("glo_kick");
    repeat(3){
        tempid=instance_create(other.x+18,other.y+30,obj_scrapwhite);
        tempid.speed=hspeed;
        tempid.direction=random(360);
        }
    scr_shakescreen(2);
    other.ijikill=0;
    other.hp-=1;
    other.targetrival=300;
    other.target=id;
    global.tempshred=hspeed;
    with (other)
        scr_elitepain(0);
    }

Collision Event with object obj_kickbox_elite:

execute code:

if (other.dud==0){
    scr_sound("glo_kick");
    ijikill=0;
    scr_beastdeath();
    }
Collision Event with object obj_enemympfbexplosion:

execute code:

if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    scr_beastdeath();
    }
Collision Event with object obj_pushbox:

execute code:

if (dead==0){
    ijikill=1;
    if (global.cracklevel>=security){
        if (cracked==0){
            global.security=security;
            crackmark=1;
            global.cracktext="Komato Beast#H1 A100 W7#Security: ";
            global.cracktext+=string(global.security);
            if (global.security==10)
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            else
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            script_execute(scr_begincrack);
            }
        else{
            global.erasetop=0;
            global.topmessage="Subject has already been cracked";
            }
        }
    else{
        global.erasetop=0;
        global.topmessage="You need a Crack skill of "+string(security)+" to crack a Komato Beast";
        scr_sound("glo_crackfail");
        global.ignorestation=90;
        }
    }
else{
    global.erasetop=0;
    global.topmessage="Unable to connect to nanofield; subject is dead";
    }
Collision Event with object obj_meta:

execute code:

with (other)
    script_execute(scr_metabreak);

Collision Event with object obj_thor:

execute code:

if (thored==0){
    ijikill=1;
    targetiji=300;
    if (angry==0){
        alarm[2]=1;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+6,y+8,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    armor-=35*global.atmult;
    if (hp==1 && armor<=0 && ijikill && killtype<5)
        killtype=5;
    angry=1;
    alarm[5]=300;
    thored=1;
    }
Collision Event with object obj_enemyshockballexplosion:

execute code:

if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    if (dead==0)
        armor-=30;
    }
Collision Event with object obj_enemyshockexplosion:

execute code:

if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    scr_beastdeath();
    }
Collision Event with object obj_impulseexplosion:

execute code:

//Jump!
if (!other.dud && state<=2){
    if (x
______________________________________________________

Information about object: obj_sec7star
Sprite: spr_sec7star
Solid: false
Visible: true
Depth: 1000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=random(0.2)+0.2;
______________________________________________________

Information about object: obj_paletteswap
Sprite: spr_hud
Solid: false
Visible: false
Depth: 100000
Persistent: false
Parent: 
Mask: 

Alarm Event for alarm 0:

execute code:

used=0;
Collision Event with object obj_iji:

execute code:

if (!obj_sabot.fixedpalette){
if (obj_sabot.palette==0 && !used){
    used=1;
    alarm[0]=50;
    obj_sabot.palette=1;
    background_index[0]=bg_back73;
    }
if (obj_sabot.palette==1 && !used){
    used=1;
    alarm[0]=50;
    obj_sabot.palette=0;
    background_index[0]=bg_back7;
    if (other.x>6000)
        obj_sabot.fixedpalette=1;
    }
}
______________________________________________________

Information about object: obj_deactivateme
Sprite: spr_block
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_komatoscreen3
Sprite: spr_komatoscreen3
Solid: false
Visible: true
Depth: 100
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_komatoscreen4
Sprite: spr_komatoscreen4
Solid: false
Visible: true
Depth: 100
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_komatoscreen5
Sprite: spr_komatoscreen5
Solid: false
Visible: true
Depth: 100
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_komatoscreen6
Sprite: spr_komatoscreen6
Solid: false
Visible: true
Depth: 100
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_komatoscreen7
Sprite: spr_komatoscreen7
Solid: false
Visible: true
Depth: 100
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_crumble71
Sprite: spr_crumble71
Solid: true
Visible: true
Depth: 0
Persistent: false
Parent: obj_crumble6
Mask: 

______________________________________________________

Information about object: obj_crumble72
Sprite: spr_crumble72
Solid: true
Visible: true
Depth: 0
Persistent: false
Parent: obj_crumble6
Mask: 

______________________________________________________

Information about object: obj_crumble73
Sprite: spr_crumble73
Solid: true
Visible: true
Depth: 0
Persistent: false
Parent: obj_crumble6
Mask: 

______________________________________________________

Information about object: obj_phantomhammer
Sprite: spr_phantomhammer
Solid: true
Visible: true
Depth: 5
Persistent: false
Parent: obj_block
Mask: 

Create Event:

execute code:

armor=500;
maxarmor=500;
if (global.suddendeath){
    armor=100;
    maxarmor=100;
    }
security=30;
Step Event:

execute code:

thored=0;

if (armor=4){
    smokecyc=0;
    instance_create(x+8+random(140),y+32+random(200),obj_bigsmoke);
    }

if (place_meeting(x-12,y,obj_cfistrace))
    armor+=-(20*(1+(global.attacklevel/10)));
if (place_meeting(x-12,y,obj_plasmatrace))
    armor+=-(300*(1+(global.attacklevel/10)));

//Die
if (!dead && armor<=0){
    dead=1;
    scr_sound("exp_mpfb");
    scr_shakescreen(4);
    with (obj_komatoscreen6){
        if (tag)
            instance_destroy();
        }
    with (obj_komatodetail1){
        if (tag)
            instance_destroy();
        }
    with (obj_komatodetail5){
        if (tag)
            instance_destroy();
        }
    instance_create(x+80,y+144,obj_harmlessexplosion);
    sprite_index=spr_phantomhammer2;
    instance_create(x,y,obj_phantomhammer3);
    repeat(5) instance_create(x+64,y+45,obj_smokepoint);
    repeat(5) instance_create(x+108,y+140,obj_smokepoint);
    repeat(5) instance_create(x+16,y+196,obj_smokepoint);
    instance_activate_object(obj_cdoor);
    with (obj_cdoor){
        if (trigger==4)
            instance_destroy();
        }
    global.erasetop=0;
    global.topmessage="PHANTOM HAMMER DESTROYED - LEVEL {{ SECURITY DOORS OPENED"
    }

if (armor<-1000)
    armor=-1000;
Collision Event with object obj_kickbox:

execute code:

scr_shakescreen(1);
global.erasetop=0;
scr_sound("glo_kick");
if (dead)
global.topmessage="This structure is already damaged beyond repair";
else
global.topmessage="This structure is too sturdy, use Nanoweapons to destroy it";
Collision Event with object obj_rocketexplosion:

execute code:

if (!other.dud)
armor+=-(200*(1+(global.attacklevel/10)));

Collision Event with object obj_mpfbexplosion:

execute code:

if (!other.dud)
armor+=-(300*(1+(global.attacklevel/10)));

Collision Event with object obj_pulse:

execute code:

with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (!other.linker)
    armor+=-(2*(1+(global.attacklevel/10)));
if (other.linker){
    global.erasetop=0;
    global.topmessage="Pulse link could not be established";
    }
Collision Event with object obj_enemyrocketexplosion:

execute code:

if (!other.dud)
armor-=200;
Collision Event with object obj_shockexplosion:

execute code:

if (!other.dud)
armor+=-(200*(1+(global.attacklevel/10)));

Collision Event with object obj_shockballexplosion:

execute code:

if (!other.dud)
armor+=-(30*(1+(global.attacklevel/10)));

Collision Event with object obj_enemympfbexplosion:

execute code:

if (!other.dud)
armor-=300;

Collision Event with object obj_pushbox:

execute code:

global.erasetop=0;
if (dead)
global.topmessage="Structure is inoperational";
else
global.topmessage="You need a Crack level of 30 to crack this structure";
scr_sound("glo_crackfail");
Collision Event with object obj_thor:

execute code:

if (thored==0){
    armor+=-(35*(1+(global.attacklevel/10)));
    thored=1;
    }
Collision Event with object obj_bullethit:

execute code:

if (other.image_index==0)
armor+=-(10*(1+(global.attacklevel/10)));

Collision Event with object obj_pellethit:

execute code:

if (other.image_index==0)
armor+=-(9*(1+(global.attacklevel/10)));
______________________________________________________

Information about object: obj_phantomhammer4
Sprite: spr_phantomhammer3
Solid: false
Visible: true
Depth: 10
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_phantomhammer3
Sprite: spr_phantomhammer3
Solid: false
Visible: true
Depth: 10
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

if (vspeed<20)
    vspeed+=0.25;
scr_outside();
______________________________________________________

Information about object: obj_nanospark
Sprite: spr_bullet
Solid: false
Visible: true
Depth: -10
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

xprev=x;
yprev=y;
xprev2=x;
yprev2=y;
dir=random(180);
maxdistance=4+ceil(random(4));
Step Event:

execute code:

temprand=random(1)
if (temprand<0.2 && !spawned){
    spawned=1;
    (instance_create(x,y,obj_nanospark)).spawned=1;
    }
scr_outside();

Draw Event:

execute code:

dir+=random(120)-60;
if (distance>=maxdistance)
    instance_destroy();
image_single=0;
if (distance
______________________________________________________

Information about object: obj_proximatrigger
Sprite: spr_block
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

elecpad1=0;
elecpad2=0;
image_speed=0.5;
Alarm Event for alarm 0:

execute code:

with (obj_cdoor)
vspeed=0;
Alarm Event for alarm 1:

execute code:

proximadead=1;
Alarm Event for alarm 2:

execute code:

with (obj_iji){
    if (global.totkills+global.kills>global.neutralkc*berserkkills && global.hp<=global.healthlevel/2 && global.hp>0)
        scr_sound("iji_berserk",1);
    }

Step Event:

execute code:

if (obj_iji.x>x-32 && !ultrigger){
    ultrigger=1;
    obj_sabot.ultimatecannotpause=1;
    }

if (!triggered2 && !global.ignoreall){
triggered2=1;
instance_create(x,y,obj_proximabar);
}

if (!donetrigger && proximadead && instance_number(obj_supercharge)==0 && global.hp>0 && !obj_iji.takingpain && (obj_iji.sprite_index==spr_basic || obj_iji.sprite_index==spr_basicleft || obj_iji.sprite_index==spr_run || obj_iji.sprite_index==spr_runleft)){
donetrigger=1;
obj_iji.takingpain=1;
global.ignoreall=1;
if (global.facing==0)
    obj_iji.sprite_index=spr_basicleft;
else
    obj_iji.sprite_index=spr_basic;
(instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chat75";
}
Collision Event with object obj_iji:

execute code:

if (!triggered){
triggered=1;
with (obj_cdoor){
    if (tag){
        scr_sound("glo_doorclose");
        vspeed=16;
        }
    }
alarm[0]=7;
obj_iji.speed=0;
obj_iji.sprite_index=spr_basic;
timeline_index=tim_proxima;
timeline_running=true;
timeline_position=0;
sprite_index=spr_proxima_body;
}

if (!commence && !global.ignoreall){
    commence=1;
    obj_proxima.alarm[5]=30;
    obj_proxima.alarm[2]=1;
    obj_proxima.order=2;
    with (obj_proxima)
        scr_proximatalk(2);
    }

Draw Event:

execute code:

if (obj_proxima.nukewait>=(1+global.difficulty*3) || obj_proxima.chargingnuke){
    with (obj_terminal){
        if ((!obj_proximatrigger.elecpad2 && trigger==23) || (!obj_proximatrigger.elecpad1 && trigger==24)){
            if (sprite_index!=spr_terminal){
                sprite_index=spr_terminal;
                proxbeep=1;
                }
            }
        else
            proxbeep=0;
        }
    }

with (obj_terminal){
    if (sprite_index==spr_terminal && global.bosshint){
        draw_sprite(spr_proximause,image_index,x,y-30);
        }
    if (!prevbeep && proxbeep){
        with (obj_iji)
            scr_sound("glo_cracksuccess");
        }
    prevbeep=proxbeep;
    }
______________________________________________________

Information about object: obj_proximabar
Sprite: spr_bossbar
Solid: false
Visible: true
Depth: -100
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=2/3;
originalwidth=(obj_proxima.maxhp);
if (global.suddendeath)
    originalwidth=1;
yadjust=-48;
Draw Event:

execute code:

if (yadjust<0 && obj_proxima.hp>0)
yadjust+=8;

x=floor(x);
y=floor(y);

if (!global.specialbake){
if (!global.suddendeath){
    draw_set_color(c_black);
    draw_rectangle(x-originalwidth-1,y-1,x+originalwidth,y+15,0);
    draw_set_color(c_white);
    draw_rectangle(x-originalwidth-1,y-1,x+originalwidth,y+15,1);
    }
else{
    draw_set_color(c_black);
    draw_rectangle(x-originalwidth-2,y-1,x+originalwidth+1,y+15,0);
    draw_set_color(c_white);
    draw_rectangle(x-originalwidth-2,y-1,x+originalwidth+1,y+15,1);
    }
}
draw_sprite(spr_bossnames,2,x,y-10);

if (obj_proxima.hp>0){
    if (!global.specialbake){
        if (obj_proxima.hp>100){
            width=(obj_proxima.hp-100)*2;
            width2=200;
            }
        else
            width2=(obj_proxima.hp)*2;
        if (obj_proxima.hp<=100)
            draw_sprite_stretched(sprite_index,image_index,x-width2,y,width2*2,15);
        else
            draw_sprite_stretched(sprite_index,1,x-width2,y,width2*2,15);
        if (obj_proxima.hp>100){
            draw_sprite_stretched(spr_bossbar2,image_index,x-width,y,width*2,15);
            draw_sprite(spr_bossx,0,x,y+7);
            }
        }
    else{
        draw_sprite(spr_hpbarback,9,x-81,y);
        draw_sprite(spr_hpbar,ceil((obj_proxima.hp/obj_proxima.maxhp)*20),x-80,y);
        }
    }

//Energy tanks (15 px gap)
if (!global.suddendeath && !global.specialbake){
    draw_set_color(c_black);
    draw_rectangle(x-201,y+21,x+9-201,y+30,0);
    draw_set_color(c_white);
    draw_rectangle(x-201,y+21,x+9-201,y+30,1);
    if (obj_proxima.hp>100)
        draw_sprite_stretched(spr_bossbar2,image_index,x+1-201,y+22,8,8);
    }

if (obj_proxima.hp<=0){
    yadjust-=8;
    if (yadjust<-64)
        instance_destroy();
    }
______________________________________________________

Information about object: obj_proxima
Sprite: spr_proxima_open
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_komatoenemy
Mask: 

Create Event:

execute code:

talk[0]=0;
talk[1]=0;
talk[2]=0;
talkcyc=100;
nukepower=5; //damage
if (global.healthlevel==10)
    nukepower=4; //the Nuke is a Fatality attack
state=0;
antigrav=0;
hp=200;
maxhp=200;
armor=200;
maxarmor=200;
if (global.suddendeath){
    hp=1;
    maxhp=1;
    armor=100;
    maxarmor=100;
    }
resistance=1;
security=40;
hs=0;
vs=20;
image_single=0;
proxima=1;
enemytype=17;

//Measure arena
xleft=1216;
xright=1568;
xmiddle=1392;
Alarm Event for alarm 0:

execute code:

idle=1;
state=0;
Alarm Event for alarm 1:

execute code:

//Spread rockets
if (fire==1){
    scr_sound("wea_rock");
    if (x>obj_iji.x){
        tempid=instance_create(x+11,y,obj_komatorocket);
        tempid.speed=-global.rocketspeed;
        tempid.image_single=1;
        tempid=instance_create(x+11,y,obj_komatorocket);
        tempid.speed=global.rocketspeed-2;
        tempid.direction=174;
        tempid.image_single=1;
        tempid=instance_create(x+11,y,obj_komatorocket);
        tempid.speed=global.rocketspeed-4;
        tempid.direction=186;
        tempid.image_single=1;
        tempid=instance_create(x+11,y,obj_rocketlaunch);
        tempid.sprite_index=spr_rocketlaunchleft;
        }
    else{
        tempid=instance_create(x,y,obj_komatorocket);
        tempid.speed=global.rocketspeed;
        tempid.image_single=0;
        tempid=instance_create(x,y,obj_komatorocket);
        tempid.speed=global.rocketspeed-2;
        tempid.direction=6;
        tempid.image_single=0;
        tempid=instance_create(x,y,obj_komatorocket);
        tempid.speed=global.rocketspeed-4;
        tempid.direction=-6;
        tempid.image_single=0;
        instance_create(x,y,obj_rocketlaunch);
        }
    idle=1;
    fire=0;
    }

//Splintergun
if (fire==2){
    scr_sound("wea_spli");
    fireamount-=1;
    if (fireamount<=0){
        idle=1;
        fire=0;
        }
    else{
        instance_create(x,y,obj_shockspark);
        tempid=instance_create(x,y,obj_enemyshockball);
        tempid.direction=point_direction(x,y,xtarget,ytarget);
        tempid.speed=30;
        if (!global.specialbake){
            tempid=instance_create(x,y,obj_shockshell);
            tempid.vspeed=-(3+(random(6)));
            tempid.hspeed=-3+(random(6));
            tempid.short=1;
            }
        alarm[1]=3;
        }
    }

//MPFB
if (fire==3){
    scr_sound("wea_mpfb");
    tempid=instance_create(x,y,obj_komatompfb);
    tempid.speed=global.mpfbspeed-10+global.difficulty*5;
    tempid.direction=point_direction(x,y,obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2,obj_iji.bbox_top+(obj_iji.bbox_bottom-obj_iji.bbox_top)/2)
    tempid.wakeless=1;
    tempid=instance_create(x,y,obj_komatompfb);
    tempid.speed=global.mpfbspeed-12+global.difficulty*4;
    tempid.direction=point_direction(x,y,obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2,obj_iji.bbox_top+(obj_iji.bbox_bottom-obj_iji.bbox_top)/2)
    tempid.wakeless=1;
    tempid=instance_create(x,y,obj_komatompfb);
    tempid.speed=global.mpfbspeed-14+global.difficulty*3;
    tempid.direction=point_direction(x,y,obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2,obj_iji.bbox_top+(obj_iji.bbox_bottom-obj_iji.bbox_top)/2)
    tempid.wakeless=1;
    idle=1;
    fire=0;
    scr_shakescreen(1);
    }

//Plasma cannon
if (fire==4){
    fireamount-=1;
    if (fireamount<=0){
        idle=1;
        fire=0;
        state=0;
        }
    else{
        scr_sound("wea_plas");
        scr_shakescreen(3);
        alarm[1]=30-global.difficulty*5;
        tempid=instance_create(x,y,obj_enemyplasmatrace);
        if (x>obj_iji.x){
            with (tempid)
                scr_enemyplasmatrace(0);
            }
        else{
            with (tempid)
                scr_enemyplasmatrace(1);
            }
        }
    }
Alarm Event for alarm 2:

execute code:

if (instance_number(obj_iji)==1){

if (makebeep==1){
    makebeep=0;
    //scr_proximatalk(3);
    }

//Move to middle
if (order==1){
    state=1;
    idle=1;
    if (x1152)
        ydestination=1152;
    if (y1152)
        ydestination=1152;
    if (y
Alarm Event for alarm 3:

execute code:

//Nuke attack

chargingnuke=0;
obj_sabot.flash=0;
with (obj_proximasupercharge)
    instance_destroy();

//Iji is not affected during ougi
if (instance_number(obj_ougi)==0){
    with (obj_iji){
        fatality=1;
        takingpain=0;
        global.damage+=obj_proxima.nukepower;
        global.armor=0;
        global.hp-=obj_proxima.nukepower;
        if (x
Alarm Event for alarm 4:

execute code:

if (electrified>0){
    alarm[4]=5;
    instance_create(x-32+random(64),y-32+random(64),obj_nanospark);
    }
electrified-=1;

Alarm Event for alarm 5:

execute code:

//Failsafe orders
alarm[5]=30;
if (order!=1 && order!=3 && !chargingnuke && electrified==0 && state!=6){
    if (x<(xleft-128) || x>(xright+128)){
        state=1;
        idle=0;
        fire=0;
        order=1;
        alarm[0]=0;
        alarm[1]=0;
        alarm[2]=1;
        alarm[3]=0;
        }
    }

//Last resort safety catch
if (ydestination<608 || ydestination>1152 || xdestination<1088 || xdestination>1664){
    state=1;
    idle=0;
    fire=0;
    order=1;
    alarm[0]=0;
    alarm[1]=0;
    alarm[2]=1;
    alarm[3]=0;
}
Step Event:

execute code:

xtargetprev=obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2;
ytargetprev=obj_iji.bbox_top+(obj_iji.bbox_bottom-obj_iji.bbox_top)/2;
xtarget=xtargetprev-(xtargetprev-xtarget)/1.02;
ytarget=ytargetprev-(ytargetprev-ytarget)/1.02;

//speak phrase
if (talkcyc<100){
    talkcyc+=1;
    if (talkcyc==2){
        if (talk[0]==0)
            scr_sound("pro_beep1");
        else if (talk[0]==1)
            scr_sound("pro_beep2");
        else if (talk[0]==2)
            scr_sound("pro_beep3");
        }
    else if (talkcyc==6){
        if (talk[1]==0)
            scr_sound("pro_beep1");
        else if (talk[1]==1)
            scr_sound("pro_beep2");
        else if (talk[1]==2)
            scr_sound("pro_beep3");
        }
    else if (talkcyc==10){
        if (talk[2]==0)
            scr_sound("pro_beep1");
        else if (talk[2]==1)
            scr_sound("pro_beep2");
        else if (talk[2]==2)
            scr_sound("pro_beep3");
        }
    }


cfised=0;
thored=0;
if (instance_number(obj_iji)==0){
    order=0;
    state=0;
    fire=0;
    alarm[1]=0;
    alarm[2]=0;
    alarm[3]=0;
    alarm[4]=0;
    chargingnuke=0;
    with (obj_proximasupercharge)
        instance_destroy();
    }

//Charge Nuke
if (chargingnuke){
    if (alarm[3]<30)
        obj_sabot.flash+=0.035;
    else
        obj_sabot.flash+=0.0212;
    instance_create(x-512+random(1024),y-512+random(1024),obj_proximasupercharge);
    sndchargecyc+=1;
    if (sndchargecyc>=sndchargecycmax){
        sndcharge+=1;
        sndchargecyc=0;
        if (alarm[3]>=300){
            scr_sound("tor_gather");
            sndchargecycmax=20;
            }
        else if (alarm[3]>=150){
            scr_sound("tor_gather_q01");
            sndchargecycmax=15;
            }
        else{
            scr_sound("tor_gather_q03");
            sndchargecycmax=10;
            }
        }
    }

//Move left or right until halfway to "middle"
if (state==1){
    if (xxgashere && x>xmiddle+16)
        gasl=2;
    }

//Move freely until halfway to target
if (state==2){
    if (xxgashere && x>xdestination+16)
        gasl=2;
    if (yygashere && y>ydestination+16)
        gasu=2;
    }

//Tackle (move towards Iji)
if (state==3){
    seeiji=1;
    if (collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1))
        seeiji=0;
    if (y<=736 && obj_iji.y>800 && (collision_line(x-64,y,obj_iji.x,obj_iji.y,obj_block,0,1) || collision_line(x+64,y,obj_iji.x,obj_iji.y,obj_block,0,1)))
        seeiji=0;
    else if (y<=960 && obj_iji.y>1024 && (collision_line(x-64,y,obj_iji.x,obj_iji.y,obj_block,0,1) || collision_line(x+64,y,obj_iji.x,obj_iji.y,obj_block,0,1)))
        seeiji=0;
    if (seeiji==0){
        if (x>xmiddle){
            if (xobj_iji.y-20)
                    gasu=2;
                }
            gasl=2;
            gasr=0;
            }
        else{
            if (x>xleft){
                if (yobj_iji.y)
                    gasu=2;
                }
            gasl=0;
            gasr=2;
            }
        }
    else{
        if (xobj_iji.x+32)
            gasl=2;
        if (yobj_iji.y)
            gasu=2;
        }
    }

//Spread rockets (and MPFB)
if (state==4){
    if (yygashere && y>ydestination+16)
        gasu=2;
    if (fire==1)
        instance_create(x-30+random(60),y-30+random(60),obj_bigsmoke);
    if (fire==3)
        instance_create(x-30+random(60),y-30+random(60),obj_mpfbspark);
    }

//Splintergun emit sparks
if (fire==2)
    instance_create(x-30+random(60),y-30+random(60),obj_shockemit);
//Rocket hail emit smoke
if (fire==5)
        instance_create(x-30+random(60),y-30+random(60),obj_bigsmoke);

//Plasma cannon
if (state==5){
    if (yobj_iji.y+20)
        gasu=2;
    instance_create(x-30+random(60),y-30+random(60),obj_shockemit);
    }

//REROLL ORDERS WHEN IDLE (done with current order)
if (idle && abs(hs)<=4 && abs(vs)<=4 && gasl==0 && gasr==0 && gasu==0 && gasd==0 && (fire!=7 || abs(hs)<5)){
    //After electrocution
    if (electrified>0){
        order=3;
        alarm[2]=1;
        idle=0;
        }
    //Move around while Splintergunning
    else if (fire==2){
        order=2;
        alarm[2]=1;
        idle=0;
        }
    //After Rocket hail
    else if (fire==5){
        scr_sound("wea_rock");
        repeat(5+global.difficulty*2)
            instance_create(x,y,obj_rockethail);
        repeat(5)
            instance_create(x,y,obj_smokepoint);
        order=4+floor(random(5));
        alarm[2]=1;
        idle=0;
        fire=0;
        }
    //Power down and charge Nuke
    else if (fire==7){
        order=0;
        idle=0;
        fire=0;
        streaming=0;
        antigrav=0;
        nukewait=0;
        alarm[3]=450;
        chargingnuke=1;
        scr_sound("pro_powerdown");
        }
    //Normal stuff
    else{
        idle=0;
        state=0;
        if (xxright)
            order=1;
        else{
            nukewait+=1;
            if (nukewait>=10+global.difficulty*2){
                order=9;
                }
            else{
                order=4+floor(random(5));
                }
            }
        alarm[2]=1;
        }
    }

//No antigrav
if (!antigrav && (place_free(x,y+vs+1)))
    vs+=1;

//Limit speed
if (hs>20)
    hs=20;
if (vs>20)
    vs=20;
if (hs<-20)
    hs=-20;
if (vs<-20)
    vs=-20;
if (hs>-0.25 && hs<0.25)
    hs=0;
if (vs>-0.25 && vs<0.25)
    vs=0;

//Move
x+=hs;
y+=vs;

//Collisions
//Ortagonal
ortagonal=0;
if (!place_free(x+hs,y+vs)){
    if (abs(hs)+abs(vs)>5){
        scr_shakescreen(1);
        scr_sound("glo_land");
        with (obj_paper){
            if (distance_to_object(obj_proxima)<64 && dead==0)
                dead=1;
            }
        }
    if (!place_free(x,y-abs(vs))){
        move_contact_solid(90,30);
        vs*=-0.5;
        if (vs<2)
            vs=2;
        ortagonal=1;
        }
    else if (!place_free(x,y+abs(vs))){
        move_contact_solid(270,30);
        if (!antigrav && vs>3){
            instance_create(x-32,y+54,obj_smoke);
            instance_create(x+32,y+54,obj_smoke);
            repeat(5)
                instance_create(x-32+random(64),y+50+random(8),obj_smoke);
            }
        vs*=-0.5;
        ortagonal=1;
        if (vs>-2 && antigrav)
            vs=-2;
        }
    if (!place_free(x-abs(hs),y)){
        move_contact_solid(180,30);
        hs*=-0.5;
        if (hs<2)
            hs=2;
        ortagonal=1;
        }
    else if (!place_free(x+abs(hs),y)){
        move_contact_solid(0,30);
        hs*=-0.5;
        if (hs>-2)
            hs=-2;
        ortagonal=1;
        }
//Diagonal
    if (!place_free(x-abs(hs),y-abs(vs)) && !ortagonal){
        move_contact_solid(135,30);
        hs*=-0.5;
        vs*=-0.5;
        }
    else if (!place_free(x-abs(hs),y+abs(vs)) && !ortagonal){
        move_contact_solid(225,30);
        hs*=-0.5;
        vs*=-0.5;
        }
    else if (!place_free(x+abs(hs),y+abs(vs)) && !ortagonal){
        move_contact_solid(315,30);
        hs*=-0.5;
        vs*=-0.5;
        }
    else if (!place_free(x+abs(hs),y-abs(vs)) && !ortagonal){
        move_contact_solid(45,30);
        hs*=-0.5;
        vs*=-0.5;
        }
    }

//Gas
if (gasl>0){
    if (antigrav && place_free(x-6,y))
        hs-=0.5;
    gasl-=1;
    }
else if(hs<0 && antigrav)
    hs+=0.5;

if (gasr>0){
    if (antigrav && place_free(x+6,y))
        hs+=0.5;
    gasr-=1;
    }
else if(hs>0 && antigrav)
    hs-=0.5;

if (gasu>0){
    if (antigrav && place_free(x,y-6))
        vs-=0.5;
    gasu-=1;
    }
else if(vs<0 && antigrav)
    vs+=0.5;

if (gasd>0){
    if (antigrav && place_free(x,y+6))
        vs+=0.5;
    gasd-=1;
    }
else if(vs>0 && antigrav)
    vs-=0.5;

//Exhaust gas and move
if (gasl<1) gasl=0;
if (gasd<1) gasd=0;
if (gasr<1) gasr=0;
if (gasu<1) gasu=0;
if (hs>-0.5 && hs<0.5) hs=0;
if (vs>-0.5 && vs<0.5) vs=0;

//Rest and friction
if (!antigrav && !place_free(x,y+2)){
    if (vs>0 && vs<2){
        move_contact_solid(270,10)
        vs=0;
        }
    if (hs<-2)
        hs+=1;
    else if (hs>2)
        hs-=1;
    else
        hs=0;
    }

//Wave
if (antigrav && streamcyc==0){
    if (gasu) (instance_create(x+hs-64,y+vs-64,obj_proxima_wave)).sprite_index=spr_proxima_wavedown;
    if (gasl) (instance_create(x+hs-64,y+vs-64,obj_proxima_wave)).sprite_index=spr_proxima_waveright;
    if (gasd) (instance_create(x+hs-64,y+vs-64,obj_proxima_wave)).sprite_index=spr_proxima_waveup;
    if (gasr) (instance_create(x+hs-64,y+vs-64,obj_proxima_wave)).sprite_index=spr_proxima_waveleft;
    }
if (state==6 && angleshift>0 && vs!=0){
    tempid=instance_create(x+hs-64,y+vs-64,obj_proxima_wave);
    if (vs<0)
        tempid.sprite_index=spr_proxima_wavedown2;
    if (vs>0)
        tempid.sprite_index=spr_proxima_waveup2;
    }

//Armor
if (armor<=0){
    hp-=1;
    while (armor<=0)
        armor+=200;
    }
if (armor10){
    scr_shakescreen(3);
    if (chargingnuke==0)
        obj_sabot.flash=0.2;
    image_single+=1;
    if (image_single==1)
        (instance_create(x+44,y-29,obj_proximacord)).type=1;
    if (image_single==2)
        (instance_create(x-49,y+9,obj_proximacord)).type=2;
    if (image_single==3)
        (instance_create(x+27,y+43,obj_proximacord)).type=3;
    repeat(5)
        instance_create(x-32+random(64),y-32+random(64),obj_smokepoint);
    repeat(4)
        instance_create(x-32+random(64),y-32+random(64),obj_nanospark);
    if (global.detail==0){
        repeat(30){
            tempid=instance_create(x-32+random(64),y-32+random(64),obj_scrapwhite);
            tempid.direction=random(360);
            tempid.speed=random(10)+6;
            }
    repeat(20)
        instance_create(x-32+random(64),y-32+random(64),obj_thorspark);
        }
    }

//Death
if (hp<=0){
    if (!nosupercharge)
        instance_create(x,y,obj_supercharge);
    scr_sound("exp_boss");
    with (obj_sabot)
        scr_stopmusic();
    obj_proximatrigger.alarm[2]=20;
    repeat(10)
        instance_create(x,y,obj_nanospark2);
    with (obj_proximacord)
        instance_destroy();
    scr_shakescreen(4);
    instance_create(x,y,obj_harmlessexplosion);
    repeat(5)
        instance_create(x,y,obj_smokepoint);
    obj_sabot.flash=0.8;
    repeat(150)
        instance_create(obj_proxima.x-100+random(200),obj_proxima.y-100+random(200),obj_proximaflash);
    instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2),obj_megaflare);
    obj_proximatrigger.alarm[1]=90;
    with (obj_enemyrocket)
        instance_destroy();
    with (obj_komatorocket)
        instance_destroy();
    with (obj_enemympfb)
        instance_destroy();
    with (obj_komatompfb)
        instance_destroy();
    with (obj_enemyshockball)
        instance_destroy();
    with (obj_rockethail)
        instance_destroy();
    with (obj_proximasupercharge)
        instance_destroy();
    repeat(70)
        instance_create(x-32+random(64),y-32+random(64),obj_shardhail);
    repeat(20)
        instance_create(x-32+random(64),y-32+random(64),obj_thorspark);
    (instance_create(x,y,obj_whiteblanket)).alarm[0]=2;
    instance_destroy();
    }

//Electrified
if (electrified>0)
    instance_create(x-64+random(128),y-64+random(128),obj_bigsmoke);

//Angular shift
if ((state==1 || state==2 || state==6) && x>xmiddle-270 && x
Collision Event with object obj_bullet:

execute code:

with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stagger)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else{
        instance_create(x,y,obj_bullethit);
        instance_create(x,y,obj_smoke);
        }
    instance_destroy();
    }
Collision Event with object obj_pellet:

execute code:

with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stun)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else{
        instance_create(x,y,obj_bullethit);
        instance_create(x,y,obj_smoke);
        }
    instance_destroy();
    }
Collision Event with object obj_kickbox:

execute code:

kicked=1;
if (!ignorekick && other.image_index==0){
    scr_sound("glo_kick");
    script_execute(scr_shakescreen,1);
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=global.strengthlevel*0.25+10;
        if (global.facing==0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    if (other.sprite_index==spr_detonator){
        if (x
Collision Event with object obj_rocketexplosion:

execute code:

if (other.dud==0){
    hp-=1*global.atmult;
    hstemp=5-(distance_to_object(obj_explosioncenter)/10);
    if (x
Collision Event with object obj_mpfbexplosion:

execute code:

if (other.dud==0){
    hp-=1.5*global.atmult;
    hstemp=5-(distance_to_object(obj_explosioncenter)/10);
    if (hstemp<1)
        hstemp=1;
    if (x
Collision Event with object obj_pulse:

execute code:

with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (other.linker){
    if (global.topmessage=="0"){
        global.erasetop=0;
        global.topmessage="Pulse link could not be established";
        }
    }
Collision Event with object obj_enemyrocketexplosion:

execute code:

if (other.dud==0){
    hp-=1;
    hstemp=5-(distance_to_object(obj_explosioncenter)/10);
    if (x
Collision Event with object obj_shockexplosion:

execute code:

if (other.dud==0){
    hp-=1*global.atmult;
    hstemp=5-(distance_to_object(obj_explosioncenter)/10);
    if (x
Collision Event with object obj_enemympfbexplosion:

execute code:

if (other.dud==0){
    hp-=1.5;
    hstemp=5-(distance_to_object(obj_explosioncenter)/10);
    if (hstemp<1)
        hstemp=1;
    if (x
Collision Event with object obj_pushbox:

execute code:

if (dead==0){
    global.erasetop=0;
    global.topmessage="You need a Crack skill of "+string(security)+" to crack Sentinel Proxima";
    scr_sound("glo_crackfail");
    }
Collision Event with object obj_xp:

execute code:

//Do nothing
Collision Event with object obj_thor:

execute code:

if (thored==0){
    armor-=35*global.atmult;
    thored=1;
    }
Collision Event with object obj_proximasupercharge:

execute code:

with (other){
    (instance_create(x,y,obj_ijisplat)).direction=direction+180;
    instance_destroy();
    }
Collision Event with object obj_electropad:

execute code:

if (other.active){
    nosupercharge=1;
    scr_sound("glo_electrocute");
    scr_proximatalk(3);
    (instance_create(x,y,obj_whiteblanket)).alarm[0]=2;
    if (other.tag==1){
        obj_proximatrigger.elecpad1=0;
        (instance_create(x,y,obj_pickuphealth)).hspeed=3;
        }
    else{
        obj_proximatrigger.elecpad2=0;
        (instance_create(x,y,obj_pickuphealth)).hspeed=-3;
        }
    other.active=0;
    hp-=(45-global.difficulty*10);
    chargingnuke=0;
    with (obj_proximasupercharge)
        instance_destroy();
    obj_sabot.flash=1;
    scr_shakescreen(5);
    nukewait=0;
    order=3;//1
    state=0;
    hs=0;
    vs=0;
    gasl=0;
    gasd=0;
    gasu=0;
    gasr=0;
    streaming=1;
    antigrav=1;
    fire=0;
    idle=0;
    electrified=30;
    alarm[0]=0;
    alarm[1]=0;
    alarm[2]=60;
    alarm[4]=5;
    alarm[3]=0;
    alarm[5]=90;
    makebeep=1;
    repeat(5)
        instance_create(x-32+random(64),y-32+random(64),obj_smokepoint);
    if (global.detail==0){
        repeat(30){
            tempid=instance_create(x-32+random(64),y-32+random(64),obj_scrapwhite);
            tempid.direction=random(360);
            tempid.speed=random(10)+6;
            }
        }
    }
Collision Event with object obj_impulseexplosion:

execute code:

if (other.dud==0){
    hstemp=5-(distance_to_object(obj_explosioncenter)/10);
    if (x
Draw Event:

execute code:

//Draw
if (obj_proximatrigger.commence)
    scr_proximaarrow();
draw_sprite(sprite_index,image_single,x,y);
if (streaming)
    draw_sprite(spr_proxima_streams,streamcyc,x-64,y-64);
streamcyc+=1;
if (streamcyc>=4)
    streamcyc=0;

//Draw target
if (state==3){
    temprand=floor(random(3));
    if (global.specialbake)
        temprand=1;
    if (temprand>0){
        draw_set_color(c_ltgray);
        draw_line_width(x,y,obj_iji.bbox_left,obj_iji.bbox_top,temprand);
        draw_line_width(x,y,obj_iji.bbox_right,obj_iji.bbox_bottom,temprand);
        }
    }
if (fire==2){
    temprand=floor(random(3));
    if (global.specialbake)
        temprand=1;
    if (temprand>0){
        draw_set_color(c_red);
        draw_line_width(x,y,xtarget,ytarget,temprand);
        }
    }
if (fire==3){
    temprand=floor(random(3));
    if (global.specialbake)
        temprand=1;
    if (temprand>0){
        draw_set_color(c_aqua);
        draw_line_width(x,y,obj_iji.bbox_left+(obj_iji.bbox_right-obj__iji.bbox_left)/2,obj_iji.bbox_top+(obj_iji.bbox_bottom-obj__iji.bbox_top)/2,temprand);
        }
    }
if (fire==4){
    with (obj_proximalaser){
        x=obj_proxima.x;
        y=obj_proxima.y;
        repeats=0;
        if (obj_proxima.x>obj_iji.x){
            while (place_free(x,y) && !place_meeting(x,y,obj_iji) && repeats<1000){
                repeats+=1;
                x-=10;
                }
            if (!place_free(x,y))
                move_outside_solid(0,32);
            }
        else{
            while (place_free(x,y) && !place_meeting(x,y,obj_iji) && repeats<1000){
                repeats+=1;
                x+=10;
                }
            if (!place_free(x,y))
                move_outside_solid(180,32);
            }
        }
    temprand=floor(random(3));
    if (global.specialbake)
        temprand=1;
    if (temprand>0){
        draw_set_color(c_red);
        draw_line_width(x,y,obj_proximalaser.x,obj_proximalaser.y,temprand);
        }
    }
______________________________________________________

Information about object: obj_proxima_wave
Sprite: spr_proxima_wavedown
Solid: false
Visible: false
Depth: 1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=4;
alarm[1]=1;

Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 1:

execute code:

visible=1;
image_index=0;
______________________________________________________

Information about object: obj_proximaflash
Sprite: spr_nanoflash
Solid: false
Visible: true
Depth: -10
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (distance_to_object(obj_proxima)>100)
    instance_destroy();
direction=point_direction(x,y,obj_proxima.x,obj_proxima.y);
direction+=180;
speed=random(16)+2;
Step Event:

execute code:

speed*=0.94;
if (speed<0.05){
    instance_create(x,y,obj_ijisplat);
    instance_destroy();
    }
______________________________________________________

Information about object: obj_proximalaser
Sprite: spr_sabot
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_rockethail
Sprite: spr_rockethail
Solid: false
Visible: true
Depth: 1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

direction=random(180);
speed=random(10)+15;
alarm[0]=70+random(20);
alarm[1]=5;
gravity=1;
gravity_direction=270;
image_speed=-1+random(2);
Alarm Event for alarm 0:

execute code:

scr_shakescreen(2);
instance_create(x,y,obj_enemyrocketexplosion);
instance_create(x,y,obj_explosioncenter);
repeat(5){
    tempid=instance_create(x,y-4,obj_scrapbrown);
    tempid.speed=15+random(8);
    tempid.direction=random(360);
    tempid.alarm[2]=5;
    }
instance_destroy();
Alarm Event for alarm 1:

execute code:

alarm[1]=2;
if (round(image_index) mod 8==0 || round(image_index) mod 8==-8)
    instance_create(x-8,y,obj_smoke);
if (round(image_index) mod 8==1 || round(image_index) mod 8==-7)
    instance_create(x-8,y+8,obj_smoke);
if (round(image_index) mod 8==2 || round(image_index) mod 8==-6)
    instance_create(x,y+8,obj_smoke);
if (round(image_index) mod 8==3 || round(image_index) mod 8==-5)
    instance_create(x+8,y+8,obj_smoke);
if (round(image_index) mod 8==4 || round(image_index) mod 8==-4)
    instance_create(x+8,y,obj_smoke);
if (round(image_index) mod 8==5 || round(image_index) mod 8==-3)
    instance_create(x+8,y-8,obj_smoke);
if (round(image_index) mod 8==6 || round(image_index) mod 8==-2)
    instance_create(x,y-8,obj_smoke);
if (round(image_index) mod 8==7 || round(image_index) mod 8==-1)
    instance_create(x-8,y-8,obj_smoke);

Collision Event with object obj_block:

execute code:

if (vspeed>0 && vspeed<5 && !place_free(x,y+5)){
    vspeed=0;
    hspeed*=0.5;
    move_contact_solid(270,10);
    image_speed=0;
    }
else{
    move_bounce_solid(0);
    scr_sound("glo_debris");
    }
speed*=0.5;
image_speed*=0.5;

______________________________________________________

Information about object: obj_proximasupercharge
Sprite: spr_nanoflash
Solid: false
Visible: true
Depth: -10
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

direction=point_direction(x,y,obj_proxima.x,obj_proxima.y);
speed=0.1;
Step Event:

execute code:

direction=point_direction(x,y,obj_proxima.x,obj_proxima.y);
speed*=1.2;
if (speed>40)
    speed=40;
Draw Event:

execute code:

if (global.specialbake)
draw_sprite(spr_nanoflash,floor(random(3)),x,y);
else{
draw_set_color(c_white);
draw_line(x,y,x+hspeed,y+vspeed);
}
______________________________________________________

Information about object: obj_electropad
Sprite: spr_electropad
Solid: false
Visible: true
Depth: 10
Persistent: false
Parent: 
Mask: spr_electropadbox

Create Event:

execute code:

active=0;
Collision Event with object obj_iji:

execute code:

if (active){
    with (other){
        if (!takingpain && !recovering){
            scr_sound("glo_electrocute");
            notech=10;
            global.damage+=3;
            global.hp-=3;
            scr_pain();
            scr_shakescreen(4);
            //obj_sabot.flash=1;
            }
        }
    }
Draw Event:

execute code:

draw_sprite(sprite_index,0,x,y);
if (active){
if (global.specialbake){
    draw_set_color(c_white);
    draw_line(x+9+floor(random(3)),y,x+9+floor(random(3)),y-128);
    draw_line(x+54+floor(random(3)),y,x+54+floor(random(3)),y-128);
    }
else{
x1=x+random(30);
y1=y+20+random(120)-144;
x2=x+8+random(30);
y2=y+20+random(120)-144;
x3=x+27+random(30);
y3=y+20+random(120)-144;
x4=x+30+random(30);
y4=y+20+random(120)-144;
draw_set_color(c_white);
pensize=ceil(random(2));
draw_line_width(x+10,y,x1,y1,pensize);
draw_line_width(x1,y1,x+10,y-128,pensize);
pensize=ceil(random(2));
draw_line_width(x+23,y,x2,y2,pensize);
draw_line_width(x2,y2,x+23,y-128,pensize);
pensize=ceil(random(2));
draw_line_width(x+42,y,x3,y3,pensize);
draw_line_width(x3,y3,x+42,y-128,pensize);
pensize=ceil(random(2));
draw_line_width(x+55,y,x4,y4,pensize);
draw_line_width(x4,y4,x+55,y-128,pensize);
}
}
______________________________________________________

Information about object: obj_komatodetail1
Sprite: spr_komatodetail1
Solid: false
Visible: false
Depth: 5
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=random(20)+20;
Alarm Event for alarm 0:

execute code:

visible=1;
image_index=0;
alarm[1]=9;
Alarm Event for alarm 1:

execute code:

visible=0;
alarm[0]=random(20)+20;
______________________________________________________

Information about object: obj_komatodetail2
Sprite: spr_komatodetail2
Solid: false
Visible: false
Depth: 5
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=random(10)+20;
Alarm Event for alarm 0:

execute code:

visible=1;
alarm[1]=4;
Alarm Event for alarm 1:

execute code:

visible=0;
alarm[0]=random(10)+20;
______________________________________________________

Information about object: obj_komatodetail3
Sprite: spr_komatodetail3
Solid: false
Visible: true
Depth: 5
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.25+random(+.25);
alarm[0]=random(10)+10;
Alarm Event for alarm 0:

execute code:

image_speed=0.25+random(+.25);
alarm[0]=random(10)+10;
______________________________________________________

Information about object: obj_komatodetail4
Sprite: spr_komatodetail4
Solid: false
Visible: false
Depth: 5
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=random(4)+20;
image_speed=0.5;
Alarm Event for alarm 0:

execute code:

visible=1;
image_index=0;
alarm[1]=9;
Alarm Event for alarm 1:

execute code:

visible=0;
alarm[0]=random(4)+20;
______________________________________________________

Information about object: obj_komatodetail5
Sprite: spr_komatodetail5
Solid: false
Visible: false
Depth: 5
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=random(10)+20;
image_speed=0.5;
Alarm Event for alarm 0:

execute code:

visible=1;
image_index=0;
alarm[1]=9;
Alarm Event for alarm 1:

execute code:

visible=0;
alarm[0]=random(10)+20;
______________________________________________________

Information about object: obj_komatodetail6
Sprite: spr_komatodetail6
Solid: false
Visible: false
Depth: 5
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=random(10)+20;
Alarm Event for alarm 0:

execute code:

visible=1;
image_index=0;
alarm[1]=9;
Alarm Event for alarm 1:

execute code:

visible=0;
alarm[0]=random(10)+20;
______________________________________________________

Information about object: obj_komatodetail7
Sprite: spr_komatodetail7
Solid: false
Visible: false
Depth: 5
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=random(10)+20;
Alarm Event for alarm 0:

execute code:

visible=1;
image_index=0;
alarm[1]=9;
Alarm Event for alarm 1:

execute code:

visible=0;
alarm[0]=random(10)+20;
______________________________________________________

Information about object: obj_rain1
Sprite: spr_rain1
Solid: false
Visible: true
Depth: 999999
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_rain2
Sprite: spr_rain2
Solid: false
Visible: true
Depth: 999999
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_shardhail
Sprite: spr_scrapwhite1
Solid: false
Visible: true
Depth: 1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

direction=random(180);
speed=random(10)+15;
gravity=0.8;
gravity_direction=270;
image_speed=random(4)-2;
image_index=floor(random(4));
rand=random(3);
if (rand>1)
    sprite_index=spr_scrapwhite2;
if (rand>2)
    sprite_index=spr_scrapwhite3;
alarm[0]=random(60)+30;
Alarm Event for alarm 0:

execute code:

alarm[0]=random(60)+30;
instance_create(x,y,obj_smoke);
Collision Event with object obj_block:

execute code:

if (vspeed>0 && vspeed<5 && !place_free(x,y+5)){
    vspeed=0;
    hspeed*=0.5;
    move_contact_solid(270,10);
    image_speed=0;
    }
else{
    temprand=random(1);
    if (temprand>0.8)
        scr_sound("glo_debris");
    move_bounce_solid(0);
    }
speed*=0.5;
image_speed*=0.5;

______________________________________________________

Information about object: obj_trogdorscreen
Sprite: spr_trogdorscreen
Solid: false
Visible: true
Depth: 10000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.1;
______________________________________________________

Information about object: obj_proximacord
Sprite: 
Solid: false
Visible: true
Depth: 1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

x1=xstart;
y1=ystart;
x2=xstart+25;
y2=ystart+25;
x3=xstart+50;
y3=ystart+50;
x4=xstart+75;
y4=ystart+75;

Draw Event:

execute code:

if (!global.specialbake){
x4=x3-(x3-x4)/1.8;
if (y3
______________________________________________________

Information about object: obj_komatoannihilator
Sprite: spr_komatoannihilator_bodyleft
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_komatoenemy
Mask: spr_annimask

Create Event:

execute code:

killtype=2;
state=0;
image_single=0;
alarm[2]=25+random(10);
hp=80;
maxhp=80;
armor=200;
maxarmor=200;
if (global.suddendeath){
    hp=1;
    maxhp=1;
    armor=100;
    maxarmor=100;
    }
enemytype=14;
resistance=10;
security=10;
hyperstrength=10;
Alarm Event for alarm 0:

set variable reloading to 0
Alarm Event for alarm 2:

execute code:

//Short range distance
if (weapon==1)
    targetdistance=400;
else
    targetdistance=192;

//Choose target
if (targetrival==0){
    if (targetiji>0)
        target=obj_iji.id;
    else{
        angry=0;
        alarm[5]=300;
        }
    }
if (!instance_exists(target)){
angry=0;
targetrival=0;
if (targetiji>0 && target!=obj_iji.id){
    angry=1;
    alarm[5]=300;
    target=obj_iji.id;
    }
}

//Begin taking action
//Rocket has fired, Destroy
if (firingrocket==1){
    if (facing==0 && place_meeting(x-40,y+96,target) && place_free(x-128,y-64) && !target.takingpain && target.ytarget.x){
            facing=0;
            sprite_index=spr_komatoannihilator_walkleft;
            }
        else{
            facing=1;
            sprite_index=spr_komatoannihilator_walk;
            }
        exit;
        }
    }
//Roam
randomstate=random(1);
if (angry==0){
    if (randomstate<0.6){
        state=0;
        alarm[2]=60+random(90);
        if (facing==0)
            sprite_index=spr_komatoannihilator_bodyleft;
        else
            sprite_index=spr_komatoannihilator_body;
        }
    else{
        state=1;
        facing=0;
        image_single=0;
        walkcyc=0;
        alarm[2]=24;
        sprite_index=spr_komatoannihilator_walkleft;
        if (randomstate>0.8){
            facing=1;
            sprite_index=spr_komatoannihilator_walk;
            }
        }
    }
//Angry
else{
    state=1;
    //Face target
    if (x+50>target.x)
        facing=0;
    else
        facing=1;

    //Too much idling
    if (idling==4){
        randomstate=random(0.7)+0.3;
        idling=0;
        }
    //Destroy, Walk
    if (randomstate<0.3){
        if (facing==0 && place_meeting(x-40,y+96,target) && place_free(x-128,y-64) && !target.takingpain && target.y=0.3 && randomstate<0.6 && abs((x+50)-target.x)=0.6 && abs(y+50-target.y)<192){
        idling=0;
        global.annitemp=0;
        instance_create(x-128+facing*228,y+100,obj_annicheck);
        with (obj_annicheck){
            if (place_free(x,y))
                global.annitemp=1;
            }
        if (!oops && global.annitemp && x+50<=target.x){
            tempid=instance_create(x+124,y+100,obj_chargetell);
            tempid.tempid=id;
            state=0;
            sprite_index=spr_komatoannihilator_body;
            alarm[6]=20;
            firingrocket=1;
            if (randomstate>=0.9 && abs((x+50)-obj_iji.x)<350){
                scr_sound("tor_gather");
                firingplasma=1;
                alarm[2]=23;
                alarm[6]=20;
                }
            else{
                scr_sound("wea_charge");
                firingplasma=0;
                shockcount=ceil(random(3))+global.difficulty;
                }
            }
        else if (!oops&& global.annitemp && x+50>target.x){
            tempid=instance_create(x-24,y+100,obj_chargetell);
            tempid.tempid=id;
            state=0;
            sprite_index=spr_komatoannihilator_bodyleft;
            alarm[6]=20;
            firingrocket=1;
            if (randomstate>=0.9 && abs((x+50)-obj_iji.x)<350){
                scr_sound("tor_gather");
                firingplasma=1;
                alarm[2]=23;
                alarm[6]=20;
                }
            else{
                scr_sound("wea_charge");
                firingplasma=0;
                shockcount=ceil(random(3))+global.difficulty;
                }
            }
        //Rocket test failed, just walk
        else{
            state=1;
            idling+=1;
            alarm[2]=24;
            image_single=0;
            walkcyc=0;
            if (facing==0)
                sprite_index=spr_komatoannihilator_walkleft;
            else
                sprite_index=spr_komatoannihilator_walk;
            }
        }
    //Nothing done, just walk
    else if (destroy==0){
        state=1;
        idling+=1;
        alarm[2]=24;
        image_single=0;
        walkcyc=0;
        if (facing==0)
            sprite_index=spr_komatoannihilator_walkleft;
        else
            sprite_index=spr_komatoannihilator_walk;
        }
    }

Alarm Event for alarm 5:

set variable angry to 0
Alarm Event for alarm 6:

execute code:

//Shocksplinter
if (firingplasma==0){
    if (shockcount>1){
        shockcount-=1;
        alarm[6]=3;
        }
    else
        alarm[2]=3;
    if (facing==0){
        if (cracked==0){
            global.tempid=id;
            with (obj_chargetell){
                if (tempid==global.tempid)
                    instance_destroy();
                }
            scr_sound("wea_shoc");
            tempid=instance_create(x-24,y+100,obj_enemyshock);
            tempid.target=id;
            tempid.speed=-global.shockspeed;
            sprite_index=spr_komatoannihilator_fireleft;
            }
        else{
            scr_sound("exp_shoc");
            tempid=instance_create(x-24,y+100,obj_enemyshockexplosion);
            tempid.target=id;
            instance_create(x-24,y+100,obj_explosioncenter);
            script_execute(scr_shakescreen,3);
            oops=1;
            }
        }
    else{
        if (cracked==0){
            global.tempid=id;
            with (obj_chargetell){
                if (tempid==global.tempid)
                    instance_destroy();
                }
            scr_sound("wea_shoc");
            tempid=instance_create(x+124,y+100,obj_enemyshock);
            tempid.target=id;
            tempid.speed=global.shockspeed;
            sprite_index=spr_komatoannihilator_fire;
            }
        else{
            scr_sound("exp_shoc");
            tempid=instance_create(x+124,y+100,obj_enemyshockexplosion);
            tempid.target=id;
            instance_create(x+124,y+100,obj_explosioncenter);
            script_execute(scr_shakescreen,3);
            oops=1;
            }
        }
    }
//Plasma cannon
else{
    scr_shakescreen(3);
    if (facing==0){
        if (cracked==0){
            scr_sound("wea_plas");
            tempid=instance_create(x-24,y+100,obj_enemyplasmatrace);
            with (tempid) scr_enemyplasmatrace(0);
            tempid.target=id;
            sprite_index=spr_komatoannihilator_fireleft;
            }
        else{
            scr_sound("exp_shoc");
            tempid=instance_create(x-24,y+100,obj_enemyshockexplosion);
            tempid.target=id;
            instance_create(x-24,y+100,obj_explosioncenter);
            oops=1;
            }
        }
    else{
        if (cracked==0){
            scr_sound("wea_plas");
            tempid=instance_create(x+124,y+100,obj_enemyplasmatrace);
            with (tempid) scr_enemyplasmatrace(1);
            sprite_index=spr_komatoannihilator_fire;
            }
        else{
            scr_sound("exp_shoc");
            tempid=instance_create(x+124,y+100,obj_enemyshockexplosion);
            tempid.target=id;
            instance_create(x+124,y+100,obj_explosioncenter);
            oops=1;
            }
        }
    }
Alarm Event for alarm 7:

execute code:

state=0;
alarm[2]=300;
sprite_index=spr_komatoannihilator_body;
facing=1;
Step Event:

execute code:

//"FIND"
if (angry && !prevangry)
    scr_sound("ann_find");
prevangry=angry;

scr_komatovision(50,100);
if (targetiji>0)
targetiji-=1;
if (targetrival>0)
targetrival-=1;
if (scouring>0)
scouring-=1;
if (hp==maxhp)
scouring=0;
cfised=0;
thored=0;
plasmaed=0;
//Lose sight
if ((x < obj_shakescreen.x-1000) || (x > obj_shakescreen.x+1000) || (y < obj_shakescreen.y-800) || (y > obj_shakescreen.y+800)){
    angry=0;
    alarm[5]=0;
    if (state==2)
        state=0;
    }
//Crack fail
if (crackmark==1 && distance_to_object(obj_iji) > 50){
    script_execute(scr_crackfail);
    script_execute(scr_terminatecrack);
    global.erasetop=0;
    global.topmessage="Subject is too far away to crack";
    }
if (crackmark==1 && hp<=0){
    script_execute(scr_crackfail);
    script_execute(scr_terminatecrack);
    global.erasetop=0;
    global.topmessage="CRACKING FAILED: Subject is dead";
    }
//Smoke when charging
if (firingrocket==1 && state==0)
    smoking+=1;
if (smoking>=5){
    smoking=0;
    if (facing==0)
        (instance_create(x-24,y+100,obj_shockspark)).vspeed=3;
    else
        (instance_create(x+124,y+100,obj_shockspark)).vspeed=3;
    }
//Armor
if (armor
Collision Event with object obj_bullet:

execute code:

if (!other.stagger)
    ijikill=1;
if (state!=10){
    targetiji=300;
    if (angry==0 && (state==0 || state==1)){
        alarm[2]=1;
        tempid=instance_create(x+50,y+100,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+50,y+100,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    angry=1;
    alarm[5]=300;
    }
if (!other.stagger){
    armor-=10*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stagger)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_pellet:

execute code:

if (!other.stun)
    ijikill=1;
if (state!=10){
    targetiji=300;
    if (angry==0 && (state==0 || state==1)){
        alarm[2]=1;
        tempid=instance_create(x+50,y+100,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+50,y+100,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    angry=1;
    alarm[5]=300;
    }
if (!other.stun){
    armor-=9*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stun)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_enemybullet:

execute code:

ijikill=0;
if (angry==0 && (state==0 || state==1)){
    alarm[2]=1;
    }
if (state!=10){
    angry=1;
    targetrival=300;
    target=other.target;
    alarm[5]=300;
    }
armor-=4;
instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_kickbox:

execute code:

global.temp=0;
with (other){
    if (place_meeting(x,y,obj_door) || place_meeting(x,y,obj_cdoor))
        global.temp=1;
    if (sprite_index==spr_detonator)
        global.temp=0;
    }
if (global.temp==0){
if (other.image_index==0){
    scr_sound("glo_kick");
    ijikill=1;
    if (state!=10)
        targetiji=300;
    script_execute(scr_shakescreen,1);
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (global.facing==0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    
if (angry==0 && (state==0 || state==1)){
    alarm[2]=1;
    tempid=instance_create(x+50,y+100,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+50,y+100,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    if (state!=10){
        angry=1;
        alarm[5]=300;
        }
    if (global.strengthlevel>=resistance){
        hp-=1;
        script_execute(scr_annihilatorpain);
        }
    else{
        global.erasetop=0;
        global.topmessage="You need a Strength of "+string(resistance)+" to damage a Komato Annihilator";
        }
    }
}
Collision Event with object obj_rocketexplosion:

execute code:

if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    if (state!=10)
        targetiji=300;
if (angry==0 && (state==0 || state==1)){
    tempid=instance_create(x+50,y+100,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+50,y+100,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    hp-=2*global.atmult;
    script_execute(scr_annihilatorpain);
    }
Collision Event with object obj_mpfbexplosion:

execute code:

if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    if (state!=10)
        targetiji=300;
if (angry==0 && (state==0 || state==1)){
    tempid=instance_create(x+50,y+100,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+50,y+100,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    hp-=3*global.atmult;
    if (hp<=0 && ijikill && killtype<5)
        killtype=5;
    if (other.banana && hp<=0 && ijikill && killtype<8)
        killtype=8;
    script_execute(scr_annihilatorpain);
    }
Collision Event with object obj_pulse:

execute code:

if (!other.linker)
    ijikill=1;
if (state!=10)
    targetiji=300;
if (other.hyper==1 && armor=resistance){
    scr_sound("glo_kick");
    hp-=1;
    armor=maxarmor;
    script_execute(scr_annihilatorpain);
    script_execute(scr_shakescreen,2);
    repeat(3){
        tempid=instance_create(other.x,other.y,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (other.hspeed<0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    }
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (angry==0 && (state==0 || state==1)){
    alarm[2]=1;
    tempid=instance_create(x+50,y+100,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+50,y+100,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
if (state!=10){
    angry=1;
    alarm[5]=300;
    }
if (!other.linker){
    armor-=2*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
    }
if (other.linker)
    scr_pulselink(6);
Collision Event with object obj_enemyrocketexplosion:

execute code:

if (other.dud==0 && other.annihilator==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    hp-=2;
    scr_annihilatorpain();
    if (state!=10){
        targetrival=300;
        target=other.target;
        }
    }
Collision Event with object obj_shockexplosion:

execute code:

if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    if (state!=10)
        targetiji=300;
if (angry==0 && (state==0 || state==1)){
    tempid=instance_create(x+50,y+100,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+50,y+100,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    hp-=2*global.atmult;
    script_execute(scr_annihilatorpain);
    }
Collision Event with object obj_shockballexplosion:

execute code:

if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    if (state!=10)
        targetiji=300;
    armor-=30*global.atmult;
if (angry==0 && (state==0 || state==1)){
    alarm[2]=1;
    tempid=instance_create(x+50,y+100,obj_visionchecke)
    tempid.direction=0;
    tempid.speed=16;
    tempid=instance_create(x+50,y+100,obj_visionchecke)
    tempid.direction=180;
    tempid.speed=16;
    }
    if (state!=10){
        angry=1;
        alarm[5]=300;
        }
    }
Collision Event with object obj_swipe:

execute code:

if (other.dud==0){
    scr_sound("glo_kick");
    ijikill=0;
    hp-=1;
    scr_annihilatorpain();
    if (state!=10){
        targetrival=300;
        target=other.target;
        }
    scr_shakescreen(1);
    }
Collision Event with object obj_kickbox_elite:

execute code:

if (other.dud==0){
    scr_sound("glo_kick");
    ijikill=0;
    hp-=1;
    scr_annihilatorpain();
    if (state!=10){
        targetrival=300;
        target=other.target;
        }
    scr_shakescreen(1);
    }
Collision Event with object obj_enemympfbexplosion:

execute code:

if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    hp-=3;
    script_execute(scr_annihilatorpain);
    if (state!=10){
        targetrival=300;
        target=other.target;
        }
    }
Collision Event with object obj_pushbox:

execute code:

    ijikill=1;
    if (global.cracklevel>=security){
        if (cracked==0){
            global.security=security;
            crackmark=1;
            if (global.suddendeath)
                global.cracktext="Komato Annihilator#H1 A100 W10#Security: ";
            else
                global.cracktext="Komato Annihilator#H80 A200 W10#Security: ";
            global.cracktext+=string(global.security);
            if (global.security==10)
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            else
                global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
            script_execute(scr_begincrack);
            }
        else{
            global.erasetop=0;
            global.topmessage="Subject has already been cracked";
            }
        }
    else{
        global.erasetop=0;
        global.topmessage="You need a Crack skill of "+string(security)+" to crack a Komato Annihilator";
        scr_sound("glo_crackfail");
        global.ignorestation=90;
        }
Collision Event with object obj_thor:

execute code:

if (thored==0){
    ijikill=1;
    if (state!=10)
        targetiji=300;
    if (angry==0 && (state==0 || state==1)){
        alarm[2]=1;
        tempid=instance_create(x+50,y+100,obj_visionchecke)
        tempid.direction=0;
        tempid.speed=16;
        tempid=instance_create(x+50,y+100,obj_visionchecke)
        tempid.direction=180;
        tempid.speed=16;
        }
    armor-=35*global.atmult;
    if (hp==1 && armor<=0 && ijikill && killtype<5)
        killtype=5;
    if (state!=10){
        angry=1;
        alarm[5]=300;
        }
    thored=1;
    }
Collision Event with object obj_enemyshockballexplosion:

execute code:

if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    armor-=30;
    }
Collision Event with object obj_enemyshockexplosion:

execute code:

if (other.dud==0){
    if (other.ijis)
        ijikill=1;
    else
        ijikill=0;
    hp-=2;
    script_execute(scr_annihilatorpain);
    }
Draw Event:

execute code:

//Destroy
if (electrocute){
    eleccyc+=1;
    scr_shakescreen(1);
    if (eleccyc==2)
        eleccyc2=1;
    if (eleccyc==4){
        eleccyc=0;
        eleccyc2=0;
        }
    }
else{
    eleccyc=0;
    eleccyc2=0;
    }

if (sprite_index==spr_komatoannihilator_walk || sprite_index==spr_komatoannihilator_walkleft){
    basiccyc=0;
    basicbob=0;
    draw_sprite(sprite_index,image_single,x,y)
    }
else if (state==10 && facing==0){
    draw_sprite(sprite_index,image_single,x,y)
    if (!goback){
        if (targettype==0){
            if (obj_iji.overload==3 && obj_iji.overloadtime>0)
                targetalpha=random(0.2);
            else
                targetalpha=1;
            if (image_single==0)
                draw_sprite_ext(spr_destroyed_iji_left,0,x-27,y+56,1,1,0,c_white,targetalpha);
            if (image_single==1)
                draw_sprite_ext(spr_destroyed_iji_left,0,x-30,y+37,1,1,0,c_white,targetalpha);
            if (image_single==2)
                draw_sprite_ext(spr_destroyed_iji_left,0,x-23,y+11,1,1,0,c_white,targetalpha);
            if (image_single==3)
                draw_sprite_ext(spr_destroyed_iji_left,eleccyc2,x-2,y-21,1,1,0,c_white,targetalpha);
            }
        if (targettype==2){
            if (image_single==0)
                draw_sprite(spr_destroyed_commander_left,0,x-23,y+50);
            if (image_single==1)
                draw_sprite(spr_destroyed_commander_left,0,x-26,y+31);
            if (image_single==2)
                draw_sprite(spr_destroyed_commander_left,0,x-20,y+5);
            if (image_single==3)
                draw_sprite(spr_destroyed_commander_left,eleccyc2,x,y-23);
            }
        if (targettype==3){
            if (image_single==0)
                draw_sprite(spr_destroyed_elite_left,0,x-18,y+50);
            if (image_single==1)
                draw_sprite(spr_destroyed_elite_left,0,x-23,y+35);
            if (image_single==2)
                draw_sprite(spr_destroyed_elite_left,0,x-15,y+7);
            if (image_single==3)
                draw_sprite(spr_destroyed_elite_left,eleccyc2,x+2,y-22);
            }
        }
    }
else if (state==10 && facing==1){
    draw_sprite(sprite_index,image_single,x,y)
    if (!goback){
        if (targettype==0){
            if (obj_iji.overload==3 && obj_iji.overloadtime>0)
                targetalpha=random(0.2);
            else
                targetalpha=1;
            if (image_single==0)
                draw_sprite_ext(spr_destroyed_iji,0,x+123,y+60,1,1,0,c_white,targetalpha);
            if (image_single==1)
                draw_sprite_ext(spr_destroyed_iji,0,x+128,y+39,1,1,0,c_white,targetalpha);
            if (image_single==2)
                draw_sprite_ext(spr_destroyed_iji,0,x+124,y+13,1,1,0,c_white,targetalpha);
            if (image_single==3)
                draw_sprite_ext(spr_destroyed_iji,eleccyc2,x+108,y-18,1,1,0,c_white,targetalpha);
            }
        if (targettype==2){
            if (image_single==0)
                draw_sprite(spr_destroyed_commander,0,x+124,y+55);
            if (image_single==1)
                draw_sprite(spr_destroyed_commander,0,x+128,y+35);
            if (image_single==2)
                draw_sprite(spr_destroyed_commander,0,x+121,y+9);
            if (image_single==3)
                draw_sprite(spr_destroyed_commander,eleccyc2,x+104,y-22);
            }
        if (targettype==3){
            if (image_single==0)
                draw_sprite(spr_destroyed_elite,0,x+120,y+50);
            if (image_single==1)
                draw_sprite(spr_destroyed_elite,0,x+123,y+32);
            if (image_single==2)
                draw_sprite(spr_destroyed_elite,0,x+117,y+6);
            if (image_single==3)
                draw_sprite(spr_destroyed_elite,eleccyc2,x+99,y-24);
            }
        }
    }

//Basic
else if (sprite_index==spr_komatoannihilator_body || sprite_index==spr_komatoannihilator_bodyleft){
    basiccyc+=1;
    if (basiccyc==10)
        basicbob=-1;
    if (basiccyc==15)
        basicbob=-2;
    if (basiccyc==25)
        basicbob=-1;
    if (basiccyc==30){
        basicbob=0;
        basiccyc=0;
        }
    if (firingrocket){
        basiccyc=0;
        basicbob=0;
        }
    if (facing==0){
        draw_sprite(spr_komatoannihilator_bodyleft,0,x,y)
        draw_sprite(spr_komatoannihilator_armsleft,0,x,y+basicbob);
        }
    else{
        draw_sprite(spr_komatoannihilator_body,0,x,y)
        draw_sprite(spr_komatoannihilator_arms,0,x,y+basicbob);
        }
    }
else{
    basiccyc=0;
    basicbob=0;
    draw_sprite(sprite_index,image_single,x,y)
    }
______________________________________________________

Information about object: obj_nanooverload
Sprite: spr_nanooverload
Solid: false
Visible: true
Depth: 1
Persistent: false
Parent: 
Mask: spr_log1

Create Event:

execute code:

if (global.difficulty==2)
    instance_destroy();
Step Event:

execute code:

scr_ammofloat();
tempid=instance_create(x+16,y+16,obj_ijiblood);
tempid.speed=8;
tempid.gravity=0;
tempid.depth=2;
Collision Event with object obj_iji:

execute code:

scr_sound("glo_getoverload");
instance_destroy();
(instance_create(x+16,y+16,obj_megaflash)).mute=1;
scr_nanoexplosion(16,16);
obj_iji.overloadtime=1499;
obj_iji.overcyc=0;
obj_iji.image_alpha=1;
global.erasetop=0;

kills=global.sector;
if (global.sector==0)
    kills=10;
//Low spectrum (stealth)
if ((global.kills+global.totkills)<=kills*global.neutralkc){
    while (i<1000){
        i+=1;
        obj_iji.overload=ceil(random(8)+2);
        if (obj_iji.overload==3 || obj_iji.overload==6 || obj_iji.overload==8 || obj_iji.overload==9 || obj_iji.overload==10)
            i=1000;
        }
    }
//High spectrum (berserk)
else if ((global.kills+global.totkills)>kills*global.berserkkc){
    while (i<1000){
        i+=1;
        obj_iji.overload=ceil(random(10));
        if (obj_iji.overload==1 || obj_iji.overload==2 || obj_iji.overload==4 || obj_iji.overload==7)
            i=1000;
        }
    }
//Medium spectrum (moderate)
else
    obj_iji.overload=ceil(random(10));

if (obj_iji.overload==1){
    global.topmessage="NANOCHAOS - Retaliate if damaged";
    obj_iji.overloadtime=749;
    }
if (obj_iji.overload==2){
    global.topmessage="NANOSPARK - Disrupt nearby personal Nanofields";
    obj_iji.overloadtime=749;
    }
if (obj_iji.overload==3)
    global.topmessage="NANOVIS - Partial invisibility";
if (obj_iji.overload==4){
    global.topmessage="NANOBLAST - Explosive Shotgun";
    obj_iji.overloadtime=749;
    }
if (obj_iji.overload==5){
    global.topmessage="NANOMIRROR - Automatic Resonance reflector";
    obj_iji.overloadtime=749;
    }
if (obj_iji.overload==6)
    global.topmessage="NANOLIFE - Revive once if killed";
if (obj_iji.overload==7){
    global.topmessage="NANORAGE - No ammo spent";
    obj_iji.overloadtime=749;
    }
if (obj_iji.overload==8){
    global.topmessage="NANOSHIELD - No armor damage";
    obj_iji.overloadtime=749;
    }
if (obj_iji.overload==9)
    global.topmessage="NANOFORGE - When hurt by enemy fire, turn it into ammo";
if (obj_iji.overload==10)
    global.topmessage="NANOREFLEX - Automatically Tech all damage";

______________________________________________________

Information about object: obj_nanochaos
Sprite: spr_nanooverload
Solid: false
Visible: true
Depth: 1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

direction=random(180);
speed=random(16)+16;
alarm[0]=20+random(30);
alarm[1]=5;
gravity=1;
gravity_direction=270;
Alarm Event for alarm 0:

execute code:

scr_shakescreen(2);
instance_create(x,y,obj_enemyrocketexplosion);
instance_create(x,y,obj_explosioncenter);
instance_destroy();
Alarm Event for alarm 1:

execute code:

alarm[1]=5;
instance_create(x,y,obj_ijisplat);
Step Event:

execute code:

scr_outside();
Collision Event with object obj_block:

execute code:

if (vspeed>0 && vspeed<5 && !place_free(x,y+5)){
    vspeed=0;
    hspeed*=0.5;
    move_contact_solid(270,10);
    }
else
    move_bounce_solid(0);
speed*=0.5;
Collision Event with object obj_glass:

execute code:

if (vspeed>0 && vspeed<5 && !place_free(x,y+5)){
    vspeed=0;
    hspeed*=0.5;
    move_contact_all(270,10);
    }
else
    move_bounce_all(0);
speed*=0.5;

______________________________________________________

Information about object: obj_blastpellet
Sprite: spr_bullet
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

nanoblast=1;
scr_bullet();
alarm[0]=1;
Alarm Event for alarm 0:

execute code:

instance_destroy();
______________________________________________________

Information about object: obj_liftoff
Sprite: spr_liftoff
Solid: true
Visible: true
Depth: 3
Persistent: false
Parent: obj_block
Mask: 

Step Event:

execute code:

if (countdown){
timer+=1;
//Enemy waves
if (timer==148){
    with (obj_teledest){
        if (dest==1 || dest==2){
            instance_create(x+16,y,obj_megaflash);
            scr_sound("glo_teleport");
            repeat(30){
                tempid=instance_create(x+random(32),y-32+random(64),obj_thorspark);
                tempid.speed=random(3.5)-1.5;
                tempid.direction=90;
                tempid.gravity=0.2;
                }
            }
        }
    }
if (timer==150){
    with (obj_teledest){
        if (dest==1 || dest==2){
            tempid=instance_create(x+8,y-29,obj_komatotrooper);
            tempid.sec8special=1;
            if (dest==1)
                tempid.killdataid=643;
            else if (dest==2)
                tempid.killdataid=644;
            if (tempid.x>obj_iji.x)
                tempid.facing=0;
            else
                tempid.facing=1;
            }
        }
    }

if (timer>155 && timer<545){
    tempcheck=1;
    with (obj_komatotrooper){
        if (sec8special==1)
            obj_liftoff.tempcheck=0;
        }
    if (tempcheck==1)
        timer=545;
    }

if (timer==548){
    with (obj_teledest){
        if (dest==1 || dest==2){
            instance_create(x+16,y,obj_megaflash);
            scr_sound("glo_teleport");
            repeat(30){
                tempid=instance_create(x+random(32),y-32+random(64),obj_thorspark);
                tempid.speed=random(3.5)-1.5;
                tempid.direction=90;
                tempid.gravity=0.2;
                }
            }
        }
    }
if (timer==550){
    with (obj_teledest){
        if (dest==1 || dest==2){
            tempid=instance_create(x+8,y-29,obj_komatotrooper);
            tempid.sec8special=1;
            tempid.weapon=1;
            if (dest==1)
                tempid.killdataid=645;
            else if (dest==2)
                tempid.killdataid=646;
            if (tempid.x>obj_iji.x)
                tempid.facing=0;
            else
                tempid.facing=1;
            }
        }
    }

if (timer>555 && timer<945){
    tempcheck=1;
    with (obj_komatotrooper){
        if (sec8special==1)
            obj_liftoff.tempcheck=0;
        }
    if (tempcheck==1)
        timer=945;
    }

if (timer==948){
    with (obj_teledest){
        if (dest==1 || dest==2){
            instance_create(x+16,y,obj_megaflash);
            scr_sound("glo_teleport");
            repeat(30){
                tempid=instance_create(x+random(32),y-32+random(64),obj_thorspark);
                tempid.speed=random(3.5)-1.5;
                tempid.direction=90;
                tempid.gravity=0.2;
                }
            }
        }
    }
if (timer==950){
    with (obj_teledest){
        if (dest==1 || dest==2){
            tempid=instance_create(x+4,y-44,obj_komatoberserker);
            tempid.sec8special=1;
            tempid.weapon=1;
            if (dest==1)
                tempid.killdataid=647;
            else if (dest==2)
                tempid.killdataid=648;
            if (tempid.x+6>obj_iji.x)
                tempid.facing=0;
            else
                tempid.facing=1;
            }
        }
    }

if (timer>955 && timer<975){
    tempcheck=1;
    with (obj_komatotrooper){
        if (sec8special==1)
            obj_liftoff.tempcheck=0;
        }
    with (obj_komatoberserker){
        if (sec8special==1)
            obj_liftoff.tempcheck=0;
        }
    if (tempcheck==1)
        timer=975;
    }

//Activate
if (timer>=980){
    (instance_create(x,y,obj_lift)).liftoff=1;
    repeat(30){
        tempid=instance_create(x+64,y-5,obj_thorspark);
        tempid.speed=random(8)+8;
        tempid.direction=random(100)+40;
        }
    instance_destroy();
    global.erasetop=0;
    global.topmessage="LIFT TEMPORARILY ACTIVATED";
    with (obj_cdoor){
        if (trigger==25){
            scr_sound("glo_door");
            cracked=1;
            vspeed=-16;
            alarm[0]=6;
            }
        }
    }
}
______________________________________________________

Information about object: obj_strikeblock
Sprite: spr_crate2
Solid: true
Visible: false
Depth: 0
Persistent: false
Parent: obj_block
Mask: 

______________________________________________________

Information about object: obj_sec8trigger1
Sprite: spr_door
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_komatoannihilator:

execute code:

instance_activate_object(obj_strikeblock);
with (obj_strikeblock){
    if (x<4800){
    instance_destroy();
    repeat(8-global.specialbake*6){
        tempid=instance_create(x+random(32),y+random(32),obj_scrapwhite);
        tempid.speed=random(8)+2;
        tempid.direction=random(360);
        }
        }
    }
instance_destroy();
scr_sound("exp_meta");
scr_sound("glo_kick");
tile_layer_hide(666);
______________________________________________________

Information about object: obj_sec8trigger2
Sprite: spr_door
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

if (global.state==6 || global.state==7 || global.state==8){ //Stand up when knockdown
    global.state=2;
    vspeed=0;
    hspeed=0;
    velocity=0;
    if (facing==0)
        sprite_index=spr_jumpleft;
    else
        sprite_index=spr_jump;
    image_index=0;
    image_single=-1;
    image_speed=0.5;
    if (!place_free(x,y)){
        if (place_free(x,y+30))
            y+=30;
        else if (place_free(x,y-30))
            y-=30;
        }
    }

scr_sound("exp_nuke");
scr_sound("exp_mpfb");
obj_sabot.sec8trigger2=1;
obj_iji.goaroundcyen=1;
obj_iji.notech=10;
instance_activate_object(obj_strikeblock);
with (obj_strikeblock)
    instance_destroy();
instance_destroy();
tile_layer_hide(667);
with (obj_iji){
    takingpain=0;
    recovering=0;
    scr_knockdown(2,4,1);
    takingpain=0;
    recovering=0;
    }
scr_shakescreen(5);
with (obj_sec8can){
    if (x>7904 && x<8064)
        instance_destroy();
    }
with (obj_alliedenemy){
    if (x>7904 && x<8064 && hp>0){
        scr_nanoexplosion(15,30);
        instance_destroy();
        }
    else if (x<7950){
        if (enemytype==2 || enemytype==10 || enemytype==11){
            hp-=100;
            ijikill=0;
            scr_enemyknockdown(1,10);
            }
        }
    else if (x>7950){
        if (enemytype==2 || enemytype==10 || enemytype==11){
            hp-=100;
            ijikill=0;
            scr_enemyknockdown(2,10);
            }
        }
    }

instance_create(7936,1280,obj_hammershot);
repeat(50){
    tempid=instance_create(7936+random(128),768+random(768),obj_scrapwhite);
    if (tempid.x<7968)
        direction=170+random(20);
    else
        direction=350+random(20);
    tempid.speed=8+random(12);
    }

(instance_create(x,y,obj_whiteblanket)).alarm[0]=2;
______________________________________________________

Information about object: obj_hammershot
Sprite: spr_hammershot
Solid: false
Visible: true
Depth: -80
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

repeat(30){
    tempid=instance_create(x+8+random(112),672+random(1000),obj_hammerspark);
    tempid.vspeed=2+random(4);
    tempid.hspeed=0;
    }
Draw Event:

execute code:

draw_sprite_stretched(sprite_index,0,x,y-1000,128,2000);
fade+=1;
if (fade>=8)
    instance_destroy();
______________________________________________________

Information about object: obj_crumble81
Sprite: spr_crumble81
Solid: false
Visible: true
Depth: 1
Persistent: false
Parent: 
Mask: 

End Step Event:

execute code:

if (place_meeting(x,y-4,obj_iji)){
    instance_destroy();
    scr_shakescreen(1);
    scr_sound("exp_meta");
    scr_sound("glo_kick");
    repeat(30){
        tempid=instance_create(x+random(96)+32,y+random(64),obj_scrapwhite);
        tempid.speed=random(2)+2;
        tempid.direction=random(180)+180;
        }
    }
______________________________________________________

Information about object: obj_trapmine
Sprite: spr_trapmine
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

if (global.state==1 && !global.ignoreall){
global.ignoreall=1;
with (other){
timeline_index=tim_getribbon;
timeline_running=true;
timeline_position=0;
with (obj_visioncheck)
    instance_destroy();
with (obj_visionchecke)
    instance_destroy();
}
}

______________________________________________________

Information about object: obj_sec8trigger3
Sprite: spr_block
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_turret:

execute code:

if (!activated){
activated=1;
instance_create(5008,3984,obj_sec8egg);
instance_create(5008,3984,obj_megaflash);
instance_create(4992,3824,obj_supercharge);
instance_create(4992,3824,obj_megaflash);
}
______________________________________________________

Information about object: obj_sec8egg
Sprite: spr_sec8egg
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

gravity=1;
gravity_direction=270;
Collision Event with object obj_iji:

execute code:

if (!triggered && (global.state==1 || global.state==2)){
triggered=1;
(instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chat85";
}
Collision Event with object obj_block:

execute code:

if (vspeed<2){
vspeed=0;
move_contact_solid(270,32);
}
else{
move_contact_solid(270,32);
vspeed=-vspeed;
vspeed/=2;
}
______________________________________________________

Information about object: obj_armed_trapmine
Sprite: spr_trapmine
Solid: false
Visible: true
Depth: 5
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

if (distance_to_object(obj_megaflash)<100){
repeat(2){
    instance_create(x+12,y+3,obj_enemyrocketexplosion);
    instance_create(x+12,y+3,obj_explosioncenter);
    }
with (obj_teledest){
    if (dest==obj_armed_trapmine.dest){
        instance_destroy();
        instance_create(x,y,obj_exteledest);
        }
    }
instance_destroy();
scr_shakescreen(3);
}
______________________________________________________

Information about object: obj_exitsign
Sprite: spr_exitsign
Solid: false
Visible: true
Depth: 1000
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

cyc+=1;
if (cyc==4)
    visible=0;
if (cyc==8){
    visible=1;
    cyc=0;
    }
______________________________________________________

Information about object: obj_sec8hologram
Sprite: spr_komatotrooper_basic
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_dan
Sprite: spr_dan_sit
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.1;
Step Event:

execute code:

if (electro){
    obj_sabot.hammerflash=1;
    obj_sabot.flash=random(0.8);
    scr_shakescreen(2);
    instance_create(x+4,y-17,obj_nanospark);
    }
if ((image_index>5 || image_single==7) && toasted && sprite_index==spr_dan_fall){
    cyc+=1;
    if (cyc==2){
        cyc=0;
        instance_create(x+random(56)-43,y+random(6)+32,obj_smoke);
        }
    }
______________________________________________________

Information about object: obj_exteledest
Sprite: spr_teledest
Solid: false
Visible: true
Depth: 5
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=1;
smoke=30;
Step Event:

execute code:

if (smoke>0){
cyc+=1;
if (cyc=3){
cyc=0;
instance_create(x+random(30)+2,y+random(4)+26,obj_smoke);
smoke-=1;
}
}
______________________________________________________

Information about object: obj_sec8hologram2
Sprite: spr_shotgunflash
Solid: false
Visible: true
Depth: -10
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=0;
alarm[0]=2;
Alarm Event for alarm 0:

execute code:

instance_destroy();
______________________________________________________

Information about object: obj_checkpoint
Sprite: spr_checkpoint
Solid: false
Visible: true
Depth: 5
Persistent: false
Parent: obj_teledest
Mask: spr_door

Create Event:

execute code:

image_single=2;
dest=999;
Step Event:

execute code:

if (image_index==2)
    image_index=0;
Collision Event with object obj_iji:

execute code:

if (state==0){
    global.erasetop=0;
    global.topmessage="ONE-TIME CHECKPOINT ACTIVATED";
    global.ignorestation=60;
    state=1;
    scr_sound("glo_cracksuccess");
    image_single=-1;
    image_speed=0.5;
    if (global.sector==7 && tag==1)
        obj_iji.sec7cp1=1;
    else if (global.sector==9 && tag==1)
        obj_iji.sec9cp1=1;
    else if (global.sector==0 && tag==1)
        obj_iji.secxcp1=1;
    else if (global.sector==7 && tag==2){
        obj_shakescreen.alarm[0]=2;
        obj_iji.sec7cp2=1;
        if (obj_iji.sec7cp1==1)
            global.topmessage="ONE-TIME CHECKPOINT ACTIVATED - PREVIOUS CHECKPOINT DISABLED";
        }
    else if (global.sector==9 && tag==2){
        obj_shakescreen.alarm[0]=2;
        obj_iji.sec9cp2=1;
        if (obj_iji.sec9cp1==1)
            global.topmessage="ONE-TIME CHECKPOINT ACTIVATED - PREVIOUS CHECKPOINT DISABLED";
        }
    else if (global.sector==0 && tag==2){
        obj_shakescreen.alarm[0]=2;
        obj_iji.secxcp2=1;
        if (obj_iji.secxcp1==1)
            global.topmessage="ONE-TIME CHECKPOINT ACTIVATED - PREVIOUS CHECKPOINT DISABLED";
        }
    }
else if (state==2){
    global.erasetop=0;
    global.topmessage="Checkpoint exhausted";
    global.ignorestation=60;
    }

______________________________________________________

Information about object: obj_whiteflash2
Sprite: spr_sabot
Solid: false
Visible: true
Depth: -1000000
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

cyc+=1;
if (cyc==1){
draw_set_color(c_white);
draw_rectangle(view_xview[0]-2,view_yview[0]-2,view_xview[0]+view_wview[0]+2,view_yview[0]+view_hview[0]+2,0);
}
if (cyc>=2)
instance_destroy();

______________________________________________________

Information about object: obj_corpse1
Sprite: spr_corpse1
Solid: false
Visible: false
Depth: 101
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_corpse2
Sprite: spr_tasenelite_death
Solid: false
Visible: false
Depth: 101
Persistent: false
Parent: obj_corpse1
Mask: 

Create Event:

execute code:

image_single=12;
______________________________________________________

Information about object: obj_corpse3
Sprite: spr_corpse3
Solid: false
Visible: false
Depth: 5
Persistent: false
Parent: obj_corpse1
Mask: 

______________________________________________________

Information about object: obj_corpse4
Sprite: spr_corpse4
Solid: false
Visible: false
Depth: 5
Persistent: false
Parent: obj_corpse1
Mask: 

______________________________________________________

Information about object: obj_corpse5
Sprite: spr_corpse5
Solid: false
Visible: false
Depth: 5
Persistent: false
Parent: obj_corpse1
Mask: 

Create Event:

execute code:

image_single=floor(random(2));
______________________________________________________

Information about object: obj_pickupbanana
Sprite: spr_pickupbanana
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_weaponpickup
Mask: 

______________________________________________________

Information about object: obj_sec9_iosat
Sprite: spr_cdoor
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Alarm Event for alarm 0:

execute code:

global.ignoreall=0;
obj_iji.takingpain=0;

Collision Event with object obj_iji:

execute code:

if (!triggered){

global.erasetop=0;
global.topmessage="[EXPLOSIONS AND SCREAMS ARE HEARD, THEN SILENCE]";
global.ignorestation=90;
triggered=1;
global.ignoreall=1;

obj_sabot.lightrave=1;
obj_sabot.raveflash=-0.4;
timeline_index=tim_iosastrike;
timeline_running=true;
timeline_position=0;

with (obj_iji){
//xcannotfire=1;
takingpain=1;
alarm[5]=0;
alarm[7]=0;
recovering=0;
running=0;
goingleft=0;
goingright=0;
if (global.state==1){
    if (global.facing==0)
        sprite_index=spr_basicleft;
    else
        sprite_index=spr_basic;
    }
if (global.state==5){ //Stand up when halfway ducking
    if (sprite_index==spr_duck || sprite_index==spr_duckleft){
        switchingpose=1;
        if (image_index<2)
            image_index=2-image_index;
        else
            image_index=0;
        if (global.facing==0)
            sprite_index=spr_standupleft;
        else
            sprite_index=spr_standup;
        image_single=-1;
        image_speed=0.5;
        alarm[1]=6-(image_index*2);
        alarm[0]=0;
        }
    }
}

alarm[0]=150;
scr_shakescreen(4);
if (!global.nogamma)
    global.gamma=-0.3;
instance_activate_object(obj_lamp);
with (obj_lamp)
    scr_metabreak(3);
instance_activate_object(obj_sec9elite);
with (obj_sec9elite)
    instance_destroy();
instance_activate_object(obj_sec9commander);
with (obj_sec9commander)
    instance_destroy();
instance_activate_object(obj_cdoor);
with (obj_cdoor){
    if (destroyme)
        instance_destroy();
    }
instance_activate_object(obj_corpse1);
with (obj_corpse1)
    visible=1;
instance_activate_object(obj_cdoor92);
with (obj_cdoor92)
    visible=1;
}

______________________________________________________

Information about object: obj_cdoor92
Sprite: spr_cdoor92
Solid: false
Visible: true
Depth: 5
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

visible=0;
______________________________________________________

Information about object: obj_crumble91
Sprite: spr_crumble91
Solid: true
Visible: true
Depth: 0
Persistent: false
Parent: obj_crumble5
Mask: 

______________________________________________________

Information about object: obj_sec9asst
Sprite: spr_lift
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Alarm Event for alarm 0:

execute code:

instance_destroy();
if (obj_iji.x<3616){
instance_create(3698,4328,obj_megaflash);
tempid2=instance_create(3698,4328,obj_komatoassassin);
tempid2.sprite_index=spr_komatoassassin_pose2left;
tempid2.alarm[1]=45-global.difficulty*10;
tempid2.angry=1;
tempid2.special9=1;
(instance_create(3698-37,4328+2,obj_chargetell)).tempid=tempid2.id;
(instance_create(3698-12,4328+42,obj_chargetell)).tempid=tempid2.id;
}
Collision Event with object obj_iji:

execute code:

if (!triggered){
triggered=1;
alarm[0]=90;
}
______________________________________________________

Information about object: obj_sec9annit
Sprite: spr_door
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_komatoannihilator:

execute code:

if (other.angry){
instance_activate_object(obj_strikeblock);
instance_activate_object(obj_door);

if (trigger==1){
tile_layer_hide(501);
with (obj_strikeblock){
    if (x>4160){
        repeat(8-global.specialbake*5){
            tempid=instance_create(x+random(32),y+random(32),obj_scrapwhite);
            tempid.speed=random(5)+2;
            tempid.direction=random(360);
            }
        instance_destroy();
        }
    }
with (obj_door){
    if (strigger==1)
        instance_destroy();
    }
}
if (trigger==2){
tile_layer_hide(502);
with (obj_strikeblock){
    if (x>3700){
        repeat(8-global.specialbake*5){
            tempid=instance_create(x+random(32),y+random(32),obj_scrapwhite);
            tempid.speed=random(5)+2;
            tempid.direction=random(360);
            }
        instance_destroy();
        }
    }
with (obj_door){
    if (strigger==2)
        instance_destroy();
    }
}
if (trigger==3){
tile_layer_hide(503);
with (obj_strikeblock){
    if (x>3400){
        repeat(8-global.specialbake*5){
            tempid=instance_create(x+random(32),y+random(32),obj_scrapwhite);
            tempid.speed=random(5)+2;
            tempid.direction=random(360);
            }
        instance_destroy();
        }
    }
}
if (trigger==4){
tile_layer_hide(504);
with (obj_strikeblock){
        repeat(8-global.specialbake*5){
            tempid=instance_create(x+random(32),y+random(32),obj_scrapwhite);
            tempid.speed=random(5)+2;
            tempid.direction=random(360);
            }
        instance_destroy();
        }
}

instance_destroy();
scr_sound("exp_meta");
scr_sound("glo_kick");
}
______________________________________________________

Information about object: obj_sec9desanni
Sprite: spr_lift
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

if (global.hp>0){
instance_activate_object(obj_komatoannihilator);
with (obj_komatoannihilator)
instance_destroy();
//bunker
if (global.specialtriggerc && global.kills+global.totkills<=9*global.neutralkc && !setoff){
    setoff=1;
    (instance_create(9152,5888,obj_trigger)).textid="chat9e";
    (instance_create(10176,5888,obj_trigger)).textid="chat9e22";
    obj_sabot.bunkertruce=1;
    obj_sabot.lightrave=1;
    obj_sabot.lightravebottom=0.0;
    instance_activate_object(obj_door);
    instance_activate_object(obj_cdoor);
    instance_activate_object(obj_cdoor92);
    instance_activate_object(obj_sec9_iosat);
    instance_activate_object(obj_turret);
    instance_activate_object(obj_log1);
    instance_activate_object(obj_trigger);
    instance_activate_object(obj_turretdead);
    instance_activate_object(obj_turretpole);
    with (obj_door){
        if (s9tag==1)
            instance_destroy();
        }
    with (obj_cdoor){
        if (destroyme || s9tag==1)
            instance_destroy();
        }
    with (obj_cdoor92)
        instance_destroy();
    with (obj_sec9_iosat)
        instance_destroy();
    with (obj_turret)
        instance_destroy();
    with (obj_turretdead){
        if (s9tag)
            instance_destroy();
        }
    with (obj_turretpole){
        if (s9tag)
            instance_destroy();
        }
    with (obj_log1){
        if (textid=="text907" || textid=="text908" || textid=="text918")
            instance_destroy();
        }
    with (obj_trigger){
        if (textid=="chat92" || textid=="chat99")
            instance_destroy();
        }
    }
else if (!setoff){
    setoff=1;
    instance_activate_object(obj_xspecialcannotfire);
    with (obj_xspecialcannotfire)
        instance_destroy();
    instance_activate_object(obj_sec9vateilika);
    with (obj_sec9vateilika)
        instance_destroy();
    }
}
______________________________________________________

Information about object: obj_sec9slash
Sprite: spr_sec9slash
Solid: false
Visible: false
Depth: 5
Persistent: false
Parent: obj_corpse1
Mask: 

______________________________________________________

Information about object: obj_iosa
Sprite: spr_iosa_bodyleft
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_komatoenemy
Mask: spr_annimask

Create Event:

execute code:

state=0;
image_single=0;
hp=400;
maxhp=400;
armor=200;
maxarmor=200;
if (global.suddendeath){
    hp=1;
    maxhp=1;
    armor=100;
    maxarmor=100;
    }
enemytype=14;
resistance=10;
security=80;
hyperstrength=15;
iosa=1;
holdstillwait=200+ceil(random(100));
getdownwait=50+ceil(random(50));
painwait=20+ceil(random(20));
Alarm Event for alarm 0:

set variable reloading to 0
Alarm Event for alarm 1:

execute code:

obj_iji.thored2=0;
Alarm Event for alarm 2:

execute code:

//Choose target
//Only turn to Ansaksie if she's behind Iosa relative to Iji
targrand=random(1);
if (targrand<0.6 && global.specialtriggerb2==1 && instance_number(obj_ansaksie)>0 && obj_ansaksie.visible){
    if ((obj_ansaksie.xx+50) || (obj_ansaksie.x>x+50 && obj_iji.xtarget.x){
            facing=0;
            sprite_index=spr_iosa_walkleft;
            }
        else{
            facing=1;
            sprite_index=spr_iosa_walk;
            }
        exit;
        }
    }
//Rand
randomstate=random(1);
//Angry
if (angry==1){
    state=1;
    //Face target
    if (x+50>target.x)
        facing=0;
    else
        facing=1;

    //Too much idling (aggression)
    if (idling>=4){
        randomstate=random(0.7)+0.3;
        idling=0;
        }
    //Destroy, Walk
    if (randomstate<0.3){
        if (facing==0 && place_meeting(x-32,y+96,target) && place_free(x-128,y-96) && !target.takingpain && !target.ansaksie){
            timeline_index=tim_destroy;
            timeline_running=true;
            timeline_position=0;
            }
        else if (facing==1 && place_meeting(x+32,y+96,target) && place_free(x+128,y-96) && !target.takingpain && !target.ansaksie){
            timeline_index=tim_destroy;
            timeline_running=true;
            timeline_position=0;
            }

        else{
            image_single=0;
            state=1;
            idling+=1;
            alarm[2]=24;
            if (x<832)
                facing=1;
            if (x>1408)
                facing=0;
            if (facing==0)
                sprite_index=spr_iosa_walkleft;
            else
                sprite_index=spr_iosa_walk;
            }
        }
    //Fire
    else if (randomstate>=0.3 && randomstate<0.6 && abs((x+50)-target.x)<192){
        if (abs(target.y-y)<128){
            image_single=0;
            firingthor=0;
            idling=0;
            alarm[2]=30+random(30);
            state=2;
            if (facing==0)
                sprite_index=spr_iosa_fireleft;
            else
                sprite_index=spr_iosa_fire;
            }
        else{
            image_single=0;
            state=1;
            idling+=1;
            alarm[2]=24;
            if (x<832)
                facing=1;
            if (x>1408)
                facing=0;
            if (facing==0)
                sprite_index=spr_iosa_walkleft;
            else
                sprite_index=spr_iosa_walk;
            }
        }
    //Charge a projectile attack
    else if (randomstate>=0.6 && abs(y+50-target.y)<192){
        idling=0;
        if (!oops && place_free(x+16,y-32) && place_free(x+32,y-32) && place_free(x+48,y-32) && place_free(x+64,y-32) && place_free(x+80,y-32) && place_free(x+96,y-32) && x+50<=target.x){
            tempid=instance_create(x+124,y+100,obj_chargetell);
            tempid.tempid=id;
            state=0;
            sprite_index=spr_iosa_body;
            alarm[6]=20;
            firingrocket=1;
            //Decide crawler
            /*
            if (hp<=350 && firedcrawler[0]==0){
                firedcrawler[0]=1;
                crawlernow=1;
                crawlerfast=0;
                }
            */
            if (hp<=300 && firedcrawler[1]==0){
                firedcrawler[1]=1;
                crawlernow=1;
                crawlerfast=1;
                }
            else if (hp<=200 && firedcrawler[2]==0 && global.difficulty>=1){
                firedcrawler[2]=1;
                crawlernow=1;
                crawlerfast=2;
                }
            else if (hp<=150 && firedcrawler[3]==0 && global.difficulty==2){
                firedcrawler[3]=1;
                crawlernow=1;
                crawlerfast=3;
                }
            //Crawler
            if (crawlernow){
                crawlernow=0;
                firingthor=0;
                firingplasma=0;
                firingmpfb=0;
                firingcrawler=1;
                alarm[2]=23;
                alarm[6]=20;
                scr_sound("tor_gather");
                scr_iosaholdstill();
                }
            //Thor
            else if (randomstate>=0.95 && hp>200 && waitforthor==0){
                if (hp>300)
                    scr_sound("ios_ambient5");
                else if (hp>250)
                    scr_sound("ios_ambient2");
                else
                    scr_sound("ios_pain");
                waitforthor=600;
                sprite_index=spr_iosa_fire;
                firingthor=1;
                firingplasma=0;
                firingmpfb=0;
                firingcrawler=0;
                alarm[6]=45;
                thorcount=10;
                //thorcount=10+global.difficulty*15;
                }
            //Plasma
            else if (randomstate>=0.9 && abs((x+50)-obj_iji.x)<350){
                firingthor=0;
                firingplasma=1;
                firingmpfb=0;
                firingcrawler=0;
                alarm[2]=23;
                alarm[6]=20;
                scr_sound("tor_gather");
                scr_iosaholdstill();
                }
            //MPFB
            else if (randomstate>=0.8){
                firingthor=0;
                firingplasma=0;
                firingmpfb=1;
                firingcrawler=0;
                alarm[2]=23;
                alarm[6]=20;
                scr_sound("tor_gather");
                scr_iosaholdstill();
                }
            //Shocksplinter
            else{
                firingthor=0;
                firingplasma=0;
                firingmpfb=0;
                firingcrawler=0;
                shockcount=3+global.difficulty;
                scr_sound("wea_charge");
                scr_iosaholdstill();
                }
            }
        else if (!oops && place_free(x-16,y-32) && place_free(x-32,y-32) && place_free(x-48,y-32) && place_free(x-64,y-32) && place_free(x-80,y-32) && place_free(x-96,y-32) && x+50>target.x){
            tempid=instance_create(x-24,y+100,obj_chargetell);
            tempid.tempid=id;
            state=0;
            sprite_index=spr_iosa_bodyleft;
            alarm[6]=20;
            firingrocket=1;
            //Decide crawler
            /*
            if (hp<=350 && firedcrawler[0]==0){
                firedcrawler[0]=1;
                crawlernow=1;
                crawlerfast=0;
                }
            */
            if (hp<=300 && firedcrawler[1]==0){
                firedcrawler[1]=1;
                crawlernow=1;
                crawlerfast=1;
                }
            else if (hp<=200 && firedcrawler[2]==0 && global.difficulty>=1){
                firedcrawler[2]=1;
                crawlernow=1;
                crawlerfast=2;
                }
            else if (hp<=150 && firedcrawler[3]==0 && global.difficulty==2){
                firedcrawler[3]=1;
                crawlernow=1;
                crawlerfast=3;
                }
            //Crawler
            if (crawlernow){
                crawlernow=0;
                firingthor=0;
                firingplasma=0;
                firingmpfb=0;
                firingcrawler=1;
                alarm[2]=23;
                alarm[6]=20;
                scr_sound("tor_gather");
                scr_iosaholdstill();
                }
            //Thor
            else if (randomstate>=0.95 && hp>200 && waitforthor==0){
                if (hp>300)
                    scr_sound("ios_ambient5");
                else if (hp>250)
                    scr_sound("ios_ambient2");
                else
                    scr_sound("ios_pain");
                waitforthor=600;
                sprite_index=spr_iosa_fireleft;
                firingthor=1;
                firingplasma=0;
                firingmpfb=0;
                firingcrawler=0;
                alarm[6]=45;
                thorcount=10;
                }
            //Plasma
            else if (randomstate>=0.9 && abs((x+50)-obj_iji.x)<350){
                firingthor=0;
                firingplasma=1;
                firingmpfb=0;
                firingcrawler=0;
                alarm[2]=23;
                alarm[6]=20;
                scr_sound("tor_gather");
                scr_iosaholdstill();
                }
            //MPFB
            else if (randomstate>=0.8){
                firingthor=0;
                firingplasma=0;
                firingmpfb=1;
                firingcrawler=0;
                alarm[2]=23;
                alarm[6]=20;
                scr_sound("tor_gather");
                scr_iosaholdstill();
                }
            //Shocksplinter
            else{
                firingthor=0;
                firingplasma=0;
                firingmpfb=0;
                firingcrawler=0;
                shockcount=3+global.difficulty;
                scr_sound("wea_charge");
                scr_iosaholdstill();
                }
            }
        //Rocket test failed, just walk
        else{
            image_single=0;
            state=1;
            idling+=1;
            alarm[2]=24;
            if (x<832)
                facing=1;
            if (x>1408)
                facing=0;
            if (facing==0)
                sprite_index=spr_iosa_walkleft;
            else
                sprite_index=spr_iosa_walk;
            }
        }
    //Nothing done, just walk
    else if (destroy==0){
        image_single=0;
        state=1;
        idling+=1;
        alarm[2]=24;
        if (x<832)
            facing=1;
        if (x>1408)
            facing=0;
        if (facing==0)
            sprite_index=spr_iosa_walkleft;
        else
            sprite_index=spr_iosa_walk;
        }
    }

Alarm Event for alarm 5:

set variable angry to 0
Alarm Event for alarm 6:

execute code:

//Shocksplinter
if (firingplasma==0 && firingmpfb==0 && firingthor==0 && firingcrawler==0){
    if (shockcount>1){
        shockcount-=1;
        alarm[6]=3;
        }
    else
        alarm[2]=3;
    scr_sound("wea_shoc");
    global.tempid=id;
    with (obj_chargetell){
        if (tempid==global.tempid)
            instance_destroy();
        }
    if (facing==0){
        tempid=instance_create(x-24,y+100,obj_enemyshock);
        tempid.target=id;
        tempid.speed=-global.shockspeed;
        sprite_index=spr_iosa_fireleft;
        image_single=0;
        }
    else{
        tempid=instance_create(x+124,y+100,obj_enemyshock);
        tempid.target=id;
        tempid.speed=global.shockspeed;
        sprite_index=spr_iosa_fire;
        image_single=0;
        }
    }
//Plasma cannon
else if (firingplasma){
    scr_sound("wea_plas");
    scr_shakescreen(3);
    if (facing==0){
        tempid=instance_create(x-24,y+100,obj_enemyplasmatrace);
        tempid.fromiosa=1;
        with (tempid) scr_enemyplasmatrace(0);
        tempid.target=id;
        sprite_index=spr_iosa_fireleft;
        image_single=0;
        }
    else{
        tempid=instance_create(x+124,y+100,obj_enemyplasmatrace);
        tempid.fromiosa=1;
        with (tempid) scr_enemyplasmatrace(1);
        sprite_index=spr_iosa_fire;
        image_single=0;
        }
    }
//MPFB
else if (firingmpfb){
    scr_sound("wea_mpfb");
    scr_shakescreen(1);
    if (facing==0){
        tempid=instance_create(x-24,y+100,obj_komatompfb);
        tempid.speed=global.mpfbspeed;
        tempid.direction=180;
        tempid=instance_create(x-24,y+100,obj_komatompfb);
        tempid.speed=global.mpfbspeed-4;
        tempid.direction=180;
        tempid=instance_create(x-24,y+100,obj_komatompfb);
        tempid.speed=global.mpfbspeed-8;
        tempid.direction=180;
        tempid.target=id;
        sprite_index=spr_iosa_fireleft;
        image_single=0;
        }
    else{
        tempid=instance_create(x+124,y+100,obj_komatompfb);
        tempid.speed=global.mpfbspeed;
        tempid=instance_create(x+124,y+100,obj_komatompfb);
        tempid.speed=global.mpfbspeed-4;
        tempid=instance_create(x+124,y+100,obj_komatompfb);
        tempid.speed=global.mpfbspeed-8;
        sprite_index=spr_iosa_fire;
        image_single=0;
        }
    }

//Velocithor V2-10
else if (firingthor){
    scr_shakescreen(2);
    if (thorcount>1){
        thorcount-=1;
        alarm[6]=2;
        }
    else{
        alarm[2]=3;
        alarm[1]=10;
        }
    if (facing==0){
        instance_create(x-40,y+98,obj_enemythortrace);
        tempid=instance_create(x+5,y+85,obj_smokepoint);
        tempid.direction=random(20);
        tempid.speed=20+random(20);
        tempid.massive=1;
        tempid.alarm[0]=8+random(5);
        instance_create(x-24,y+98,obj_thorspark);
        sprite_index=spr_iosa_fireleft;
        image_single=0;
        }
    else{
        instance_create(x+139,y+98,obj_enemythortrace);
        tempid=instance_create(x+95,y+85,obj_smokepoint);
        tempid.direction=random(20)+160;
        tempid.speed=20+random(20);
        tempid.massive=1;
        tempid.alarm[0]=8+random(5);
        instance_create(x+123,y+98,obj_thorspark);
        sprite_index=spr_iosa_fire;
        image_single=0;
        }
    }

//Crawler
else if (firingcrawler){
    scr_sound("wea_shoc");
    scr_shakescreen(1);
    if (facing==0){
        tempx=x-24;
        tempy=y+100;
        tempx=floor(tempx/4)*4;
        tempy=floor(tempy/4)*4;
        tempid=instance_create(tempx,tempy,obj_iosacrawler);
        tempid.dir=2;
        tempid.facing=0;
        tempid.image_speed=1;
        tempid.fast=crawlerfast;
        sprite_index=spr_iosa_fireleft;
        image_single=0;
        }
    else{
        tempx=x+124;
        tempy=y+100;
        tempx=floor(tempx/4)*4;
        tempy=floor(tempy/4)*4;
        tempid=instance_create(tempx,tempy,obj_iosacrawler);
        tempid.dir=0;
        tempid.facing=1;
        tempid.image_speed=-1;
        tempid.fast=crawlerfast;
        sprite_index=spr_iosa_fire;
        image_single=0;
        }
    }

Alarm Event for alarm 7:

execute code:

state=0;
alarm[2]=300;
sprite_index=spr_iosa_body;
facing=1;
Step Event:

execute code:

//"PAIN"
if (painwait>0 && !global.ignoreall)
    painwait-=1;
if (global.hp>0 && painwait==0 && hp!=prevhp){
    painrand=random(1);
    if (painrand<0.2){
        if (hp>200)
            scr_sound("ios_ambient4");
        else
            scr_sound("ios_pain");
        if (hp>100)
            painwait=240+ceil(random(240));
        else
            painwait=60+ceil(random(60));
        }
    }
prevhp=hp;

//"HAA HAA"
if (global.hp100 && hahawait>600){
    haharand=random(1)
    if (haharand<0.5)
        scr_sound("ios_ambient5");
    }
if (global.hp>=ijihp)
    hahawait+=1;
else
    hahawait=0;

//"HOLD STILL"
if (global.hp>0 && ijihp==global.hp && holdstillwait==0 && !global.ignoreall)
    holdstill+=1;
else
    holdstill=0;
ijihp=global.hp;
if (holdstillwait>0 && !global.ignoreall)
    holdstillwait-=1;

//"GET DOWN"
if (getdownwait>0 && !global.ignoreall)
    getdownwait-=1;
if (global.hp>0 && obj_iji.y<544 && ijiyprev>=544 && getdownwait==0 && hp>100 && !obj_iji.takingpain){
    if (global.voc_ios_ambient2==0){
        scr_sound("ios_ambient1");
        getdownwait=900+ceil(random(600));
        }
    }
ijiyprev=obj_iji.y;

//"WIN"
if (obj_sabot.gameover && !winquote && hp>0){
    winquote=1;
    win=30;
    }
if (win>0)
    win-=1;
if (win==1)
    scr_sound("ios_win");

if (electrocute)
obj_sabot.raveflash=0;
if (instance_number(obj_iji)==0)
    firingrocket=0;

if (waitforthor>0)
    waitforthor-=1;

if (targetiji>0)
targetiji-=1;
cfised=0;
thored=0;
plasmaed=0;
//Smoke when charging
if (firingrocket==1 && state==0)
    smoking+=1;
if (smoking>=8){
    smoking=0;
    if (firingthor){
        scr_sound("tor_gather_q03");
        if (facing==0){
            (instance_create(x-24,y+100,obj_thorspark)).speed=0;
            (instance_create(x-29,y+91,obj_thorspark)).speed=0;
            (instance_create(x-19,y+91,obj_thorspark)).speed=0;
            (instance_create(x-29,y+105,obj_thorspark)).speed=0;
            (instance_create(x-19,y+105,obj_thorspark)).speed=0;
            }
        else{
            (instance_create(x+124,y+100,obj_thorspark)).speed=0;
            (instance_create(x+129,y+91,obj_thorspark)).speed=0;
            (instance_create(x+119,y+91,obj_thorspark)).speed=0;
            (instance_create(x+129,y+105,obj_thorspark)).speed=0;
            (instance_create(x+119,y+105,obj_thorspark)).speed=0;
            }
        }
    else if (firingmpfb){
        if (facing==0){
            (instance_create(x-24,y+100,obj_mpfbspark)).vspeed=1;
            (instance_create(x-29,y+91,obj_mpfbspark)).vspeed=1;
            (instance_create(x-19,y+91,obj_mpfbspark)).vspeed=1;
            (instance_create(x-29,y+105,obj_mpfbspark)).vspeed=1;
            (instance_create(x-19,y+105,obj_mpfbspark)).vspeed=1;
            }
        else{
            (instance_create(x+124,y+100,obj_mpfbspark)).vspeed=1;
            (instance_create(x+129,y+91,obj_mpfbspark)).vspeed=1;
            (instance_create(x+119,y+91,obj_mpfbspark)).vspeed=1;
            (instance_create(x+129,y+105,obj_mpfbspark)).vspeed=1;
            (instance_create(x+119,y+105,obj_mpfbspark)).vspeed=1;
            }
        }
    else if (firingcrawler){
        if (facing==0){
            tempid=instance_create(x-24,y+100,obj_tyrian2);
            tempid.depth=-1
            tempid.sprite_index=spr_iosacrawler2;
            }
        else{
            tempid=instance_create(x+124,y+100,obj_tyrian2);
            tempid.depth=-1
            tempid.sprite_index=spr_iosacrawler2;
            }
        }
    else{
        if (facing==0)
            (instance_create(x-24,y+100,obj_shockspark)).vspeed=3;
        else
            (instance_create(x+124,y+100,obj_shockspark)).vspeed=3;
        }
    }
//Armor
if (armor0){
elecsmoke-=1;
tempid=instance_create(x+10+random(80),y+10+random(115),obj_bigsmoke);
tempid.direction=90;
tempid.speed=random(4)+1;
tempid.gravity=-0.5;
tempid.gravity_direction=270;
}

Collision Event with object obj_bullet:

execute code:

if (!other.stagger){
    armor-=10*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stagger)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_pellet:

execute code:

if (!other.stun){
    armor-=9*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stun)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_kickbox:

execute code:

if (other.image_index==0){
    scr_sound("glo_kick");
    if (state!=10)
        targetiji=300;
    script_execute(scr_shakescreen,1);
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (global.facing==0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    
    if (global.strengthlevel>=resistance){
        hp-=1;
        script_execute(scr_annihilatorpain);
        }
    else{
        global.erasetop=0;
        global.topmessage="You need a Strength of "+string(resistance)+" to damage Annihilator Iosa";
        }
    }
Collision Event with object obj_rocketexplosion:

execute code:

if (other.dud==0){
    hp-=2*global.atmult;
    script_execute(scr_annihilatorpain);
    }
Collision Event with object obj_mpfbexplosion:

execute code:

if (other.dud==0){
    hp-=3*global.atmult;
    script_execute(scr_annihilatorpain);
    }
Collision Event with object obj_pulse:

execute code:

if (other.hyper==1 && armor=resistance){
    hp-=1;
    armor=maxarmor;
    script_execute(scr_annihilatorpain);
    script_execute(scr_shakescreen,2);
    scr_sound("glo_kick");
    repeat(3){
        tempid=instance_create(other.x,other.y,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (other.hspeed<0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    }
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (!other.linker){
    armor-=2*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
    }
if (other.linker){
    if (global.topmessage=="0"){
        global.erasetop=0;
        global.topmessage="Pulse link could not be established";
        }
    }
Collision Event with object obj_enemyrocketexplosion:

execute code:

if (other.dud==0 && other.annihilator==0){
    hp-=2;
    scr_annihilatorpain();
    }
Collision Event with object obj_shockexplosion:

execute code:

if (other.dud==0){
    hp-=2*global.atmult;
    script_execute(scr_annihilatorpain);
    }
Collision Event with object obj_shockballexplosion:

execute code:

if (other.dud==0){
    armor-=30*global.atmult;
    }
Collision Event with object obj_enemympfbexplosion:

execute code:

if (other.dud==0){
    hp-=3;
    script_execute(scr_annihilatorpain);
    }
Collision Event with object obj_pushbox:

execute code:

global.erasetop=0;
global.topmessage="You need a Crack skill of "+string(security)+" to crack Annihilator Iosa";
scr_sound("glo_crackfail");

Collision Event with object obj_harmlessexplosion:

execute code:

if (other.dud==0){
    hp-=3;
    script_execute(scr_annihilatorpain);
    }
Collision Event with object obj_thor:

execute code:

if (thored==0){
    armor-=35*global.atmult;
    thored=1;
    }
Collision Event with object obj_enemyshockballexplosion:

execute code:

if (other.dud==0)
    armor-=30;
Collision Event with object obj_enemyshockexplosion:

execute code:

if (other.dud==0){
    hp-=2;
    script_execute(scr_annihilatorpain);
    }
Collision Event with object obj_assassin_uppercut:

execute code:

if (other.dud==0){
    hp+=-1;
    script_execute(scr_annihilatorpain);
    scr_sound("iji_sworded");
    }
Collision Event with object obj_assassin_backstab:

execute code:

if (other.dud==0){
    hp+=-1;
    script_execute(scr_annihilatorpain);
    scr_sound("iji_sworded");
    }
Collision Event with object obj_ansaksie:

execute code:

if (downstabbed==0){
    if (other.sprite_index==spr_komatoassassin_downstab || other.sprite_index==spr_asha_downstab){
        downstabbed=1;
        hp-=1;
        scr_sound("iji_sworded");
        scr_annihilatorpain();
        }
    }
Draw Event:

execute code:

//game over fix
if (calmdown){
    angry=0;
    alarm[2]=0;
    alarm[6]=0;
    alarm[7]=0;
    state=0;
    firingrocket=0;
    firingmpfb=0;
    firingplasma=0;
    firingthor=0;
    idling=0;
    if (facing==0)
        sprite_index=spr_iosa_bodyleft;
    else
        sprite_index=spr_iosa_body;
    image_single=0;
    }

//Destroy
if (electrocute){
    eleccyc+=1;
    scr_shakescreen(1);
    if (eleccyc==2)
        eleccyc2=1;
    if (eleccyc==4){
        eleccyc=0;
        eleccyc2=0;
        }
    }
else{
    eleccyc=0;
    eleccyc2=0;
    }

if (state==10 && facing==0){
    draw_sprite(sprite_index,image_single,x,y)
    if (!goback){
        if (targettype==0){
            if (obj_iji.overload==3 && obj_iji.overloadtime>0)
                targetalpha=random(0.2);
            else
                targetalpha=1;
            if (image_single==0)
                draw_sprite_ext(spr_iosa_destroyed_ijileft,0,x-27,y+56,1,1,0,c_white,targetalpha);
            if (image_single==1)
                draw_sprite_ext(spr_iosa_destroyed_ijileft,0,x-30,y+37,1,1,0,c_white,targetalpha);
            if (image_single==2)
                draw_sprite_ext(spr_iosa_destroyed_ijileft,0,x-23,y+11,1,1,0,c_white,targetalpha);
            if (image_single==3)
                draw_sprite_ext(spr_iosa_destroyed_ijileft,eleccyc2,x-2,y-21,1,1,0,c_white,targetalpha);
            }
        }
    }
else if (state==10 && facing==1){
    draw_sprite(sprite_index,image_single,x,y)
    if (!goback){
        if (targettype==0){
            if (obj_iji.overload==3 && obj_iji.overloadtime>0)
                targetalpha=random(0.2);
            else
                targetalpha=1;
            if (image_single==0)
                draw_sprite_ext(spr_iosa_destroyed_iji,0,x+123,y+60,1,1,0,c_white,targetalpha);
            if (image_single==1)
                draw_sprite_ext(spr_iosa_destroyed_iji,0,x+128,y+39,1,1,0,c_white,targetalpha);
            if (image_single==2)
                draw_sprite_ext(spr_iosa_destroyed_iji,0,x+124,y+13,1,1,0,c_white,targetalpha);
            if (image_single==3)
                draw_sprite_ext(spr_iosa_destroyed_iji,eleccyc2,x+108,y-18,1,1,0,c_white,targetalpha);
            }
        }
    }

//Basic
else if (sprite_index==spr_iosa_body || sprite_index==spr_iosa_bodyleft){
    basiccyc+=1;
    if (basiccyc==10)
        basicbob=-1;
    if (basiccyc==15)
        basicbob=-2;
    if (basiccyc==25)
        basicbob=-1;
    if (basiccyc==30){
        basicbob=0;
        basiccyc=0;
        }
    if (firingrocket){
        basiccyc=0;
        basicbob=0;
        }
    if (facing==0){
        draw_sprite(spr_iosa_bodyleft,0,x,y)
        draw_sprite(spr_iosa_armsleft,0,x,y+basicbob);
        }
    else{
        draw_sprite(spr_iosa_body,0,x,y)
        draw_sprite(spr_iosa_arms,0,x,y+basicbob);
        }
    }
else{
    basiccyc=0;
    basicbob=0;
    if (firingthor && (sprite_index==spr_iosa_fire || sprite_index==spr_iosa_fireleft)){
        firesingle+=1;
        if (firesingle==2)
            image_single=1;
        if (firesingle>=4){
            image_single=0;
            firesingle=0;
            }
        }
    draw_sprite(sprite_index,image_single,x,y)
    }
______________________________________________________

Information about object: obj_specialribbon
Sprite: spr_block
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

if (global.state==1 && !global.ignoreall && global.facing==1){
global.ignoreall=1;
with (other){
timeline_index=tim_getribbon;
timeline_running=true;
timeline_position=0;
}
}

______________________________________________________

Information about object: obj_mbulkhead
Sprite: spr_mbulkhead
Solid: true
Visible: true
Depth: 10
Persistent: false
Parent: obj_block
Mask: 

Collision Event with object obj_kickbox:

execute code:

scr_sound("glo_kick");
scr_shakescreen(1);
global.erasetop=0;
global.topmessage="You cannot kick down a bulkhead; find four terminals to open it";
global.ignorestation=90;
Collision Event with object obj_pushbox:

execute code:

scr_sound("glo_crackfail");
global.erasetop=0;
global.topmessage="You cannot crack a bulkhead; find four terminals to open it";
global.ignorestation=90;
______________________________________________________

Information about object: obj_girlfield
Sprite: spr_xp2
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
Collision Event with object obj_iji:

execute code:

script_execute(scr_pickupflash,0,0,2);
global.ignorestation=120;
global.erasetop=0;
global.topmessage="KG111-PAIE's Personal Nanofield assimilated";
instance_destroy();
scr_sound("glo_pickup");

______________________________________________________

Information about object: obj_sec9sdoll
Sprite: spr_tasensoldier_basicleft
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_sec9sdoll2
Sprite: spr_cdoor
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

instance_destroy();
with (obj_sec9sdoll)
    instance_destroy();
instance_create(8990,6330,obj_megaflash);
______________________________________________________

Information about object: obj_pixspark
Sprite: spr_pixspark
Solid: false
Visible: true
Depth: -3
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

xprevious=x;
yprevious=y;
speed=random(15)+1;
direction=random(360);
gravity=0.8;
alarm[0]=20+floor(random(20));
Alarm Event for alarm 0:

destroy the instance
Step Event:

execute script scr_outside with arguments (0,0,0,0,0)
Collision Event with object obj_block:

bounce not precisely against solid objects
execute code:

speed*=0.5;
if (!place_free(x,y))
    instance_destroy();
Draw Event:

execute code:

draw_set_color(c_yellow);
draw_line(x,y,xprevious,yprevious);
______________________________________________________

Information about object: obj_annicheck
Sprite: spr_lift
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

set Alarm 0 to 3
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_sec9elec
Sprite: spr_lift
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=random(30)+5;
Alarm Event for alarm 0:

execute code:

alarm[0]=random(40)+40;
elec=1;
Step Event:

execute code:

if (elec==1){
    scr_sound("glo_spark");
    (instance_create(x+4,y+8,obj_thorspark)).direction=random(180)-90;
    (instance_create(x+124,y+8,obj_thorspark)).direction=random(180)+90;
    }
Collision Event with object obj_iji:

execute code:

if (elec==1 && global.hp>0 && !obj_iji.takingpain && !obj_iji.recovering){
    global.armor=-100;
    //global.hp-=1;
    //global.damage+=1;
    //with (other)
    //    scr_pain();
    }
Collision Event with object obj_reflector:

execute code:

if (elec==1){
    with (other)
        scr_reflectorexplo();
    }
Collision Event with object obj_disruptor:

execute code:

if (elec==1){
    with (other)
        scr_disruptorexplo();
    }
Collision Event with object obj_shockbarrier:

execute code:

if (elec==1){
    with (other)
        scr_barrierexplo();
    }
Draw Event:

execute code:

if (alarm[0]<20 && elec==0){
    draw_set_color(c_white);
    if (r==7)
        r=5;
    else if (r==5)
        r=3;
    else
        r=7;
    draw_circle(x,y+8,r,0);
    draw_circle(x+128,y+8,r,0);
    }

if (elec==1){
    x1=x+random(16)+20;
    x2=x+random(16)+52;
    x3=x+random(16)+84;
    y1=y+random(16);
    y2=y+random(16);
    y3=y+random(16);
    draw_set_color(c_white);
    draw_line_width(x,y+8,x1,y1,2);
    draw_line_width(x1,y1,x2,y2,2);
    draw_line_width(x2,y2,x3,y3,2);
    draw_line_width(x3,y3,x+128,y+8,2);
    elec2+=1;
    if (elec2>=4){
        elec2=0;
        elec=2;
        }
    }
else if (elec==2)
    elec=0;
______________________________________________________

Information about object: obj_iosadoll
Sprite: spr_iosa_bodyleft
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

holdit=1;
Alarm Event for alarm 0:

execute code:

sprite_index=spr_iosa_bodyleft;
Step Event:

execute code:

if (sprite_index==spr_iosa_walkleft){
if (!walkcyc)
    walkcyc=1;
else{
    walkcyc=0;
    image_single+=1;
    if (image_single==6){
        scr_shakescreen(0);
        scr_sound("ann_step");
        }
    if (image_single==12){
        image_single=0;
        scr_shakescreen(0);
        scr_sound("ann_step");
        }
    x-=6;
    }
}
else
walkcyc=0;
Draw Event:

execute code:

if (sprite_index==spr_iosa_bodyleft){
//Basic
if (!holdit)
basiccyc+=1;
if (basiccyc==10)
    basicbob=-1;
if (basiccyc==15)
    basicbob=-2;
if (basiccyc==25)
    basicbob=-1;
if (basiccyc==30){
    basicbob=0;
    basiccyc=0;
    }
draw_sprite(spr_iosa_bodyleft,0,x,y)
draw_sprite(spr_iosa_armsleft,0,x,y+basicbob);
/*else{
laughcyc+=1;
if (laughcyc==2)
    laughbob=-1;
if (laughcyc==4)
    laughbob=-2;
if (laughcyc==10)
    laughbob=-1;
if (laughcyc==12){
    laughbob=0;
    laughcyc=0;
    }
draw_sprite(spr_iosa_bodyleft,0,x,y)
draw_sprite(spr_iosa_armsleft,0,x,y+laughbob);
}*/
}
else
    draw_sprite(sprite_index,image_single,x,y);
______________________________________________________

Information about object: obj_sec9endtrigger
Sprite: spr_hud
Solid: false
Visible: false
Depth: -1
Persistent: false
Parent: obj_activateme
Mask: 

Alarm Event for alarm 0:

execute code:

(instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chat93";

Step Event:

execute code:

if (obj_iji.x>=11904 && holdright){
    holdright=0;
    obj_iji.sprite_index=spr_basic;
    alarm[0]=30;
    obj_sec9iosa2doll.go=1;
    }

//Force Iji right
if (holdright){
with (obj_iji){
if (global.state==1){
    alarm[1]=0;
    running=1;
    global.facing=1;
    if (sprite_index!=spr_runfire)
        sprite_index=spr_run;
    x+=5;
    }
if (global.state==2){
    running=1;
    global.facing=1;
    sprite_index=spr_jump;
    x+=5;
    }
}
}

Collision Event with object obj_iji:

execute code:

if (global.ignoreall==0 && (global.state==1 || global.state==2)){
global.ignoreall=1;
holdright=1;
obj_sabot.playiosamusic=0;
obj_sabot.ultimatecannotpause=1;
obj_iji.alwayschangeweapon=1;
}

______________________________________________________

Information about object: obj_iosabar
Sprite: spr_bossbar
Solid: false
Visible: true
Depth: -100
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=2/3;
originalwidth=200;
yadjust=-48;
if (global.suddendeath)
    originalwidth=1;
Draw Event:

execute code:

if (yadjust<0 && obj_iosa.hp>0)
yadjust+=8;

x=floor(x);
y=floor(y);

if (!global.specialbake){
if (!global.suddendeath){
    draw_set_color(c_black);
    draw_rectangle(x-originalwidth-1,y-1,x+originalwidth,y+15,0);
    draw_set_color(c_white);
    draw_rectangle(x-originalwidth-1,y-1,x+originalwidth,y+15,1);
    }
else{
    draw_set_color(c_black);
    draw_rectangle(x-originalwidth-2,y-1,x+originalwidth+1,y+15,0);
    draw_set_color(c_white);
    draw_rectangle(x-originalwidth-2,y-1,x+originalwidth+1,y+15,1);
    }
}
draw_sprite(spr_bossnames,3,x,y-10);

//Draw bar
if (obj_iosa.hp>0){
if (!global.specialbake){
if (obj_iosa.hp>300){
    width=(obj_iosa.hp-300)*2;
    width2=200;
    }
else if (obj_iosa.hp>200){
    width2=(obj_iosa.hp-200)*2;
    width3=200;
    }
else if (obj_iosa.hp>100){
    width3=(obj_iosa.hp-100)*2;
    width4=200;
    }
else
    width4=(obj_iosa.hp)*2;
if (obj_iosa.hp<=100)
    draw_sprite_stretched(sprite_index,image_index,x-width4,y,width4*2,15);
else
    draw_sprite_stretched(sprite_index,1,x-width4,y,width4*2,15);
if (obj_iosa.hp>100){
    if (obj_iosa.hp<=200){
        draw_sprite_stretched(spr_bossbar2,image_index,x-width3,y,width3*2,15);
        draw_sprite(spr_bossx,0,x,y+7);
        }
    else
        draw_sprite_stretched(spr_bossbar2,1,x-width3,y,width3*2,15);
    }
if (obj_iosa.hp>200){
    if (obj_iosa.hp<=300){
        draw_sprite_stretched(spr_bossbar3,image_index,x-width2,y,width2*2,15);
        draw_sprite(spr_bossx,1,x,y+7);
        }
    else
        draw_sprite_stretched(spr_bossbar3,1,x-width2,y,width2*2,15);
    }
if (obj_iosa.hp>300){
    draw_sprite_stretched(spr_bossbar4,image_index,x-width,y,width*2,15);
    draw_sprite(spr_bossx,2,x,y+7);
    }
}
else{
    draw_sprite(spr_hpbarback,9,x-81,y);
    draw_sprite(spr_hpbar,ceil((obj_iosa.hp/obj_iosa.maxhp)*20),x-80,y);
    }
}

//Energy tanks (15 px gap)
if (!global.suddendeath && !global.specialbake){
    draw_set_color(c_black);
    draw_rectangle(x-201,y+21,x+9-201,y+30,0);
    draw_rectangle(x+15-201,y+21,x+9+15-201,y+30,0);
    draw_rectangle(x+30-201,y+21,x+9+30-201,y+30,0);
    draw_set_color(c_white);
    draw_rectangle(x-201,y+21,x+9-201,y+30,1);
    draw_rectangle(x+15-201,y+21,x+9+15-201,y+30,1);
    draw_rectangle(x+30-201,y+21,x+9+30-201,y+30,1);
    if (obj_iosa.hp>100){
        if (obj_iosa.hp<=200)
            draw_sprite_stretched(spr_bossbar2,image_index,x+1-201,y+22,8,8);
        else
            draw_sprite_stretched(spr_bossbar2,1,x+1-201,y+22,8,8);
        }
    if (obj_iosa.hp>200){
        if (obj_iosa.hp<=300)
            draw_sprite_stretched(spr_bossbar3,image_index,x+1+15-201,y+22,8,8);
        else
            draw_sprite_stretched(spr_bossbar3,1,x+1+15-201,y+22,8,8);
        }
    if (obj_iosa.hp>300){
        draw_sprite_stretched(spr_bossbar4,image_index,x+1+30-201,y+22,8,8);
        }
    }

if (obj_iosa.hp<=0){
    yadjust-=8;
    if (yadjust<-64)
        instance_destroy();
    }

______________________________________________________

Information about object: obj_iosatrigger
Sprite: spr_block
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (!global.specialtrigger2){
obj_sabot.lightrave=1;
obj_sabot.raveflash=-0.4;
}
image_speed=0.5;

//PHASE 2
if (global.iosaphase==1){
    phase2=1;
    with (obj_iosa)
        instance_destroy();
    with (obj_iosacrumble){
        if (x>736 && x<1568)
            instance_destroy();
        }
    with (obj_terminal){
        instance_destroy();
        instance_create(x,y,obj_turretdead);
        }
    with (obj_iji) instance_destroy();
    tempid=instance_create(1104,803,obj_iji);
    tempid.takingpain=1
    tempid.recovering=0;
    if (global.outfit){
        tempid.sprite_index=spr_outfit_basic;
        }
    global.ignoreall=1;
    global.hp=global.healthlevel*2;
    global.armor=100;
    global.topmessage="";
    global.state=1;
    global.facing=1;
    instance_create(1291,793,obj_iosa2doll);
    global.viewyoffset=-60;
    global.viewxoffset=50;
    with (obj_trigger)
        instance_destroy();
    with (obj_iosa2doll){
        alarm[0]=30;
        alarm[2]=44;
        alarm[1]=54;
        alarm[3]=90;
        }
    }
Alarm Event for alarm 0:

execute code:

repeat(50){
tempid=instance_create(obj_iosa2doll.x+25,obj_iosa2doll.y,obj_scrapwhite);
tempid.direction=random(180);
tempid.speed=random(40)+5;
tempid.nolimit=1;
}
repeat(30){
tempid=instance_create(obj_iosa2doll.x+25,obj_iosa2doll.y,obj_shard);
tempid.direction=random(180);
tempid.speed=random(30)+5;
tempid.nolimit=1;
}
global.viewyoffset=-60;
global.viewxoffset=50;
Alarm Event for alarm 2:

execute code:

if (global.specialtriggerb2){
    tempid=instance_create(obj_iosa2.x-18,obj_iosa2.y-205,obj_sec9ansaksie);
    tempid.gravity_direction=270;
    tempid.gravity=1;
    tempid.type=2;
    tempid.nogo=1;
    with (tempid)
        instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
    }
else{
    if (!killawarded){
        global.kills+=1;
        global.killdata[720]=4;
        killawarded=1;
        }
    with (obj_iji){
        global.facing=1;
        sprite_index=spr_fire;
        scr_sound("wea_shot");
        firing=1;
        repeat(2){
            tempid = instance_create(x+1,y+11,obj_shell);
            tempid.speed = random(2)+5;
            tempid.direction = random(15)+130;
            }
        (instance_create(x+66,y+13,obj_sec8hologram2)).image_single=1;
        }
    }
Alarm Event for alarm 3:

execute code:

if (pacifistend==3){
    with (obj_iji)
        scr_sound("glo_kick");
    }
else if (global.specialtriggerb2){
    with (obj_sec9ansaksie)
        instance_destroy();
    with (obj_iji)
        scr_sound("iji_sworded");
    }
(instance_create(x,y,obj_blackblanket)).alarm[0]=150;
if (obj_sabot.lightrave)
    obj_sabot.raveflash3=-2.5;
else
    alarm[8]=149;
obj_iji.invisible=1;
obj_iji.visible=0;
instance_create(obj_iji.x-96,obj_iji.y,obj_sec9hologram);
alarm[4]=240;
obj_iosa2.visible=0;
obj_iosa2_dead.visible=1;
if (pacifistend==3)
    obj_iosa2_dead.image_single=1;
if (pacifistend!=3 && global.specialtriggerb2==0)
    obj_iosa2_gore.visible=1;
alarm[5]=45;
global.viewxoffset=-40;
global.viewyoffset=-60;
with (obj_iosa2bar)
    instance_destroy();
Alarm Event for alarm 4:

execute code:

if (pacifistend==3)
    (instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chat9f";
else
    (instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chat95";

Alarm Event for alarm 5:

execute code:

with (obj_iji)
    scr_sound("glo_land");
if (global.specialtriggerb2==1){
    tempid=instance_create(1632,793,obj_sec9ansaksie);
    tempid.type=0;
    tempid.nogo=1;
    }
Alarm Event for alarm 6:

execute code:

if (global.specialtrigger2)
    obj_sabot.flash=1;
Alarm Event for alarm 7:

execute code:

pacifistend=1;
pacifistendcyc=0;
instance_create(0,0,obj_torkilldrawer);
Alarm Event for alarm 8:

execute code:

obj_sabot.firstfadein=0;
Alarm Event for alarm 9:

execute code:

obj_iji.sprite_index=spr_basic;
Step Event:

execute code:

//Pacifist end
if (pacifistend==1){
    pacifistendcyc+=1;
    if (pacifistendcyc>=60){
        pacifistendcyc=0;
        pacifistend=2;
        instance_create(obj_iji.x,obj_iji.y,obj_torkilldrawer);
        }
    }
else if (pacifistend==2){
    pacifistendcyc+=1;
    //Kill
    if (keyboard_check_pressed(ord("X")) && pacifistendcyc>=5 && pacifistendcyc<=178){
        pacifistend=4;
        pacifistendcyc=0;
        alarm[2]=1;
        alarm[3]=3;
        }
    //Don't kill
    else if (pacifistendcyc>=180){
        pacifistend=3;
        global.killdata[797]=1;
        obj_iji.sprite_index=spr_kickstrong;
        obj_iji.image_single=-1;
        obj_iji.image_index=0;
        obj_iji.image_speed=0.5;
        alarm[3]=8;
        alarm[9]=16;
        obj_iji.depth=obj_iosa2.depth-1;
        }
    }

if (phase2==0){
    if (!triggered && !global.ignoreall){
        triggered=1;
        obj_iosa.angry=1;
        obj_iosa.alarm[2]=30;
        instance_create(x,y,obj_iosabar);
        if (global.specialtriggerb2==1){
            instance_create(736,800,obj_ansaksie);
            scr_sound("ext_ansaksie",5);
            }
        else
            scr_sound("ios_pain");
        }
    }
if (phase2==1){
    if (!triggered && !global.ignoreall){
        triggered=1;
        instance_create(obj_sabot.x,obj_sabot.y,obj_iosa2bar);
        with (obj_iosa2doll){
            instance_create(x,y,obj_iosa2);
            instance_destroy();
            }
        obj_iji.takingpain=0;
        global.ignoreall=0;
        global.facing=1;
        global.state=1;
        }
    }

//Charge elecpads
if (obj_iji.y<576){
global.tempcru1=0;
global.tempcru2=0;
with (obj_iosacrumble){
    if (tag==1)
        global.tempcru1=1;
    if (tag==2)
        global.tempcru2=1;
    }
if (obj_iji.x>852 && obj_iji.x<1056 && global.tempcru1==1){
    with (obj_iosapad){
        if (tag==1 && !trip){
            scr_sound("tor_spark");
            trip=1;
            }
        }
    }
if (obj_iji.x>1300 && obj_iji.x<1504 && global.tempcru2==1){
    with (obj_iosapad){
        if (tag==2 && !trip){
            scr_sound("tor_spark");
            trip=1;
            }
        }
    }
}

//Iosa dies
if (instance_number(obj_iosa)==0 && global.iosaphase==0){
    if (flash<20)
        flash+=1;
    if (flash==1)
        obj_sabot.raveflash2=3;
    else if (flash==2)
        obj_sabot.raveflash2=0.1;
    else if (flash==3)
        obj_sabot.raveflash2=3;
    else if (flash==4)
        obj_sabot.raveflash2=0.1;
    else if (flash==5)
        obj_sabot.raveflash2=3;
    else if (flash==6)
        obj_sabot.raveflash2=0.1;
    else if (flash==7){
        obj_sabot.raveflash2=3;
        (instance_create(x,y,obj_whiteblanket)).alarm[0]=60;
        alarm[6]=59;
        }
    else if (flash==8 && !spawnediosa2){
        spawnediosa2=1;
        with (obj_iosacrumble){
            if (tag>0)
            instance_destroy();
            }
        with (obj_terminal){
            instance_destroy();
            instance_create(x,y,obj_turretdead);
            }
        global.iosaphase=1;
        with (obj_ansaksie) instance_destroy();
        with (obj_ougi) instance_destroy();
        with (obj_iji) instance_destroy();
        with (obj_mpfb) instance_destroy();
        with (obj_rocket) instance_destroy();
        with (obj_shock) instance_destroy();
        with (obj_pulse) instance_destroy();
        with (obj_iosacrawler) instance_destroy();
        with (obj_shockball) instance_destroy();
        with (obj_komatompfb) instance_destroy();
        with (obj_enemympfb) instance_destroy();
        with (obj_enemyshock) instance_destroy();
        with (obj_enemyshockball) instance_destroy();
        with (obj_enemypulse) instance_destroy();
        with (obj_scrapwhite) instance_destroy();
        with (obj_scrapbrown) instance_destroy();
        with (obj_pickuphealth) instance_destroy();
        tempid=instance_create(1104,803,obj_iji);
        tempid.takingpain=1
        tempid.recovering=0;
        if (global.outfit){
            tempid.sprite_index=spr_outfit_basic;
            }
        global.ignoreall=1;
        global.hp=global.healthlevel*2;
        if (global.suddendeath)
            global.hp=1;
        global.armor=100;
        global.topmessage="";
        global.state=1;
        global.facing=1;
        instance_create(1291,793,obj_iosa2doll);
        alarm[0]=50;
        repeat(30){
            tempid=instance_create(obj_iosa2doll.x+25,obj_iosa2doll.y,obj_scrapwhite);
            tempid.direction=random(100)+40;
            tempid.speed=random(30)+5;
            tempid.nolimit=1;
            }
        repeat(10){
            tempid=instance_create(obj_iosa2doll.x+25,obj_iosa2doll.y,obj_shard);
            tempid.direction=random(100)+40;
            tempid.speed=random(30)+5;
            tempid.nolimit=1;
            }
        }
    }
Draw Event:

execute code:

with (obj_terminal){
    if (sprite_index==spr_terminal && global.bosshint)
        draw_sprite(spr_proximause,image_index,x,y-30);
    }
______________________________________________________

Information about object: obj_iosacrumble
Sprite: spr_iosacrumble
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_block
Mask: 

Create Event:

execute code:

image_single=0;
alarm[0]=1;
if (x==864 || x==1312)
    solid=1;
Alarm Event for alarm 0:

execute code:

if (x==864 || x==1312)
    solid=1;
if (global.sector==14 && tag>0){
    if (x<864){
        instance_destroy();
        (instance_create(x+32,y,obj_iosacrumble)).tag=1;
        with (obj_iosapad){
            if (tag==1 && charge>=85)
                resetme=1;
            }
        }
    if (x>1312){
        instance_destroy();
        (instance_create(x-32,y,obj_iosacrumble)).tag=2;
        with (obj_iosapad){
            if (tag==2 && charge>=85)
                resetme=1;
            }
        }
    }
______________________________________________________

Information about object: obj_iosapad
Sprite: spr_iosapad
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

sizecyc=1.6;
size=0;
Step Event:

execute code:

//Stop when Iji is dead
if (global.hp<=0){
    deadgo=0;
    if (instance_number(obj_iji)==1){
        if (obj_iji.sprite_index==spr_hitfloor || obj_iji.sprite_index==spr_hitfloorleft)
            deadgo=1;
        }
    else
        deadgo=1;
    if (deadgo){
        charge=0;
        resetme=0;
        trip=0;
        charge=0;
        elecing=0;
        attack=0;
        sizecyc=1.6;
        size=0;
        }
    }

//Charge
if (trip && elecing=0){
    charge+=1;
    tempid=instance_create(x+16+32*cadjust,y+12,obj_thorspark);
    tempid.direction=random(180)+180;
    tempid.speed=random(0.5)+0.05*charge;
    instance_create(x+16+32*cadjust,y+12,obj_nanospark);
    cadjust+=1;
    if (cadjust>=6)
        cadjust=0;
    }
if (spawnstrikesmokes==1){
    spawnstrikesmokes=0;
    instance_create(x+random(192),848+random(16),obj_iosastrikesmoke);
    }
if (iosacreates){
    iosacreates=0;
    if (global.difficulty!=2){
        if (instance_number(obj_pickuphealth)<3)
            instance_create(obj_iosa.x+30,obj_iosa.y+75,obj_pickuphealth);
        if (instance_number(obj_pickuphealth)<3)
            instance_create(obj_iosa.x+70,obj_iosa.y+75,obj_pickuphealth);
        }
    else{
        if (instance_number(obj_pickuphealth)<3)
            instance_create(obj_iosa.x+50,obj_iosa.y+75,obj_pickuphealth);
        }
    with (obj_iosa)
        script_execute(scr_annihilatorpain);
    repeat(10)
        instance_create(obj_iosa.x+10+random(80),obj_iosa.y+10+random(115),obj_komatobloodspecial);
    repeat(25-global.specialbake*20){
        tempid=instance_create(obj_iosa.x+10+random(80),obj_iosa.y+10+random(115),obj_scrapwhite);
        tempid.speed=random(10)+10;
        tempid.direction=random(360);
        }
    }

//Elecing
if (charge==74)
    scr_sound("glo_electrocute");
if (charge>=75){
    obj_sabot.raveflash=0;
    //Attack Reflector
    if (instance_number(obj_reflector)==1){
        if (place_meeting(x,y+96,obj_iosacrumble)){
            if (place_meeting(x,obj_reflector.y,obj_reflector) && obj_reflector.y<576){
                with (obj_reflector)
                    scr_reflectorexplo();
                }
            }
        else{
            if (place_meeting(x,obj_reflector.y,obj_reflector)){
                with (obj_reflector)
                    scr_reflectorexplo();
                }
            }
        }
    //Attack Disruptor
    if (instance_number(obj_disruptor)==1){
        if (place_meeting(x,y+96,obj_iosacrumble)){
            if (place_meeting(x,obj_disruptor.y,obj_disruptor) && obj_disruptor.y<576){
                with (obj_disruptor)
                    scr_disruptorexplo();
                }
            }
        else{
            if (place_meeting(x,obj_disruptor.y,obj_disruptor)){
                with (obj_disruptor)
                    scr_disruptorexplo();
                }
            }
        }
    //Attack Barrier
    if (instance_number(obj_shockbarrier)==1){
        if (place_meeting(x,y+96,obj_iosacrumble)){
            if (place_meeting(x,obj_shockbarrier.y,obj_shockbarrier) && obj_shockbarrier.y<576){
                with (obj_shockbarrier)
                    scr_barrierexplo();
                }
            }
        else{
            if (place_meeting(x,obj_shockbarrier.y,obj_shockbarrier)){
                with (obj_shockbarrier)
                    scr_barrierexplo();
                }
            }
        }
    //Attack Iji
    if (place_meeting(x,y+96,obj_iosacrumble)){
        if (place_meeting(x,obj_iji.y,obj_iji) && !obj_iji.takingpain && obj_iji.y<576){
            global.hp-=4;
            global.damage+=3;
            obj_iji.notech=10;
            with (obj_iji)
                scr_pain();
            obj_sabot.raveflash2=1;
            if (global.hp>1){
                with (obj_ansaksie){
                    voice=300+random(300);
                    shutup=0;
                    stopfooling=25;
                    }
                }
            }
        }
    else{
        if (place_meeting(x,obj_iji.y,obj_iji) && !obj_iji.takingpain){
            global.hp-=5;
            global.damage+=5;
            obj_iji.notech=10;
            with (obj_iji)
                scr_pain();
            obj_sabot.raveflash2=1;
            }
        }
    //Attack crumble
    if (!attack){
        scr_shakescreen(3);
        attack=1;
        if (tag==1){
            with (obj_iosacrumble){
                if (tag==1){
                    if (image_single<2)
                        image_single+=1;
                    else{
                        instance_destroy();
                        obj_terminal.sprite_index=spr_terminal;
                        obj_terminal.cracked=0;
                        repeat(30-global.specialbake*20){
                            tempid=instance_create(x+random(192),y+random(32),obj_scrapwhite);
                            tempid.speed=random(12);
                            tempid.direction=random(360);
                            }
                        }
                    }
                }
            }
        if (tag==2){
            with (obj_iosacrumble){
                if (tag==2){
                    if (image_single<2)
                        image_single+=1;
                    else{
                        instance_destroy();
                        obj_terminal.sprite_index=spr_terminal;
                        obj_terminal.cracked=0;
                        repeat(30-global.specialbake*20){
                            tempid=instance_create(x+random(192),y+random(32),obj_scrapwhite);
                            tempid.speed=random(12);
                            tempid.direction=random(360);
                            }
                        }
                    }
                }
            }
        if (place_meeting(x,y+96,obj_iosacrumble)){
            repeat(50-global.specialbake*20)
                instance_create(x+random(192),560+random(16),obj_iosastrikesmoke);
            }
        //Attack Iosa
        if (!place_meeting(x,y+96,obj_iosacrumble)){
            if (place_meeting(x,obj_iosa.y,obj_iosa)){
                obj_sabot.raveflash2=0.5;
                obj_iosa.hp-=40-global.difficulty*5;
                obj_iosa.elecsmoke=90;
                iosacreates=1;
                }
            //Attack Ansaksie
            if (place_meeting(x,obj_ansaksie.y,obj_ansaksie)){
                with (obj_ansaksie)
                    scr_assassinpain(1);
                }
            //Strike floor
            repeat(50-global.specialbake*30)
                spawnstrikesmokes=1;
            }
        }
    }
Draw Event:

execute code:

draw_sprite(sprite_index,0,x,y);

if (trip && !place_meeting(x,y+96,obj_iosacrumble))
    trip=0;

if (charge>=75){
    //Draw
    if (!place_meeting(x,y+96,obj_iosacrumble))
        yadjust=288;
    else
        yadjust=0;
    sizecyc-=0.22;
    size+=sizecyc;
    pensize=8+size;
    draw_set_color(c_blue);
    adjust=0;
    repeat(6){
        draw_line_width(x+16+32*adjust,y+11,x+16+32*adjust,y+96+yadjust,pensize);
        adjust+=1;
        }
    pensize=6+size;
    draw_set_color(c_teal);
    adjust=0;
    repeat(6){
        draw_line_width(x+16+32*adjust,y+11,x+16+32*adjust,y+96+yadjust,pensize);
        adjust+=1;
        }
    pensize=4+size;
    draw_set_color(c_white);
    adjust=0;
    repeat(6){
        draw_line_width(x+16+32*adjust,y+11,x+16+32*adjust,y+96+yadjust,pensize);
        adjust+=1;
        }
    //Reset
    elecing+=1;
    if (elecing>=15 || resetme){
        resetme=0;
        trip=0;
        charge=0;
        elecing=0;
        attack=0;
        sizecyc=1.6;
        size=0;
        }
    }

______________________________________________________

Information about object: obj_iosastrikesmoke
Sprite: spr_bigsmoke
Solid: false
Visible: true
Depth: -1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (x<1184)
    speed=(x-960)/12;
else
    speed=(x-1408)/12;
gravity=-(0.1+random(0.1));
image_speed=0.08+random(0.25);

Step Event:

execute code:

hspeed*=0.9;
counter+=image_speed;
if (counter>=3.9)
    instance_destroy();
______________________________________________________

Information about object: obj_iosa2doll
Sprite: spr_iosa2_basic
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_komatoenemy
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=130;
alarm[2]=144;
alarm[1]=154;
alarm[3]=210;
iosa=1;
obj_iji.alwayschangeweapon=1;
with (obj_chat)
    instance_destroy();
Alarm Event for alarm 0:

execute code:

image_index=0;
sprite_index=spr_iosa2_begin;
Alarm Event for alarm 1:

execute code:

image_index=0;
sprite_index=spr_iosa2_basic;
Alarm Event for alarm 2:

execute code:

scr_sound("glo_swipe");
nosmoke=1;
repeat(50)
instance_create(x-20+random(90),y+60+random(12),obj_iosastrikesmoke2);

Alarm Event for alarm 3:

execute code:

if (obj_iosatrigger.phase2==0){
    //(instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chat9a";
    //with (obj_trigger)
    //    instance_destroy();
    instance_create(obj_sabot.x,obj_sabot.y,obj_iosa2bar);
    instance_create(x,y,obj_iosa2);
    obj_iji.takingpain=0;
    obj_iji.alwayschangeweapon=0;
    global.ignoreall=0;
    global.facing=1;
    global.state=1;
    instance_destroy();
    }
else
    (instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chat9b";
Step Event:

execute code:

//Smoke first
if (!nosmoke){
    smoke+=1;
    if (smoke>=4){
        smoke=0;
        instance_create(x-5+random(65),y+5+random(60),obj_smoke);
        }
    }

______________________________________________________

Information about object: obj_iosastrikesmoke2
Sprite: spr_smoke
Solid: false
Visible: true
Depth: -1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

speed=(x-obj_iosa2doll.x-20)/3.8;
gravity=-(0.02+random(0.03));
image_speed=0.3+random(0.5);
Step Event:

execute code:

hspeed*=0.9;
counter+=image_speed;
if (counter>=5.9)
    instance_destroy();
______________________________________________________

Information about object: obj_iosa2bar
Sprite: spr_bossbar
Solid: false
Visible: true
Depth: -100
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

yadjust=-48;
Draw Event:

execute code:

if (yadjust<0 && instance_number(obj_iosa2)==1)
yadjust+=8;
x=floor(x);
y=floor(y);
draw_sprite(spr_bossnames,4,x,y-10);

if (instance_number(obj_iosa2)==0){
    yadjust-=8;
    if (yadjust<-64)
        instance_destroy();
    }
______________________________________________________

Information about object: obj_log3
Sprite: spr_log3
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: obj_log1
Mask: 

______________________________________________________

Information about object: obj_iosa2
Sprite: spr_iosa2_spin
Solid: false
Visible: true
Depth: -1
Persistent: false
Parent: obj_komatoenemy
Mask: 

Create Event:

execute code:

killtype=4;
enemytype=20;
resistance=1;
security=global.cracklevel-2+global.difficulty;
if (security<1)
    security=1;
iosa=1;
with (obj_chat)
    instance_destroy();
state=6;
vspeed=-6;
gravity=1;
instance_create(obj_iji.x,obj_iji.y,obj_iosa2safe);
killdataid=720;
Alarm Event for alarm 0:

execute code:

scr_sound("io2_death");
Step Event:

execute code:

//"WIN"
if (obj_sabot.gameover && !winquote){
    winquote=1;
    win=30;
    }
if (win>0)
    win-=1;
if (win==1)
    scr_sound("io2_win");

//Stand
if (state==0){
    if (global.hp>0){
        standcyc+=1;
        //take action
        if ((standcyc>=75 && global.strengthlevel!=10) || (standcyc>=105 && global.strengthlevel=10) || (obj_iji.takingpain==0 && obj_iji.recovering==0)){
            standcyc=0;
            //you are too far left of Iji
            if (obj_iji.x>x && x<1568){
                state=6;
                swipe2cyc=0;
                image_speed=1;
                image_index=0;
                sprite_index=spr_iosa2_spin;
                gravity=1;
                vspeed=-(floor(((1568-x)/32)/2)+3);
                if (vspeed>-6)
                    vspeed=-6;
                }
            //close range overdrive walk now
            else if (obj_iji.x>1472){
                charged=1;
                state=1;
                image_speed=0.5;
                sprite_index=spr_iosa2_walk;
                }
            else{
                temprand=random(1);
                if (swipeidling>=4)
                    temprand=0.31;
                //spinattack now
                if (temprand<0.3){
                    scr_sound("io2_jump");
                    state=12;
                    swipeidling+=1;
                    image_speed=-1;
                    image_index=0;
                    sprite_index=spr_iosa2_spin;
                    gravity=1;
                    vspeed=(floor(((obj_iji.x-x)/32)/1.5)+2);
                    vspeed-=0.55;
                    if (vspeed>-2)
                        vspeed=-2;
                    }
                //walk now
                else{
                    temprand=random(1);
                    if (swipeidling>=4){
                        temprand=0.31;
                        swipeidling=0;
                        }
                    if (temprand>0.8-0.2*global.difficulty){
                        charged=1;
                        swipeidling+=1;
                        }
                    if (!charged)
                        swipeidling=0;
                    state=1;
                    image_speed=0.55;
                    sprite_index=spr_iosa2_walk;
                    }
                }
            }
        }
    }

//Walk
if (state==1){
    if (charged){
        x-=13+global.difficulty*1;
        repeat(4){
            tempid=instance_create(x+random(50),y+random(60),obj_thorspark);
            tempid.speed=random(3.5)-1.5;
            tempid.direction=90;
            tempid.gravity=0.2;
            }
        }
    else
        x-=13+global.difficulty*1;
    if (place_meeting(x-40,obj_iji.y,obj_iji) || x<784 || x=y-10)){
            overdrivecyc=0;
            charged=0;
            state=5;
            visible=0;
            instance_create(x,y,obj_iosa2overdrive);
            }
        //swipe now
        else if (obj_iji.y>y-10 && x>obj_iji.x){
            scr_sound("io2_melee");
            scr_sound("glo_swipe");
            state=2;
            sprite_index=spr_iosa2_swipe;
            image_speed=1;
            image_index=0;
            }
        //uppercut now
        else{
            scr_sound("io2_melee2");
            scr_sound("glo_swipe");
            uppercutcyc=0;
            state=4;
            sprite_index=spr_iosa2_uppercut;
            image_single=0;
            }
        }
    }

//Swipe
else if (state==2){
    swipecyc+=1;
    if (swipecyc==2){
        scr_sound("glo_swipe");
        instance_create(x,y,obj_iosa2_swipebox);
        }
    //swipe2 now
    if (swipecyc>3){
        swipecyc=0;
        state=3;
        sprite_index=spr_iosa2_swipe2;
        image_speed=0.5;
        image_index=0;
        swipe2cyc=0;
        }
    }

//Swipe2 (waiting for uppercut)
else if (state==3){
    swipe2cyc+=1;
    if (swipe2cyc>=44-global.difficulty*11 || place_meeting(x,y,obj_iji)){
        if (obj_iji.takingpain==0){
            //uppercut now
            if (abs(obj_iji.x-x)<100){
                scr_sound("io2_melee2");
                scr_sound("glo_swipe");
                swipe2cyc=0;
                uppercutcyc=0;
                state=4;
                sprite_index=spr_iosa2_uppercut;
                image_single=0;
                }
            //spin now, iji was too far away
            else{
                state=6;
                swipe2cyc=0;
                image_speed=1;
                image_index=0;
                sprite_index=spr_iosa2_spin;
                gravity=1;
                if (obj_iji.x<1184)
                    vspeed=-(floor(((1568-x)/32)/2)+3)/2;
                else
                    vspeed=-(floor(((1568-x)/32)/2)+3);
                if (vspeed>-6)
                    vspeed=-6;
                }
            }
        //spin now
        else{
            state=6;
            swipe2cyc=0;
            image_speed=1;
            image_index=0;
            sprite_index=spr_iosa2_spin;
            gravity=1;
            if (obj_iji.x<1184)
                vspeed=-(floor(((1568-x)/32)/2)+3)/2;
            else
                vspeed=-(floor(((1568-x)/32)/2)+3);
            if (vspeed>-6)
                vspeed=-6;
            }
        }
    }

//Uppercut
else if (state==4){
    uppercutcyc+=1;
    if (uppercutcyc==1){
        image_single+=1;
        y-=16;}
    if (uppercutcyc==2){
        y-=26;}
    if (uppercutcyc==3){
        image_single+=1;
        y-=120;
        instance_create(x,y,obj_iosa2slash);}
    if (uppercutcyc==4){
        with (obj_iosa2slash)
            instance_destroy();
        y-=40;
        instance_create(x,y,obj_iosa2slash);}
    if (uppercutcyc==5){
        image_single+=1;
        with (obj_iosa2slash)
            instance_destroy();
        y-=20;}
    if (uppercutcyc==6){
        y-=14;}
    if (uppercutcyc==7){
        image_single+=1;
        y-=10;}
    if (uppercutcyc==8){
        y-=8;}
    if (uppercutcyc==9){
        image_single+=1;
        y-=5;}
    if (uppercutcyc==10){
        y-=3;}
    if (uppercutcyc==11){
        image_single+=1;
        y-=2;}
    if (uppercutcyc==12){
        y-=1;}
    if (uppercutcyc==13){
        image_single=-1;
        image_speed=0.5;
        image_index=7;
        y-=2;
        gravity=1;}
    if (vspeed>22)
        vspeed=22;
    if (image_index>13)
        image_index=12;
    //spin now
    if (!place_free(x,y+vspeed) && y>650){
        state=6;
        uppercutcyc=0;
        move_contact_solid(270,100);
        image_single=-1;
        image_speed=1;
        image_index=0;
        sprite_index=spr_iosa2_spin;
        gravity=1;
        if (obj_iji.x<1184)
            vspeed=-(floor(((1568-x)/32)/2)+3)/2;
        else
            vspeed=-(floor(((1568-x)/32)/2)+3);
        if (vspeed>-6)
            vspeed=-6;
        }
    }

//Overdrive
else if (state==5){
    overdrivecyc+=1;
    repeat(5){
        tempid=instance_create(x-20+random(90),y+60+random(12),obj_iosastrikesmoke2);
        tempid.speed=(tempid.x-x-25)/3;
        }
    //uppercut or spin now
    if (overdrivecyc>=37){
        if (abs(x-obj_iji.x)<128 && obj_iji.y>704){
            scr_sound("io2_melee2");
            scr_sound("glo_swipe");
            uppercutcyc=0;
            state=4;
            sprite_index=spr_iosa2_uppercut;
            image_single=0;
            }
        else{
            state=6;
            image_speed=1;
            image_index=0;
            sprite_index=spr_iosa2_spin;
            gravity=1;
            if (obj_iji.x<1184)
                vspeed=-(floor(((1568-x)/32)/2)+3)/2;
            else
                vspeed=-(floor(((1568-x)/32)/2)+3);
            if (vspeed>-6)
                vspeed=-6;
            }
        overdrivecyc=0;
        visible=1;
        with (obj_iosa2overdrive)
            instance_destroy();
        }
    }

//Spin
else if (state==6){
    if (x<1568)
        x+=32;
    //take action
    if (vspeed>0 && !place_free(x,y+vspeed)){
        move_contact_solid(270,100);
        gravity=0;
        vspeed=0;
        if (global.hp=0 || obj_iji.takingpain){
            state=0;
            image_speed=0.5;
            standcyc=0;
            sprite_index=spr_iosa2_basic;
            }
        else{
            //you are too far left of Iji
            if (obj_iji.x>x && x<1568){
                state=6;
                swipe2cyc=0;
                image_speed=1;
                image_index=0;
                sprite_index=spr_iosa2_spin;
                gravity=1;
                vspeed=-(floor(((1568-x)/32)/2)+3);
                if (vspeed>-6)
                    vspeed=-6;
                }
            //close range overdrive walk now
            else if (obj_iji.x>1504){
                charged=1;
                state=1;
                image_speed=0.5;
                sprite_index=spr_iosa2_walk;
                }
            else{
                temprand=random(1);
                if (swipeidling>=4)
                    temprand=0.31;
                //spinattack now
                if (temprand<0.3){
                    scr_sound("io2_jump");
                    state=12;
                    swipeidling+=1;
                    image_speed=-1;
                    image_index=0;
                    sprite_index=spr_iosa2_spin;
                    gravity=1;
                    vspeed=(floor(((obj_iji.x-x)/32)/1.5)+2);
                    vspeed-=0.5;
                    if (vspeed>-2)
                        vspeed=-2;
                    }
                //walk now
                else{
                    temprand=random(1);
                    if (swipeidling>=4){
                        temprand=0.31;
                        swipeidling=0;
                        }
                    if (temprand>0.8-0.2*global.difficulty){
                        charged=1;
                        swipeidling+=1;
                        }
                    if (!charged)
                        swipeidling=0;
                    state=1;
                    image_speed=0.5;
                    sprite_index=spr_iosa2_walk;
                    }
                }
            }
        }
    }

//Stagger
if (state==7){
    staggercyc+=1;
    if (place_free(x+6,y))
        x+=6;
    //hitwall now
    if (!place_free(x+6,y)){
        scr_sound("glo_land");
        guard=0;
        state=9;
        staggercyc=0;
        hitwallcyc=0;
        sprite_index=spr_iosa2_hitwall;
        image_index=0;
        scr_shakescreen(2);
        }
    //stagger2 now
    else if (staggercyc>=12){
        state=8;
        staggercyc=0;
        stagger2cyc=0;
        sprite_index=spr_iosa2_stagger2;
        guard2=8-guard-global.difficulty*1;
        if (guard2>0){
            for (i=0;i<(guard2);i+=1)
                (instance_create(x-8,y-12,obj_iosa2dizzy)).cyc=(i/guard2)*360;
            }
        }
    }

//Stagger2
if (state==8){
    stagger2cyc+=1;
    //spin now
    if (stagger2cyc>=60-(global.difficulty*15) || guard>=8-(global.difficulty*1)){
        with (obj_iosa2dizzy)
            instance_destroy();
        guard=0;
        stagger2cyc=0;
        state=6;
        image_speed=1;
        image_index=0;
        sprite_index=spr_iosa2_spin;
        gravity=1;
        if (obj_iji.x<1184)
            vspeed=-(floor(((1568-x)/32)/2)+3)/2;
        else
            vspeed=-(floor(((1568-x)/32)/2)+3);
        if (vspeed>-6)
            vspeed=-6;
        }
    }

//Hitwall
if (state==9){
    hitwallcyc+=1;
    //woozy now
    if (hitwallcyc>=14){
        state=10;
        hitwallcyc=0;
        woozycyc=0;
        sprite_index=spr_iosa2_woozy;
        }
    }

//Woozy
if (state==10){
    woozycyc+=1;
    //uppercut now
    if (woozycyc>=300){
        woozycyc=0;
        uppercutcyc=0;
        state=4;
        sprite_index=spr_iosa2_uppercut;
        image_single=0;
        }
    }

//Death
if (state==11){
    if (deathcyc<10)
        deathcyc+=1;
    if (deathcyc==2)
        image_single=1;
    if (deathcyc==4)
        image_single=2;
    }

//Spinattack
if (state==12){
    if (x>704)
        x-=24;
    //uppercut now
    if (vspeed>0 && !place_free(x,y+vspeed)){
        scr_sound("io2_melee2");
        scr_sound("glo_swipe");
        move_contact_solid(270,100);
        gravity=0;
        vspeed=0;
        uppercutcyc=0;
        state=4;
        sprite_index=spr_iosa2_uppercut;
        image_single=0;
        }
    }
End Step Event:

execute code:

//Fix
if (state!=4 && !place_free(x,y))
    y-=1;
Collision Event with object obj_bullet:

execute code:

with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stagger)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_pellet:

execute code:

with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stun)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_kickbox:

execute code:

if (other.image_index==0 && (other.sprite_index=spr_detonator || global.facing==1)){
//spin now
if (state==0 || state==1 || state==2 || state==4){
    state=6;
    standcyc=0;
    swipecyc=0;
    uppercutcyc=0;
    image_single=-1;
    image_speed=1;
    image_index=0;
    sprite_index=spr_iosa2_spin;
    gravity=1;
    vspeed=-(floor(((1568-x)/32)/2)+3);
    if (vspeed>-6)
        vspeed=-6;
    }
else if (state==3 || state==8 || state==9 || state==10){
    //stagger now
    if (place_free(x+6,y)){
        with (obj_iosa2dizzy)
            instance_destroy();
        scr_sound("glo_kick");
        guard+=1;
        state=7;
        sprite_index=spr_iosa2_stagger;
        image_single=-1;
        image_index=0;
        image_speed=0.5;
        swipe2cyc=0;
        staggercyc=0;
        stagger2cyc=0;
        woozycyc=0;
        scr_shakescreen(2);
        temprand=random(1);
        if (temprand<0.3)
            scr_sound("io2_kicked");
        }
    //hitwall now
    else{
        scr_sound("glo_kick");
        scr_sound("glo_land");
        state=9;
        sprite_index=spr_iosa2_hitwall;
        image_single=-1;
        image_index=0;
        image_speed=0.5;
        swipe2cyc=0;
        staggercyc=0;
        stagger2cyc=0;
        hitwallcyc=0;
        woozycyc=0;
        scr_shakescreen(2);
        global.erasetop=0;
        global.topmessage="SUBJECT IS DAZED, PRESS "+chr(global.usekey)+" TO CRACK IT";
        temprand=random(1);
        if (temprand<0.3)
            scr_sound("io2_kicked");
        }
    }
}
Collision Event with object obj_pulse:

execute code:

with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (other.linker){
    if (global.topmessage=="0"){
        global.erasetop=0;
        global.topmessage="Pulse link could not be established";
        }
    }
Collision Event with object obj_pushbox:

execute code:

if (state!=10 && state!=9){
    global.erasetop=0;
    global.topmessage="Subject is too alert to crack now";
    }
else if (global.facing==1){
    //crack iosa2
    global.security=security;
    crackmark=1;
    global.cracktext="Iosa Sakera#H1 A W1#Security: ";
    global.cracktext+=string(global.security);
    if (global.security==10)
        global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
    else
        global.cracktext+="#PUSH "+chr(global.usekey)+" TO BEGIN"
    script_execute(scr_begincrack);
    }
______________________________________________________

Information about object: obj_iosa2slash
Sprite: spr_iosa2_slash
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_iosa2overdrive
Sprite: spr_iosa2_overdrive
Solid: false
Visible: true
Depth: -1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

rand1=floor(random(10));
rand2=floor(random(10));

count=0;
while (rand2==rand1 || count>1000){
count+=1;
rand2=floor(random(10));
}

attack=0;
Draw Event:

execute code:

attack+=1;
if (attack>=3){
    attack=0;
    scr_sound("glo_swipe");
    }

rand1=rand3;
rand2=rand4;
rand3=floor(random(10));
rand4=floor(random(10));

count=0;
while (rand3==rand1 || rand3==rand2 || count>1000){
count+=1;
rand3=floor(random(10));
}
count=0;
while (rand4==rand1 || rand4==rand2 || rand4==rand3 || count>1000){
count+=1;
rand4=floor(random(10));
}
if (rand1==0 || rand2==0) draw_sprite(sprite_index,0,x,y)
if (rand1==1 || rand2==1) draw_sprite(sprite_index,1,x,y)
if (rand1==2 || rand2==2) draw_sprite(sprite_index,2,x,y)
if (rand1==3 || rand2==3) draw_sprite(sprite_index,3,x,y)
if (rand1==4 || rand2==4) draw_sprite(sprite_index,4,x,y)
if (rand1==5 || rand2==5) draw_sprite(sprite_index,5,x,y)
if (rand1==6 || rand2==6) draw_sprite(sprite_index,6,x,y)
if (rand1==7 || rand2==7) draw_sprite(sprite_index,7,x,y)
if (rand1==8 || rand2==8) draw_sprite(sprite_index,8,x,y)
if (rand1==9 || rand2==9) draw_sprite(sprite_index,9,x,y)

______________________________________________________

Information about object: obj_iosa2_swipebox
Sprite: spr_iosa2_swipebox
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

{
dud=1;
alarm[0]=2;
alarm[1]=1;
}
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 1:

set variable dud to 0
______________________________________________________

Information about object: obj_sec9hologram
Sprite: spr_duck
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=4;
Alarm Event for alarm 0:

execute code:

sprite_index=spr_basic;
______________________________________________________

Information about object: obj_redpixel
Sprite: spr_redpixel
Solid: false
Visible: true
Depth: -9
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (distance_to_point(obj_iosa2.x+6,obj_iosa2.y+38)<30 || distance_to_point(obj_iosa2.x+6,obj_iosa2.y+38)>40)
    instance_destroy();
direction=point_direction(x,y,obj_iosa2.x+6,obj_iosa2.y+38)+180;
speed=random(4)+2;
Step Event:

execute code:

speed*=0.95;
if (speed<0.2)
    instance_destroy();
image_single=floor(random(5));
______________________________________________________

Information about object: obj_iosa2_dead
Sprite: spr_iosa2_dead
Solid: false
Visible: false
Depth: -10
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=0;
______________________________________________________

Information about object: obj_iosa2_gore
Sprite: spr_iosa2_gore
Solid: false
Visible: false
Depth: -10
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_enemythor
Sprite: spr_thor
Solid: false
Visible: true
Depth: -6
Persistent: false
Parent: 
Mask: 

Create Event:

set Alarm 0 to 2
Alarm Event for alarm 0:

destroy the instance
Step Event:

execute script scr_outside with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_enemythor2
Sprite: spr_thor2
Solid: false
Visible: true
Depth: -6
Persistent: false
Parent: obj_enemythor
Mask: 

Create Event:

execute code:

{
if (global.facing==1)
    image_single=1;
else
    image_single=0;
alarm[0]=2;
}
Alarm Event for alarm 0:

destroy the instance
Step Event:

execute script scr_outside with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_enemythortrace
Sprite: spr_bullet
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

scr_enemythor(obj_iosa.facing);
obj_sabot.raveflash=0;
Step Event:

execute script scr_outside with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_clearbinaryx
Sprite: spr_clearbinary
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: obj_clearbinary
Mask: 

______________________________________________________

Information about object: obj_xcore
Sprite: spr_s4reactor
Solid: false
Visible: true
Depth: 50
Persistent: false
Parent: obj_alliedenemy
Mask: 

Create Event:

execute code:

enemytype=18;
security=25;
hp=20;
if (global.suddendeath)
    hp=1;
Step Event:

execute code:

if (hp<=0){
    scr_sound("exp_mpfb");
    if (global.specialbake==0)
        maxsparks=90;
    else
        maxsparks=10;
    if (instance_number(obj_mpfbspark2)
Collision Event with object obj_iji:

execute code:

if (other.takingpain==0){
    global.hp-=1;
    global.damage+=1;
    with (other)
        scr_pain();
    }
Collision Event with object obj_bullet:

execute code:

if (go)
hp-=1;
Collision Event with object obj_pellet:

execute code:

if (go)
hp-=1;
Collision Event with object obj_kickbox:

execute code:

if (go)
hp=0;
scr_sound("glo_kick");
Collision Event with object obj_rocketexplosion:

execute code:

if (go)
hp=0;
Collision Event with object obj_mpfbexplosion:

execute code:

if (go)
hp=0;
Collision Event with object obj_pulse:

execute code:

if (go){
    with (other){
        scr_pulseexplosion();
        instance_destroy();
    }
    if (!other.linker)
        hp-=1;
    if (other.linker){
        if (global.topmessage=="0"){
            global.erasetop=0;
            global.topmessage="Pulse link could not be established";
            }
        }
    }
Collision Event with object obj_shockexplosion:

execute code:

if (go)
hp=0;
Collision Event with object obj_shockballexplosion:

execute code:

if (go && !other.dud)
hp-=5;
Collision Event with object obj_pushbox:

execute code:

if (obj_iji.takingpain==0){
    global.hp-=1;
    global.damage+=1;
    with (obj_iji)
        scr_pain();
    }
Collision Event with object obj_plasma:

execute code:

if (go)
hp=0;
Collision Event with object obj_thor:

execute code:

if (!go && !xrewarded){
    xrewarded=1;
    (instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chatxn";
    instance_create(x,y,obj_supercharge);
    }
hp=0;

Draw Event:

execute code:

scr_ammofloat();
animcyc+=1;
if (animcyc>2)
animcyc=1;
draw_sprite(sprite_index,animcyc,x,y);
//Lines
draw_set_color(c_white);
temprand=random(64)-32;
temprand2=random(64)-32;
temprand3=random(64)-32;
temprand4=random(64)-32;
draw_line(x+temprand,y-64,x+temprand,y+64);
draw_line(x+temprand2,y-64,x+temprand2,y+64);
draw_line(x+temprand3,y-64,x+temprand3,y+64);
draw_line(x+temprand4,y-64,x+temprand4,y+64);

if (place_free(x-96,y) && place_free(x+96,y))
    go=1;
else
    go=0;


______________________________________________________

Information about object: obj_crumblex
Sprite: spr_crumblex
Solid: true
Visible: true
Depth: 1
Persistent: false
Parent: obj_block
Mask: 

Collision Event with object obj_enemyrocketexplosion:

execute code:

if (global.specialbake==0)
i=25;
else
i=5;
repeat(i){
tempid=instance_create(x+8+random(112),y+8+random(48),obj_scrapwhite);
tempid.direction=random(360);
tempid.speed=random(8)+5;
}
instance_destroy();
______________________________________________________

Information about object: obj_crumblex2
Sprite: spr_crumblex2
Solid: true
Visible: true
Depth: 1
Persistent: false
Parent: obj_block
Mask: 

______________________________________________________

Information about object: obj_xannid
Sprite: spr_door
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_annihilatorbeta:

execute code:

instance_activate_object(obj_crumblex2);
instance_activate_object(obj_door);

if (trigger==0){
    with (obj_crumblex2){
        if (x<6500){
            repeat(8-global.specialbake*5){
                tempid=instance_create(x+random(64),y+random(32),obj_scrapwhite);
                tempid.speed=random(5)+2;
                tempid.direction=random(360);
                }
            instance_destroy();
            }
        }
    with (obj_door){
        if (strigger==2)
            scr_metabreak();
        }
    }


if (trigger==1){
    with (obj_crumblex2){
        if (x<7000 && x>6500){
            repeat(8-global.specialbake*5){
                tempid=instance_create(x+random(64),y+random(32),obj_scrapwhite);
                tempid.speed=random(5)+2;
                tempid.direction=random(360);
                }
            instance_destroy();
            }
        }
    }

if (trigger==2){
    with (obj_crumblex2){
    if (x>7000){
        repeat(8-global.specialbake*5){
            tempid=instance_create(x+random(64),y+random(32),obj_scrapwhite);
            tempid.speed=random(5)+2;
            tempid.direction=random(360);
            }
        instance_destroy();
        }
    }
    with (obj_door){
        if (strigger==1)
            scr_metabreak();
        }
    }

instance_destroy();
scr_sound("exp_meta");
scr_sound("glo_kick");
______________________________________________________

Information about object: obj_xpants
Sprite: spr_door
Solid: false
Visible: false
Depth: -10
Persistent: false
Parent: 
Mask: 

Alarm Event for alarm 0:

execute code:

if (global.hp>0){
obj_iji.sprite_index=spr_standup;
obj_iji.image_index=0;
obj_iji.image_speed=0.5;
}
Alarm Event for alarm 1:

execute code:

if (global.hp>0){
obj_iji.sprite_index=spr_basic;
global.state=1;
global.ignoreall=0;
obj_iji.image_single=-1;
obj_iji.image_speed=0.5;
instance_destroy();
}
Alarm Event for alarm 2:

execute code:

if (sound<3){
    sound+=1;
    scr_sound("iji_breathe");
    alarm[2]=30;
    }
Collision Event with object obj_iji:

execute code:

if (global.hp>0){
    obj_iji.y=y+35;
    obj_iji.state=10;
    obj_iji.gravity=0;
    obj_iji.speed=0;
    }

if (global.hp>0 && !triggered){
    keyboard_clear(vk_down);
    rebootcyc=0;
    ignoredown=0;
    switchingpose=0;
    goingleft=0;
    goingright=0;
    running=0;
    
    //Remove reflector
    if (global.weapon13){
        instance_activate_object(obj_pickuprefl);
        with (obj_pickuprefl)
            instance_destroy();
        }
    //Ansaksie
    if (global.specialtriggerb2==1){
        instance_create(12056,2481,obj_secxansaksie);
        tempid=instance_create(12000,2464,obj_trigger);
        tempid.followiji=1;
        tempid.textid="chatxq"
        if (global.kills+global.totkills==0){
            (instance_create(9792,4992,obj_log2)).textid="textx24";
            instance_create(9824,5024,obj_mass);
            }
        else{
            (instance_create(10464,4416,obj_log2)).textid="textx23";
            }
        }
    obj_iji.xcannotfire=1;
    obj_iji.gravity=0;
    obj_iji.speed=0;
    obj_iji.y=y+35;
    triggered=1;
    global.ignoreall=1;
    obj_iji.sprite_index=spr_xpants;
    alarm[0]=110;
    alarm[1]=114;
    alarm[2]=28;
    obj_iji.alarm[1]=0;
    obj_iji.image_index=3;
    obj_iji.image_speed=0.2;
    global.state=10;
    global.facing=1;
    with (obj_ijiflash)
        instance_destroy();
    with (obj_sabot)
        scr_music("mus_lightstroke");
    instance_activate_object(obj_komatoannihilator)
    with (obj_komatoannihilator)
        instance_destroy();
    }
______________________________________________________

Information about object: obj_xtrigger
Sprite: spr_cdoor
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=30;
Alarm Event for alarm 0:

execute code:

ready=1;
Collision Event with object obj_iji:

execute code:

if (ready){
if (!obj_iji.recovering && !obj_iji.takingpain && global.state==1){
global.ignoreall=1;
tempid=instance_create(x,y,obj_trigger);
if (obj_asha2trigger.rematch==1)
    tempid.textid="chatxm";
else if (obj_asha2trigger.rematch>=2)
    tempid.textid="chatxv";
else{
    if (global.specialtrigger1==1)
        tempid.textid="chatx4";
    else
        tempid.textid="chatxe";
    }
instance_deactivate_all(1);
instance_activate_region(5450,2200,1650,1032,1);
instance_activate_object(obj_activateme);
instance_activate_object(obj_hud);
instance_activate_object(obj_weapon1);
instance_activate_object(obj_weapon2);
instance_activate_object(obj_weapon3);
instance_activate_object(obj_weapon4);
instance_activate_object(obj_weapon5);
instance_activate_object(obj_weapon6);
instance_activate_object(obj_weapon7);
instance_activate_object(obj_weapon8);
instance_activate_object(obj_reloader);
instance_deactivate_object(obj_alliedenemy);
instance_deactivate_object(obj_skysmasher);
instance_activate_object(obj_cloudb);
instance_activate_object(obj_cloudt);
instance_activate_object(obj_cloudc);
instance_create(6322,2980,obj_asha2);
instance_create(6334,3009,obj_megaflash);
instance_destroy();
}
}
______________________________________________________

Information about object: obj_annihilatorbeta
Sprite: spr_komatoannihilator_body
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_tasenenemy
Mask: spr_annimask

Create Event:

execute code:

state=0;
facing=1;
image_single=0;
hp=80;
maxhp=80;
armor=200;
maxarmor=200;
if (global.suddendeath){
    hp=1;
    maxhp=1;
    armor=100;
    maxarmor=100;
    }
enemytype=14;
resistance=10;
security=15;
annihilatorbeta=1;
Alarm Event for alarm 2:

execute code:

ignoreall=0;
state=0;
if (facing==0)
    sprite_index=spr_komatoannihilator_bodyleft;
else
    sprite_index=spr_komatoannihilator_body;

Alarm Event for alarm 6:

execute code:

//Plasma cannon
scr_shakescreen(3);
firingplasma=0;
scr_sound("wea_plas");
if (facing==0){
    tempid=instance_create(x-24,y+100,obj_plasmatrace);
    tempid.target=id;
    sprite_index=spr_komatoannihilator_fireleft;
    }
else{
    tempid=instance_create(x+124,y+100,obj_plasmatrace);
    tempid.target=id;
    sprite_index=spr_komatoannihilator_fire;
    }
Step Event:

execute code:

if (obj_sabot.annihilatorbeta){
global.erasetop=118;
global.topmessage="CONTROLS: LEFT/RIGHT TO WALK, "+chr(global.firekey)+" TO FIRE, "+chr(global.usekey)+" TO ABORT";
global.ignorestation=4;
}

scr_tasenvision(50,100);
cfised=0;
thored=0;
plasmaed=0;
//Smoke when charging
if (firingplasma && state==0)
    smoking+=1;
if (smoking>=5){
    smoking=0;
    if (facing==0)
        (instance_create(x-24,y+100,obj_shockspark)).vspeed=3;
    else
        (instance_create(x+124,y+100,obj_shockspark)).vspeed=3;
    }
//Armor
if (armor<199.9)
    armor+=0.1;
//Pain from armordrop
if (armor<1){
    hp-=1;
    scr_betaannihilatorpain();
    }

//Walk
if (state==1){
    if (!walkcyc)
        walkcyc=1;
    else{
        walkcyc=0;
        image_single+=1;
        if (image_single==6){
            scr_sound("ann_step");
            //scr_shakescreen(0);
            }
        if (image_single==12){
            image_single=0;
            scr_sound("ann_step");
            //scr_shakescreen(0);
            }
        if (facing==0){
            if (!place_free(x-6,y)){
                facing=1;
                sprite_index=spr_komatoannihilator_walk;
                }
            else
                x-=6;
            }
        else{
            if (!place_free(x+6,y)){
                facing=0;
                sprite_index=spr_komatoannihilator_walkleft;
                }
            else
                x+=6;
            }
        }
    }
else
    walkcyc=0;
Collision Event with object obj_bullet:

execute code:

armor+=-(10*(1+(global.attacklevel/10)));
instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_pellet:

execute code:

armor+=-(9*(1+(global.attacklevel/10)));
instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_kickbox:

execute code:

if (other.image_index==0){
    script_execute(scr_shakescreen,1);
    scr_sound("glo_kick");
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (global.facing==0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    
if (global.strengthlevel>=resistance){
    hp-=1;
    script_execute(scr_betaannihilatorpain);
    }
else{
    global.erasetop=0;
    global.topmessage="You need a Strength of "+string(resistance)+" to damage a Komato Annihilator";
    }
}
Collision Event with object obj_rocketexplosion:

execute code:

if (other.dud==0){
    hp+=-(2*(1+(global.attacklevel/10)));
    script_execute(scr_betaannihilatorpain);
    }
Collision Event with object obj_mpfbexplosion:

execute code:

if (other.dud==0){
    hp+=-(3*(1+(global.attacklevel/10)));
    script_execute(scr_betaannihilatorpain);
    }
Collision Event with object obj_pulse:

execute code:

if (other.hyper==1 && armor<60 && global.strengthlevel>=resistance){
    hp-=1;
    script_execute(scr_betaannihilatorpain);
    script_execute(scr_shakescreen,2);
    scr_sound("glo_kick");
    repeat(3){
        tempid=instance_create(other.x,other.y,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        if (other.hspeed<0)
            tempid.direction=random(180)-90;
        else
            tempid.direction=random(180)+90;
        }
    }
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (!other.linker){
    armor+=-(2*(1+(global.attacklevel/10)));
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
    }
if (other.linker){
    if (global.topmessage=="0"){
        global.erasetop=0;
        global.topmessage="Pulse link could not be established";
        }
    }
Collision Event with object obj_enemyrocketexplosion:

execute code:

if (other.dud==0){
    hp-=2;
    script_execute(scr_betaannihilatorpain);
    }
Collision Event with object obj_shockexplosion:

execute code:

if (other.dud==0){
    hp+=-(2*(1+(global.attacklevel/10)));
    script_execute(scr_betaannihilatorpain);
    }
Collision Event with object obj_shockballexplosion:

execute code:

if (other.dud==0)
    armor+=-(30*(1+(global.attacklevel/10)));
Collision Event with object obj_enemympfbexplosion:

execute code:

if (other.dud==0){
    hp-=3;
    script_execute(scr_betaannihilatorpain);
    }
Collision Event with object obj_pushbox:

execute code:

global.erasetop=0;
global.topmessage="Unable to connect; subject is inactive";
scr_sound("glo_crackfail");
Collision Event with object obj_thor:

execute code:

if (thored==0){
    armor+=-(35*(1+(global.attacklevel/10)));
    thored=1;
    }
Collision Event with object obj_enemyshockballexplosion:

execute code:

if (other.dud==0)
    armor-=30;
Collision Event with object obj_enemyshockexplosion:

execute code:

if (other.dud==0){
    hp-=2;
    scr_betaannihilatorpain();
    }
Collision Event with object obj_enemypulse:

execute code:

with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
armor-=2;
instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
Collision Event with object obj_enemydetonator:

execute code:

if (other.dud==0 && !other.annibeta){
    other.annibeta=1;
    hp-=1;
    script_execute(scr_betaannihilatorpain);
    scr_shakescreen(1);
    }
Keyboard Event for Key:

execute code:

if (obj_sabot.annihilatorbeta && !ignoreall){
    ignoreall=1;
    state=1;
    alarm[2]=24;
    facing=0;
    sprite_index=spr_komatoannihilator_walkleft;
    }
Keyboard Event for Key:

execute code:

if (obj_sabot.annihilatorbeta && !ignoreall){
    ignoreall=1;
    state=1;
    alarm[2]=24;
    facing=1;
    sprite_index=spr_komatoannihilator_walk;
    }
Draw Event:

execute code:

//Basic
if (sprite_index==spr_komatoannihilator_body || sprite_index==spr_komatoannihilator_bodyleft){
    if (facing==0){
        draw_sprite(spr_komatoannihilator_bodyleft,0,x,y)
        draw_sprite(spr_komatoannihilator_armsleft,0,x,y);
        }
    else{
        draw_sprite(spr_komatoannihilator_body,0,x,y)
        draw_sprite(spr_komatoannihilator_arms,0,x,y);
        }
    }
else{
    draw_sprite(sprite_index,image_single,x,y)
    }
Key Press Event for C-key Key:

execute code:

if (obj_sabot.annihilatorbeta && !ignoreall){
obj_sabot.annihilatorbeta=0;
global.ignoreall=0;
obj_sabot.ignoresmooth=1;
obj_sabot.alarm[4]=2;
obj_sabot.alarm[5]=1;
obj_iji.takingpain=0;
obj_iji.recovering=0;
global.state=1;
(instance_create(obj_iji.x,obj_iji.y,obj_blackblanket)).alarm[0]=2;
}
Key Press Event for X-key Key:

execute code:

if (obj_sabot.annihilatorbeta && !ignoreall){
ignoreall=1;
state=0;
if (facing==0){
    sprite_index=spr_komatoannihilator_bodyleft;
    tempid=instance_create(x-24,y+100,obj_chargetell);
    tempid.tempid=id;
    }
else{
    sprite_index=spr_komatoannihilator_body;
    tempid=instance_create(x+124,y+100,obj_chargetell);
    tempid.tempid=id;
    }
scr_sound("tor_gather");
//scr_sound("tor_gather_q03");
firingplasma=1;
alarm[2]=23;
alarm[6]=20;
}
______________________________________________________

Information about object: obj_asha2
Sprite: spr_asha_pose1left
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_komatoassassin
Mask: 

Create Event:

execute code:

lastx=x;
lasty=y;
hp=10;
maxhp=10;
armor=200;
maxarmor=200;
if (global.suddendeath){
    hp=1;
    maxhp=1;
    armor=100;
    maxarmor=100;
    }
enemytype=12;
resistance=1;
security=20;
asha=1;
asha2=1;
smashx=6048;
smashy=3040;
killdataid=755;
Alarm Event for alarm 0:

execute code:

if (hp>0){
//Uppercut, Backstab, Upslash
if (sprite_index==spr_asha_uppercut || sprite_index==spr_asha_uppercutleft || sprite_index==spr_asha_backstab || sprite_index==spr_asha_backstableft || sprite_index==spr_asha_upslash){
    image_single=-1;
    image_speed=1;
    image_index=1;
    scr_sound("glo_swipe");
    }

//Firing in pose1
if (sprite_index==spr_asha_pose1 || sprite_index==spr_asha_pose1left){
scr_sound("wea_plas");
scr_shakescreen(3);
shotcount+=1;
if (sprite_index==spr_asha_pose1){
    tempid=instance_create(x+49,y+10,obj_enemyplasmatrace);
    with (tempid)
        scr_enemyplasmatrace(1);
    }
else{
    tempid=instance_create(x-24,y+10,obj_enemyplasmatrace);
    with (tempid)
        scr_enemyplasmatrace(0);
    }

if (sprite_index==spr_asha_pose1)
    sprite_index=spr_asha_pose1fire;
else
    sprite_index=spr_asha_pose1fireleft;
if (shotcount!=5){
    alarm[3]=5;
    alarm[0]=8;
    }
}
}
Alarm Event for alarm 1:

execute code:

if (hp>0){
//Visibility time is up
if (sprite_index==spr_asha_pose2){
    scr_sound("wea_plas");
    scr_shakescreen(3);
    tempid=instance_create(x+29,y+42,obj_enemyplasmatrace);
    with(tempid)
        scr_enemyplasmatrace(1);
    }
if (sprite_index==spr_asha_pose2left){
    scr_sound("wea_plas");
    scr_shakescreen(3);
    tempid=instance_create(x+4,y+42,obj_enemyplasmatrace);
    with(tempid)
        scr_enemyplasmatrace(0);
    }

alarm[2]=2;
//alarm[2]=random(15-(global.difficulty*5))+20-(global.difficulty*5);
instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
visible=0;
image_single=0;
image_index=0;
sprite_index=spr_asha_basic;

}
Alarm Event for alarm 2:

execute code:

//Recieve orders, appear and execute
if (global.hp>0 && hp>0){

upslashing=0;
upslashwait=0;
image_index=0;
image_single=0;
perform=0;
fakeperform=0;
rageperform=0;
performsmash=0;
randomfakes=0;
plasmavortex=0;

repeat(10){

if (!perform){
x=obj_sabot.x;
y=obj_sabot.y;
sprite_index=spr_asha_basic;
randomstate=floor(random(9));
if (hp<=3) //add smash chance
    randomstate=floor(random(10));
temprand=0;

//Plasma rage
randomsuper=random(1);
if (randomsuper>0.95 && supercool==0){
    scr_sound("ash_ambient");
    supercool=1;
    alarm[7]=600;
    rageperform=0;
    perform=1;
    fakeperform=1;
    randomstate=100;
    alarm[2]=0;
    //do Plasma vortex instead here
    vortexrand=random(1);
    if (vortexrand<0.5){ //VORTEX chance
        plasmavortex=1;
        vortexcyc=0;
        sprite_index=spr_asha_vortex;
        image_single=0;
        hspeed=0;
        vspeed=-6+global.difficulty;
        gravity=0.2;
        y=2912;
        x=6016+random(320);
        //x=5984+random(384);
        instance_create(x,y,obj_megaflash);
        visible=1;
        exit;
        }
    else{
        alarm[5]=2;
        plasmarage=10;
        exit;
        }
    }

//Five-shot in front of Iji
if (randomstate==0){
temprand=random(150)+100;
if (global.facing==0){
    sprite_index=spr_asha_pose1;
    if (place_free(obj_iji.x-temprand,obj_iji.y-20)){
        x=obj_iji.x-temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
else if (global.facing==1){
    sprite_index=spr_asha_pose1left;
    if (place_free(obj_iji.x+temprand,obj_iji.y-20)){
        x=obj_iji.x+temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) && !place_free(x,y+1) && !collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1)){
        alarm[1]=65-(global.difficulty*5);
        alarm[0]=30-(global.difficulty*5);
        shotcount=0;
        scr_sound("tor_gather");
        if (sprite_index==spr_asha_pose1)
            (instance_create(x+65,y+10,obj_chargetell)).tempid=id;
        if (sprite_index==spr_asha_pose1left)
            (instance_create(x-40,y+10,obj_chargetell)).tempid=id;
        if (hp<=4 || insane){
            temprand=random(1);
            if (temprand<0.3 && tauntwait==0){
                scr_sound("ash_ambient");
                tauntwait=300+ceil(random(200));
                }
            }
        }
    else
        perform=0;
    }
}

//Dual-shot behind Iji
if (randomstate==1){
temprand=random(150)+100;
if (global.facing==0){
    sprite_index=spr_asha_pose2left;
    if (place_free(obj_iji.x+temprand,obj_iji.y-20)){
        x=obj_iji.x+temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
else if (global.facing==1){
    sprite_index=spr_asha_pose2;
    if (place_free(obj_iji.x-temprand,obj_iji.y-20)){
        x=obj_iji.x-temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) && !place_free(x,y+1) && !collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1)){
        alarm[1]=30-global.difficulty*5;
        scr_sound("tor_gather");
        if (sprite_index==spr_asha_pose2)
            (instance_create(x+45,y+42,obj_chargetell)).tempid=id;
        if (sprite_index==spr_asha_pose2left)
            (instance_create(x-12,y+42,obj_chargetell)).tempid=id;
        if (hp<=4 || insane){
            temprand=random(1);
            if (temprand<0.3 && tauntwait==0){
                scr_sound("ash_ambient");
                tauntwait=300+ceil(random(200));
                }
            }
        }
    else
        perform=0;
    }
}

//Downstab
if (randomstate==2){
temprand=random(64)+256;
sprite_index=spr_asha_downstab;
if (place_free(obj_iji.x,obj_iji.y-temprand)){
    x=obj_iji.x;
    y=obj_iji.y-temprand;
    if (!collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1)){
        gravity=1;
        gravity_direction=270;
        perform=1;
        }
    else
        sprite_index=spr_asha_basic;
    }
}

//Uppercut
if (randomstate==3 && global.difficulty!=0){
temprand=random(1);
if (temprand>0.5){
    sprite_index=spr_asha_uppercut;
    if (place_free(obj_iji.x-50,obj_iji.y-20) && !place_free(obj_iji.x-50,obj_iji.y+64)){
        x=obj_iji.x-50;
        y=obj_iji.y-20;
        perform=1;
        }
    }
else{
    sprite_index=spr_asha_uppercutleft;
    if (place_free(obj_iji.x+32,obj_iji.y-20) && !place_free(obj_iji.x+32,obj_iji.y+64)){
        x=obj_iji.x+32;
        y=obj_iji.y-20;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) && !place_free(x,y+1)){
        if (hp<=4 || insane){
            temprand=random(1);
            if (temprand<0.3 && tauntwait==0){
                scr_sound("ash_ambient");
                tauntwait=300+ceil(random(200));
                }
            }
        image_single=0;
        alarm[1]=39-(global.difficulty*5);
        alarm[0]=34-(global.difficulty*5);
        }
    else
        perform=0;
    }
}

//Backstab
if (randomstate==4){
    if (hp<4 && global.difficulty!=0)
        randomstate=5;
    else{
        if (global.facing==0){
            sprite_index=spr_asha_backstableft;
            if (place_free(obj_iji.x+50,obj_iji.y-30) && !place_free(obj_iji.x+32,obj_iji.y+32)){
                x=obj_iji.x+50;
                y=obj_iji.y-30;
                perform=1;
                }
            }
        else if (global.facing==1){
            sprite_index=spr_asha_backstab;
            if (place_free(obj_iji.x-50,obj_iji.y-30) && !place_free(obj_iji.x-50,obj_iji.y+32)){
                x=obj_iji.x-50;
                y=obj_iji.y-30;
                perform=1;
                }
            }
        if (perform){
            move_contact_solid(270,64);
            if (place_free(x,y) && !place_free(x,y+1)){
                image_single=0;
                alarm[1]=34-(global.difficulty*5);
                alarm[0]=30-(global.difficulty*5);
                if (hp<=4 || insane){
                    temprand=random(1);
                    if (temprand<0.3 && tauntwait==0){
                        scr_sound("ash_ambient");
                        tauntwait=300+ceil(random(200));
                        }
                    }
                }
            else
                perform=0;
            }
        }
    }

//Upslash
if (randomstate==5){
sprite_index=spr_asha_upslash;
x=obj_iji.x;
y=obj_iji.y;
if (place_free(x,y)){
    move_contact_solid(270,384);
    if (!place_free(x,y+1) && (y-obj_iji.y)>128 && obj_iji.vspeed<2){
        perform=1;
        image_single=0;
        if (hp<=4 || insane){
            temprand=random(1);
            if (temprand<0.3 && tauntwait==0){
                scr_sound("ash_ambient");
                tauntwait=300+ceil(random(200));
                }
            }
        }
    else{
        x=obj_sabot.x;
        y=obj_sabot.y;
        }
    }
}

/*
//Laser daggers
if (randomstate==6){
    x=random(800)+obj_iji.x-400;
    y=random(300)+obj_iji.y-300;
    if (place_free(x,y) && distance_to_object(obj_iji)>192 && !collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1)){
        perform=1;
        fakeperform=1;
        alarm[2]=random(15-(global.difficulty*5))+15-(global.difficulty*5);
        instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
        if (x>obj_iji.x){
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=225;
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=180;
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=135;
            }
        else{
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=-45;
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=0;
            tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_laserdagger);
            tempid.direction=45;
            }
        }
    }
*/

//Fake attack
if (randomstate==6){
    randomfakes=ceil(random(4))+4;
    elecbomb=0;
    alarm[4]=5;
    perform=1;
    fakeperform=1;
    if (laughcool==0 && hp>3){
        laughcool=300+ceil(random(300));
        scr_sound("ash_ambient2");
        }
    }

//Elecbombs
if (randomstate==7 && elecbombcool==0){
    elecbombcool=1;
    alarm[6]=300;
    randomfakes=5;
    elecbomb=1;
    alarm[4]=5;
    perform=1;
    fakeperform=1;
    if (laughcool==0 && hp>3){
        laughcool=300+ceil(random(300));
        scr_sound("ash_ambient2");
        }
    }

//Megasmash
if (randomstate>=8 && elecbombcool==0){
    scr_sound("ash_ambient");
    elecbombcool=1;
    performsmash=1;
    perform=1;
    sprite_index=spr_asha_smash;
    alarm[6]=300;
    x=6176;
    y=smashy-100;
    if (global.difficulty==0){
        gravity=0.25;
        vspeed=-8;
        y+=23;
        }    
    if (global.difficulty==1){
        gravity=0.25;
        vspeed=-6.5;
        y-=21;
        }
    if (global.difficulty==2){
        gravity=0.25;
        vspeed=-5;
        y-=55;
        }
    visible=1;
    image_single=0;
    scr_sound("glo_teleport");
    if (!donesmashonce || global.difficulty==0){
        donesmashonce=1;
        obj_asha2safe.visible=1;
        obj_asha2safe.sprite_index=spr_iosa2_safeu;
        }
    }

} //End of perform
} //End of repeat

//Perform
if (perform){
    if (!fakeperform && sprite_index!=spr_asha_basic){
        instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
        visible=1;
        }
    }
else
    alarm[2]=2;
}
Alarm Event for alarm 3:

execute code:

//Revert to pose1 animation
if (hp>0){
if (sprite_index==spr_asha_pose1fire)
    sprite_index=spr_asha_pose1;
else if (sprite_index==spr_asha_pose1fireleft)
    sprite_index=spr_asha_pose1left;
    }
Alarm Event for alarm 4:

execute code:

if (randomfakes>0){
    if (elecbomb){
        xrand=6000+random(352);
        yrand=2816+random(96);
        instance_create(xrand,yrand,obj_elecbomb);
        instance_create(xrand,yrand,obj_megaflash);
        }
    else
        instance_create(random(600)+obj_iji.x-300,random(400)+obj_iji.y-200,obj_megaflash);
    randomfakes-=1;
    if (randomfakes==0)
        alarm[4]=2;
    else
        alarm[4]=3;
    }
else
    alarm[2]=2;
Alarm Event for alarm 5:

execute code:

if (!rageperform && !plasmavortex){
    if (!donerageonce || global.difficulty==0){
        donerageonce=1;
        obj_asha2safe.visible=1;
        obj_asha2safe.sprite_index=spr_iosa2_safed;
        }
    rageperform=1;
    alarm[5]=50-(global.difficulty*10);
    image_index=0;
    image_single=-1;
    image_speed=0.5;
    if (obj_iji.x<6182){
       x=5888;
       sprite_index=spr_asha_wall;
       }
    else{
       x=6464;
       sprite_index=spr_asha_wallleft;
       }
    y=2780+random(60);
    visible=1;
    instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
    }

else{
if (visible){
    instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
    visible=0;
    image_single=0;
    image_index=0;
    sprite_index=spr_asha_basic;
    }
plasmarage-=1;
if (plasmarage>0){
    scr_sound("wea_plas");
    xrand=5904+random(544);
    yrand=3024-plasmarage*32;
    scr_shakescreen(3);
    instance_create(xrand,yrand,obj_megaflash);
    tempid=instance_create(xrand,yrand,obj_enemyplasmatrace);
    with (tempid){
        if (obj_asha2.xrand>6176)
            scr_enemyplasmatrace(0);
        else
            scr_enemyplasmatrace(1);
        }
    alarm[5]=2;
    }
else{
    alarm[2]=30-global.difficulty*10;
    obj_asha2safe.visible=0;
    }
}
Alarm Event for alarm 6:

execute code:

elecbombcool=0;
Alarm Event for alarm 7:

execute code:

supercool=0;
Step Event:

execute code:

thored=0;
plasmaed=0;
cfised=0;

if (laughcool>0)
    laughcool-=1;
if (tauntwait>0)
    tauntwait-=1;

//"WIN"
if (obj_sabot.gameover && !winquote && hp>0){
    winquote=1;
    win=30;
    }
if (win>0)
    win-=1;
if (win==1)
    scr_sound("ash_win2");

//Plasma vortex
if (plasmavortex){
    if (vspeed>=0){
        vortexcyc+=1;
        gravity=0.1;
        }
    else{
        pvicyc+=1;
        if (pvicyc==2){
            pvicyc=0;
            if (image_single==0)
                image_single=1;
            else
                image_single=0;
            }
        }
    if (vortexcyc==2){
        (instance_create(x-54,y+8,obj_plasmavortex)).dir=7;
        scr_shakescreen(3);
        scr_sound("wea_plas");
        }
    if (vortexcyc==4){
        (instance_create(x-36,y+48,obj_plasmavortex)).dir=6;
        scr_shakescreen(3);
        scr_sound("wea_plas");
        }
    if (vortexcyc==6){
        (instance_create(x+8,y+62,obj_plasmavortex)).dir=5;
        scr_shakescreen(3);
        scr_sound("wea_plas");
        }
    if (vortexcyc==8){
        (instance_create(x+50,y+40,obj_plasmavortex)).dir=4;
        scr_shakescreen(3);
        scr_sound("wea_plas");
        }
    if (vortexcyc==10){
        (instance_create(x+74,y-12,obj_plasmavortex)).dir=3;
        scr_shakescreen(3);
        scr_sound("wea_plas");
        }
    if (vortexcyc==12){
        (instance_create(x+50,y-66,obj_plasmavortex)).dir=2;
        scr_shakescreen(3);
        scr_sound("wea_plas");
        }
    if (vortexcyc==14){
        (instance_create(x-10,y-80,obj_plasmavortex)).dir=1;
        scr_shakescreen(3);
        scr_sound("wea_plas");
        }
    if (vortexcyc==16){
        (instance_create(x-70,y-60,obj_plasmavortex)).dir=8;
        scr_shakescreen(3);
        scr_sound("wea_plas");
        }
    if (vortexcyc==18){
        (instance_create(x-84,y,obj_plasmavortex)).dir=7;
        scr_shakescreen(3);
        scr_sound("wea_plas");
        }
    if (vortexcyc==20){
        (instance_create(x-68,y+60,obj_plasmavortex)).dir=6;
        scr_shakescreen(3);
        scr_sound("wea_plas");
        }
    if (vortexcyc==22){
        (instance_create(x-4,y+84,obj_plasmavortex)).dir=5;
        scr_shakescreen(3);
        scr_sound("wea_plas");
        }
    if (vortexcyc==24){
        (instance_create(x+60,y+60,obj_plasmavortex)).dir=4;
        scr_shakescreen(3);
        scr_sound("wea_plas");
        }
    if (vortexcyc==26){
        (instance_create(x+80,y,obj_plasmavortex)).dir=3;
        scr_shakescreen(3);
        scr_sound("wea_plas");
        }
    if (vortexcyc==3)
        image_single=2;
    if (vortexcyc==5)
        image_single=3;
    if (vortexcyc==7)
        image_single=4;
    if (vortexcyc==9)
        image_single=5;
    if (vortexcyc==11)
        image_single=6;
    if (vortexcyc==13)
        image_single=7;
    if (vortexcyc==15)
        image_single=8;
    if (vortexcyc==17)
        image_single=9;
    if (vortexcyc==19)
        image_single=10;
    if (vortexcyc==21)
        image_single=11;
    if (vortexcyc==23)
        image_single=12;
    if (vortexcyc==25)
        image_single=13;
    if (vortexcyc==27){
        hspeed=0;
        vspeed=0;
        plasmavortex=0;
        perform=0;
        fakeperform=0;
        rageperform=0;
        scr_assassinpain(1);
        alarm[2]=30-global.difficulty*10;
        }
    }

//Megasmash
if (performsmash==1){
if (vspeed<0){
    if (image_single==0)
        image_single=1;
    else
        image_single=0;
    }
if (vspeed>0){
    vspeed=0;
    gravity=0;
    gosmash=1;
    scr_sound("glo_swipe");
    }
if (gosmash)
    smashcyc+=1;
if (smashcyc==1){
    image_single=2;
    y+=10;
    }
if (smashcyc==2){
    sprite_index=spr_asha_smash2;
    image_single=0;
    y+=30;
    }
if (smashcyc==3){
    image_single=1;
    y+=50;
    }
if (smashcyc==4){
    image_single=2;
    y+=80;
    }
if (smashcyc==5){
    scr_sound("exp_turret");
    scr_sound("exp_mpfb");
    scr_shakescreen(3);
    visible=0;
    instance_create(x,y-128,obj_megaflash);
    x=obj_sabot.x;
    y=obj_sabot.y;
    gravity=0;
    vspeed=0;
    megasmash=10;
    performsmash=0;
    alarm[2]=30;
    gosmash=0;
    smashcyc=0;
    obj_asha2safe.visible=0;
    if (global.specialbake==0){
        repeat(80)
            instance_create(smashx+random(384)-56,smashy-random(32),obj_ashadots);
        }
    with (obj_ashadots){
        speed=random(15);
        direction=point_direction(x,y,6176,3296);
        direction+=180;
        vspeed-=random(50);
        }
    }
}

//Dish out megasmashes
if (megasmash>0)
    megasmash-=1;
if (((megasmash==9 || megasmash==6 || megasmash==3) && global.specialbake==0) || megasmash==9){
    for (i=0; i<9; i+=1)
        instance_create(smashx+i*32,smashy,obj_ashasmash);
    if (obj_iji.x>=6016-6 && obj_iji.x<6336 && obj_iji.ysmashy-160){
        with (obj_iji){ //DAMAGE
            if (!takingpain && !recovering){
                global.hp-=3;
                global.damage+=3;
                scr_knockdown(1,2);
                if (sprite_index==spr_knockdown || sprite_index==spr_knockdownleft)
                    vspeed=-20;
                }
            }
        }
    //Disruptor
    with (obj_disruptor){
        if (x+60>=6016 && x-60<6336 && y-60obj_asha2.smashy-160)
            scr_disruptorexplo();
        }
    //Reflector
    with (obj_reflector){
        if (x+60>=6016 && x-60<6336 && y-60obj_asha2.smashy-160)
            scr_reflectorexplo();
        }
    //Barrier
    with (obj_shockbarrier){
        if (x+16>=6016 && x-16<6336 && y-32obj_asha2.smashy-160)
            scr_barrierexplo();
        }
    }

//Avoid elec
if (hp>0 && visible && y>3040 && sprite_index!=spr_asha_smash2)
    scr_assassinpain(1);

//Execute upslash
if (sprite_index==spr_asha_upslash && visible){
    upslashwait+=1;
    if (upslashwait>60 && !upslashing){
        upslashing=1;
        alarm[1]=1;
        }
    if (obj_iji.y>y-32 && !upslashing){
        upslashing=1;
        alarm[1]=1;
        }
    if (distance_to_object(obj_iji)<64 && !upslashing){
        upslashing=1;
        alarm[0]=1;
        alarm[1]=5;
        }
    }

//Upercut box
if (sprite_index==spr_asha_uppercut && image_index==2)
    (instance_create(x,y-45,obj_assassin_uppercut)).facing=1;
if (sprite_index==spr_asha_uppercutleft && image_index==2)
    instance_create(x-50,y-45,obj_assassin_uppercut);

//Backstab box
if (sprite_index==spr_asha_backstab && image_index==1)
    (instance_create(x-10,y-5,obj_assassin_backstab)).facing=1;
if (sprite_index==spr_asha_backstableft && image_index==1)
    instance_create(x-65,y-5,obj_assassin_backstab);

//Upslash box
if (sprite_index==spr_asha_upslash && image_index==1)
    instance_create(x-35,y-64,obj_assassin_upslash);

//Downstab recovery
if(!place_free(x,y) && sprite_index==spr_asha_downstab && visible){
    alarm[2]=2;
    instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
    visible=0;
    gravity=0;
    vspeed=0;
    sprite_index=spr_asha_pose1;
    }
if (vspeed>22)
    vspeed=22;
if (visible && sprite_index==spr_asha_downstab && y>obj_iji.y+64)
    scr_assassinpain(1);

//Weapon sparks
if (visible && instance_number(obj_asha2bar)==1){
smoke+=1;
if (smoke==5){
    smoke=0;
    if (sprite_index==spr_asha_pose1)
        instance_create(x+65,y+10,obj_shockemit);
    if (sprite_index==spr_asha_pose1left)
        instance_create(x-40,y+10,obj_shockemit);
    if (sprite_index==spr_asha_pose2)
        instance_create(x+45,y+42,obj_shockemit);
    if (sprite_index==spr_asha_pose2left)
        instance_create(x-12,y+42,obj_shockemit);
    }
}

//Change of plans
if (sprite_index==spr_asha_uppercut || sprite_index==spr_asha_uppercutleft || sprite_index==spr_asha_backstab || sprite_index==spr_asha_backstableft){
    if (visible && distance_to_object(obj_iji)>100){
        scr_assassinpain(1);
        alarm[2]=2;
        }
    if (visible && ((sprite_index==spr_asha_uppercut && (obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2 < bbox_left+(bbox_right-bbox_left)/2+10)) || (sprite_index==spr_asha_uppercutleft && (obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2 > bbox_left+(bbox_right-bbox_left)/2-10)))){
        if (alarm[1]>6){
            alarm[1]=5;
            alarm[0]=2;
            }
        }
    if (visible && ((sprite_index==spr_asha_backstab && (obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2 < bbox_left+(bbox_right-bbox_left)/2+10)) || (sprite_index==spr_asha_backstableft && (obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2 > bbox_left+(bbox_right-bbox_left)/2-10)))){
        if (alarm[1]>6){
            alarm[1]=4;
            alarm[0]=2;
            }
        }
    }
if (sprite_index==spr_asha_pose1 || sprite_index==spr_asha_pose1left || sprite_index==spr_asha_pose1fire || sprite_index==spr_asha_pose1fireleft || sprite_index==spr_asha_pose2 || sprite_index==spr_asha_pose2left){
    if (visible && distance_to_object(obj_iji)<30){
        scr_assassinpain(1);
        alarm[2]=2;
        }
    }

if ((sprite_index==spr_asha_wall || sprite_index==spr_asha_wallleft || (sprite_index==spr_asha_vortex && (image_single==0 || image_single==1))) && visible){
chargesoundcyc+=1;
if (chargesoundcyc>=5){
    chargesoundcyc=0;
    scr_sound("tor_gather_q03");
    }
}
End Step Event:

execute code:

//Armor
if (armor<199.9)
    armor+=0.1;

//Pain from armordrop
if (armor<=0){
    hp-=1;
    if (((hp==9 || hp==7 || hp==5 || hp==3) && global.difficulty>0) || (hp>=2 && global.difficulty==0)){
        tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_pickuphealth);
        if (tempid.x<5984)
            tempid.x=5984;
        if (tempid.x>6368)
            tempid.x=6368;
        if (tempid.y>3008)
            tempid.y=3008;
        }
    scr_assassinpain();
    }

//Return to sabot
if (!visible && angry){
    x=obj_sabot.x;
    y=obj_sabot.y;
    }
Collision Event with object obj_bullet:

execute code:

if (visible)
scr_assassinpain(1);
Collision Event with object obj_pellet:

execute code:

if (sprite_index!=spr_asha_smash && sprite_index!=spr_asha_smash2){
    if (other.stun)
        scr_assassinpain(1);
    else{
        armor-=9*global.atmult;
        instance_create(other.x-3+random(7),other.y-3+random(7),obj_komatosplat);
        }
    }

with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stun)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_kickbox:

execute code:

if (other.image_index==0 && visible)
    scr_assassinpain(1);
Collision Event with object obj_rocketexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_mpfbexplosion:

execute code:

if (!other.dud && visible && angry)
    scr_assassinpain(1);
Collision Event with object obj_pulse:

execute code:

if (visible)
scr_assassinpain(1);
Collision Event with object obj_enemyrocketexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_shockexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_shockballexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_enemympfbexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_pushbox:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_thor:

execute code:

if (!other.dud && !thored && visible){
    scr_assassinpain(1);
    thored=1;
    }
Collision Event with object obj_enemyshockballexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_enemyshockexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_impulseexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
______________________________________________________

Information about object: obj_asha2trigger
Sprite: spr_block
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Alarm Event for alarm 0:

execute code:

isdead=1;
obj_sabot.temporaryflash=0;
Alarm Event for alarm 1:

execute code:

with (obj_iji)
    scr_sound("iji_berserk",1);
Step Event:

execute code:

//Begin the first fight
if (obj_asha2.visible && global.ignoreall==0 && !triggered && ready){
    triggered=1;
    scr_shakescreen(2);
    instance_create(obj_asha2.bbox_left+((obj_asha2.bbox_right-obj_asha2.bbox_left)/2), obj_asha2.bbox_top+((obj_asha2.bbox_bottom-obj_asha2.bbox_top)/2), obj_megaflash);
    obj_asha2.visible=0;
    obj_asha2.x=obj_sabot.x;
    obj_asha2.y=obj_sabot.y;
    obj_asha2.alarm[2]=45;
    obj_asha2.angry=1;
    instance_create(x,y,obj_asha2bar);
    obj_iji.attitude=1;
    scr_sound("glo_electrocute");
    instance_create(obj_sabot.x,obj_sabot.y,obj_asha2safe);
    with (obj_xelec){
        elec=1;
        (instance_create(x+8+random(48),y+8+random(16),obj_thorspark)).direction=random(180);
        }
    with (obj_trigger){
        if (textid=="chatx4" || textid=="chatxe")
            instance_destroy();
        }
    }

//Begin the rematch after being checkpoint-ressurected
if (rematch==1){
    if (obj_asha2.visible && global.ignoreall==0 && !rtriggered && rready){
        rtriggered=1;
        instance_create(obj_asha2.bbox_left+((obj_asha2.bbox_right-obj_asha2.bbox_left)/2), obj_asha2.bbox_top+((obj_asha2.bbox_bottom-obj_asha2.bbox_top)/2), obj_megaflash);
        obj_asha2.visible=0;
        obj_asha2.x=obj_sabot.x;
        obj_asha2.y=obj_sabot.y;
        obj_asha2.alarm[2]=45;
        obj_asha2.angry=1;
        //if (global.difficulty==0)
        obj_asha2.hp=obj_sabot.asha2hp;
        instance_create(x,y,obj_asha2bar);
        obj_iji.attitude=1;
        instance_create(obj_sabot.x,obj_sabot.y,obj_asha2safe);
        with (obj_trigger){
            if (textid=="chatxm")
                instance_destroy();
            }
        }
    }

//Begin the second rematch after being checkpoint-ressurected twice
if (rematch>=2){
    if (obj_asha2.visible && global.ignoreall==0 && !rtriggered2 && rready){
        rtriggered2=1;
        instance_create(obj_asha2.bbox_left+((obj_asha2.bbox_right-obj_asha2.bbox_left)/2), obj_asha2.bbox_top+((obj_asha2.bbox_bottom-obj_asha2.bbox_top)/2), obj_megaflash);
        obj_asha2.visible=0;
        obj_asha2.x=obj_sabot.x;
        obj_asha2.y=obj_sabot.y;
        obj_asha2.alarm[2]=45;
        obj_asha2.angry=1;
        //if (global.difficulty==0)
        obj_asha2.hp=obj_sabot.asha2hp;
        instance_create(x,y,obj_asha2bar);
        obj_iji.attitude=1;
        instance_create(obj_sabot.x,obj_sabot.y,obj_asha2safe);
        with (obj_trigger){
            if (textid=="chatxv")
                instance_destroy();
            }
        }
    }


//Asha killed
if (!donetrigger && isdead && global.hp>0 && !obj_iji.takingpain && obj_iji.y<3040 && obj_iji.y>2912 && obj_iji.x>5920 && obj_iji.x<6400 && (obj_iji.sprite_index==spr_basic || obj_iji.sprite_index==spr_basicleft || obj_iji.sprite_index==spr_run || obj_iji.sprite_index==spr_runleft)){
    donetrigger=1;
    global.ignoreall=1;
    if (global.facing==0)
        obj_iji.sprite_index=spr_basicleft;
    else
        obj_iji.sprite_index=spr_basic;
    if (global.specialtrigger1)
        (instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chatx5";
    else
        (instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chatxf";
    }

if (ready2 && !opened && !global.ignoreall){
    opened=1;
    instance_activate_object(obj_cdoor);
    with (obj_cdoor){
        if (trigger==37){
            scr_sound("glo_door");
            cracked=1;
            vspeed=-16;
            alarm[0]=6;
            }
        }
    }
______________________________________________________

Information about object: obj_asha2flash
Sprite: spr_nanoflash
Solid: false
Visible: true
Depth: -10
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (distance_to_object(obj_asha2)>100)
    instance_destroy();
direction=point_direction(x,y,obj_asha2.x+15,obj_asha2.y+50);
direction+=180;
speed=random(16)+2;
Step Event:

execute code:

speed*=0.94;
if (speed<0.05){
    instance_create(x,y,obj_ijisplat);
    instance_destroy();
    }
______________________________________________________

Information about object: obj_asha2bar
Sprite: spr_bossbar
Solid: false
Visible: true
Depth: -100
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=2/3;
originalwidth=(obj_asha2.maxhp)*2;
yadjust=-48;
Draw Event:

execute code:

if (yadjust<0+global.specialtrigger16*30 && obj_asha2.hp>0)
yadjust+=8;

x=floor(x);
y=floor(y);

if (!global.specialbake){
draw_set_color(c_black);
draw_rectangle(x-originalwidth-1,y-1,x+originalwidth,y+15,0);
draw_set_color(c_white);
draw_rectangle(x-originalwidth-1,y-1,x+originalwidth,y+15,1);
}
draw_sprite(spr_bossnames,1,x,y-10);

if (obj_asha2.hp>0){
if (!global.specialbake){
    width=(obj_asha2.hp)*2;
    draw_sprite_stretched(sprite_index,image_index,x-width,y,width*2,15);
    }
else{
    draw_sprite(spr_hpbarback,9,x-81,y);
    draw_sprite(spr_hpbar,ceil((obj_asha2.hp/obj_asha2.maxhp)*20),x-80,y);
    }
}

if (obj_asha2.hp<=0){
    yadjust-=8;
    if (yadjust<-64)
        instance_destroy();
    }
______________________________________________________

Information about object: obj_ashahead
Sprite: spr_ashahead
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_deactivateme
Mask: 

Create Event:

execute code:

gravity=0.8;
vspeed=-20;
image_speed=0.5;

if (x<6080)
hspeed=2;
else if (x>6272)
hspeed=-2;

Step Event:

execute code:

if (vspeed>20)
    vspeed=20;
//bloodcyc+=1;
//if (image_single!=0 && bloodcyc>=4){
//bloodcyc=0;
//(instance_create(x-4+random(8),y-4+random(8),obj_komatosplat)).depth=1;
//}
Collision Event with object obj_block:

execute code:

move_contact_solid(270,32);
if (vspeed>2){
    scr_sound("glo_debris");
    vspeed=-(vspeed*0.5);
    image_speed=0.25;
    }
else{
    move_contact_solid(270,32);
    vspeed=0;
    hspeed=0;
    image_single=0;
    }
______________________________________________________

Information about object: obj_ashagore
Sprite: spr_ashagore
Solid: false
Visible: true
Depth: 950000
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_xelec
Sprite: spr_crumblex2
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

if (elec==1 && global.hp>0 && !obj_iji.takingpain && !obj_iji.recovering){
    scr_shakescreen(3);
    global.armor=-100;
    //global.hp-=1;
    //global.damage+=1;
    //with (obj_iji)
    //    scr_pain();
    scr_sound("glo_electrocute");
    }
Collision Event with object obj_reflector:

execute code:

if (elec==1){
    with (other)
        scr_reflectorexplo();
    }
Collision Event with object obj_disruptor:

execute code:

if (elec==1){
    with (other)
        scr_disruptorexplo();
    }
Collision Event with object obj_shockbarrier:

execute code:

if (elec==1){
    with (other)
        scr_barrierexplo();
    }
Draw Event:

execute code:

if (elec==1){
if (global.specialbake){
x1=x+4+random(56);
y1=y+4+random(24);
draw_set_color(c_white);
draw_line(x,y+14+random(5),x+64,y+14+random(5));
}
else{
x1=x+4+random(56);
y1=y+4+random(24);
draw_set_color(c_white);
pensize=ceil(random(3));
draw_line_width(x,y+16,x1,y1,pensize);
pensize=ceil(random(3));
draw_line_width(x1,y1,x+64,y+16,pensize);
}
}
______________________________________________________

Information about object: obj_xelecpad
Sprite: spr_xelecpad
Solid: false
Visible: true
Depth: 1000
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_skysmasher
Sprite: spr_skysmasher
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_alliedenemy
Mask: 

Create Event:

execute code:

hp=1;
armor=400;
maxarmor=400;
if (global.suddendeath){
    armor=100;
    maxarmor=100;
    }
security=25;
resistance=1;
xstepmax=5;
ystepmax=5;
xdir=floor(random(2));
ydir=floor(random(2));
facing=floor(random(2));
image_single=facing;
fstepmax=30;
enemytype=15;
alarm[0]=5;
alarm[1]=1;
xorigin=x;
yorigin=y;
Alarm Event for alarm 0:

execute code:

alarm[0]=5;
if (image_single==0)
    (instance_create(x+random(32),y-8+random(16),obj_bigsmoke)).depth=1;
if (image_single==1)
    (instance_create(x-32+random(32),y-8+random(16),obj_bigsmoke)).depth=1;
if (image_single==2)
    (instance_create(x-16+random(32),y-8+random(16),obj_bigsmoke)).depth=1;

Alarm Event for alarm 1:

execute code:

if (tor){
    angry=1;
    xorigin=x-256;
    yorigin=y;
    }
Alarm Event for alarm 2:

execute code:

instance_destroy();
Alarm Event for alarm 5:

execute code:

if (!tor){
    angry=0;
    sstep=0;
    fstep=0;
    scr_sound("tur_lose");
    }
Alarm Event for alarm 6:

execute code:

firingrocket=0;
if (facing==0){
    scr_sound("wea_shoc");
    tempid=instance_create(x-32,y,obj_enemyshock);
    tempid.hspeed=-global.shockspeed;
    tempid.floorable=1;
    instance_create(x-32,y,obj_shockspark);
    sstep=0;
    }
else{
    scr_sound("wea_shoc");
    tempid=instance_create(x+32,y,obj_enemyshock);
    tempid.hspeed=global.shockspeed;
    tempid.floorable=1;
    instance_create(x+32,y,obj_shockspark);
    sstep=0;
    }
Alarm Event for alarm 7:

execute code:

if (alarm[8]>=1){
    alarm[7]=4;
    instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_nanospark);
    repeat(2)
        (instance_create(bbox_left-8+random(bbox_right-bbox_left+16),bbox_top-4+random(bbox_bottom-bbox_top+8),obj_glassspark)).image_index=4;
    }
Alarm Event for alarm 8:

execute code:

stunned=0;
Step Event:

execute code:

thored=0;
cfised=0;

if (angryprev==0 && angry==1 && !tor)
    scr_sound("tur_find");
angryprev=angry;

//Lose sight
if ((x < obj_shakescreen.x-1000) || (x > obj_shakescreen.x+1000) || (y < obj_shakescreen.y-800) || (y > obj_shakescreen.y+800)){
    angry=0;
    alarm[5]=0;
    sstep=0;
    fstep=0;
    alarm[6]=0;
    firingrocket=0;
    }

//Goto angry
if (angry && !angry2 && fstepfstepmax){
fstep=0;
fstepmax=60+random(60);
tempface=facing;
facing=floor(random(2));
if (tempface!=facing){
    turn=1;
    image_single=2;
    }
}
if (turn==1)
    tstep+=1;
if (tstep>=8){
    tstep=0;
    turn=0;
    image_single=facing;
    }
//Move
xstep+=1;
if (xstep>=xstepmax){
    xstep=0;
    xdir=floor(random(2));
    xstepmax=20+floor(random(40));
    }
if (xdir==0)
    hspeed-=0.1;
if (xdir==1)
    hspeed+=0.1;
if (hspeed<-1.2)
    hspeed=-1.2;
if (hspeed>1.2)
    hspeed=1.2;
if (xxorigin+32)
    xdir=0;

ystep+=1;
if (ystep>=ystepmax){
    ystep=0;
    ydir=floor(random(2));
    ystepmax=20+floor(random(20));
    }
if (ydir==0)
    vspeed-=0.1;
if (ydir==1)
    vspeed+=0.1;
if (vspeed<-3)
    vspeed=-3;
if (vspeed>3)
    vspeed=3;
if (yyorigin+128)
    ydir=0;
if (!place_free(x,y-32)){
    ydir=1;
    vspeed+=0.2;
    }
if (!place_free(x,y+32)){
    ydir=0;
    vspeed-=0.2;
    }
}

//Angry
if (angry){
//Fire
if (sstep<100)
    sstep+=1;
if (turn==0 && !firingrocket && !stunned && sstep>=60 && (abs(y-obj_iji.y-30)<6) && !place_meeting(x,y,obj_tor) && obj_iji.sprite_index!=spr_getup && obj_iji.sprite_index!=spr_getupleft){
    scr_sound("wea_charge");
    tempid=instance_create(x,y,obj_chargetell);
    tempid.tempid=id;
    alarm[6]=10;
    firingrocket=1;
    }
//Face
fstep+=1;
if (fstep>fstepmax){
fstep=0;
fstepmax=8;
tempface=facing;
if (!firingrocket){
    if (x>obj_iji.x+6)
        facing=0;
    else
        facing=1;
    }
if (tempface!=facing){
    turn=1;
    image_single=2;
    }
}
if (turn==1)
    tstep+=1;
if (tstep>=8){
    fstep=0;
    tstep=0;
    turn=0;
    image_single=facing;
    }
//Move
xstep+=1;
if (xstep>=xstepmax){
    xstep=0;
    xdir=floor(random(2));
    xstepmax=10+floor(random(10));
    }
if (xdir==0)
    hspeed-=0.5;
if (xdir==1)
    hspeed+=0.5;
if (hspeed<-5)
    hspeed=-5;
if (hspeed>5)
    hspeed=5;
if (xxorigin+64)
    xdir=0;

ystep+=1;
if (ystep>=ystepmax){
    ystep=0;
    ydir=floor(random(2));
    ystepmax=10+floor(random(10));
    if (y>obj_iji.y+30 || flyaway==1)
        ydir=0;
    else
        ydir=1;
    }
if (ydir==0)
    vspeed-=1;
if (ydir==1)
    vspeed+=1;
if (vspeed<-5)
    vspeed=-5;
if (vspeed>5)
    vspeed=5;
if (yyorigin+256)
    ydir=0;
if (!place_free(x,y-16)){
    ydir=1;
    vspeed+=1;
    }
if (!place_free(x,y+16)){
    ydir=0;
    vspeed-=1;
    }
}

//Death
if (armor<=0){
    scr_sound("exp_turret");
    scr_shakescreen(2);
    instance_create(x,y,obj_enemyrocketexplosion);
    instance_create(x,y,obj_explosioncenter);
    if (!tor)
        scr_dropammo(0,0,3,9);
    if (global.specialbake==0)
        maximum=20;
    else
        maximum=100;
    if (instance_number(obj_scrapwhite)
Collision Event with object obj_bullet:

execute code:

scr_smasherwake();
if (other.stagger){
    }
else{
    armor-=10*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_smoke);
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stagger)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_pellet:

execute code:

scr_smasherwake();
if (other.stun){
    sstep=0;
    firingrocket=0;
    alarm[6]=0;
    alarm[7]=4;
    alarm[8]=floor(15*(1+(global.attacklevel/10)));
    }
else{
    armor-=9*global.atmult;
    instance_create(other.x-3+random(7),other.y-3+random(7),obj_smoke);
    }
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stun)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else
        instance_create(x,y,obj_bullethit);
    instance_destroy();
    }
Collision Event with object obj_kickbox:

execute code:

if (other.image_index==0){
scr_sound("glo_kick");
repeat(20){
tempid=instance_create(x,y,obj_scrapwhite);
tempid.speed=random(6)+6;
tempid.direction=random(360);
}
scr_shakescreen(2);
instance_destroy();
}
Collision Event with object obj_rocketexplosion:

execute code:

if (other.dud==0)
armor=-100;
Collision Event with object obj_mpfbexplosion:

execute code:

if (other.dud==0)
armor=-100;
Collision Event with object obj_pulse:

execute code:

scr_smasherwake();
if (other.hyper==1 && armor=resistance){
    scr_sound("glo_kick");
    armor=-100;
    }
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (!other.linker)
    armor-=2*global.atmult;
if (other.linker)
    scr_pulselink(2);
Collision Event with object obj_enemyrocketexplosion:

execute code:

if (!tor || other.killsky){
    if (other.dud==0)
        armor=-100;
    }
Collision Event with object obj_shockexplosion:

execute code:

if (other.dud==0)
armor=-100;
Collision Event with object obj_shockballexplosion:

execute code:

if (other.dud==0){
    scr_smasherwake();
    armor-=30*global.atmult;
    }
Collision Event with object obj_enemympfbexplosion:

execute code:

if (!tor || other.killsky){
    if (other.dud==0)
        armor=-100;
    }
Collision Event with object obj_pushbox:

execute code:

global.erasetop=0;
global.topmessage="You need a Crack skill of "+string(security)+" to crack a Komato Skysmasher";
scr_sound("glo_crackfail");
global.ignorestation=90;

Collision Event with object obj_thor:

execute code:

if (thored==0){
    scr_smasherwake();
    armor-=35*global.atmult;
    thored=1;
    }
Collision Event with object obj_turret:

execute code:

if (other.speed>6)
    armor=-100;
Collision Event with object obj_enemyshockballexplosion:

execute code:

if (other.dud==0)
    armor+=-(30*(1+(global.attacklevel/10)));
Collision Event with object obj_enemyshockexplosion:

execute code:

if (other.dud==0)
    armor=-100;
Collision Event with object obj_impulseexplosion:

execute code:

if (other.image_index==0){
repeat(20){
tempid=instance_create(x,y,obj_scrapwhite);
tempid.speed=random(6)+6;
tempid.direction=random(360);
}
scr_shakescreen(2);
instance_destroy();
}
Draw Event:

execute code:

if (alarm[7]>0)
    stunyoff=(alarm[7] mod 2)*4;
else
    stunyoff=0;
draw_sprite(sprite_index,image_single,floor(x),floor(y+stunyoff));
______________________________________________________

Information about object: obj_blackblanket
Sprite: spr_sabot
Solid: false
Visible: true
Depth: -1000000
Persistent: false
Parent: 
Mask: 

Alarm Event for alarm 0:

execute code:

instance_destroy();
Draw Event:

execute code:

{
draw_set_color(c_black);
draw_rectangle(view_xview[0]-20,view_yview[0]-20,view_xview[0]+view_wview[0]+20,view_yview[0]+view_hview[0]+20,0);
}
______________________________________________________

Information about object: obj_whiteblanket
Sprite: spr_sabot
Solid: false
Visible: true
Depth: -1000000
Persistent: false
Parent: 
Mask: 

Alarm Event for alarm 0:

execute code:

instance_destroy();
Draw Event:

execute code:

{
draw_set_color(c_white);
draw_rectangle(view_xview[0]-20,view_yview[0]-20,view_xview[0]+view_wview[0]+20,view_yview[0]+view_hview[0]+20,0);
}
______________________________________________________

Information about object: obj_xrain
Sprite: spr_ammo11
Solid: false
Visible: false
Depth: 100
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=3+random(3);
Alarm Event for alarm 0:

execute code:

alarm[0]=1+ceil(random(2));
xrand=x-192+random(384);
yrand=y-192+random(384);
if (xrand>obj_shakescreen.x-420 && xrandobj_shakescreen.y-400 && yrand
______________________________________________________

Information about object: obj_xrain2
Sprite: spr_sabot
Solid: false
Visible: true
Depth: 100
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (x<4000 || x>6080 || y>1880 || !place_free(x,y))
    instance_destroy();
else if (y>1600 && x>5312 && x<5568)
    instance_destroy();
else if (y>1568 && x<4608)
    instance_destroy();
else if (y>1792 && x<4768)
    instance_destroy();
else{
    cyc=3+floor(random(6));
    alarm[0]=2;
    }
Alarm Event for alarm 0:

destroy the instance
Draw Event:

execute code:

while (cyc>0){
    if (!collision_point(x-4,y+32,obj_block,0,1)){
        cyc-=1;
        x-=4;
        y+=32;
        }
    else
        cyc=0;
    }
x-=4;
y+=32;
if (collision_point(x,y,obj_block,0,1)){
    x+=4;
    y-=32;
    }
if (global.specialbake){
draw_sprite(spr_lowrain,0,xstart,ystart);
draw_sprite(spr_lowrain,0,xstart+4,ystart-32);
draw_sprite(spr_lowrain,0,xstart+8,ystart-64);
}
else{
draw_set_color(c_silver);
draw_line(xstart,ystart,x,y);
}
______________________________________________________

Information about object: obj_splash
Sprite: spr_splash
Solid: false
Visible: true
Depth: 100
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5+random(0.5);
Step Event:

execute code:

if (image_index>3)
    instance_destroy();
______________________________________________________

Information about object: obj_xsplash
Sprite: spr_screen
Solid: false
Visible: false
Depth: 100
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=3+random(10);
Alarm Event for alarm 0:

execute code:

alarm[0]=8+random(8);
if (restrict){
xrand=2+random(28);
instance_create(x+xrand,y+32,obj_splash);
instance_create(x+xrand,y+24,obj_smoke);
}
else{
xrand=2+random(60);
instance_create(x+xrand,y+32,obj_splash);
instance_create(x+xrand,y+24,obj_smoke);
}
______________________________________________________

Information about object: obj_ashaghost
Sprite: spr_asha_pose1left
Solid: false
Visible: false
Depth: 10
Persistent: false
Parent: obj_activateme
Mask: 

Create Event:

execute code:

lastx=x;
lasty=y;
hp=10;
maxhp=10;
armor=200;
enemytype=12;
ashaghost=1;
image_alpha=0.35;
alarm[2]=5;
angry=1;
x=obj_sabot.x;
y=obj_sabot.y;
smashx=6048;
smashy=3040;
if (global.specialbake)
    instance_destroy();
Alarm Event for alarm 0:

execute code:

//Uppercut, Backstab, Upslash
if (sprite_index==spr_asha_uppercut || sprite_index==spr_asha_uppercutleft || sprite_index==spr_asha_backstab || sprite_index==spr_asha_backstableft || sprite_index==spr_asha_upslash){
    image_single=-1;
    image_speed=1;
    image_index=1;
    }
Alarm Event for alarm 1:

execute code:

//Visibility time is up
alarm[2]=2;
//(instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash)).depth=10;
visible=0;
image_single=0;
image_index=0;
sprite_index=spr_asha_basic;
Alarm Event for alarm 2:

execute code:

//Recieve orders, appear and execute
if (global.hp>0 && hp>0){

upslashing=0;
upslashwait=0;
image_index=0;
image_single=0;
perform=0;
repeat(10){

if (!perform){
x=obj_sabot.x;
y=obj_sabot.y;
sprite_index=spr_asha_basic;
randomstate=floor(random(8));
if (global.weapon==16)
    randomstate=7;
temprand=0;

//Five-shot in front of Iji
if (randomstate==0){
temprand=random(150)+100;
if (global.facing==0){
    sprite_index=spr_asha_pose1;
    if (place_free(obj_iji.x-temprand,obj_iji.y-20)){
        x=obj_iji.x-temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
else if (global.facing==1){
    sprite_index=spr_asha_pose1left;
    if (place_free(obj_iji.x+temprand,obj_iji.y-20)){
        x=obj_iji.x+temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) && !place_free(x,y+1) && !collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1)){
        alarm[1]=30-(global.difficulty*5);
        }
    else
        perform=0;
    }
}

//Dual-shot behind Iji
if (randomstate==1){
temprand=random(150)+100;
if (global.facing==0){
    sprite_index=spr_asha_pose2left;
    if (place_free(obj_iji.x+temprand,obj_iji.y-20)){
        x=obj_iji.x+temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
else if (global.facing==1){
    sprite_index=spr_asha_pose2;
    if (place_free(obj_iji.x-temprand,obj_iji.y-20)){
        x=obj_iji.x-temprand;
        y=obj_iji.y-20;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) && !place_free(x,y+1) && !collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1)){
        alarm[1]=30-global.difficulty*5;
        }
    else
        perform=0;
    }
}

//Downstab
if (randomstate==2){
temprand=random(64)+256;
sprite_index=spr_asha_downstab;
if (place_free(obj_iji.x,obj_iji.y-temprand)){
    x=obj_iji.x;
    y=obj_iji.y-temprand;
    if (!collision_line(x,y,obj_iji.x,obj_iji.y,obj_block,0,1)){
        gravity=1;
        gravity_direction=270;
        perform=1;
        }
    else
        sprite_index=spr_asha_basic;
    }
}

//Uppercut
if (randomstate==3 && global.difficulty!=0){
temprand=random(1);
if (temprand>0.5){
    sprite_index=spr_asha_uppercut;
    if (place_free(obj_iji.x-50,obj_iji.y-20) && !place_free(obj_iji.x-50,obj_iji.y+64)){
        x=obj_iji.x-50;
        y=obj_iji.y-20;
        perform=1;
        }
    }
else{
    sprite_index=spr_asha_uppercutleft;
    if (place_free(obj_iji.x+32,obj_iji.y-20) && !place_free(obj_iji.x+32,obj_iji.y+64)){
        x=obj_iji.x+32;
        y=obj_iji.y-20;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) && !place_free(x,y+1)){
        image_single=0;
        alarm[1]=39-(global.difficulty*5);
        alarm[0]=34-(global.difficulty*5);
        }
    else
        perform=0;
    }
}

//Backstab
if (randomstate==4){
if (global.facing==0){
    sprite_index=spr_asha_backstableft;
    if (place_free(obj_iji.x+50,obj_iji.y-30) && !place_free(obj_iji.x+32,obj_iji.y+32)){
        x=obj_iji.x+50;
        y=obj_iji.y-30;
        perform=1;
        }
    }
else if (global.facing==1){
    sprite_index=spr_asha_backstab;
    if (place_free(obj_iji.x-50,obj_iji.y-30) && !place_free(obj_iji.x-50,obj_iji.y+32)){
        x=obj_iji.x-50;
        y=obj_iji.y-30;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) && !place_free(x,y+1)){
        image_single=0;
        alarm[1]=34-(global.difficulty*5);
        alarm[0]=30-(global.difficulty*5);
        }
    else
        perform=0;
    }
}

//Upslash
if (randomstate==5){
sprite_index=spr_asha_upslash;
x=obj_iji.x;
y=obj_iji.y;
if (place_free(x,y)){
    move_contact_solid(270,384);
    if (!place_free(x,y+1) && (y-obj_iji.y)>128 && obj_iji.vspeed<2){
        perform=1;
        image_single=0;
        }
    else{
        x=obj_sabot.x;
        y=obj_sabot.y;
        }
    }
}

//Plasma rage
if (randomstate==6){
    image_single=0;
    perform=1;
    temprand=floor(random(2));
    if (temprand==0){
       x=5888;
       sprite_index=spr_asha_wall;
       }
    else{
       x=6464;
       sprite_index=spr_asha_wallleft;
       }
    y=2780+random(100);
    alarm[1]=30;
    }

//Megasmash
if (randomstate==7){
    perform=1;
    sprite_index=spr_asha_smash;
    temprand=random(1);
    if (temprand<0.5)
        sprite_index=spr_asha_vortex;
    image_single=0;
    temprand=floor(random(2));
    if (temprand==0)
        x=5984+random(128);
    else
        x=6208+random(128);
    y=smashy-100;
    if (global.difficulty==0){
        gravity=0.25;
        vspeed=-8;
        y+=23;
        }    
    if (global.difficulty==1){
        gravity=0.25;
        vspeed=-6.5;
        y-=21;
        }
    if (global.difficulty==2){
        gravity=0.25;
        vspeed=-5;
        y-=55;
        }
    }

} //End of perform
} //End of repeat

//Perform
if (perform){
    if (sprite_index!=spr_asha_basic){
        //(instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash)).depth=10;
        visible=1;
        }
    }
else
    alarm[2]=2;
}
Alarm Event for alarm 3:

execute code:

//Revert to pose1 animation
if (sprite_index==spr_asha_pose1fire)
    sprite_index=spr_asha_pose1;
else if (sprite_index==spr_asha_pose1fireleft)
    sprite_index=spr_asha_pose1left;
Step Event:

execute code:

//Avoid elec
if (visible && y>3040)
    scr_assassinpain(1);

//Megasmash recovery
if ((sprite_index==spr_asha_smash || sprite_index==spr_asha_vortex) && vspeed>0){
    gravity=0;
    vspeed=0;
    scr_assassinpain(1);
    }

//Execute upslash
if (sprite_index==spr_asha_upslash && visible){
    upslashwait+=1;
    if (upslashwait>60 && !upslashing){
        upslashing=1;
        alarm[1]=1;
        }
    if (obj_iji.y>y-32 && !upslashing){
        upslashing=1;
        alarm[1]=1;
        }
    if (distance_to_object(obj_iji)<64 && !upslashing){
        upslashing=1;
        alarm[0]=1;
        alarm[1]=5;
        }
    }

//Downstab recovery
if(!place_free(x,y) && sprite_index==spr_asha_downstab && visible){
    alarm[2]=2;
    //(instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash)).depth=10;
    visible=0;
    gravity=0;
    vspeed=0;
    sprite_index=spr_asha_pose1;
    }
if (vspeed>22)
    vspeed=22;
if (visible && sprite_index==spr_asha_downstab && y>obj_iji.y+64)
    scr_assassinpain(1);

//Change of plans
if (sprite_index==spr_asha_uppercut || sprite_index==spr_asha_uppercutleft || sprite_index==spr_asha_backstab || sprite_index==spr_asha_backstableft){
    if (visible && distance_to_object(obj_asha2)<40)
        scr_assassinpain(1);
    if (visible && distance_to_object(obj_iji)>100){
        scr_assassinpain(1);
        alarm[2]=2;
        }
    if (visible && ((sprite_index==spr_asha_uppercut && (obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2 < bbox_left+(bbox_right-bbox_left)/2+10)) || (sprite_index==spr_asha_uppercutleft && (obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2 > bbox_left+(bbox_right-bbox_left)/2-10)))){
        if (alarm[1]>6){
            alarm[1]=5;
            alarm[0]=2;
            }
        }
    if (visible && ((sprite_index==spr_asha_backstab && (obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2 < bbox_left+(bbox_right-bbox_left)/2+10)) || (sprite_index==spr_asha_backstableft && (obj_iji.bbox_left+(obj_iji.bbox_right-obj_iji.bbox_left)/2 > bbox_left+(bbox_right-bbox_left)/2-10)))){
        if (alarm[1]>6){
            alarm[1]=4;
            alarm[0]=2;
            }
        }
    }
if (sprite_index==spr_asha_pose1 || sprite_index==spr_asha_pose1left || sprite_index==spr_asha_pose1fire || sprite_index==spr_asha_pose1fireleft || sprite_index==spr_asha_pose2 || sprite_index==spr_asha_pose2left){
    if (visible && distance_to_object(obj_asha2)<40)
        scr_assassinpain(1);
    if (visible && distance_to_object(obj_iji)<30){
        scr_assassinpain(1);
        alarm[2]=2;
        }
    }
End Step Event:

execute code:

//Return to sabot
if (!visible && angry){
    x=obj_sabot.x;
    y=obj_sabot.y;
    }
______________________________________________________

Information about object: obj_log4
Sprite: spr_log4
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: obj_log1
Mask: 

______________________________________________________

Information about object: obj_bananatrigger
Sprite: spr_hud
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_glidesmoke
Sprite: spr_glidesmoke
Solid: false
Visible: true
Depth: 1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=16;
image_speed=0.5;
gravity=-0.08;
Alarm Event for alarm 0:

execute code:

instance_destroy();
______________________________________________________

Information about object: obj_nanospark2
Sprite: spr_bullet
Solid: false
Visible: true
Depth: -10
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

xprev=x;
yprev=y;
xprev2=x;
yprev2=y;
dir=random(180);
maxdistance=48+ceil(random(16));
Step Event:

execute code:

temprand=random(1)
if (temprand<0.1 && !spawned){
    spawned=1;
    (instance_create(x,y,obj_nanospark)).spawned=1;
    }
scr_outside();

Draw Event:

execute code:

dir+=random(120)-60;
if (distance>=maxdistance)
    instance_destroy();
image_single=0;
if (distance
______________________________________________________

Information about object: obj_spy
Sprite: spr_sabot
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_clearwbox
Sprite: 
Solid: false
Visible: true
Depth: -1000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

x1=0;
y1=0;
x2=242;
y2=24;

x3=0;
y3=0;
x4=242;
y4=24;

alpha=1;
Draw Event:

execute code:

draw_set_color(c_white);
draw_rectangle(x+x1,y+y1,x+x2,y+y2,1);
x1-=2;
y1-=1;
x2+=2;
y2+=1;

draw_sprite_ext(spr_clearpix,0,x+x3,y+y3,x4,floor(y4/8),0,c_white,alpha);
alpha-=0.14;
factor+=2;
x3-=factor;
x4+=factor*2;
y3+=1;
y4-=2;

cyc+=1;
if (cyc==7)
instance_destroy();
______________________________________________________

Information about object: obj_blackbug
Sprite: spr_ijiblood
Solid: false
Visible: true
Depth: -100
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=10;
sprite_index=spr_sabot;
y-=1;
depth=100;
Alarm Event for alarm 0:

execute code:

alarm[0]=10+random(20);
hspeed=random(2)-1;
temp=random(1);
if (temp>0.75)
    hspeed=0;
if (temp<0.15)
    cyc=5;

if (xxstart+64)
    hspeed=-1;
Step Event:

execute code:

if (cyc==5)
    y-=2;
else if (cyc==4)
    y-=1;
else if (cyc==2)
    y+=1;
else if (cyc==1)
    y+=2;
if (cyc>0)
    cyc-=1;
______________________________________________________

Information about object: obj_elecbomb
Sprite: spr_elecbomb
Solid: false
Visible: true
Depth: -1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

gravity=1;
Alarm Event for alarm 0:

execute code:

elec=1;
scr_sound("glo_bootelec");
Alarm Event for alarm 1:

execute code:

instance_create(x,y-8,obj_bigsmoke);
elec=0;
visible=0;
Alarm Event for alarm 2:

execute code:

instance_create(x,y-16,obj_bigsmoke);
Alarm Event for alarm 3:

execute code:

instance_create(x,y-24,obj_bigsmoke);
instance_destroy();
Collision Event with object obj_iji:

execute code:

if (elec==1 && global.hp>0 && !obj_iji.takingpain && !obj_iji.recovering){
    scr_shakescreen(3);
    global.armor=-100;
    //global.hp-=2;
    //global.damage+=2;
    //with (other)
    //    scr_pain();
    }
Collision Event with object obj_block:

execute code:

gravity=0;
vspeed=0;
move_contact_solid(270,32);
image_single=-1;
image_speed=0.5;
alarm[0]=30;
alarm[1]=60;
alarm[2]=62;
alarm[3]=64;
if (permanent){
    alarm[0]=30;
    alarm[1]=0;
    alarm[2]=0;
    alarm[3]=0;
    }
Draw Event:

execute code:

if (vspeed>20)
    vspeed=20;
if (elec){
    temprand=random(1);
    if (temprand>=0.9 && !permanent)
        scr_sound("glo_spark");
    //scr_shakescreen(1);
    if (global.specialbake){
    x1=x-20+random(40);
    y1=y-(18+random(48));
    x2=x-15+random(30);
    y2=y-(70+random(50));
    draw_set_color(c_white);
    draw_line(x,y-12,x1,y1);
    draw_line(x1,y1,x2,y2);
    draw_line(x2,y2,x,y-128);
    }

    else{
    x1=x-20+random(40);
    y1=y-(18+random(48));
    x2=x-15+random(30);
    y2=y-(70+random(50));
    x3=x-20+random(40);
    y3=y-(18+random(48));
    x4=x-15+random(30);
    y4=y-(70+random(50));
    draw_set_color(c_white);
    pensize=ceil(random(3));
    draw_line_width(x,y-12,x1,y1,pensize);
    draw_line_width(x1,y1,x2,y2,pensize);
    draw_line_width(x2,y2,x,y-(128+random(16)),pensize);
    draw_line(x,y-12,x3,y3);
    draw_line(x3,y3,x4,y4);
    draw_line(x4,y4,x,y-128);
    }
    }
if (elec && global.hp>0 && !obj_iji.takingpain && !obj_iji.recovering && (place_meeting(x,y,obj_iji) || place_meeting(x,y-32,obj_iji) || place_meeting(x,y-64,obj_iji) ||  place_meeting(x,y-96,obj_iji))){
    scr_shakescreen(3);
    global.hp-=2;
    global.damage+=2;
    with (obj_iji)
        scr_pain();
    }

if (vspeed!=0)
    image_index=0;
draw_sprite(sprite_index,image_index,floor(x),floor(y));
______________________________________________________

Information about object: obj_dripnest
Sprite: spr_drip
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=30;
Alarm Event for alarm 0:

execute code:

alarm[0]=25+random(10);
instance_create(x,y,obj_drip);
______________________________________________________

Information about object: obj_drip
Sprite: spr_drip
Solid: false
Visible: true
Depth: 100
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

gravity=1;
Step Event:

execute code:

if (vspeed>20)
    vspeed=20;
scr_outside();
Collision Event with object obj_block:

execute code:

move_contact_solid(270,32);
instance_create(x,y+3,obj_splash)
instance_destroy();
______________________________________________________

Information about object: obj_tortrigger
Sprite: spr_sabot
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=30;
(instance_create(x,y,obj_blackblanket)).alarm[0]=32;
Alarm Event for alarm 0:

execute code:

instance_create(864,218,obj_tor);
Alarm Event for alarm 1:

execute code:

obj_iji.image_single=0;
obj_iji.sprite_index=spr_ijimist2;
Alarm Event for alarm 2:

execute code:

//Fractal Rockets
obj_tor.timeline_position-=(30-(obj_tor.potency[7]*5));
Alarm Event for alarm 3:

execute code:

if (instance_number(obj_iji)==1)
    scr_shakescreen(2);
cshake-=1;
if (cshake>0)
    alarm[3]=1;
Alarm Event for alarm 4:

execute code:

obj_iji.cannotpause=0;
Alarm Event for alarm 5:

execute code:

if (!housessmashed){
    housessmashed=1;
    background_index[2]=bg_finalsky3s;
    background_index[3]=bg_finalsky4s;
    scr_sound("glo_thunder");
    //scr_sound("exp_nuke",1);
    scr_sound("exp_glass",1);
    scr_sound("exp_miniglass",1);
    obj_sabot.torsmashshake=8;
    for (i=0;i<850;i+=2){
        tempy=130;
        tempy2=(abs(i-425))/40;
        tempy+=tempy2*tempy2;
        tempid=instance_create(i,500-random(tempy),obj_torsmashpart);
        tempid.image_single=floor(random(8))+8;
        if (random(1)<0.5)
            tempid.image_single=floor(random(8));
        tempid.gravity=0.005+random(0.005);
        tempid.gravity_direction=270;
        tempid.vspeed=-0.05-random(0.55);
        tempid.hspeed=(i-425)/800+random((i-425)/800);
        tempid.diespeed=random(0.01)+0.01;
        }
    }
Step Event:

execute code:

if (!init){
    init=1;
    for (i=0;i<10;i+=1)
        pickfps[i]=1000;
    }

if ((!slowdowned && obj_tor.firsthail) || global.specialbake){
    if (global.specialbake){
        slowdowned=1;
        if (!global.specialbake){
            global.erasetop=0;
            global.topmessage="SLOWDOWN DETECTED - LOWERING DETAIL";
            }
        with (obj_shape001){instance_destroy();}
        with (obj_shape002){instance_destroy();}
        with (obj_shape003){instance_destroy();}
        with (obj_shape005){instance_destroy();}
        with (obj_shape006){instance_destroy();}
        with (obj_shape007){instance_destroy();}
        with (obj_shape008){instance_destroy();}
        with (obj_shape009){instance_destroy();}
        with (obj_shape010){instance_destroy();}
        //with (obj_shape011){instance_destroy();}
        with (obj_shape012){instance_destroy();}
        with (obj_shape013){instance_destroy();}
        with (obj_shape014){instance_destroy();}
        with (obj_shape015){instance_destroy();}
        with (obj_shape016){instance_destroy();}
        with (obj_shape017){instance_destroy();}
        with (obj_shape018){instance_destroy();}
        with (obj_shape019){instance_destroy();}
        with (obj_shape020){instance_destroy();}
        with (obj_shape102){instance_destroy();}
        with (obj_shape103){instance_destroy();}
        with (obj_shape104){instance_destroy();}
        with (obj_shape105){instance_destroy();}
        with (obj_shape203){instance_destroy();}
        with (obj_shape301){instance_destroy();}
        with (obj_shape303){instance_destroy();}
        with (obj_shape403){instance_destroy();}
        with (obj_shape404){instance_destroy();}
        with (obj_shape407){instance_destroy();}
        with (obj_shape408){instance_destroy();}
        with (obj_shape409){instance_destroy();}
        with (obj_shape502){instance_destroy();}
        with (obj_shape503){instance_destroy();}
        with (obj_shape602){instance_destroy();}
        with (obj_shape603){instance_destroy();}
        with (obj_shape605){instance_destroy();}
        with (obj_shape606){instance_destroy();}
        with (obj_shape702){instance_destroy();}
        with (obj_shape803){instance_destroy();}
        with (obj_shape902){instance_destroy();}
        }
    }
______________________________________________________

Information about object: obj_shape
Sprite: 
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=40;
shapey[0]=0;
shapex[1]=80;
shapey[1]=80;
shapex[2]=0;
shapey[2]=40;
shapex[3]=-80;
shapey[3]=80;
shapex[4]=-40;
shapey[4]=0;
shapex[5]=-80;
shapey[5]=-80;
shapex[6]=0;
shapey[6]=-40;
shapex[7]=80;
shapey[7]=-80;
points=8;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(c_black);
scr_drawshape();
______________________________________________________

Information about object: obj_tor
Sprite: spr_sabot
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: obj_alliedenemy
Mask: spr_tor

Create Event:

execute code:

if (global.bosshint==1){
    with (obj_sabot){
        if (global.passive){
            global.passive=0;
            global.killdata[799]=0;
            }
        if (global.weapon!=13)
            scr_changeweapon(5);
        if (global.weapon!=13)
            scr_changeweapon(5);
        global.erasetop=0;
        global.topmessage="SYSTEM REPORT: SWITCHING TO RESONANCE REFLECTOR";
        depth=-1001;
        }
    }

scr_createlookup();
scr_tor_pose();
instance_create(obj_iji.x,obj_iji.y,obj_iosa2safe);
wobble=1200;
security=250;
resistance=250;
hp=900+global.difficulty*150;
maxhp=900+global.difficulty*150; //Holy hit points Batman!
armor=200;
maxarmor=200;
if (global.suddendeath){
    hp=1;
    maxhp=1;
    armor=100;
    maxarmor=100;
    }
enemytype=16;
vulnerable=1;
hailtype=global.difficulty-1;
eruptiontype=global.difficulty;
for (i=0; i<8; i+=1){
    weight[i]=1;
    potency[i]=1+global.difficulty;
    potencycount[i]=0;
    }

//Maximum charge
if (global.tormaximumcharge){
    if (!global.suddendeath){
        hp=1200;
        maxhp=1200;
        }
    hailtype=1;
    eruptiontype=2;
    for (i=0; i<8; i+=1){
        weight[i]=1;
        potency[i]=5;
        potencycount[i]=0;
        }
    }

bonedirections[0]=0;
bonedirections[1]=180;
bonedirections[2]=0;
bonedirections[3]=0;
bonedirections[4]=0;
bonedirections[5]=0;
bonedirections[6]=0;
bonedirections[7]=0;
bonedirections[8]=0;
bonedirections[9]=0;

bonepositionsx[0]=0;
bonepositionsx[1]=0;
bonepositionsx[2]=0;
bonepositionsx[3]=0;
bonepositionsx[4]=0;
bonepositionsx[5]=0;
bonepositionsx[6]=0;
bonepositionsx[7]=0;
bonepositionsx[8]=0;
bonepositionsx[9]=0;

bonepositionsy[0]=0;
bonepositionsy[1]=0;
bonepositionsy[2]=0;
bonepositionsy[3]=0;
bonepositionsy[4]=0;
bonepositionsy[5]=0;
bonepositionsy[6]=0;
bonepositionsy[7]=0;
bonepositionsy[8]=0;
bonepositionsy[9]=0;

instance_create(x,y,obj_shape001);
instance_create(x,y,obj_shape002);
instance_create(x,y,obj_shape003);
instance_create(x,y,obj_shape004);
instance_create(x,y,obj_shape004b);
instance_create(x,y,obj_shape005);
instance_create(x,y,obj_shape006);
instance_create(x,y,obj_shape007);
instance_create(x,y,obj_shape008);
instance_create(x,y,obj_shape009);
instance_create(x,y,obj_shape010);
instance_create(x,y,obj_shape011);
instance_create(x,y,obj_shape012);
instance_create(x,y,obj_shape013);
instance_create(x,y,obj_shape014);
instance_create(x,y,obj_shape015);
instance_create(x,y,obj_shape016);
instance_create(x,y,obj_shape017);
instance_create(x,y,obj_shape018);
instance_create(x,y,obj_shape019);
instance_create(x,y,obj_shape020);
instance_create(x,y,obj_shape101);
instance_create(x,y,obj_shape102);
instance_create(x,y,obj_shape103);
instance_create(x,y,obj_shape104);
instance_create(x,y,obj_shape105);
instance_create(x,y,obj_shape201);
instance_create(x,y,obj_shape202);
instance_create(x,y,obj_shape203);
instance_create(x,y,obj_shape301);
instance_create(x,y,obj_shape302);
instance_create(x,y,obj_shape303);
instance_create(x,y,obj_shape401);
instance_create(x,y,obj_shape401b);
instance_create(x,y,obj_shape401c);
instance_create(x,y,obj_shape401d);
instance_create(x,y,obj_shape402);
instance_create(x,y,obj_shape402b);
instance_create(x,y,obj_shape403);
instance_create(x,y,obj_shape404);
instance_create(x,y,obj_shape405);
instance_create(x,y,obj_shape405b);
instance_create(x,y,obj_shape406);
instance_create(x,y,obj_shape407);
instance_create(x,y,obj_shape408);
instance_create(x,y,obj_shape409);
instance_create(x,y,obj_shape501);
instance_create(x,y,obj_shape502);
instance_create(x,y,obj_shape503);
instance_create(x,y,obj_shape601);
instance_create(x,y,obj_shape601);
instance_create(x,y,obj_shape602);
instance_create(x,y,obj_shape603);
instance_create(x,y,obj_shape604);
instance_create(x,y,obj_shape605);
instance_create(x,y,obj_shape606);
instance_create(x,y,obj_shape701);
instance_create(x,y,obj_shape702);
instance_create(x,y,obj_shape801);
instance_create(x,y,obj_shape802);
instance_create(x,y,obj_shape803);
instance_create(x,y,obj_shape901);
instance_create(x,y,obj_shape902);

with (obj_shape)
    depth=-1000;

/*if (global.detaillevel==1){
    obj_shape303.visible=0;
    obj_shape403.visible=0;
    obj_shape407.visible=0;
    obj_shape502.visible=0;
    obj_shape503.visible=0;
    obj_shape605.visible=0;
    obj_shape606.visible=0;
    obj_shape803.visible=0;
    }*/
Alarm Event for alarm 0:

execute script scr_tor_death with arguments (0,0,0,0,0)
Alarm Event for alarm 1:

execute script scr_tor_drawgun with arguments (0,0,0,0,0)
Alarm Event for alarm 2:

execute code:

//Set depths
obj_sabot.depth=-202;

obj_shape001.depth=1219;
obj_shape002.depth=1218;
obj_shape003.depth=1217;
obj_shape004.depth=616;
obj_shape004b.depth=616;
obj_shape005.depth=615;
obj_shape006.depth=614;
obj_shape007.depth=613;
obj_shape008.depth=612;
obj_shape009.depth=611;
obj_shape010.depth=610;
obj_shape011.depth=609;
obj_shape012.depth=608;
obj_shape013.depth=607;
obj_shape014.depth=606;
obj_shape015.depth=605;
obj_shape016.depth=604;
obj_shape017.depth=603;
obj_shape018.depth=602;
obj_shape019.depth=601;
obj_shape020.depth=600;
obj_shape101.depth=504;
obj_shape102.depth=503;
obj_shape103.depth=502;
obj_shape104.depth=501;
obj_shape105.depth=500;
obj_shape201.depth=1102;
obj_shape202.depth=1101;
obj_shape203.depth=1100;
obj_shape301.depth=202;
obj_shape302.depth=201;
obj_shape303.depth=200;
obj_shape401.depth=108;
obj_shape401b.depth=108;
obj_shape401c.depth=108;
obj_shape401d.depth=108;
obj_shape402.depth=107;
obj_shape402b.depth=107;
obj_shape403.depth=106;
obj_shape404.depth=105;
obj_shape405.depth=104;
obj_shape405b.depth=104;
obj_shape406.depth=103;
obj_shape407.depth=102;
obj_shape408.depth=101;
obj_shape409.depth=100;
obj_shape501.depth=802;
obj_shape502.depth=801;
obj_shape503.depth=800;
obj_shape601.depth=905;
obj_shape602.depth=904;
obj_shape603.depth=903;
obj_shape604.depth=902;
obj_shape605.depth=901;
obj_shape606.depth=900;
obj_shape701.depth=1001;
obj_shape702.depth=1000;
obj_shape801.depth=302;
obj_shape802.depth=301;
obj_shape803.depth=300;
obj_shape901.depth=401;
obj_shape902.depth=400;

Alarm Event for alarm 3:

execute code:

global.ignoreall=0;
instance_create(x,y,obj_torbar);
obj_tor.timeline_index=tim_tor;
obj_tor.timeline_running=true;
obj_tor.timeline_position=0;
obj_iji.alwayschangeweapon=0;
with (obj_sabot)
    scr_music("mus_tor");

Alarm Event for alarm 4:

execute code:

smashediji=0;
Alarm Event for alarm 5:

execute code:

plasmaed=0;
Alarm Event for alarm 6:

execute code:

increasespeed=1;
Alarm Event for alarm 7:

execute code:

obj_sabot.gameover=1;
with (obj_sabot)
    scr_music("mus_gameover");
global.bosshint=1;
obj_hud.depth=-100;
obj_weapon1.depth=-101;
obj_weapon2.depth=-101;
obj_weapon3.depth=-101;
obj_weapon4.depth=-101;
obj_weapon5.depth=-101;
obj_weapon6.depth=-101;
obj_weapon7.depth=-101;
obj_weapon8.depth=-101;
obj_reloader.depth=-102;

Step Event:

execute code:

//"WIN"
if (obj_sabot.gameover && !winquote){
    winquote=1;
    wincyc=30;
    }
if (wincyc>0)
    wincyc-=1;
if (wincyc==1)
    scr_sound("tor_win");

//Death explo
if (killexplo[0]>0){
    killexplo[0]-=1;
    killexplocyc+=1;
    if (killexplocyc>=2){
        killexplocyc=0;
        instance_create(x+50+random(100),y+250+random(100),obj_enemyrocketexplosion);
        }
    }
if (killexplo[1]>0){
    killexplo[1]-=1;
    killexplocyc+=1;
    if (killexplocyc>=2){
        killexplocyc=0;
        instance_create(x+150+random(100),y+150+random(100),obj_enemyrocketexplosion);
        }
    }
if (killexplo[2]>0){
    killexplo[2]-=1;
    killexplocyc+=1;
    if (killexplocyc>=2){
        killexplocyc=0;
        instance_create(x+random(100),y+100+random(100),obj_enemyrocketexplosion);
        }
    }
if (killexplo[3]>0){
    killexplocyc+=1;
    if (killexplocyc>=5){
        killexplocyc=0;
        scr_torexplo();
        }
    }
if (killexplo[4]>0){
    killexplo[4]-=1;
    killexplocyc+=1;
    if (killexplocyc>=2){
        killexplocyc=0;
        instance_create(x-250+killexplo[4]*32+random(20),y+280+random(100),obj_enemyrocketexplosion);
        instance_create(x+350-killexplo[4]*32+random(20),y+300+random(100),obj_enemyrocketexplosion);
        }
    }

//Shake on death
if (killshake==1)
    scr_shakescreen(1);
if (killshake==2)
    scr_shakescreen(2);


//Death
if (!dead && !nodraw && hp<=0 && global.hp>0 && instance_number(obj_torhammer)==0 && instance_number(obj_iji)==1){
    if (timeline_index!=tim_phantom || (timeline_position<105 && timeline_position>115)){
        dead=1;
        scr_sound("exp_boss");
        scr_stoptorvoice();
        timeline_index=tim_tordeath;
        timeline_running=true;
        timeline_position=0;
        room_speed=30;
        with (obj_sabot)
            scr_stopmusic();
        }
    }
if (dead){
    if (global.hp<=0){
        if (instance_number(obj_iji)==1){
            if (!obj_iji.vortexkilled)
                global.hp=1;
            }
        }
    if (killsmoke)
        scr_torexplo(1);
    //Finaldeath
    if (y>=370 && !finaldeath){
        finaldeath=1;
        y=370;
        if (global.killdata[797]==1) {
            timeline_index=tim_tordeath2p;
            timeline_running=true;
        }
        else {
            timeline_index=tim_tordeath2;
            timeline_running=true;
        }
        timeline_position=0;
        }
    }

//Reset / potencies
thored=0;
cfised=0;
for (i=0; i<8; i+=1){
    if (weight[i]>10)
        weight[i]=10;
    if (weight[i]<1)
        weight[i]=1;
    //Increase potency
    if (potencycount[i]>=6){
        potencycount[i]=0;
        if (potency[i]<5)
            potency[i]+=1;
        }
    }

//Phantomed
if (increasespeed && room_speed<30){
    room_speed+=1;
    if (room_speed==29){
        if (global.turbomode==1)
            room_speed=60;
        else if (global.turbomode==2)
            room_speed=1000;
        }
    }

//Supercharge
if (supercharging==1){
    scr_shakescreen(1);
    if (weaponflash<250)
        weaponflash+=5;
    if (instance_number(obj_chargeballspark2)==0)
        supercharging=2;
    }
if (supercharging==2){
    if (weaponflash!=50)
        weaponflash=50;
    else
        weaponflash=250;
    }

if (supercharging==1 || supercharging==2){
    sndchargecyc+=1;
    if (sndchargecyc>=sndchargecycmax){
        sndcharge+=0.6;
        sndchargecyc=0;
        if (supercharging==1 && weaponflash<130){
            scr_sound("tor_gather");
            sndchargecycmax=20;
            }
        else if (supercharging==1){
            scr_sound("tor_gather_q01");
            sndchargecycmax=15;
            }
        else{
            scr_sound("tor_gather_q03");
            sndchargecycmax=10;
            }
        }
    }

//Charge
if (instance_number(obj_torcharge)>0){
    sndchargecyc2+=1;
    if (sndchargecyc2>=8){
        sndchargecyc2=0;
        scr_sound("tor_gather_q03");
        }
    }

if (chargeamount>0){
    chargeamount-=1;
    repeat(2){
        instance_create(200+random(1200),50,obj_torcharge);
        instance_create(200+random(1200),850,obj_torcharge);
        instance_create(100,random(900),obj_torcharge);
        }
    }
if (instance_number(obj_torcharge)>0 && chargeamount<20){
    if (weaponflash<250)
        weaponflash+=5;
    }
if (charging && chargeamount==0 && instance_number(obj_torcharge)==0 && instance_number(obj_megaflash)==0){
    charging=0;
    weaponflash=0;
    scr_sound("tor_fire");
    scr_tor_fire();
    scr_shakescreen(4);
    (instance_create(x-80,y+235,obj_chargeball)).liveone=1;
    if (!obj_tortrigger.slowdowned){
        repeat(30){
            tempid=instance_create(x-80,y+235,obj_chargeballspark);
            tempid.gravity=1;
            tempid.gravity_direction=270;
            tempid.speed=5+random(15);
            tempid.direction=135+random(90)
            }
        }
    }
yprev=bonepositionsy[0];

//Hyper shotgun
if (hypershotgun)
    hypershotguncyc+=1;
if (hypershotguncyc>=50){
    scr_sound("tor_fire");
    hypershotgun=0;
    hypershotguncyc=0;
    scr_tor_fire();
    scr_shakescreen(1);
    with (obj_hypershotgun){
        instance_destroy();
        (instance_create(x,y,obj_enemyrocketexplosion)).torweapon=5;
        instance_create(x,y,obj_explosioncenter);
        }
    }

//Pain from armordrop
if (armor<=0){
    while (armor<=0)
        armor+=200;
    hp-=1;
    }

//Smash Iji
if (((obj_iji.x>x-120 && obj_shape401.visible) || obj_iji.x>x-20) && obj_iji.yx-120 && obj_shape401.visible) || obj_reflector.x+60>x-20) && obj_reflector.y-60x-120 && obj_shape401.visible) || obj_disruptor.x+60>x-20) && obj_disruptor.y-60x-120 && obj_shape401.visible) || obj_shockbarrier.x+16>x-20) && obj_shockbarrier.y-32359)
        obj_tor.bonedirections[bone]-=360;
    x=obj_tor.x+obj_tor.bonepositionsx[bone];
    y=obj_tor.y+obj_tor.bonepositionsy[bone];
    }

//Wobble and begin
if (wobble>0){
    if (wobble<2 && !fixdepth){
        fixdepth=1;
        alarm[2]=1;
        }
    if (wobble<0.4){
        wobble=0;
        alarm[1]=60;
        alarm[3]=150;
        scr_shakescreen(6);
        scr_sound("exp_mpfb");
        (instance_create(x,y,obj_whiteblanket)).alarm[0]=3;
        obj_sabot.flash=1;
        }
    else
        wobble/=1.055;
    }

//Rage burst
if (anim==5 && weaponrand==6 && frame<7){
    instance_create(x+60+random(40),y+370+random(40),obj_nanospark);
    }

//Animate
scr_getframe();
if (frame=448){
    holdright=0;
    berserkend=0;
    (instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chatxa";
    }
}
//Berserk end
if (berserkend==1 && instance_number(obj_chat)==0){
    berserkend=2;
    berserkendcyc=0;
    instance_create(obj_iji.x,obj_iji.y,obj_torkilldrawer);
    global.ignoreall=1;
    }
else if (berserkend==2){
    berserkendcyc+=1;
    //Kill
    if (keyboard_check_pressed(ord("X")) && berserkendcyc>=5 && berserkendcyc<=178){
        berserkend=4;
        berserkendcyc=0;
        global.kills+=1;
        global.killdata[798]=1;
        obj_torbody3.img=8;
        with (obj_iji){
            global.facing=1;
            sprite_index=spr_fire;
            scr_sound("wea_shot");
            firing=1;
            repeat(2){
                tempid=instance_create(x+1,y+11,obj_shell);
                tempid.speed = random(2)+5;
                tempid.direction = random(15)+130;
                }
            (instance_create(x+66,y+13,obj_sec8hologram2)).image_single=1;
            }
        }
    //Don't kill
    else if (berserkendcyc>=180){
        berserkend=3;
        (instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chatxw";
        }
    }
else if (berserkend==4){
    berserkendcyc+=1;
    if (berserkendcyc==2)
        (instance_create(x,y,obj_blackblanket)).alarm[0]=200;
    else if (berserkendcyc==120){
        obj_iji.instantend=1;
        instance_create(obj_iji.x,obj_iji.y,obj_end);
        }
    }

//Travel to Sector Y
if (wty>0)
    wty-=1;
if (wty>1 && hp<=0)
    global.wty=1;

Collision Event with object obj_bullet:

execute code:

if (vulnerable){
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stagger)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else{
        instance_create(x,y,obj_bullethit);
        instance_create(x,y,obj_smoke);
        }
    instance_destroy();
    }
    }
Collision Event with object obj_pellet:

execute code:

if (vulnerable){
with (other){
    x+=(3-random(6));
    y+=(3-random(6));
    if (stun)
        (instance_create(x,y,obj_bullethit)).image_index=3;
    else{
        instance_create(x,y,obj_bullethit);
        instance_create(x,y,obj_smoke);
        }
    instance_destroy();
    }
    }
Collision Event with object obj_kickbox:

execute code:

if (vulnerable && other.image_index==0){
    script_execute(scr_shakescreen,1);
    repeat(3){
        tempid=instance_create(other.x+18,other.y+10,obj_scrapwhite);
        tempid.speed=global.strengthlevel+2;
        tempid.direction=random(180)+90;
        }
    
    global.erasetop=0;
    global.topmessage="You need a Strength of "+string(resistance)+" to damage General Tor";
    }
Collision Event with object obj_rocketexplosion:

execute code:

if (other.dud==0)
    hp-=2*global.atmult;

Collision Event with object obj_mpfbexplosion:

execute code:

if (other.dud==0){
    hp-=3*global.atmult;
    if (hp<=0 && other.banana)
        obj_sabot.bananaending=1;
    }
Collision Event with object obj_pulse:

execute code:

if (vulnerable){
with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
if (other.linker){
    if (global.topmessage=="0"){
        global.erasetop=0;
        global.topmessage="Pulse link could not be established";
        }
    }
}
Collision Event with object obj_enemyrocketexplosion:

execute code:

if (other.dud==0 && vulnerable)
    hp-=2;

Collision Event with object obj_shockexplosion:

execute code:

if (other.dud==0)
    hp-=2*global.atmult;

Collision Event with object obj_enemympfbexplosion:

execute code:

if (other.dud==0)
    hp-=3;

Collision Event with object obj_pushbox:

execute code:

if (vulnerable){
global.erasetop=0;
global.topmessage="You need a Crack skill of "+string(security)+" to crack General Tor";
}
Collision Event with object obj_plasma:

execute code:

if (vulnerable && !plasmaed){
    alarm[5]=40;
    plasmaed=1;
    hp-=3*global.atmult;
    }
Collision Event with object obj_thor:

execute code:

if (vulnerable && thored==0){
    armor-=35*global.atmult;
    thored=1;
    }
______________________________________________________

Information about object: obj_shape004
Sprite: 
Solid: false
Visible: true
Depth: 616
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=141;
shapey[0]=144;
shapex[1]=81;
shapey[1]=222;
shapex[2]=127;
shapey[2]=276;
shapex[3]=199;
shapey[3]=276;
shapex[4]=199;
shapey[4]=187;
shapex[5]=209;
shapey[5]=195;
shapex[6]=219;
shapey[6]=195;
shapex[7]=219;
shapey[7]=161;
shapex[8]=189;
shapey[8]=137;
shapex[9]=189;
shapey[9]=131;
shapex[10]=147;
shapey[10]=99;
shapex[11]=140;
shapey[11]=99;
shapex[12]=10;
shapey[12]=0;
shapex[13]=0;
shapey[13]=0;
shapex[14]=0;
shapey[14]=35;
points=15;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(74,0,0));
scr_drawshape();

______________________________________________________

Information about object: obj_shape011
Sprite: 
Solid: false
Visible: true
Depth: 609
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=81;
shapey[0]=98;
shapex[1]=81;
shapey[1]=222;
shapex[2]=152;
shapey[2]=222;
shapex[3]=152;
shapey[3]=98;
points=4;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(123,0,0));
scr_drawshape();

______________________________________________________

Information about object: obj_shapecircle
Sprite: 
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=20;
shapey[0]=0;
points=1;
circle=1;
width=14;
height=25;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(c_yellow);
scr_drawshape();
______________________________________________________

Information about object: obj_shape012
Sprite: 
Solid: false
Visible: true
Depth: 608
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=89;
shapey[0]=124;
points=1;
circle=1;
width=7;
height=12;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(189,124,78));
scr_drawshape();
______________________________________________________

Information about object: obj_shape013
Sprite: 
Solid: false
Visible: true
Depth: 607
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=107;
shapey[0]=124;
points=1;
circle=1;
width=7;
height=12;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(189,124,78));
scr_drawshape();
______________________________________________________

Information about object: obj_shape014
Sprite: 
Solid: false
Visible: true
Depth: 606
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=125;
shapey[0]=124;
points=1;
circle=1;
width=7;
height=12;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(189,124,78));
scr_drawshape();
______________________________________________________

Information about object: obj_shape015
Sprite: 
Solid: false
Visible: true
Depth: 605
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=143;
shapey[0]=124;
points=1;
circle=1;
width=7;
height=12;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(189,124,78));
scr_drawshape();
______________________________________________________

Information about object: obj_shape005
Sprite: 
Solid: false
Visible: true
Depth: 615
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=92;
shapey[0]=238;
shapex[1]=92;
shapey[1]=261;
shapex[2]=115;
shapey[2]=261;
shapex[3]=115;
shapey[3]=238;
points=4;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(66,66,66));
scr_drawshape();

______________________________________________________

Information about object: obj_shape020
Sprite: 
Solid: false
Visible: true
Depth: 600
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=177;
shapey[0]=143;
points=1;
circle=1;
width=27;
height=27;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(82,82,82));
scr_drawshape();
______________________________________________________

Information about object: obj_shape006
Sprite: 
Solid: false
Visible: true
Depth: 614
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=92;
shapey[0]=250;
points=1;
circle=1;
width=12;
height=12;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(66,66,66));
scr_drawshape();
______________________________________________________

Information about object: obj_shape007
Sprite: 
Solid: false
Visible: true
Depth: 613
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=108;
shapey[0]=270;
shapex[1]=167;
shapey[1]=270;
shapex[2]=108;
shapey[2]=201;
points=3;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(33,0,57));
scr_drawshape();

______________________________________________________

Information about object: obj_shape008
Sprite: 
Solid: false
Visible: true
Depth: 612
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=136;
shapey[0]=238;
shapex[1]=136;
shapey[1]=261;
shapex[2]=161;
shapey[2]=261;
shapex[3]=161;
shapey[3]=238;
points=4;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(82,82,82));
scr_drawshape();

______________________________________________________

Information about object: obj_shape009
Sprite: 
Solid: false
Visible: true
Depth: 611
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=136;
shapey[0]=250;
points=1;
circle=1;
width=12;
height=12;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(82,82,82));
scr_drawshape();
______________________________________________________

Information about object: obj_shape101
Sprite: 
Solid: false
Visible: true
Depth: 504
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=78;
shapey[0]=20;
shapex[1]=79;
shapey[1]=-20;
shapex[2]=60;
shapey[2]=-39;
shapex[3]=21;
shapey[3]=-20;
shapex[4]=-20;
shapey[4]=-20;
shapex[5]=-39;
shapey[5]=-2;
shapex[6]=1;
shapey[6]=20;
points=7;
bone=1;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(33,0,57));
scr_drawshape();

______________________________________________________

Information about object: obj_shape102
Sprite: 
Solid: false
Visible: true
Depth: 503
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=81;
shapey[0]=22;
shapex[1]=81;
shapey[1]=-10;
shapex[2]=63;
shapey[2]=-10;
shapex[3]=52;
shapey[3]=10;
shapex[4]=1;
shapey[4]=10;
shapex[5]=1;
shapey[5]=22;
points=6;
bone=1;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(82,82,82));
scr_drawshape();

______________________________________________________

Information about object: obj_shape103
Sprite: 
Solid: false
Visible: true
Depth: 502
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=10;
shapey[0]=-2;
points=1;
circle=1;
width=6;
height=6;
bone=1;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(82,82,82));
scr_drawshape();
______________________________________________________

Information about object: obj_shape104
Sprite: 
Solid: false
Visible: true
Depth: 501
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=28;
shapey[0]=-2;
points=1;
circle=1;
width=6;
height=6;
bone=1;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(82,82,82));
scr_drawshape();
______________________________________________________

Information about object: obj_shape105
Sprite: 
Solid: false
Visible: true
Depth: 500
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=46;
shapey[0]=-2;
points=1;
circle=1;
width=6;
height=6;
bone=1;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(82,82,82));
scr_drawshape();
______________________________________________________

Information about object: obj_shape201
Sprite: 
Solid: false
Visible: true
Depth: 1102
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-49;
shapey[0]=27;
shapex[1]=-71;
shapey[1]=50;
shapex[2]=-66;
shapey[2]=52;
shapex[3]=-40;
shapey[3]=24;
shapex[4]=27;
shapey[4]=7;
shapex[5]=20;
shapey[5]=-21;
shapex[6]=-91;
shapey[6]=13;
shapex[7]=-75;
shapey[7]=35;
points=8;
bone=2;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(106,0,0));
scr_drawshape();

______________________________________________________

Information about object: obj_shape202
Sprite: 
Solid: false
Visible: true
Depth: 1101
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-120;
shapey[0]=14;
shapex[1]=-120;
shapey[1]=59;
shapex[2]=-100;
shapey[2]=64;
shapex[3]=-63;
shapey[3]=54;
shapex[4]=-63;
shapey[4]=28;
shapex[5]=-71;
shapey[5]=13;
shapex[6]=-104;
shapey[6]=8;
points=7;
bone=2;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(78,76,0));
scr_drawshape();

______________________________________________________

Information about object: obj_shape203
Sprite: 
Solid: false
Visible: true
Depth: 1100
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-92;
shapey[0]=51;
shapex[1]=-69;
shapey[1]=51;
shapex[2]=-66;
shapey[2]=30;
shapex[3]=-75;
shapey[3]=22;
shapex[4]=-83;
shapey[4]=29;
shapex[5]=-92;
shapey[5]=22;
shapex[6]=-101;
shapey[6]=29;
shapex[7]=-109;
shapey[7]=22;
shapex[8]=-117;
shapey[8]=29;
shapex[9]=-114;
shapey[9]=51;
points=10;
bone=2;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(123,0,0));
scr_drawshape();

______________________________________________________

Information about object: obj_shape302
Sprite: 
Solid: false
Visible: true
Depth: 201
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=75;
shapey[0]=64;
shapex[1]=59;
shapey[1]=-9;
shapex[2]=50;
shapey[2]=-8;
shapex[3]=55;
shapey[3]=30;
shapex[4]=25;
shapey[4]=-20;
shapex[5]=-22;
shapey[5]=20;
shapex[6]=56;
shapey[6]=91;
shapex[7]=81;
shapey[7]=95;
shapex[8]=103;
shapey[8]=122;
shapex[9]=108;
shapey[9]=108;
shapex[10]=84;
shapey[10]=76;
shapex[11]=112;
shapey[11]=69;
shapex[12]=100;
shapey[12]=59;
points=13;
bone=3;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(33,0,57));
scr_drawshape();

______________________________________________________

Information about object: obj_shape301
Sprite: 
Solid: false
Visible: true
Depth: 202
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=0;
shapey[0]=0;
points=1;
circle=1;
width=18;
height=18;
bone=3;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(33,0,57));
scr_drawshape();
______________________________________________________

Information about object: obj_shape303
Sprite: 
Solid: false
Visible: true
Depth: 200
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=7;
shapey[0]=7;
shapex[1]=17;
shapey[1]=48;
shapex[2]=18;
shapey[2]=20;
shapex[3]=43;
shapey[3]=24;
points=4;
bone=3;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(98,95,0));
scr_drawshape();

______________________________________________________

Information about object: obj_shape402
Sprite: 
Solid: false
Visible: true
Depth: 107
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-96;
shapey[0]=27;
shapex[1]=-81;
shapey[1]=59;
shapex[2]=-5;
shapey[2]=22;
shapex[3]=-18;
shapey[3]=-13;
points=4;
bone=4;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(74,0,0));
scr_drawshape();

______________________________________________________

Information about object: obj_shape403
Sprite: 
Solid: false
Visible: true
Depth: 106
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-101;
shapey[0]=39;
shapex[1]=-21;
shapey[1]=13;
shapex[2]=-24;
shapey[2]=2;
points=3;
bone=4;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(33,0,57));
scr_drawshape();

______________________________________________________

Information about object: obj_shape405
Sprite: 
Solid: false
Visible: true
Depth: 104
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-278;
shapey[0]=-10;
shapex[1]=-242;
shapey[1]=-47;
shapex[2]=-304;
shapey[2]=-10;
shapex[3]=-314;
shapey[3]=-10;
shapex[4]=-314;
shapey[4]=28;
shapex[5]=-302;
shapey[5]=28;
shapex[6]=-241;
shapey[6]=53;
shapex[7]=-253;
shapey[7]=28;
shapex[8]=-265;
shapey[8]=-10;
points=9;
bone=4;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(obj_tor.weaponflash,obj_tor.weaponflash,obj_tor.weaponflash));
scr_drawshape();

______________________________________________________

Information about object: obj_shape404
Sprite: 
Solid: false
Visible: true
Depth: 105
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-132;
shapey[0]=25;
shapex[1]=-175;
shapey[1]=25;
shapex[2]=-172;
shapey[2]=43;
shapex[3]=-154;
shapey[3]=43;
shapex[4]=-151;
shapey[4]=59;
shapex[5]=-140;
shapey[5]=59;
shapex[6]=-137;
shapey[6]=75;
shapex[7]=-119;
shapey[7]=75;
points=8;
bone=4;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(123,0,0));
scr_drawshape();

______________________________________________________

Information about object: obj_shape406
Sprite: 
Solid: false
Visible: true
Depth: 103
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-146;
shapey[0]=43;
shapex[1]=-118;
shapey[1]=81;
shapex[2]=-75;
shapey[2]=73;
shapex[3]=-62;
shapey[3]=39;
shapex[4]=-76;
shapey[4]=24;
shapex[5]=-132;
shapey[5]=24;
points=6;
bone=4;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(98,95,0));
scr_drawshape();

______________________________________________________

Information about object: obj_shape407
Sprite: 
Solid: false
Visible: true
Depth: 102
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-71;
shapey[0]=41;
shapex[1]=-121;
shapey[1]=31;
shapex[2]=-89;
shapey[2]=45;
shapex[3]=-112;
shapey[3]=74;
points=4;
bone=4;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(123,0,0));
scr_drawshape();

______________________________________________________

Information about object: obj_shape408
Sprite: 
Solid: false
Visible: true
Depth: 101
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=0;
shapey[0]=0;
points=1;
circle=1;
width=25;
height=25;
bone=4;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(82,82,82));
scr_drawshape();
______________________________________________________

Information about object: obj_shape409
Sprite: 
Solid: false
Visible: true
Depth: 100
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=0;
shapey[0]=0;
points=1;
circle=1;
width=20;
height=20;
bone=4;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(33,0,57));
scr_drawshape();
______________________________________________________

Information about object: obj_shape501
Sprite: 
Solid: false
Visible: true
Depth: 802
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-116;
shapey[0]=13;
shapex[1]=-82;
shapey[1]=93;
shapex[2]=-51;
shapey[2]=80;
shapex[3]=-58;
shapey[3]=64;
shapex[4]=-48;
shapey[4]=41;
shapex[5]=35;
shapey[5]=7;
shapex[6]=15;
shapey[6]=-43;
points=7;
bone=5;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(26,0,46));
scr_drawshape();

______________________________________________________

Information about object: obj_shape502
Sprite: 
Solid: false
Visible: true
Depth: 801
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-104;
shapey[0]=16;
shapex[1]=-77;
shapey[1]=81;
shapex[2]=-62;
shapey[2]=74;
shapex[3]=-82;
shapey[3]=26;
shapex[4]=4;
shapey[4]=-30;
points=5;
bone=5;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(78,76,0));
scr_drawshape();

______________________________________________________

Information about object: obj_shape503
Sprite: 
Solid: false
Visible: true
Depth: 800
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-71;
shapey[0]=29;
points=1;
circle=1;
width=22;
height=22;
bone=5;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(26,0,46));
scr_drawshape();
______________________________________________________

Information about object: obj_shape010
Sprite: 
Solid: false
Visible: true
Depth: 610
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=161;
shapey[0]=250;
points=1;
circle=1;
width=12;
height=12;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(82,82,82));
scr_drawshape();
______________________________________________________

Information about object: obj_shape601
Sprite: 
Solid: false
Visible: true
Depth: 905
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=26;
shapey[0]=-14;
shapex[1]=13;
shapey[1]=25;
shapex[2]=85;
shapey[2]=25;
shapex[3]=94;
shapey[3]=-12;
points=4;
bone=6;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(78,76,0));
scr_drawshape();

______________________________________________________

Information about object: obj_shape604
Sprite: 
Solid: false
Visible: true
Depth: 902
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=63;
shapey[0]=28;
shapex[1]=26;
shapey[1]=84;
shapex[2]=105;
shapey[2]=102;
shapex[3]=153;
shapey[3]=-6;
points=4;
bone=6;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(59,0,0));
scr_drawshape();

______________________________________________________

Information about object: obj_shape602
Sprite: 
Solid: false
Visible: true
Depth: 904
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=110;
shapey[0]=11;
points=1;
circle=1;
width=32;
height=32;
bone=6;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(66,66,66));
scr_drawshape();
______________________________________________________

Information about object: obj_shape603
Sprite: 
Solid: false
Visible: true
Depth: 903
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=110;
shapey[0]=11;
points=1;
circle=1;
width=24;
height=24;
bone=6;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(59,0,0));
scr_drawshape();
______________________________________________________

Information about object: obj_shape605
Sprite: 
Solid: false
Visible: true
Depth: 901
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=146;
shapey[0]=66;
shapex[1]=130;
shapey[1]=38;
shapex[2]=126;
shapey[2]=46;
shapex[3]=136;
shapey[3]=64;
shapex[4]=112;
shapey[4]=84;
shapex[5]=105;
shapey[5]=98;
points=6;
bone=6;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(59,0,0));
scr_drawshape();

______________________________________________________

Information about object: obj_shape606
Sprite: 
Solid: false
Visible: true
Depth: 900
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=40;
shapey[0]=59;
shapex[1]=31;
shapey[1]=75;
shapex[2]=99;
shapey[2]=92;
shapex[3]=105;
shapey[3]=75;
points=4;
bone=6;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(66,66,66));
scr_drawshape();

______________________________________________________

Information about object: obj_shape701
Sprite: 
Solid: false
Visible: true
Depth: 1001
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-114;
shapey[0]=20;
shapex[1]=38;
shapey[1]=20;
shapex[2]=20;
shapey[2]=2;
shapex[3]=20;
shapey[3]=-29;
points=4;
bone=7;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(26,0,46));
scr_drawshape();

______________________________________________________

Information about object: obj_shape702
Sprite: 
Solid: false
Visible: true
Depth: 1000
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-94;
shapey[0]=11;
shapex[1]=-93;
shapey[1]=15;
shapex[2]=-25;
shapey[2]=3;
shapex[3]=-5;
shapey[3]=-15;
shapex[4]=-7;
shapey[4]=-22;
shapex[5]=-67;
shapey[5]=-8;
points=6;
bone=7;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(78,76,0));
scr_drawshape();

______________________________________________________

Information about object: obj_shape802
Sprite: 
Solid: false
Visible: true
Depth: 301
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-30;
shapey[0]=-36;
shapex[1]=5;
shapey[1]=91;
shapex[2]=52;
shapey[2]=76;
shapex[3]=19;
shapey[3]=-50;
points=4;
bone=8;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(33,0,57));
scr_drawshape();

______________________________________________________

Information about object: obj_shape801
Sprite: 
Solid: false
Visible: true
Depth: 302
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-12;
shapey[0]=54;
shapex[1]=5;
shapey[1]=143;
shapex[2]=82;
shapey[2]=124;
shapex[3]=47;
shapey[3]=36;
points=4;
bone=8;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(74,0,0));
scr_drawshape();

______________________________________________________

Information about object: obj_shape803
Sprite: 
Solid: false
Visible: true
Depth: 300
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-3;
shapey[0]=118;
shapex[1]=1;
shapey[1]=136;
shapex[2]=81;
shapey[2]=115;
shapex[3]=74;
shapey[3]=96;
points=4;
bone=8;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(82,82,82));
scr_drawshape();

______________________________________________________

Information about object: obj_shape901
Sprite: 
Solid: false
Visible: true
Depth: 401
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-28;
shapey[0]=-36;
shapex[1]=-39;
shapey[1]=20;
shapex[2]=43;
shapey[2]=20;
shapex[3]=29;
shapey[3]=-36;
points=4;
bone=9;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(33,0,57));
scr_drawshape();

______________________________________________________

Information about object: obj_shape902
Sprite: 
Solid: false
Visible: true
Depth: 400
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-33;
shapey[0]=-17;
shapex[1]=-34;
shapey[1]=-12;
shapex[2]=-14;
shapey[2]=9;
shapex[3]=15;
shapey[3]=9;
shapex[4]=36;
shapey[4]=-12;
shapex[5]=35;
shapey[5]=-17;
points=6;
bone=9;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(98,95,0));
scr_drawshape();

______________________________________________________

Information about object: obj_shapedot
Sprite: 
Solid: false
Visible: true
Depth: -10000
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=0;
shapey[0]=0;
points=1;
dot=1;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(c_red);
scr_drawshape();
______________________________________________________

Information about object: obj_shape401
Sprite: 
Solid: false
Visible: false
Depth: 108
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-327;
shapey[0]=9;
shapex[1]=-320;
shapey[1]=128;
shapex[2]=-318;
shapey[2]=62;
shapex[3]=-294;
shapey[3]=187;
shapex[4]=-298;
shapey[4]=89;
shapex[5]=-251;
shapey[5]=178;
shapex[6]=-306;
shapey[6]=17;
shapex[7]=-254;
shapey[7]=109;
shapex[8]=-301;
shapey[8]=9;
shapex[9]=-302;
shapey[9]=9;
shapex[10]=-254;
shapey[10]=-92;
shapex[11]=-306;
shapey[11]=-1;
shapex[12]=-251;
shapey[12]=-161;
shapex[13]=-298;
shapey[13]=-72;
shapex[14]=-294;
shapey[14]=-170;
points=15;
bone=4;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(c_white);
scr_drawshape();

______________________________________________________

Information about object: obj_shape003
Sprite: 
Solid: false
Visible: false
Depth: 1217
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=121;
shapey[0]=163;
shapex[1]=26;
shapey[1]=258;
shapex[2]=101;
shapey[2]=203;
shapex[3]=34;
shapey[3]=301;
shapex[4]=113;
shapey[4]=209;
shapex[5]=63;
shapey[5]=334;
shapex[6]=149;
shapey[6]=201;
shapex[7]=233;
shapey[7]=334;
shapex[8]=199;
shapey[8]=254;
shapex[9]=273;
shapey[9]=341;
shapex[10]=224;
shapey[10]=255;
shapex[11]=293;
shapey[11]=309;
shapex[12]=230;
shapey[12]=237;
shapex[13]=296;
shapey[13]=263;
shapex[14]=226;
shapey[14]=216;
shapex[15]=259;
shapey[15]=222;
points=16;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(c_yellow);
scr_drawshape();

______________________________________________________

Information about object: obj_shape002
Sprite: 
Solid: false
Visible: false
Depth: 1218
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=120;
shapey[0]=160;
shapex[1]=-11;
shapey[1]=289;
shapex[2]=90;
shapey[2]=214;
shapex[3]=2;
shapey[3]=345;
shapex[4]=103;
shapey[4]=225;
shapex[5]=46;
shapey[5]=366;
shapex[6]=150;
shapey[6]=209;
shapex[7]=252;
shapey[7]=369;
shapex[8]=210;
shapey[8]=271;
shapex[9]=293;
shapey[9]=370;
shapex[10]=235;
shapey[10]=266;
shapex[11]=324;
shapey[11]=337;
shapex[12]=240;
shapey[12]=244;
shapex[13]=320;
shapey[13]=276;
shapex[14]=238;
shapey[14]=220;
shapex[15]=285;
shapey[15]=230;
points=16;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(255,255,128));
scr_drawshape();

______________________________________________________

Information about object: obj_shape001
Sprite: 
Solid: false
Visible: false
Depth: 1219
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=118;
shapey[0]=159;
shapex[1]=-60;
shapey[1]=327;
shapex[2]=65;
shapey[2]=239;
shapex[3]=-38;
shapey[3]=393;
shapex[4]=88;
shapey[4]=251;
shapex[5]=22;
shapey[5]=411;
shapex[6]=149;
shapey[6]=223;
shapex[7]=276;
shapey[7]=409;
shapex[8]=228;
shapey[8]=300;
shapex[9]=329;
shapey[9]=422;
shapex[10]=249;
shapey[10]=284;
shapex[11]=366;
shapey[11]=376;
shapex[12]=258;
shapey[12]=257;
shapex[13]=352;
shapey[13]=293;
shapex[14]=262;
shapey[14]=231;
shapex[15]=324;
shapey[15]=242;
points=16;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(c_white);
scr_drawshape();

______________________________________________________

Information about object: obj_shape016
Sprite: 
Solid: false
Visible: true
Depth: 604
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=89;
shapey[0]=124;
points=1;
circle=1;
width=5;
height=10;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(255,249,157));
scr_drawshape();
______________________________________________________

Information about object: obj_shape017
Sprite: 
Solid: false
Visible: true
Depth: 603
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=107;
shapey[0]=124;
points=1;
circle=1;
width=5;
height=10;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(255,249,157));
scr_drawshape();
______________________________________________________

Information about object: obj_shape018
Sprite: 
Solid: false
Visible: true
Depth: 602
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=125;
shapey[0]=124;
points=1;
circle=1;
width=5;
height=10;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(255,249,157));
scr_drawshape();
______________________________________________________

Information about object: obj_shape019
Sprite: 
Solid: false
Visible: true
Depth: 601
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=143;
shapey[0]=124;
points=1;
circle=1;
width=5;
height=10;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(255,249,157));
scr_drawshape();
______________________________________________________

Information about object: obj_torbar
Sprite: spr_bossbar
Solid: false
Visible: true
Depth: -100
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=2/3;
originalwidth=300;
yadjust=-48;
if (global.suddendeath)
    originalwidth=1;
Draw Event:

execute code:

if (yadjust<0 && obj_tor.hp>0)
yadjust+=8;

x=floor(x);
y=floor(y);

if (!global.specialbake){
if (!global.suddendeath){
    draw_set_color(c_black);
    draw_rectangle(x-originalwidth-1,y-1,x+originalwidth,y+15,0);
    draw_set_color(c_white);
    draw_rectangle(x-originalwidth-1,y-1,x+originalwidth,y+15,1);
    }
else{
    draw_set_color(c_black);
    draw_rectangle(x-originalwidth-2,y-1,x+originalwidth+1,y+15,0);
    draw_set_color(c_white);
    draw_rectangle(x-originalwidth-2,y-1,x+originalwidth+1,y+15,1);
    }
}
draw_sprite(spr_bossnames,5,x,y-10);
if (global.tormaximumcharge)
    draw_sprite(spr_bossnames,6,x,y+26);

//Draw bar
if (obj_tor.hp>0){
if (!global.specialbake){
if (obj_tor.hp>1050){
    width=(obj_tor.hp-1050)*2;
    width2=300;
    }
else if (obj_tor.hp>900){
    width2=(obj_tor.hp-900)*2;
    width3=300;
    }
else if (obj_tor.hp>750){
    width3=(obj_tor.hp-750)*2;
    width4=300;
    }
else if (obj_tor.hp>600){
    width4=(obj_tor.hp-600)*2;
    width5=300;
    }
else if (obj_tor.hp>450){
    width5=(obj_tor.hp-450)*2;
    width6=300;
    }
else if (obj_tor.hp>300){
    width6=(obj_tor.hp-300)*2;
    width7=300;
    }
else if (obj_tor.hp>150){
    width7=(obj_tor.hp-150)*2;
    width8=300;
    }
else
    width8=(obj_tor.hp)*2;
if (obj_tor.hp<=150)
    draw_sprite_stretched(sprite_index,image_index,x-width8,y,width8*2,15);
else
    draw_sprite_stretched(sprite_index,1,x-width8,y,width8*2,15);
if (obj_tor.hp>150){
    if (obj_tor.hp<=300){
        draw_sprite_stretched(spr_bossbar2,image_index,x-width7,y,width7*2,15);
        draw_sprite(spr_bossx,0,x,y+7);
        }
    else
        draw_sprite_stretched(spr_bossbar2,1,x-width7,y,width7*2,15);
    }
if (obj_tor.hp>300){
    if (obj_tor.hp<=450){
        draw_sprite_stretched(spr_bossbar3,image_index,x-width6,y,width6*2,15);
        draw_sprite(spr_bossx,1,x,y+7);
        }
    else
        draw_sprite_stretched(spr_bossbar3,1,x-width6,y,width6*2,15);
    }
if (obj_tor.hp>450){
    if (obj_tor.hp<=600){
        draw_sprite_stretched(spr_bossbar4,image_index,x-width5,y,width5*2,15);
        draw_sprite(spr_bossx,2,x,y+7);
        }
    else
        draw_sprite_stretched(spr_bossbar4,1,x-width5,y,width5*2,15);
    }
if (obj_tor.hp>600){
    if (obj_tor.hp<=750){
        draw_sprite_stretched(spr_bossbar5,image_index,x-width4,y,width4*2,15);
        draw_sprite(spr_bossx,3,x,y+7);
        }
    else
        draw_sprite_stretched(spr_bossbar5,1,x-width4,y,width4*2,15);
    }
if (obj_tor.hp>750){
    if (obj_tor.hp<=900){
        draw_sprite_stretched(spr_bossbar6,image_index,x-width3,y,width3*2,15);
        draw_sprite(spr_bossx,4,x,y+7);
        }
    else
        draw_sprite_stretched(spr_bossbar6,1,x-width3,y,width3*2,15);
    }
if (obj_tor.hp>900){
    if (obj_tor.hp<=1050){
        draw_sprite_stretched(spr_bossbar7,image_index,x-width2,y,width2*2,15);
        draw_sprite(spr_bossx,5,x,y+7);
        }
    else
        draw_sprite_stretched(spr_bossbar7,1,x-width2,y,width2*2,15);
    }
if (obj_tor.hp>1050){
    draw_sprite_stretched(spr_bossbar8,image_index,x-width,y,width*2,15);
    draw_sprite(spr_bossx,6,x,y+7);
    }
}
else{
    draw_sprite(spr_hpbarback,9,x-81,y);
    draw_sprite(spr_hpbar,ceil((obj_tor.hp/obj_tor.maxhp)*20),x-80,y);
    }
}

//Energy tanks (15 px gap)
if (!global.suddendeath && !global.specialbake){
    draw_set_color(c_black);
    draw_rectangle(x-301,y+21,x+9-301,y+30,0);
    draw_rectangle(x+15-301,y+21,x+9+15-301,y+30,0);
    draw_rectangle(x+30-301,y+21,x+9+30-301,y+30,0);
    draw_rectangle(x+45-301,y+21,x+9+45-301,y+30,0);
    draw_rectangle(x+60-301,y+21,x+9+60-301,y+30,0);
    draw_set_color(c_white);
    draw_rectangle(x-301,y+21,x+9-301,y+30,1);
    draw_rectangle(x+15-301,y+21,x+9+15-301,y+30,1);
    draw_rectangle(x+30-301,y+21,x+9+30-301,y+30,1);
    draw_rectangle(x+45-301,y+21,x+9+45-301,y+30,1);
    draw_rectangle(x+60-301,y+21,x+9+60-301,y+30,1);
    if (obj_tor.maxhp>=1050){
        draw_set_color(c_black);
        draw_rectangle(x+75-301,y+21,x+9+75-301,y+30,0);
        draw_set_color(c_white);
        draw_rectangle(x+75-301,y+21,x+9+75-301,y+30,1);
        }
    if (obj_tor.maxhp==1200){
        draw_set_color(c_black);
        draw_rectangle(x+90-301,y+21,x+9+90-301,y+30,0);
        draw_set_color(c_white);
        draw_rectangle(x+90-301,y+21,x+9+90-301,y+30,1);
        }
    if (obj_tor.hp>150){
        if (obj_tor.hp<=300)
            draw_sprite_stretched(spr_bossbar2,image_index,x+1-301,y+22,8,8);
        else
            draw_sprite_stretched(spr_bossbar2,1,x+1-301,y+22,8,8);
        }
    if (obj_tor.hp>300){
        if (obj_tor.hp<=450)
            draw_sprite_stretched(spr_bossbar3,image_index,x+1+15-301,y+22,8,8);
        else
            draw_sprite_stretched(spr_bossbar3,1,x+1+15-301,y+22,8,8);
        }
    if (obj_tor.hp>450){
        if (obj_tor.hp<=600)
            draw_sprite_stretched(spr_bossbar4,image_index,x+1+30-301,y+22,8,8);
        else
            draw_sprite_stretched(spr_bossbar4,1,x+1+30-301,y+22,8,8);
        }
    if (obj_tor.hp>600){
        if (obj_tor.hp<=750)
            draw_sprite_stretched(spr_bossbar5,image_index,x+1+45-301,y+22,8,8);
        else
            draw_sprite_stretched(spr_bossbar5,1,x+1+45-301,y+22,8,8);
        }
    if (obj_tor.hp>750){
        if (obj_tor.hp<=900)
            draw_sprite_stretched(spr_bossbar6,image_index,x+1+60-301,y+22,8,8);
        else
            draw_sprite_stretched(spr_bossbar6,1,x+1+60-301,y+22,8,8);
        }
    if (obj_tor.maxhp>=1050){
        if (obj_tor.hp>900){
            if (obj_tor.hp<=1050)
                draw_sprite_stretched(spr_bossbar7,image_index,x+1+75-301,y+22,8,8);
            else
                draw_sprite_stretched(spr_bossbar7,1,x+1+75-301,y+22,8,8);
            }
        }
    if (obj_tor.maxhp==1200){
        if (obj_tor.hp>1050)
            draw_sprite_stretched(spr_bossbar8,image_index,x+1+90-301,y+22,8,8);
        }
    }

if (obj_tor.hp<=0){
    yadjust-=8;
    if (yadjust<-64)
        instance_destroy();
    }

______________________________________________________

Information about object: obj_strikelight
Sprite: spr_strikelight
Solid: false
Visible: true
Depth: 2500000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_index=floor(random(12));
//image_speed=0.5;
Step Event:

execute code:

if (room==rom_sector16){
    if (prob<1)
        prob+=0.02;
    temprand=random(1);
    if (temprand<=prob)
        visible=1;
    else
        visible=0;
    }
______________________________________________________

Information about object: obj_ragebomb
Sprite: spr_ragebomb
Solid: false
Visible: true
Depth: 2000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
hspeed=-(8+random(12));
vspeed=-(10+random(8));
gravity=1;
alarm[0]=10+random(10);
alarm[1]=3;
Alarm Event for alarm 0:

execute code:

repeat(3)
    instance_create(x,y,obj_ragebomb2);
(instance_create(x,y,obj_enemyrocketexplosion)).torweapon=0;
instance_create(x,y,obj_explosioncenter);
scr_shakescreen(1);
instance_destroy();
Alarm Event for alarm 1:

execute code:

alarm[1]=3;
instance_create(x,y,obj_bigsmoke);
Collision Event with object obj_iji:

execute code:

if (!other.takingpain && !other.recovering){
global.hp-=1;
global.damage+=1;
with (obj_iji)
    scr_pain();
obj_tor.weight[0]+=3;
obj_tor.potencycount[0]-=1;
}
______________________________________________________

Information about object: obj_ragebomb2
Sprite: spr_ragebomb2
Solid: false
Visible: true
Depth: 2001
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

vspeed=-(16+random(24));
hspeed=-5+random(12);
gravity=1;
image_index=floor(random(2));
Step Event:

execute code:

if (vspeed>15)
    vspeed=15;
if (y>700)
    instance_destroy();
Collision Event with object obj_iji:

execute code:

if (!iji && !other.takingpain && !other.recovering){
global.hp-=1;
global.damage+=1;
with (obj_iji)
    scr_pain();
obj_tor.weight[0]+=3;
obj_tor.potencycount[0]-=1;
}
Collision Event with object obj_block:

execute code:

scr_sound("exp_pew");
move_contact_solid(270,32);
instance_create(x,y,obj_ragebombexplo);
scr_shakescreen(1);
instance_destroy();
Collision Event with object obj_reflector:

execute code:

if (!iji && other.image_index<=1){
scr_sound("glo_reflect");
iji=1;
reflected=1;
speed=25;
direction=45;
if (instance_number(obj_thorspark)<20){
    repeat(5){
        tempid=instance_create(x,y,obj_thorspark);
        tempid.speed=random(2)+2;
        tempid.gravity=0.2;
        }
    }
}
Collision Event with object obj_skysmasher:

execute code:

if (reflected){
    with (other)
        armor=-100;
    (instance_create(x,y,obj_enemyrocketexplosion)).torweapon=7;
    instance_create(x,y,obj_explosioncenter);
    scr_shakescreen(1);
    instance_destroy();
    }
Collision Event with object obj_tor:

execute code:

if (iji && other.vulnerable){
    other.hp-=5;
    instance_create(x,y,obj_enemyrocketexplosion);
    instance_create(x,y,obj_explosioncenter);
    scr_shakescreen(2);
    instance_destroy();
    }
______________________________________________________

Information about object: obj_ragebombexplo
Sprite: spr_ragebombexplo
Solid: false
Visible: true
Depth: 2000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=26;
Alarm Event for alarm 0:

execute code:

instance_destroy();
Collision Event with object obj_iji:

execute code:

if (!other.takingpain && !other.recovering && image_index<=1){
global.hp-=2;
global.damage+=2;
obj_tor.weight[0]+=3;
obj_tor.potencycount[0]-=1;
if (x>other.x+6){
    with (obj_iji)
        scr_knockdown(1,8);
        }
else{
    with (obj_iji)
        scr_knockdown(2,8);
        }
}
______________________________________________________

Information about object: obj_tyrian
Sprite: spr_tyrian
Solid: false
Visible: true
Depth: 2000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_index=floor(random(6));
image_speed=-1+(floor(random(2))*2);
alarm[0]=45+random(60);
vspeed=-13+random(18.4);
hspeed=-(2+random(23));
Alarm Event for alarm 0:

execute code:

alarm[1]=3;
instance_create(x,y,obj_tyrian2);
start=1;
speed=0;
gravity=0.5;
if (image_speed==1)
    gravity_direction=180;
else
    gravity_direction=270;
Alarm Event for alarm 1:

execute code:

alarm[1]=3;
instance_create(x,y,obj_tyrian2);

Step Event:

execute code:

if (!start){
    speed*=0.95;
    if (speed<0.5)
        speed=0;
    if (!obj_tortrigger.slowdowned){
        tempid=instance_create(x-10+random(20),y-10+random(20),obj_detonatorspark);
        tempid.depth=2002;
        tempid.gravity=0;
        }
    }
if (x<360 || x>1700)
    instance_destroy();
Collision Event with object obj_iji:

execute code:

if (!iji && !other.takingpain && !other.recovering){
global.hp-=3;
global.damage+=3;
with (obj_iji)
    scr_knockdown(1,10);
scr_shakescreen(3);
obj_tor.weight[1]+=3;
obj_tor.potencycount[1]-=1;
}
Collision Event with object obj_block:

execute code:

instance_create(x,y,obj_bigsmoke);
instance_create(x-16,y,obj_bigsmoke);
instance_create(x,y-16,obj_bigsmoke);
instance_create(x+16,y,obj_bigsmoke);
instance_create(x,y+16,obj_bigsmoke);
instance_create(x-10,y-10,obj_bigsmoke);
instance_create(x-10,y+10,obj_bigsmoke);
instance_create(x+10,y+10,obj_bigsmoke);
instance_create(x+10,y-10,obj_bigsmoke);
instance_destroy();

Collision Event with object obj_reflector:

execute code:

if (!iji && other.image_index<=1){
scr_sound("glo_reflect");
iji=1;
reflected=1;
direction=0;
speed=15;
gravity=0;
image_speed=1;
alarm[0]=0;
alarm[1]=3;
start=1;
if (instance_number(obj_thorspark)<20){
    repeat(5){
        tempid=instance_create(x,y,obj_thorspark);
        tempid.speed=random(2)+2;
        tempid.gravity=0.2;
        }
    }
}
Collision Event with object obj_skysmasher:

execute code:

if (reflected){
    with (other)
        armor=-100;
    }
Collision Event with object obj_tor:

execute code:

if (iji && other.vulnerable){
    other.hp-=10;
    instance_create(x,y,obj_enemyrocketexplosion);
    instance_create(x,y,obj_explosioncenter);
    scr_shakescreen(2);
    instance_destroy();
    }
______________________________________________________

Information about object: obj_tyrian2
Sprite: spr_tyrian2
Solid: false
Visible: true
Depth: 2001
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=16;
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_ripper2
Sprite: 
Solid: false
Visible: true
Depth: 2000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

point[0,0]=40;
point[1,0]=4;
point[2,0]=8;
point[3,0]=16;
point[4,0]=24;
point[5,0]=32;
point[6,0]=40;
point[7,0]=48;
point[8,0]=56;
point[9,0]=64;
point[10,0]=72;
point[11,0]=76;

point[0,1]=0;
point[1,1]=0;
point[2,1]=-48;
point[3,1]=-8;
point[4,1]=-96;
point[5,1]=-32;
point[6,1]=-128;
point[7,1]=-32;
point[8,1]=-96;
point[9,1]=-8;
point[10,1]=-48;
point[11,1]=0;

height=0.6;
heightdir=0;
heightcyc=8;
Draw Event:

execute code:

if (heightdir==0){
    heightcyc-=1;
    height+=heightcyc/15;
    if (heightcyc<=0)
        heightdir=1;
    }
else{
    heightcyc+=1;
    height-=heightcyc/20;
    if (height<=0.01){
        instance_destroy();
        exit;
        }
    }

pen_size=1;
draw_set_color(make_color_rgb(0,118,163));
draw_primitive_begin(pr_trianglefan);
for (i=0; i<12; i+=1){
    draw_vertex(x+point[i,0],y+(point[i,1]*height));
    }
draw_primitive_end();

draw_set_color(make_color_rgb(0,191,243));
draw_primitive_begin(pr_trianglefan);
for (i=0; i<12; i+=1){
    draw_vertex(x+point[i,0],y+(point[i,1]*height*0.7));
    }
draw_primitive_end();

draw_set_color(make_color_rgb(153,221,249));
draw_primitive_begin(pr_trianglefan);
for (i=0; i<12; i+=1){
    draw_vertex(x+point[i,0],y+(point[i,1]*height*0.4));
    }
draw_primitive_end();
______________________________________________________

Information about object: obj_ripper
Sprite: spr_ripper
Solid: false
Visible: true
Depth: 2004
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

if (!obj_tortrigger.slowdowned){
    repeat(3){
        (instance_create(x-8+random(16),y-8+random(16),obj_mpfbspark)).depth=2008;
        }
    }
if (x<360 || y<100)
    instance_destroy();
Collision Event with object obj_iji:

execute code:

if (!other.takingpain && !other.recovering && image_index<=1){
global.hp-=3;
global.damage+=3;
obj_tor.weight[2]+=3;
obj_tor.potencycount[2]-=1;
with (obj_iji)
    scr_knockdown(1,8);
}
Collision Event with object obj_block:

execute code:

move_contact_solid(270,100);
if (direction==244){
    if (!obj_tortrigger.slowdowned)
        instance_create(x-40,y+42,obj_ripper2);
    instance_create(x-24,y-85,obj_ripper3);
    }
else{
    if (!obj_tortrigger.slowdowned)
        instance_create(x-52,y+36,obj_ripper2);
    instance_create(x-42,y-93,obj_ripper32);
    }
instance_destroy();

______________________________________________________

Information about object: obj_ripper3
Sprite: spr_ripper4
Solid: false
Visible: false
Depth: 2002
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

hspeed=-7.5+(obj_tor.potency[2]/2);
Step Event:

execute code:

bumpcyc+=1;
if (bumpcyc==1)
    bump=0;
if (bumpcyc==3)
    bump=1;
if (bumpcyc==4)
    bump=2;
if (bumpcyc==5){
    bump=1;
    bumpcyc=0;
    }
(instance_create(x,y,obj_ripper4)).bump=bump;
if (x<380)
    instance_destroy();
______________________________________________________

Information about object: obj_ripper4
Sprite: spr_ripper4
Solid: false
Visible: true
Depth: 2002
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=0;
Step Event:

execute code:

cyc+=1;
if (cyc==1) image_single=1;
if (cyc==2) image_single=4;
if (cyc==3) image_single=7;
if (cyc==4) image_single=9;
if (cyc==5) image_single=11;
if (cyc==6) image_single=13;
if (cyc==7) image_single=14;
if (cyc==8) image_single=15;
if (cyc==9) image_single=14;
if (cyc==10) image_single=13;
if (cyc==11) image_single=12;
if (cyc==12) image_single=10;
if (cyc==13) image_single=8;
if (cyc==14) image_single=6;
if (cyc==15) image_single=5;
if (cyc==16) image_single=4;
if (cyc==17) image_single=3;
if (cyc==18) image_single=2;
if (cyc==19) image_single=1;
if (cyc==20) image_single=0;
if (cyc==21) instance_destroy();

if (image_single!=15 && bump==1)
    image_single+=1;
if (image_single<=13 && bump==2)
    image_single+=2;

Collision Event with object obj_iji:

execute code:

if (!other.takingpain && !other.recovering && image_single>2){
global.hp-=2;
global.damage+=2;
obj_tor.weight[2]+=3;
obj_tor.potencycount[2]-=1;
with (obj_iji)
    scr_knockdown(1,5);
}
______________________________________________________

Information about object: obj_ripper32
Sprite: spr_ripper4
Solid: false
Visible: false
Depth: 2002
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

hspeed=-3-(obj_tor.potency[2]*3.4);
Step Event:

execute code:

bumpcyc+=1;
if (bumpcyc==1)
    bump=0;
if (bumpcyc==3)
    bump=1;
if (bumpcyc==4)
    bump=2;
if (bumpcyc==5){
    bump=1;
    bumpcyc=0;
    }
(instance_create(x,y,obj_ripper42)).bump=bump;
if (x<380)
    instance_destroy();

______________________________________________________

Information about object: obj_ripper42
Sprite: spr_ripper4
Solid: false
Visible: true
Depth: 2002
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=0;
Step Event:

execute code:

cyc+=1;
if (cyc==1) image_single=2;
if (cyc==2) image_single=4;
if (cyc==3) image_single=5;
if (cyc==4) image_single=6;
if (cyc==5) image_single=5;
if (cyc==6) image_single=4;
if (cyc==7) image_single=3;
if (cyc==8) image_single=2;
if (cyc==9) image_single=1;
if (cyc==10) image_single=0;
if (cyc==11) instance_destroy();;

image_single+=bump;

Collision Event with object obj_iji:

execute code:

if (!other.takingpain && !other.recovering && image_single>2){
global.hp-=2;
global.damage+=2;
obj_tor.weight[2]+=3;
obj_tor.potencycount[2]-=1;
with (obj_iji)
    scr_knockdown(1,5);
}
______________________________________________________

Information about object: obj_heavystomp
Sprite: spr_heavystomp
Solid: false
Visible: true
Depth: 10001
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=0;
Step Event:

execute code:

repeat(10){
tempid=instance_create(x+random(64),y-10+random(10),obj_smoke);
temprand=floor(random(6));
tempid.image_index+=temprand;
tempid.alarm[0]=12-(temprand*2);
tempid.vspeed=-2;
}
if (x<300 || x>1600)
    instance_destroy();

if (hspeed<0 && x<=928 && obj_tortrigger.destroyedground)
    image_single=1;
Collision Event with object obj_iji:

execute code:

with (other){
if (global.state!=6 && global.state!=2 && !recovering && !takingpain){
notech=10;
visible=1;
goaroundcyen=1;
scr_knockdown(1,1,1,1,1);
scr_sound("iji_pain",1);
if (obj_tor.superstomp){
    scr_sound("iji_death",1);
    vspeed=-19;
    obj_tortrigger.alarm[1]=2;
    obj_tor.timeline_position=98;
    }
else if (obj_heavystomp.nostomp)
    vspeed=-5;
else
    vspeed=-(obj_tor.potency[3]*5);
recovering=0;
takingpain=0;
if (nostomp){
    obj_tor.weight[3]+=3;
    obj_tor.potencycount[3]-=1;
    }
}
}
______________________________________________________

Information about object: obj_torcharge
Sprite: spr_nanoflash
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

speed=0;
gravity_direction=point_direction(x,y,obj_tor.x-80,obj_tor.y+235);
gravity=1.5+random(1);
Step Event:

execute code:

if (speed>35)
    speed=35;
if (x>obj_tor.x-100 && xobj_tor.y+215 && y
______________________________________________________

Information about object: obj_chargeball
Sprite: spr_chargeball
Solid: false
Visible: true
Depth: 1500
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

speed=30;
if (obj_iji.x
Step Event:

execute code:

if (!nocontrol){
if (!start){
    speed-=0.58;
    if (speed<=0){
        start=1;
        depth=0;
        liveone=0;
        x=obj_tor.x-320+random(100);
        y=obj_tor.y-120;
        }
    }

if (start){
    if (xdir==0){
        hspeed+=2;
        if (hspeed>20)
            hspeed=20;
        if (x>=obj_tor.x+210)
            xdir=1;
        if (hspeed>-2)
            depth=1500;
        }
    else{
        hspeed-=2;
        if (hspeed<-20)
            hspeed=-20;
        if (x<=obj_tor.x-10)
            xdir=0;
        if (hspeed<2)
            depth=0;
        }
    if (ydir==0){
        vspeed-=1;
        if (vspeed<-10)
            vspeed=-10;
        if (y<=obj_tor.y+obj_tor.bonepositionsy[0]+155)
            ydir=1;
        }
    else{
        vspeed+=1;
        if (vspeed>10)
            vspeed=10;
        if (y>=obj_tor.y+obj_tor.bonepositionsy[0]+295)
            ydir=0;
        }
    }

if (obj_tor.anim==4 && obj_tor.frame==1){
    x+=obj_tor.x-obj_tor.xprev;
    }
if ((obj_tor.anim==3 && obj_tor.frame>=8) || (obj_tor.anim==4 && obj_tor.frame<=8)){
    y+=obj_tor.bonepositionsy[0]-obj_tor.yprev;
    }

}//Nocontrol

if (!obj_tortrigger.slowdowned){
    tempid=instance_create(x-20+random(40),y-20+random(40),obj_chargeballspark);
    tempid.depth=depth+1;
    tempid.speed=speed/2;
    tempid.direction=direction;
    }

if (x>1800 || y<-600 || x<-600 || y>1800)
    instance_destroy();
Collision Event with object obj_iji:

execute code:

if (!other.takingpain && !other.recovering && !iji){
global.hp-=3;
global.damage+=3;
with (obj_iji)
    scr_knockdown(1,15);
scr_shakescreen(4);
scr_sound("glo_electrocute");
(instance_create(x,y,obj_whiteblanket)).alarm[0]=2;
}
Collision Event with object obj_reflector:

execute code:

if (!iji && other.image_index<=4){
if (liveone){
    if (obj_tor.timeline_position>710 && obj_tor.timeline_position<830)
        obj_tor.timeline_position=830;
    }
liveone=0;
obj_iji.secxrcb=1;
scr_sound("glo_reflect");
nocontrol=1;
direction=point_direction(x,y,other.x,other.y)+180;
speed=25;
iji=1;
depth=0;
if (instance_number(obj_thorspark)<20){
    repeat(5){
        tempid=instance_create(x,y,obj_thorspark);
        tempid.speed=random(2)+2;
        tempid.gravity=0.2;
        }
    }
}
Collision Event with object obj_skysmasher:

execute code:

if (nocontrol){
    with (other)
        armor=-100;
    }
Collision Event with object obj_tor:

execute code:

if (iji && other.vulnerable){
    scr_sound("glo_electrocute");
    scr_sound("exp_mpfb");
    if (obj_tor.hp<400)
        scr_sound("tor_pain");
    else if (obj_tor.hp<800){
        temprand=random(1);
        if (temprand<0.5)
            scr_sound("tor_pain");
        }
    repeat(8)
        instance_create(x,y,obj_chargeballpart)
    (instance_create(x,y,obj_whiteblanket)).alarm[0]=2;
    other.hp-=80;//-global.difficulty*10;
    instance_create(x,y,obj_enemympfbexplosion);
    instance_create(x,y,obj_explosioncenter);
    scr_shakescreen(5);
    instance_destroy();
    if (global.specialbake==0)
        maxsparks=90;
    else
        maxsparks=10;
    if (instance_number(obj_mpfbspark2)
______________________________________________________

Information about object: obj_chargeballspark
Sprite: spr_ijiblood
Solid: false
Visible: true
Depth: 1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=16;
gravity=0.1;
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_chargeballspark2
Sprite: spr_nanoflash
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

randomfollow=2+random(19);
direction=random(360);
speed=randomfollow;
alarm[1]=randomfollow;
Alarm Event for alarm 1:

execute code:

follow=1;
Step Event:

execute code:

if (!follow)
    speed-=1;

else{
dir=point_direction(x,y,obj_tor.x-80,obj_tor.y+235)+90;
direction=dir;
speed+=1;
if (speed>15)
    speed=15;

factor+=0.1;
gravity+=0.2;
gravity_direction=point_direction(x,y,obj_tor.x-80,obj_tor.y+235);
if (gravity>12)
    gravity=12;

if (x>obj_tor.x-105 && xobj_tor.y+210 && y
______________________________________________________

Information about object: obj_hypershotgun
Sprite: spr_hypershotgun
Solid: false
Visible: true
Depth: 1995
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

if (!blink)
    blink=1;
else
    blink=0;
if (!blink)
    draw_sprite(sprite_index,0,x,y);
draw_sprite(spr_hypershotgun2,0,x-61+cyc,y-61+cyc);
draw_sprite(spr_hypershotgun2,1,x+48-cyc,y-61+cyc);
draw_sprite(spr_hypershotgun2,1,x-61+cyc,y+48-cyc);
draw_sprite(spr_hypershotgun2,0,x+48-cyc,y+48-cyc);

cyc+=1;
______________________________________________________

Information about object: obj_torhammer
Sprite: 
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

repeat(20)
instance_create(obj_tor.x-85-random(830),obj_tor.y+149+random(172),obj_hammerspark);
Draw Event:

execute code:

cyc+=1;
if (cyc==1){
    obj_iji.cannotpause=1;
    room_speed=10;
    obj_tor.increasespeed=1;
    obj_tortrigger.alarm[4]=30;
    obj_tortrigger.alarm[5]=38;
    obj_iji.phantomshove=16;
    }
if (cyc>=6)
    instance_destroy();
if (cyc<5){
    with (obj_tor)
        scr_tor_fire();
    }

draw_set_color(c_white);
if (cyc==0 || cyc==2 || cyc==4 || cyc==6){
    draw_rectangle(100,100,1400,1000,0);
    }
else{
    draw_primitive_begin(pr_trianglefan);
    draw_vertex(x-69,y+217);
    draw_vertex(x-76,y+79);
    draw_vertex(x-87,y+126);
    draw_vertex(x-113,y+71);
    draw_vertex(x-110,y+126);
    draw_vertex(x-209,y+68);
    draw_vertex(x-153,y+127);
    draw_vertex(x-358,y+70);
    draw_vertex(x-154,y+178);
    draw_vertex(x-154,y+292);
    draw_vertex(x-358,y+400);
    draw_vertex(x-153,y+342);
    draw_vertex(x-209,y+402);
    draw_vertex(x-110,y+344);
    draw_vertex(x-113,y+399);
    draw_vertex(x-87,y+344);
    draw_vertex(x-76,y+391);
    draw_vertex(x-69,y+253);
    draw_primitive_end();
    draw_sprite(spr_torhammer,1,obj_tor.x-101,obj_tor.y+235);
    for (i=0; i<30; i+=1)
        draw_sprite(spr_torhammer,0,obj_tor.x-133-(i*32),obj_tor.y+235);
    }

//Strike Iji
if (obj_iji.xobj_tor.y+159 && obj_iji.bbox_top
______________________________________________________

Information about object: obj_hammerspark
Sprite: spr_ijiblood
Solid: false
Visible: true
Depth: 1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.25;
alarm[0]=32;
hspeed=-0.5-random(0.5);
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_ijimist
Sprite: spr_ijimist
Solid: false
Visible: true
Depth: -1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[1]=3;
image_alpha=1;
Alarm Event for alarm 1:

execute code:

hspeed=-random(1.8);
factor=0.01+random(0.02);
Step Event:

execute code:

image_alpha-=factor;
if (image_alpha<0.04)
    instance_destroy();
______________________________________________________

Information about object: obj_pickuprefl
Sprite: spr_pickuprefl
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_weaponpickup
Mask: 

______________________________________________________

Information about object: obj_fractalrocket
Sprite: spr_fractalrocket
Solid: false
Visible: true
Depth: 2000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
speed=ceil(obj_tor.potency[7]*1.3+6.5);
Step Event:

execute code:

if (type==0 && x=5){
    instance_create(x,y,obj_megaflash);
    scr_shakescreen(2);
    tempid=instance_create(x,y,obj_fractalrocket);
    tempid.direction=45;
    tempid.type=1;
    tempid.image_single=1;
    tempid=instance_create(x,y,obj_fractalrocket);
    tempid.direction=135;
    tempid.type=1;
    tempid.image_single=3;
    tempid=instance_create(x,y,obj_fractalrocket);
    tempid.direction=225;
    tempid.type=1;
    tempid.image_single=5;
    tempid=instance_create(x,y,obj_fractalrocket);
    tempid.direction=315;
    tempid.type=1;
    tempid.image_single=7;
    tempid=instance_create(x,y,obj_fractalrocket);
    tempid.direction=90;
    tempid.type=1;
    tempid.image_single=2;
    instance_destroy();
    }
}

else if (type==1 && yystart+150){
    instance_create(x,y,obj_megaflash);
scr_shakescreen(2);
tempid=instance_create(x,y,obj_fractalrocket);
tempid.direction=90;
tempid.type=2;
tempid.image_single=2;
tempid=instance_create(x,y,obj_fractalrocket);
tempid.direction=180;
tempid.type=2;
tempid.image_single=4;
instance_destroy();
}

if (!obj_tortrigger.slowdowned){
    (instance_create(x-1+random(2),y-1+random(2),obj_bigsmoke)).depth=2002;
    }
if (x<100 || x>1600 || y<0 || y>1000)
    instance_destroy();

if (!shift){
    shift=1;
    image_single+=8;
    }
else{
    shift=0;
    image_single-=8;
    }
Collision Event with object obj_iji:

execute code:

if (!iji){
(instance_create(x,y,obj_enemyrocketexplosion)).torweapon=7;
instance_create(x,y,obj_explosioncenter);
scr_shakescreen(1);
instance_destroy();
}
Collision Event with object obj_block:

execute code:

move_contact_solid(270,32);
(instance_create(x,y,obj_enemyrocketexplosion)).torweapon=7;
instance_create(x,y,obj_explosioncenter);
scr_shakescreen(1);
instance_destroy();
Collision Event with object obj_reflector:

execute code:

if (!iji && other.image_index<=1){
scr_sound("glo_reflect");
reflected=1;
iji=1;
direction=0;
image_single=0;
speed*=2;
if (speed>13)
    speed=13;
    
shift=0;
if (instance_number(obj_thorspark)<20){
    repeat(5){
        tempid=instance_create(x,y,obj_thorspark);
        tempid.speed=random(2)+2;
        tempid.gravity=0.2;
        }
    }
}
Collision Event with object obj_skysmasher:

execute code:

if (reflected){
    (instance_create(x,y,obj_enemyrocketexplosion)).torweapon=7;
    instance_create(x,y,obj_explosioncenter);
    scr_shakescreen(1);
    instance_destroy();
    with (other)
        armor=-100;
    }
Collision Event with object obj_tor:

execute code:

if (iji){
other.hp-=5;
(instance_create(x,y,obj_enemyrocketexplosion)).torweapon=7;
instance_create(x,y,obj_explosioncenter);
scr_shakescreen(1);
instance_destroy();
}
______________________________________________________

Information about object: obj_nanostorm
Sprite: spr_nanoflash
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

randomfollow=10+random(80);
direction=random(360);
speed=randomfollow/5;
alarm[1]=randomfollow;
Alarm Event for alarm 1:

execute code:

follow=1;
targetx=obj_iji.x+6;
targety=obj_iji.y+30;
direction=point_direction(x,y,targetx,targety);
Step Event:

execute code:

if (!follow && speed>0){
    speed-=1;
    if (speed<0)
        speed=0;
    }
if (follow){
    if (speed<25)
    speed+=1;
    }

if (x>targetx-15 && xtargety-15 && y
______________________________________________________

Information about object: obj_stormflash
Sprite: spr_stormflash
Solid: false
Visible: true
Depth: -10
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

if (!other.takingpain && !other.recovering && cycle==1){
global.armor-=60/global.armorlevel;
if (global.armor<1){
    with (obj_iji){
        global.hp-=3;
        global.damage+=3;
        scr_knockdown(1,10);
        scr_shakescreen(3);
        }
    }
}
Draw Event:

execute code:

cycle+=1;
if (cycle==1)
draw_sprite(spr_stormflash,0,x,y);
if (cycle==2)
draw_sprite(spr_megaflash2,0,x,y);
if (cycle==3)
draw_sprite(spr_megaflash3,0,x,y);
if (cycle==4)
draw_sprite(spr_megaflash4,0,x,y);
if (cycle==5)
draw_sprite(spr_megaflash5,0,x,y);
if (cycle==6)
instance_destroy();
______________________________________________________

Information about object: obj_tor2
Sprite: spr_tor2
Solid: false
Visible: true
Depth: 2000000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

realyspeed=2;
image_single=1;
arriving=1;
Alarm Event for alarm 0:

execute code:

//DEATH HAIL
image_single=11;
obj_sabot.flash=0.5;
alarm[2]=60;
scr_sound("exp_nuke",1);

if (obj_tor.hailtype<1){
for (i=0; i<10; i+=1){
    tempid=instance_create(background_x[0]+424,realy+background_y[0],obj_deathhail);
    tempid.realxspeed=sin(degtorad(i*9+2))*13;
    tempid.realyspeed=-cos(degtorad(i*9+2))*13;
    tempid.realyspeed*=0.6;
    tempid=instance_create(background_x[0]+424,realy+background_y[0],obj_deathhail);
    tempid.realxspeed=sin(degtorad(i*9+2))*13;
    tempid.realyspeed=-cos(degtorad(i*9+2))*13;
    tempid.realxspeed=-tempid.realxspeed;
    tempid.realyspeed*=0.6;
    }
    }

else{
for (i=0; i<20; i+=1){
    tempid=instance_create(background_x[0]+424,realy+background_y[0],obj_deathhail);
    tempid.realxspeed=sin(degtorad(i*4.5+2))*13;
    tempid.realyspeed=-cos(degtorad(i*4.5+2))*13;
    tempid.realyspeed*=0.6;
    tempid=instance_create(background_x[0]+424,realy+background_y[0],obj_deathhail);
    tempid.realxspeed=sin(degtorad(i*4.5+2))*13;
    tempid.realyspeed=-cos(degtorad(i*4.5+2))*13;
    tempid.realxspeed=-tempid.realxspeed;
    tempid.realyspeed*=0.6;
    }
    }
Alarm Event for alarm 1:

execute code:

//RETRACT RAMPS
retract=1;
retractcyc=0;
if (obj_tor.hailtype!=1)
    obj_tor.timeline_position=200;
Alarm Event for alarm 2:

execute code:

//DEATH HAIL
spawndeathhail=1;
sdh=0;
sdhdir=0;
Alarm Event for alarm 3:

execute code:

//ERUPTION
scr_sound("exp_turret");
scr_sound("exp_nuke");
for (i=0; i<34; i+=1){
instance_create(316+i*64,639,obj_eruption);
}
obj_sabot.flash=0.5;
scr_shakescreen(5);
obj_tor.showsafe=0;
if (global.difficulty!=0){
    with (obj_iosa2safe)
        instance_destroy();
    }
redgamma=1.5;
Alarm Event for alarm 4:

execute code:

//MEGAMISSILE
megamissilecyc+=1;
if (megamissilecyc==1){
    tempid=instance_create(background_x[0]+430,background_y[0]+363,obj_megamissile);
    tempid.hspeed=-3-random(3);
    tempid.depth=11000;
    instance_create(background_x[0]+430,background_y[0]+363,obj_tor2muzzleflash);
    alarm[4]=25;
    scr_sound("wea_shoc",1);
    }
else if (megamissilecyc==2){
    tempid=instance_create(background_x[0]+430,background_y[0]+363,obj_megamissile);
    tempid.hspeed=3+random(3);
    tempid.depth=11001;
    instance_create(background_x[0]+430,background_y[0]+363,obj_tor2muzzleflash);
    alarm[4]=25;
    scr_sound("wea_shoc",1);
    }
else if (megamissilecyc==3){
    tempid=instance_create(background_x[0]+430,background_y[0]+363,obj_megamissile);
    tempid.hspeed=-2-random(2);
    tempid.vspeed=-2;
    tempid.depth=11002;
    instance_create(background_x[0]+430,background_y[0]+363,obj_tor2muzzleflash);
    alarm[4]=25;
    scr_sound("wea_shoc",1);
    }
else if (megamissilecyc==4){
    tempid=instance_create(background_x[0]+430,background_y[0]+363,obj_megamissile);
    tempid.hspeed=2+random(2);
    tempid.vspeed=-2;
    tempid.depth=11003;
    instance_create(background_x[0]+430,background_y[0]+363,obj_tor2muzzleflash);
    scr_sound("wea_shoc",1);
    }
Step Event:

execute code:

//Gamma
if (redgamma>0){
    redgamma-=0.05;
    global.gammared=redgamma;
    if (redgamma<=0){
        redgamma=0;
        global.gammared=0;
        }
    }

//Speed
realy+=realyspeed;

//Spawn Death hail
if (spawndeathhail){
    //Type 1
    if (obj_tor.hailtype==0){
        sdh+=1;
        if (sdh mod 2){
            instance_create(1400-sdh*32,640,obj_deathhailbeam);
            if (sdh>=32){
                sdhdir=0;
                sdh=0;
                spawndeathhail=0;
                }
            }
        }

    //Type 2
    else if (obj_tor.hailtype==1){
        sdh+=1;
        if (sdhdir==0){
            tempid=instance_create(1400-sdh*64,640,obj_deathhailbeam);
            if (sdh mod 2==0)
                tempid.nosound=1;
            if (sdh>=16){
                sdhdir=1;
                sdh=0;
                }
            }
        if (sdhdir==1){
            tempid=instance_create(-680+sdh*64,640,obj_deathhailbeam);
            if (sdh mod 2==0)
                tempid.nosound=1;
            if (sdh>=35){
                sdhdir=0;
                sdh=0;
                spawndeathhail=0;
                }
            }
        }

    //Type 3
    else if (obj_tor.hailtype==2){
        sdh+=1;
        if (sdhdir==0){
            tempid=instance_create(1400-sdh*64,640,obj_deathhailbeam);
            if (sdh mod 2==0)
                tempid.nosound=1;
            if (sdh>=16){
                sdhdir=1;
                sdh=0;
                }
            }
        if (sdhdir==1){
            tempid=instance_create(280+sdh*64,640,obj_deathhailbeam);
            if (sdh mod 2==0)
                tempid.nosound=1;
            if (sdh>=17){
                sdhdir=0;
                sdh=0;
                spawndeathhail=0;
                }
            }
        }
    }

//Arriving
if (arriving){
    realyspeed+=0.5;
    if (realyspeed>12)
        realyspeed=12;
    if (realy>=360){
        realy=360;
        land=1;
        landcyc=0;
        arriving=0;
        realyspeed=0;
        scr_sound("glo_thunder");
        }
    }

//Leaving
if (leaving){
    realyspeed-=0.6;
    if (realyspeed<-12)
        realyspeed=-12;
    if (realy<-1000)
        instance_destroy();
    }

//Land
if (land){
    if (landcyc==0)
        image_single=6;
    if (landcyc==2)
        image_single=5;
    if (landcyc==4)
        image_single=4;
    if (landcyc==6){
        image_single=0;
        land=0;
        }
    landcyc+=1;
    }

//Jump
if (jump){
    if (jumpcyc==0)
        image_single=4;
    if (jumpcyc==2)
        image_single=5;
    if (jumpcyc==4)
        image_single=6;
    if (jumpcyc==10)
        image_single=4;
    if (jumpcyc==12){
        image_single=1;
        jump=0;
        leaving=1;
        realyspeed=-3;
        }
    jumpcyc+=1;
    }

//Extend
if (extend){
    if (extendcyc==0)
        image_single=7;
    if (extendcyc==2)
        image_single=8;
    if (extendcyc==4){
        image_single=9;
        extend=0;
        }
    extendcyc+=1;
    }

//Retract
if (retract){
    if (retractcyc==0)
        image_single=11;
    if (retractcyc==2)
        image_single=8;
    if (retractcyc==4)
        image_single=7;
    if (retractcyc==6){
        image_single=0;
        retract=0;
        }
    retractcyc+=1;
    }

//Looping images
if (image_single==1)
    image_single=2;
else if (image_single==2)
    image_single=3;
else if (image_single==3)
    image_single=1;

else if (image_single==9)
    image_single=10;
else if (image_single==10)
    image_single=9;
______________________________________________________

Information about object: obj_deathhail
Sprite: 
Solid: false
Visible: true
Depth: 2000003
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

realx=424;
realy=360;
x1=realx;
y1=realy;
x2=realx;
y2=realy;
x3=realx;
y3=realy;
x4=realx;
y4=realy;
x5=realx;
y5=realy;
x6=realx;
y6=realy;
x7=realx;
y7=realy;
Step Event:

execute code:

if (!obj_tortrigger.slowdowned){
    temprand=random(1)
    if (temprand>0.7)
        instance_create(realx+background_x[0],realy+background_y[0],obj_deathhailspark);
    }

Draw Event:

execute code:

realx+=realxspeed;
realy+=realyspeed;

factor+=0.1;
realyspeed-=factor;

x7=x6;
y7=y6;
x6=x5;
y6=y5;
x5=x4;
y5=y4;
x4=x3;
y4=y3;
x3=x2;
y3=y2;
x2=x1;
y2=y1;
x1=realx;
y1=realy;
draw_set_color(make_color_rgb(224,224,255));
draw_line(x7+background_x[0],y7+background_y[0],x6+background_x[0],y6+background_y[0]);
if (!obj_tortrigger.slowdowned){
    draw_set_color(make_color_rgb(208,208,255));
    draw_line(x6+background_x[0],y6+background_y[0],x5+background_x[0],y5+background_y[0]);
    draw_set_color(make_color_rgb(192,192,255));
    draw_line(x5+background_x[0],y5+background_y[0],x4+background_x[0],y4+background_y[0]);
    draw_set_color(make_color_rgb(176,176,255));
    draw_line(x4+background_x[0],y4+background_y[0],x3+background_x[0],y3+background_y[0]);
    draw_set_color(make_color_rgb(160,160,255));
    draw_line(x3+background_x[0],y3+background_y[0],x2+background_x[0],y2+background_y[0]);
    draw_set_color(make_color_rgb(144,144,255));
    draw_line(x2+background_x[0],y2+background_y[0],x1+background_x[0],y1+background_y[0]);
    draw_set_color(make_color_rgb(128,128,255));
    draw_line(x1+background_x[0],y1+background_y[0],realx+background_x[0],realy+background_y[0]);
    }
if (realy<-250)
    instance_destroy();
______________________________________________________

Information about object: obj_deathhailspark
Sprite: spr_deathhailspark
Solid: false
Visible: true
Depth: 2000005
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

realx=xstart-background_x[0];
realy=ystart-background_y[0];
alarm[0]=random(25)+5;
factor=0.03;
Alarm Event for alarm 0:

execute code:

instance_destroy();
Step Event:

execute code:

realyspeed+=factor;
realy+=realyspeed;
______________________________________________________

Information about object: obj_deathhailbeam
Sprite: 
Solid: false
Visible: true
Depth: 2005
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=5;
target=40;
Step Event:

execute code:

if (instance_number(obj_disruptor)==1){
    if (target==0 && obj_disruptor.x+65>x-16 && obj_disruptor.x-65x-16 && obj_reflector.x-65x-16 && obj_shockbarrier.x-12
Draw Event:

execute code:

//Target
if (target>0){
    target-=1;
    draw_sprite(spr_deathhailtarget,target mod 8,x,y-8)
    draw_sprite(spr_deathhailtarget,target mod 8,x,y-32)
    draw_sprite(spr_deathhailtarget,target mod 8,x,y-56)
    }

//Beam
else{
if (!explo){
    if (!nosound)
        scr_sound("exp_rock");
    explo=1;
    instance_create(x,y,obj_deathhailexplo);
    //if (!nosound)
    //    scr_shakescreen(0);
    }
if (obj_iji.x+6>x-16 && obj_iji.x+6
______________________________________________________

Information about object: obj_deathhailexplo
Sprite: spr_deathhailexplo
Solid: false
Visible: true
Depth: 2000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=26;
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_eruption
Sprite: 
Solid: false
Visible: true
Depth: 2000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

x1=x;
y1=y;
x2=x+16;
y2=y;
x3=x+32;
y3=y;
x4=x+48;
y4=y;
x5=x+64;
y5=y;
force=45;
spark=20;
Step Event:

execute code:

//Spark
if (!obj_tortrigger.slowdowned){
    if (spark>0){
        spark-=1;
        if (spark mod 2)
            (instance_create(x+random(64),y-16-random(150),obj_eruptionspark)).vspeed=-(spark*5);
        }
    }

End Step Event:

execute code:

//Damage
if (instance_number(obj_iji)==1){
    if (obj_iji.y+40>y3 && !obj_iji.takingpain && !obj_iji.recovering && !retreat){
        global.hp-=3;
        global.damage+=3;
        with (obj_iji){
            notech=10;
            goaroundcyen=1;
            if (sprite_index==spr_basic || sprite_index==spr_basicleft || sprite_index==spr_duck || sprite_index==spr_duckleft || sprite_index==spr_hitfloor || sprite_index==spr_hitfloorleft || sprite_index==spr_getup || sprite_index==spr_getupleft){
                scr_knockdown(1,2);
                    vspeed=-40;
                }
            else{
                scr_knockdown(1,2);
                    vspeed=-30;
                }
            }
        }
    }

if (instance_number(obj_reflector)==1){
    with (obj_reflector)
        scr_reflectorexplo();
    }
if (instance_number(obj_disruptor)==1){
    with (obj_disruptor)
        scr_disruptorexplo();
    }
if (instance_number(obj_shockbarrier)==1){
    with (obj_shockbarrier)
        scr_barrierexplo();
    }

Draw Event:

execute code:

//Rise
if (!retreat){
    y1-=force;
    y2-=force;
    y3-=force;
    y4-=force;
    y5-=force;
    force-=5;
    if (force<=0){
        retreat=1;
        }
    }
//Retreat
else{
    force+=1;
    y1+=force/0.9;
    y2+=force/1.1;
    y3+=force/1.6;
    y4+=force/1.1;
    y5+=force/0.9;
    if (y1>=y)
        y1=y;
    if (y2>=y)
        y2=y;
    if (y3>=y){
        y3=y;
        instance_destroy();
        }
    if (y4>=y)
        y4=y;
    if (y5>=y)
        y5=y;
    }

//Small, large
draw_set_color(make_color_rgb(255,64,64));
if (y2>=y){
    draw_primitive_begin(pr_trianglefan);
    draw_vertex(x2,y2);
    draw_vertex(x3,y3);
    draw_vertex(x4,y4);
    draw_primitive_end();
    
    draw_set_color(c_white);
    draw_primitive_begin(pr_trianglefan);
    draw_vertex(x2,y2+((y-y2)*0.1));
    draw_vertex(x3,y3+((y-y3)*0.1));
    draw_vertex(x4,y4+((y-y4)*0.1));
    draw_primitive_end();
    }
else{
    draw_primitive_begin(pr_trianglefan);
    draw_vertex(x+32,y);
    draw_vertex(x1,y1);
    draw_vertex(x2,y2);
    draw_vertex(x3,y3);
    draw_vertex(x4,y4);
    draw_vertex(x5,y5);
    draw_vertex(x+64,y);
    draw_vertex(x,y);
    draw_vertex(x1,y1);
    draw_primitive_end();
    
    draw_set_color(c_white);
    draw_primitive_begin(pr_trianglefan);
    draw_vertex(x+32,y);
    draw_vertex(x1,y1+((y-y1)*0.1));
    draw_vertex(x2,y2+((y-y2)*0.1));
    draw_vertex(x3,y3+((y-y3)*0.1));
    draw_vertex(x4,y4+((y-y4)*0.1));
    draw_vertex(x5,y5+((y-y5)*0.1));
    draw_vertex(x+64,y);
    draw_vertex(x,y);
    draw_vertex(x1,y1+((y-y1)*0.1));
    draw_primitive_end();
    }


______________________________________________________

Information about object: obj_eruptionspark
Sprite: spr_eruptionspark
Solid: false
Visible: true
Depth: 2010
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=14;
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_eruptionslash
Sprite: 
Solid: false
Visible: true
Depth: 11000
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

draw_set_color(c_red);
cyc+=1;
draw_primitive_begin(pr_trianglelist);
draw_vertex(background_x[0]+430,background_y[0]+363);
draw_vertex(-120+cyc*200,639);
draw_vertex(180+cyc*200,639);
draw_primitive_end();
if (cyc>=9)
    instance_destroy();

______________________________________________________

Information about object: obj_tor2muzzleflash
Sprite: spr_tor2muzzleflash
Solid: false
Visible: true
Depth: 11990
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

realx=x-background_x[0];
realy=y-background_y[0];
alarm[0]=8;
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_megamissile
Sprite: 
Solid: false
Visible: true
Depth: 10000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

size=4;
factor=0.1;
Step Event:

execute code:

if (flash==1 && !obj_tortrigger.slowdowned){
tempid=instance_create(x,y,obj_megamissilespark);
tempid.size=size*0.9;
tempid.depth=1500001-size;
}

//Reflect
if (instance_number(obj_reflector)==1){
if (point_distance(x,y,obj_reflector.x,obj_reflector.y)<90 && obj_reflector.image_single<=3 && size>=35 && !reflected){
    scr_sound("glo_reflect");
    reflected=1;
    whiteflash=3;
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(x,y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    }
}

//Disruptor
if (instance_number(obj_disruptor)==1){
if (point_distance(x,y,obj_disruptor.x,obj_disruptor.y)<90 && size>=35 && !reflected){
    repeat(20)
        instance_create(x,y,obj_thorspark);
    repeat(6)
        instance_create(x,y,obj_smokepoint);
    instance_create(x,y,obj_megaflash);
    instance_create(x-48,y,obj_megaflash);
    instance_create(x+48,y,obj_megaflash);
    instance_create(x,y-48,obj_megaflash);
    instance_create(x,y+48,obj_megaflash);
    scr_sound("exp_mpfb");
    scr_shakescreen(4);
    instance_destroy();
    }
}

//Barrier
if (instance_number(obj_shockbarrier)==1){
if (point_distance(x,y,obj_shockbarrier.x,obj_shockbarrier.y)<90 && size>=35 && !reflected){
    repeat(20)
        instance_create(x,y,obj_thorspark);
    repeat(6)
        instance_create(x,y,obj_smokepoint);
    instance_create(x,y,obj_megaflash);
    instance_create(x-48,y,obj_megaflash);
    instance_create(x+48,y,obj_megaflash);
    instance_create(x,y-48,obj_megaflash);
    instance_create(x,y+48,obj_megaflash);
    scr_sound("exp_mpfb");
    scr_shakescreen(4);
    instance_destroy();
    }
}

//Explode
if (size>=40){
    scr_sound("exp_mpfb");
    instance_create(x,y,obj_enemympfbexplosion);
    instance_create(x,y,obj_explosioncenter);
    if (global.specialbake==0)
        maxsparks=90;
    else
        maxsparks=10;
    if (instance_number(obj_mpfbspark2)
Draw Event:

execute code:

depth=1500000-size;

//Draw
if (flash==0)
    flash=1;
else{
    draw_set_color(c_white);
    draw_circle(x,y,size*1.3,0);
    draw_set_color(c_yellow);
    draw_circle(x,y,size*1.3,1);
    flash=0;
    }

if (whiteflash>0){
    whiteflash-=1;
    draw_set_color(c_white);
    draw_circle(x,y,size,0);
    }
else if (reflected){
draw_set_color(make_color_rgb(150-((40-size)*3.75),0,24-((40-size)*0.6)));
draw_circle(x,y,size,0);
if (!obj_tortrigger.slowdowned){
    draw_set_color(make_color_rgb(108-((40-size)*2.7),0,14-((40-size)*0.35)));
    draw_circle(x,y,size*0.9,0);
    draw_set_color(make_color_rgb(40-(40-size),0,0));
    draw_circle(x,y,size*0.75,0);
    }
}
else{
draw_set_color(make_color_rgb(108-((40-size)*2.7),0,14-((40-size)*0.35)));
draw_circle(x,y,size,0);
if (!obj_tortrigger.slowdowned){
    draw_set_color(make_color_rgb(150-((40-size)*3.75),0,24-((40-size)*0.6)));
    draw_circle(x-(size*0.1),y-(size*0.1),size*0.8,0);
    draw_set_color(make_color_rgb(223-((40-size)*5.575),0,40-(40-size)));
    draw_circle(x-(size*0.3),y-(size*0.3),size*0.5,0);
    }
}

//Stats
if (reflected){
factor*=0.99;
size-=factor;
speed*=0.95;
}
else{
factor*=1.018;
size+=factor;
}

//Move
if (!reflected){
if (global.difficulty==0 && !global.tormaximumcharge){
    if (xview_xview[0]+800 && hspeed>0)
        hspeed-=0.008*size;
    if (y>550 && vspeed>0)
        vspeed-=0.008*size;
    if (y>obj_iji.y+30 || y>550)
        vspeed-=0.008*size;
    else
        vspeed+=0.008*size;
    }
else{
    if (xview_xview[0]+800 && hspeed>0)
        hspeed-=0.012*size;
    if (y>550 && vspeed>0)
        vspeed-=0.015*size;
    if (y>obj_iji.y+30 || y>550)
        vspeed-=0.013*size;
    else
        vspeed+=0.013*size;
    }
}

if (reflected && size<=1.5)
    instance_destroy();


______________________________________________________

Information about object: obj_megamissilespark
Sprite: 
Solid: false
Visible: true
Depth: 1000020
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

if (flash==0)
    flash=1;
else{
    flash=0;
    draw_set_color(c_yellow);
    draw_circle(x,y,size,0);
    }

size*=0.85;
if (size<1)
    instance_destroy();
______________________________________________________

Information about object: obj_rageburst
Sprite: 
Solid: false
Visible: true
Depth: 1000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=1;
for (i=2; i<14; i+=1)
    instance_create(x-i*64,y,obj_rageburstwarn);
Alarm Event for alarm 0:

execute code:

x-=64;
alarm[0]=8-(obj_tor.potency[6]*1);
instance_create(x,y,obj_rageburst2);
Step Event:

execute code:

if (x<0)
    instance_destroy();
______________________________________________________

Information about object: obj_rageburst2
Sprite: spr_rageburst
Solid: false
Visible: true
Depth: 1000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=0;
Step Event:

execute code:

cyc+=1;
if (cyc==1)
    image_single=2;
if (cyc==2)
    image_single=5;
if (cyc==3)
    image_single=7;
if (cyc==4)
    image_single=6;
if (cyc==5)
    image_single=5;
if (cyc==6)
    image_single=4;
if (cyc==7)
    image_single=3;
if (cyc==8)
    image_single=2;
if (cyc==9)
    image_single=1;
if (cyc==10)
    image_single=0;
if (cyc==11)
    instance_destroy();
if (!obj_tortrigger.slowdowned)
    instance_create(x+4+random(24),y-10,obj_rageburstspark);
Collision Event with object obj_iji:

execute code:

if (!other.takingpain && !other.recovering && image_single>0){
    with (other){
        global.hp-=3;
        global.damage+=3;
        scr_knockdown(1,2);
        if (sprite_index==spr_knockdown || sprite_index==spr_knockdownleft)
            vspeed=-20;
        scr_shakescreen(3);
        obj_tor.weight[6]+=3;
        obj_tor.potencycount[6]-=1;
        }
    }
Collision Event with object obj_rageburstwarn:

execute code:

with (other)
    instance_destroy();
______________________________________________________

Information about object: obj_rageburstspark
Sprite: spr_rageburstspark
Solid: false
Visible: true
Depth: 1005
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=8;
vspeed=-(1+random(38));
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_rageburstwarn
Sprite: spr_pickuphealth
Solid: false
Visible: false
Depth: 1008
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

(instance_create(x+4+random(24),y-4,obj_rageburstspark)).vspeed=-(0.5+random(2));
______________________________________________________

Information about object: obj_fadeshape
Sprite: 
Solid: false
Visible: true
Depth: -1000002
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

for (i=0; i<3; i+=1){
xv[i]=x-64+random(128);
yv[i]=y-64+random(128);
}

xc=x-(xv[0]+xv[1]+xv[2])/3;
yc=y-(yv[0]+yv[1]+yv[2])/3;

for (i=0; i<3; i+=1){
    xv[i]+=xc;
    yv[i]+=yc;
    }

direction=point_direction(x,y,obj_tor.x+150,obj_tor.y+150)+180;
speed=random(25);
temprand=random(1);
if (temprand>0.8)
    speed=random(35)+15;

gravity=-random(0.1);
depth+=(gravity*100);
Draw Event:

execute code:

//Shrink
xv[0]+=(x-xv[0])/50;
yv[0]+=(y-yv[0])/50;
xv[1]+=(x-xv[1])/50;
yv[1]+=(y-yv[1])/50;
xv[2]+=(x-xv[2])/50;
yv[2]+=(y-yv[2])/50;
if (abs(xv[0]-x)<0.5 && abs(xv[1]-x)<0.5 && abs(xv[2]-x)<0.5)
    instance_destroy();

//Move
for (i=0; i<3; i+=1){
    xv[i]+=hspeed;
    yv[i]+=vspeed;
    }
//Slow down
hspeed*=0.95;
vspeed*=0.95;

//Draw
if (alpha<255)
    alpha+=2+gravity*15;
if (alpha>255)
    alpha=255;
draw_set_color(make_color_rgb(alpha,alpha,alpha));
draw_triangle(xv[0],yv[0],xv[1],yv[1],xv[2],yv[2],0);

if (x>1400)
    instance_destroy();
______________________________________________________

Information about object: obj_fadeshape2
Sprite: 
Solid: false
Visible: true
Depth: -1000005
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

for (i=0; i<3; i+=1){
xv[i]=x-400+random(800);
yv[i]=y-400+random(800);
}

xc=x-(xv[0]+xv[1]+xv[2])/3;
yc=y-(yv[0]+yv[1]+yv[2])/3;

for (i=0; i<3; i+=1){
    xv[i]+=xc;
    yv[i]+=yc;
    }
Alarm Event for alarm 0:

execute code:

//Larger
for (i=0; i<3; i+=1){
xv[i]=x-600+random(1000);
yv[i]=y-600+random(1000);
}

xc=x-(xv[0]+xv[1]+xv[2])/3;
yc=y-(yv[0]+yv[1]+yv[2])/3;

for (i=0; i<3; i+=1){
    xv[i]+=xc;
    yv[i]+=yc;
    }

Draw Event:

execute code:

//Draw
draw_set_color(c_black);
draw_triangle(xv[0],yv[0],xv[1],yv[1],xv[2],yv[2],0);
______________________________________________________

Information about object: obj_torfakeiji
Sprite: spr_iji_blackjump
Solid: false
Visible: true
Depth: -1000010
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

vspeed=-0.85;
Alarm Event for alarm 0:

execute code:

image_single=3;
Step Event:

execute code:

if (fade)
    image_alpha-=0.05;
if (image_alpha<=0)
    instance_destroy();
Collision Event with object obj_block:

execute code:

if (vspeed>1){
    vspeed=0;
    gravity=0;
    move_contact_solid(270,30);
    }
sprite_index=spr_blackstandup;
image_index=0;
image_speed=0.5;
alarm[0]=6;
scr_sound("iji_land2");
obj_torsecsil.vspeed=0;
obj_torsecsil.gravity=0;
Draw Event:

execute code:

draw_sprite_ext(sprite_index,image_index,floor(x),floor(y),1,1,0,c_white,image_alpha);
______________________________________________________

Information about object: obj_locationmessage
Sprite: spr_glass
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_locationmessage2
Sprite: spr_glass2
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: obj_locationmessage
Mask: 

______________________________________________________

Information about object: obj_torblood
Sprite: spr_torblood
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_sec7hatch
Sprite: spr_sec7hatch
Solid: true
Visible: true
Depth: 950000
Persistent: false
Parent: obj_block
Mask: 

Step Event:

execute code:

if (open){
if (tag==0)
    x-=1;
else
    x+=1;
if (x<=5056 || x>=5152)
    instance_destroy();
}
______________________________________________________

Information about object: obj_torbody
Sprite: spr_torbody_basic
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=0;
if (global.killdata[797]==1)
    image_single=2;
Alarm Event for alarm 0:

execute code:

sprite_index=spr_torbody_basic;
image_single=2;
Alarm Event for alarm 1:

execute code:

sprite_index=spr_torbody_basic;
image_single=0;
Alarm Event for alarm 2:

execute code:

sprite_index=spr_torbody_holdgun;
image_single=0;
imagecyc=0;
Alarm Event for alarm 3:

execute code:

sprite_index=spr_torbody_basic;
image_single=0;
Step Event:

execute code:

//Holdgun
if (sprite_index==spr_torbody_holdgun && !nobob){
imagecyc+=1;
if (imagecyc==4)
image_single=1;
if (imagecyc==8)
image_single=2;
if (imagecyc==16)
image_single=1;
if (imagecyc==20)
image_single=0;
if (imagecyc==24)
    imagecyc=0;
    }

//Jump
if (sparkcyc>0){
    sparkcyc-=2;
    repeat(sparkcyc){
        tempid=instance_create(x+random(100),y+random(125),obj_thorspark);
        tempid.speed=0;
        tempid.gravity=0.25;
        }
    }

if (vspeed<-1){
    vspeed*=0.90;
    }
else
    vspeed=0;
______________________________________________________

Information about object: obj_sec16lift
Sprite: spr_lift
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

if (vspeed<0){
    temprand=random(1);
    if (temprand>0.8){
        tempid=instance_create(x+1,y+17,obj_pixspark);
        tempid.speed=1+random(4);
        tempid.direction=-random(45);
        tempid.alarm[0]=5+floor(random(5));
        }
    temprand=random(1);
    if (temprand>0.8){
        tempid=instance_create(x+127,y+17,obj_pixspark);
        tempid.speed=1+random(4);
        tempid.direction=180+random(45);
        tempid.alarm[0]=5+floor(random(5));
        }
    }
Collision Event with object obj_liftpoint:

execute code:

if (!triggered){
scr_sound("glo_liftend");
triggered=1;
vspeed=0;
obj_torbodytrigger.holdright=1;
with (obj_iji){
    vspeed=0;
    sprite_index=spr_run;
    image_single=-1;
    image_index=0;
    image_speed=0.5;
    }
}
______________________________________________________

Information about object: obj_torbodytrigger
Sprite: spr_lift
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Alarm Event for alarm 0:

execute code:

obj_iji.sprite_index=spr_basic;
Step Event:

execute code:

//Force Iji right
if (holdright){
with (obj_iji){
    image_single=-1;
    image_speed=0.5;
    alarm[1]=0;
    running=1;
    global.facing=1;
    x+=5;
    }
}

if (lookup){
    if (lookupcyc<172)
        lookupcyc+=1;
    }
Collision Event with object obj_iji:

execute code:

if (!metiji){
metiji=1;
holdright=0;
if (global.killdata[797]==1)
    (instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chatxy";
else
    (instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chatx7";
obj_iji.holdafterchat=1;
}
______________________________________________________

Information about object: obj_torbodyblanket
Sprite: spr_sabot
Solid: false
Visible: true
Depth: -1000000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

col=255;
Draw Event:

execute code:

colcyc+=1;
if (colcyc>=30)
    col-=3.5;

if (col<=0){
    col=0;
    room_goto_next();
    }
draw_set_color(make_color_rgb(col,col,col));
draw_rectangle(view_xview[0]-20,view_yview[0]-20,view_xview[0]+view_wview[0]+20,view_yview[0]+view_hview[0]+20,0);
______________________________________________________

Information about object: obj_torbody2
Sprite: spr_torbody_death
Solid: false
Visible: true
Depth: -1000010
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

vspeed=-0.6;
image_single=0;
Alarm Event for alarm 0:

execute code:

image_single=6;
Alarm Event for alarm 1:

execute code:

image_single=6;
Step Event:

execute code:

if (fade)
    image_alpha-=0.05;
if (image_alpha<=0){
    instance_destroy();
    instance_create(x,y,obj_torbody3);
    }
Collision Event with object obj_block:

execute code:

if (vspeed>1){
    scr_sound("glo_land");
    y-=30;
    vspeed=0;
    gravity=0;
    move_contact_solid(270,60);
    }
sprite_index=spr_torbody_hitfloor;
image_single=-1;
image_index=0;
image_speed=0.5;
alarm[0]=14;
Draw Event:

execute code:

draw_sprite_ext(sprite_index,image_index,floor(x),floor(y),1,1,0,c_white,image_alpha);
______________________________________________________

Information about object: obj_torbody3
Sprite: spr_torbody_hitfloor
Solid: false
Visible: true
Depth: 100
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

img=7;
Draw Event:

execute code:

draw_sprite(sprite_index,img,x,y);
if (obj_sabot.bananaending){
    if (img==8)
        draw_sprite(spr_banana,1,x+136,y+1);
    else
        draw_sprite(spr_banana,0,x+130,y+7);
    }
______________________________________________________

Information about object: obj_pauseeffect
Sprite: 
Solid: false
Visible: true
Depth: -1000001
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

x1=xstart;
y1=ystart;
x2=xstart;
y2=ystart;
x3=xstart;
y3=ystart;
x4=xstart;
y4=ystart;
if (x
Draw Event:

execute code:

if (xview_xview[0]+1200 || yview_yview[0]+1000)
    instance_destroy();

//Move
movecyc+=1;
if (movecyc==3){
    movecyc=0;
    temprand=floor(random(2));
    if (direction==45)
        temprand=0;
    if (direction==135)
        temprand=1;
    if (direction==225)
        temprand=0;
    if (direction==315)
        temprand=1;
    if (temprand==0)
        direction-=45;
    if (temprand==1)
        direction+=45;
    }

//Draw
if (!global.specialbake){
draw_set_color(make_color_rgb(speed*1.5+15,speed*1.5+15,speed*1.5+15));
draw_line(x,y,x1,y1);
if (dir==0){
    draw_set_color(make_color_rgb(speed*0.5+15,speed*0.5+15,speed*1.5+15));
    }
else{
    draw_set_color(make_color_rgb(speed*0.5+15,speed*1.5+15,speed*0.5+15));
    }
draw_line(x1,y1,x2,y2);
draw_line(x2,y2,x3,y3);
draw_line(x3,y3,x4,y4);
}
x4=x3;
y4=y3;
x3=x2;
y3=y2;
x2=x1;
y2=y1;
x1=x;
y1=y;
______________________________________________________

Information about object: obj_endgamesabot
Sprite: 
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

//repeat(250)
//    instance_create(random(800),random(600),obj_resolutionpart);

instance_create(0,0,obj_gamma);
global.gamma=0;
global.gammagreen=0;
global.gammared=0;
global.gammablue=0;

cover=-1;
//UNLOCK
if (global.difficulty>=0 && global.extras1==0){
    global.extras1=1;
    unlocked[1]=1;
    }
if (global.difficulty>=1 && global.extras2==0){
    global.extras2=1;
    unlocked[2]=1;
    }
if (global.difficulty==2 && global.extras3==0){
    global.extras3=1;
    unlocked[3]=1;
    }
if (global.totcracks-global.totfails>=100 && global.extras4==0){
    global.extras4=1;
    unlocked[4]=1;
    }
//EXTRAS5 replaced and in use elsewhere: Entered Sector Z
if (global.totdamage<100 && global.extras6==0){
    global.extras6=1;
    unlocked[6]=1;
    }
//EXTRAS7 replaced and in use elsewhere: Yukabacera's Scrambler
if (global.specialtrigger16==1 && global.extras8==0){
    global.extras8=1;
    unlocked[8]=1;
    }
if (unlocked[1]==0 && unlocked[2]==0 && unlocked[3]==0 && unlocked[4]==0 && unlocked[6]==0 && unlocked[8]==0)
    restart=1;

//Time records
if (global.difficulty==0)
    timetemp=global.nhours*3600+global.nminutes*60+global.nseconds;
else if (global.difficulty==1)
    timetemp=global.hhours*3600+global.hminutes*60+global.hseconds;
else if (global.difficulty==2){
    if (global.specialtrigger16==0)
        timetemp=global.ehours*3600+global.eminutes*60+global.eseconds;
    else
        timetemp=global.uhours*3600+global.uminutes*60+global.useconds;
    }
//New time record!
if (global.totalseconds
Alarm Event for alarm 1:

execute script scr_clearnextsector with arguments (0,0,0,0,0)
Draw Event:

execute code:

//Quit
if (keyboard_check(vk_f12)){
    f12quit+=1;
    if (f12quit>=20){
        sound_stop_all();
        game_end();
        }
    }
else
    f12quit=0;

//RESULTS
if (cover>=-0.95){

if (drawunlocks)
    scr_drawunlocks();
else{
draw_set_font(global.fontwhite);
draw_set_color(c_white);
draw_text_ext(180,28+56,"---RESULTS---",28,800);

tempstring="Difficulty: ";
if (global.difficulty==0)
    tempstring+="Normal";
if (global.difficulty==1)
    tempstring+="Hard";
if (global.difficulty==2){
    if (global.specialtrigger16)
        tempstring+="Ultimortal";
    else
        tempstring+="Extreme";
    }
draw_text_ext(168,56+56,tempstring,28,800);

tempstring="Total kills: ";
if (global.totkills<100)
    tempstring+=" ";
if (global.totkills<10)
    tempstring+=" ";
tempstring+=string(global.totkills);
draw_text_ext(156,84+56,tempstring,28,800);

tempstring="Damage taken: ";
if (global.totdamage<100)
    tempstring+=" ";
if (global.totdamage<10)
    tempstring+=" ";
tempstring+=string(global.totdamage);
draw_text_ext(144,112+56,tempstring,28,800);

tempstring="Successful cracks: ";
if (global.totcracks<100)
    tempstring+=" ";
if (global.totcracks<10)
    tempstring+=" ";
tempstring+=string(global.totcracks);
draw_text_ext(84,140+56,tempstring,28,800);

tempstring="Failed cracks: ";
if (global.totfails<100)
    tempstring+=" ";
if (global.totfails<10)
    tempstring+=" ";
tempstring+=string(global.totfails);
draw_text_ext(132,168+56,tempstring,28,800);

timesecs=global.totalseconds;
timehours=floor((timesecs-(timesecs mod 3600))/3600);
timesecs-=timehours*3600;
timemins=floor((timesecs-(timesecs mod 60))/60);
timesecs=timesecs mod 60;
tempstring="Time taken: ";
tempstring+=string(timehours)+":";
if (timemins<10)
    tempstring+="0";
tempstring+=string(timemins)+".";
if (timesecs<10)
    tempstring+="0";
tempstring+=string(timesecs);
if (timerecord)
    tempstring+=" (New record)";
draw_text_ext(168,196+56,tempstring,28,800);

//PRESS ESCAPE
draw_text_ext(492,84+56,"Thanks for playing!",28,800);
draw_text_ext(480,112+56,"Press Escape to return",28,800);
draw_text_ext(516,140+56,"to the Main menu",28,800);

//KILLS
draw_set_font(global.fontwhite);
draw_set_color(c_white);
draw_text_ext(132,420-84,"KILLS",28,800);
if (global.totkills>=300){
    draw_set_font(global.fontspecial);
    draw_set_color(c_white);
    draw_text_ext(60,448-84,"300: One Woman Army",28,800);
    }
else{
    draw_set_font(global.fontwhite);
    draw_set_color(c_white);
    draw_text_ext(60,448-84,"300: One Woman Army",28,800);
    }

if (global.totkills<300 && global.totkills>=200){
    draw_set_font(global.fontspecial);
    draw_set_color(c_white);
    draw_text_ext(60,476-84,"200: Genocidal",28,800);
    }
else{
    draw_set_font(global.fontwhite);
    draw_set_color(c_white);
    draw_text_ext(60,476-84,"200: Genocidal",28,800);
    }

if (global.totkills<200 && global.totkills>=51){
    draw_set_font(global.fontspecial);
    draw_set_color(c_white);
    draw_text_ext(60,504-84,"~51: Destroyer",28,800);
    }
else{
    draw_set_font(global.fontwhite);
    draw_set_color(c_white);
    draw_text_ext(60,504-84,"~51: Destroyer",28,800);
    }

if (global.totkills<51 && global.totkills>=1){
    draw_set_font(global.fontspecial);
    draw_set_color(c_white);
    draw_text_ext(72,532-84,"~1: Pacifistic",28,800);
    }
else{
    draw_set_font(global.fontwhite);
    draw_set_color(c_white);
    draw_text_ext(72,532-84,"~1: Pacifistic",28,800);
    }

if (global.totkills<1){
    draw_set_font(global.fontspecial);
    draw_set_color(c_white);
    draw_text_ext(84,560-84,"0: Innocent",28,800);
    }
else{
    draw_set_font(global.fontwhite);
    draw_set_color(c_white);
    draw_text_ext(84,560-84,"0: Innocent",28,800);
    }

//DAMAGE
draw_set_font(global.fontwhite);
draw_set_color(c_white);
draw_text_ext(384,420-84,"DAMAGE",28,800);
if (global.totdamage>=400){
    draw_set_font(global.fontspecial);
    draw_set_color(c_white);
    draw_text_ext(312,448-84,"400: Hopeless",28,800);
    }
else{
    draw_set_font(global.fontwhite);
    draw_set_color(c_white);
    draw_text_ext(312,448-84,"400: Hopeless",28,800);
    }

if (global.totdamage<400 && global.totdamage>=300){
    draw_set_font(global.fontspecial);
    draw_set_color(c_white);
    draw_text_ext(312,476-84,"300: Overconfident",28,800);
    }
else{
    draw_set_font(global.fontwhite);
    draw_set_color(c_white);
    draw_text_ext(312,476-84,"300: Overconfident",28,800);
    }

if (global.totdamage<300 && global.totdamage>=200){
    draw_set_font(global.fontspecial);
    draw_set_color(c_white);
    draw_text_ext(312,504-84,"200: Careless",28,800);
    }
else{
    draw_set_font(global.fontwhite);
    draw_set_color(c_white);
    draw_text_ext(312,504-84,"200: Careless",28,800);
    }

if (global.totdamage<200 && global.totdamage>=100){
    draw_set_font(global.fontspecial);
    draw_set_color(c_white);
    draw_text_ext(312,532-84,"100: Skilled",28,800);
    }
else{
    draw_set_font(global.fontwhite);
    draw_set_color(c_white);
    draw_text_ext(312,532-84,"100: Skilled",28,800);
    }

if (global.totdamage<100){
    draw_set_font(global.fontspecial);
    draw_set_color(c_white);
    draw_text_ext(336,560-84,"0: Immortal",28,800);
    }
else{
    draw_set_font(global.fontwhite);
    draw_set_color(c_white);
    draw_text_ext(336,560-84,"0: Immortal",28,800);
    }

//CRACKS minus FAILS
crackfail=global.totcracks-global.totfails;
if (crackfail<0)
    crackfail=0;
draw_set_font(global.fontwhite);
draw_set_color(c_white);
draw_text_ext(552,420-84,"CRACKS minus FAILS",28,800);
if (crackfail>=100){
    draw_set_font(global.fontspecial);
    draw_set_color(c_white);
    draw_text_ext(576,448-84,"100: Nanomaster",28,800);
    }
else{
    draw_set_font(global.fontwhite);
    draw_set_color(c_white);
    draw_text_ext(576,448-84,"100: Nanomaster",28,800);
    }

if (crackfail<100 && crackfail>=70){
    draw_set_font(global.fontspecial);
    draw_set_color(c_white);
    draw_text_ext(588,476-84,"70: Cybergeek",28,800);
    }
else{
    draw_set_font(global.fontwhite);
    draw_set_color(c_white);
    draw_text_ext(588,476-84,"70: Cybergeek",28,800);
    }

if (crackfail<70 && crackfail>=40){
    draw_set_font(global.fontspecial);
    draw_set_color(c_white);
    draw_text_ext(588,504-84,"40: Adept",28,800);
    }
else{
    draw_set_font(global.fontwhite);
    draw_set_color(c_white);
    draw_text_ext(588,504-84,"40: Adept",28,800);
    }

if (crackfail<40 && crackfail>=20){
    draw_set_font(global.fontspecial);
    draw_set_color(c_white);
    draw_text_ext(588,532-84,"20: Lame",28,800);
    }
else{
    draw_set_font(global.fontwhite);
    draw_set_color(c_white);
    draw_text_ext(588,532-84,"20: Lame",28,800);
    }

if (crackfail<20){
    draw_set_font(global.fontspecial);
    draw_set_color(c_white);
    draw_text_ext(600,560-84,"0: Clueless",28,800);
    }
else{
    draw_set_font(global.fontwhite);
    draw_set_color(c_white);
    draw_text_ext(600,560-84,"0: Clueless",28,800);
    }

}
}

//SCREEN COVER
if (pressedescape){
    if (cover>-1)
        cover-=0.025+(global.nogamma);
    if (cover<=-0.9 && restart){
        with (obj_resolutionpart)
            instance_destroy();
        }
    if (cover<=-1){
        if (restart)
            room_goto(rom_main);
        else{
            pressedescape=0;
            drawunlocks=1;
            }
        }
    }
else{
    if (cover<0)
        cover+=0.025+(global.nogamma);
    }
if (!global.nogamma)
    global.gamma=cover;

Key Press Event for Key:

execute code:

if (cover>=0 && !pressedescape){
if (drawunlocks)
    restart=1;
pressedescape=1;
}
Key Press Event for F4 Key:

execute code:

if (keyboard_check(vk_alt)){
    sound_stop_all();
    game_end();
    }
______________________________________________________

Information about object: obj_cutsabot
Sprite: 
Solid: false
Visible: true
Depth: -100
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

scr_loadcuts();
scr_musicvolume();
instance_create(0,0,obj_gamma);

nextbg=bg_black;
ready=0;
alpha=1;
alarm[0]=10;
endnow=0;
nextppe=0;
scrolling=0;
scrolldelay=0;
scrollcyc=0;
flash=0;
flashcyc=0;
overlays=0;

coffspeed=((121*28)+600)/6350; //Credits scroll speed
//coffspeed=((113*28)+600)/6575; //Credits scroll speed

//Credits
if (global.cut==10 || global.cut==13 || global.cut==15){
 credtext="$$$$$$$$- CREDITS -#$#$#$#$$$$GAME DESIGN, SCRIPT,#$$$PROGRAMMING, GRAPHICS,#$$$$$$$SFX/VOICE EDIT#$#$$$$$$$$Daniel Remar#$#$#$#$$$$$$$$$$$MUSIC#$#$$$$$THE IJI SOUNDTRACK#$$$$$$$$Chris Geehan#$$$$Dan Byrne McCullough#$#$$$$$$$$$BOSS THEME#$$$$$$$Tom Mauritzon#$#$$$$HERO 3D THEME: HERO#$$$$$$$$$Written by#$$$$$Machinae Supremacy#$$$$$$$$$Covered by#$$$$$Captain Goodnight#$#$$$ENDING THEME: FURTHER#$$$Written by VNV Nation#$$$Covered and performed#$$$$$$$$by LifeForce#$#$#";
credtext+="$#$$$$$$$$VOICE ACTING#$#$$$$$$$$$$$$IJI#$$$$$$$Anna Ashabova#$#$$$$$$$ELITE KROTERA,#$$$$$$$$GENERAL TOR,#$$$KOMATO ANNIHILATOR and#$$$$$$$$KOMATO BEAST#$$$$$$$Erik Sj^strand#$#$$$$$ANNIHILATOR IOSA,#$$$$$$TASEN ELITE and#$$$$$$KOMATO ASSASSIN#$$$$$$Annette Nielsen#$#$$$$$$$ASSASSIN ASHA#$$$$$$$$Ola Holmdahl#$#$$$$$ASSASSIN ANSAKSIE#$$$$$$Camila Dalence,#$$$$$$Lisa Lenkel and#$$$$$$$Louise Stigell#$#$$$$$$$$$$DAN and#$$$$$$$KOMATO TROOPER#$$$$$$Henrik Engstr^m#$#$$$$$$KOMATO BERSERKER#$$$$$$$Monika Mikucka#$#$$$$$$TASEN COMMANDER#$$$$$$Miguel Nalvarte#$#$$$$$$$TASEN SOLDIER#$$$$$Birgitta Johansson#$#$$$$$$$$TASEN SCOUT#$$$$$Johannes Helgesson#$#$#";
credtext+="$#$$$$$$$$$$TESTING#$#$2005 Ultimortal community$#$$$$2005 MaSu community#$$$$$$$$Eo community#$#$#$#$$$$$$IN-DEPTH TESTING#$#$$$$$$Anders Davallius#$$$$$$Annette Nielsen#$$$$$$Anton Grundvall#$$$$$$$$$$$Audric#$$$$$$$$$$$$Bag#$$$$$$$$$$$Beoran#$$$$$$$$$$$Berra#$$$$$$$$$$$Cactus#$$$$$$$$$$ChevyRay#$$$$$$Chris Laviolette#$$$$$$$Erik Sj^strand#$$$$$$$$Grashaboras#$$$$$$Henrik Engstr^m#$$$$$$$Linus Nordgren#$$$$$$$$Ola Holmdahl#$$$$$$$Oscar Aludden#$$$$$$$$$Pondwater#$$$$$$$$$ReallyJoel#$$$$$$$$$$Srehpog#$$$$$$Thomas Ahlstr^m#$#$#";
credtext+="$#$$$$$$$SPECIAL THANKS#$#$$$$$$$$$$$Beoran#$$$$$$$$$Blender 3D#$$$$$$$Mark Overmars#$$$$$$$$$$Trollis#$$$$Game Maker Community#$#$#$#$$$Copyright Remar Games#$$$$$$$$$2004-2010#$#$#$#$#$#$#$#$#$#$#$$$$$$$$$$THE END";

// credtext="$$$$$$$$- CREDITS -$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$GAME DESIGN, SCRIPT,$$$#$$$PROGRAMMING, GRAPHICS,$$#$$$$$$$SFX/VOICE EDIT$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$Daniel Remar$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$MUSIC$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$THE IJI SOUNDTRACK$$$$#$$$$$$$$Chris Geehan$$$$$$$#$$$$Dan Byrne McCullough$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$BOSS THEME$$$$$$$$#$$$$$$$Tom Mauritzon$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$HERO 3D THEME: HERO$$$$#$$$$$$$$$Written by$$$$$$$$#$$$$$Machinae Supremacy$$$$#$$$$$$$$$Covered by$$$$$$$$#$$$$$Captain Goodnight$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$ENDING THEME: FURTHER$$$#$$$Written by VNV Nation$$$#$$$Covered and performed$$$#$$$$$$$$by LifeForce$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#";
//credtext+="$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$VOICE ACTING$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$IJI$$$$$$$$$$$$#$$$$$$$Anna Ashabova$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$ELITE KROTERA,$$$$$$#$$$$$$$$GENERAL TOR,$$$$$$$#$$$KOMATO ANNIHILATOR and$$#$$$$$$$$KOMATO BEAST$$$$$$$#$$$$$$$Erik Sj^strand$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$ANNIHILATOR IOSA,$$$$$#$$$$$$TASEN ELITE and$$$$$$#$$$$$$KOMATO ASSASSIN$$$$$$#$$$$$$Annette Nielsen$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$ASSASSIN ASHA$$$$$$$#$$$$$$$$Ola Holmdahl$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$ASSASSIN ANSAKSIE$$$$$#$$$$$$Camila Dalence,$$$$$$#$$$$$$Lisa Lenkel and$$$$$$#$$$$$$$Louise Stigell$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$DAN and$$$$$$$$$$#$$$$$$$KOMATO TROOPER$$$$$$#$$$$$$Henrik Engstr^m$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$KOMATO BERSERKER$$$$$#$$$$$$$Monika Mikucka$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$TASEN COMMANDER$$$$$$#$$$$$$Miguel Nalvarte$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$TASEN SOLDIER$$$$$$$#$$$$$Birgitta Johansson$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$TASEN SCOUT$$$$$$$$#$$$$$Johannes Helgesson$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#";
//credtext+="$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$TESTING$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$2005 Ultimortal community$#$$$$2005 MaSu community$$$$#$$$$$$$$Eo community$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$IN-DEPTH TESTING$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$Anders Davallius$$$$$#$$$$$$Annette Nielsen$$$$$$#$$$$$$Anton Grundvall$$$$$$#$$$$$$$$$$$Audric$$$$$$$$$$#$$$$$$$$$$$$Bag$$$$$$$$$$$$#$$$$$$$$$$$Beoran$$$$$$$$$$#$$$$$$$$$$$Berra$$$$$$$$$$$#$$$$$$$$$$$Cactus$$$$$$$$$$#$$$$$$$$$$ChevyRay$$$$$$$$$#$$$$$$Chris Laviolette$$$$$#$$$$$$$Erik Sj^strand$$$$$$#$$$$$$$$Grashaboras$$$$$$$$#$$$$$$Henrik Engstr^m$$$$$$#$$$$$$$Linus Nordgren$$$$$$#$$$$$$$$Ola Holmdahl$$$$$$$#$$$$$$$Oscar Aludden$$$$$$$#$$$$$$$$$Pondwater$$$$$$$$$#$$$$$$$$$ReallyJoel$$$$$$$$#$$$$$$$$$$Srehpog$$$$$$$$$$#$$$$$$Thomas Ahlstr^m$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#";
//credtext+="$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$SPECIAL THANKS$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$Beoran$$$$$$$$$$#$$$$$$$$$Blender 3D$$$$$$$$#$$$$$$$Mark Overmars$$$$$$$#$$$$$$$$$$Trollis$$$$$$$$$$#$$$$Game Maker Community$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$Copyright Remar Games$$$#$$$$$$$$$2004-2010$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$$$$$$$$$$$$$$$$$$#$$$$$$$$$$THE END$$$$$$$$$$";
}
Alarm Event for alarm 0:

COMMENT: Begin
execute code:

fade=2;
if (global.cut==1){
    timeline_index=tim_cut1;
    background_index[0]=bg_101;
    nextbg=bg_101;
    }
else if (global.cut==2)
    timeline_index=tim_cut2;
else if (global.cut==3)
    timeline_index=tim_cut3;
else if (global.cut==4)
    timeline_index=tim_cut4;
else if (global.cut==5)
    timeline_index=tim_cut5;
else if (global.cut==6)
    timeline_index=tim_cut6;
else if (global.cut==7)
    timeline_index=tim_cut7;
else if (global.cut==8)
    timeline_index=tim_cut8;
else if (global.cut==10)
    timeline_index=tim_cut10;
else if (global.cut==11)
    timeline_index=tim_cut11;
else if (global.cut==12)
    timeline_index=tim_cut12;
else if (global.cut==13)
    timeline_index=tim_cut13;
else if (global.cut==14)
    timeline_index=tim_cut14;
else if (global.cut==15)
    timeline_index=tim_cut15;
    
if (timeline_index != -1) {timeline_running=true;}

End Step Event:

execute code:

//if (global.debug)
//    room_caption=string(fps);
//Draw chat frame
if (instance_number(obj_chatmessagetext)==1)
    scr_messageframe();
Draw Event:

execute code:

//Restart/quit
if (keyboard_check(vk_f2)){
    f2restart+=1;
    if (f2restart>=20){
        repeat(10)
            sound_stop_all();
        room_goto(rom_main);
        }
    }
else
    f2restart=0;
if (keyboard_check(vk_f12)){
    f12quit+=1;
    if (f12quit>=20){
        sound_stop_all();
        game_end();
        }
    }
else
    f12quit=0;

//Fill pic with white
if (cutfillwhite){
    for (i=0;i<5;i+=1){
        for (j=0;j<5;j+=1)
            draw_sprite(spr_cutfillwhite,0,200+i*80,150+j*60);
        }
    }

//Slowfade to black
if (slowfade){
    if (slowfadecyc>-1)
        slowfadecyc-=0.005;
    if (!global.nogamma)
        global.gamma=slowfadecyc;
    }

//Don't scroll first chat (ineffective?)
if (firstscroll<5)
    firstscroll+=1;

//Flash
if (flash){
    if (flashcyc<1)
        flashcyc+=1/30;
    }
else{
    if (flashcyc>0)
        flashcyc-=1/30;
    }
if (prevflashcyc!=0 || flashcyc!=0){
    if (!global.nogamma)
        global.gamma=flashcyc;
    }
prevflashcyc=flashcyc;

//If the image scrolls (or special case), use black overlays
if (overlays || edgefill){
    draw_sprite_stretched(spr_block,0,x+xadjust,y+yadjust-300,400,300);
    draw_sprite_stretched(spr_block,0,x+xadjust,y+yadjust+300,400,300);
    }

//Draw the alpha block
if (fade==1 || fade==2)
    draw_sprite_stretched_ext(spr_block,0,x+xadjust,y+yadjust,400,300,c_white,alpha);

//Fade to black
if (fade==1){
    if (nextppe){
        with (obj_ppe)
            instance_destroy();
        }
    alpha+=0.2;
    if (alpha>=1){
        fade=2;
        if (endnow)
            scr_jumpfromcut();
        else{
            background_index[0]=nextbg;
            if (scrolling){
                scrollcyc=-100;
                overlays=1;
                }
            else{
                scrollcyc=0;
                overlays=0;
                }
            scrolldelay=0;
            }
        }
    }
//Fade in from black
else if (fade==2){
    alpha-=0.2;
    if (alpha<=0){
        fade=0;
        ready=1;
        if (nextppe)
            instance_create(x+xadjust,y+yadjust,obj_ppe);
        }
    }

//Scrolling image
if (scrolling==1){
    scrolldelay+=1;
    if (scrolldelay>=30 && scrollcyc<0)
        scrollcyc+=2;
    }
background_y[0]=150+scrollcyc;

//Draw credits
if (credits){
if (coff>-28*121) //Number of rows
    coff-=coffspeed;
draw_set_font(global.fontwhite);
draw_set_color(c_white);
draw_text_ext(462,coff,credtext,28,400);
}
Key Press Event for Key:

execute script scr_jumpfromcut with arguments (0,0,0,0,0)
Key Press Event for F4 Key:

execute code:

if (keyboard_check(vk_alt)){
    sound_stop_all();
    game_end();
    }
______________________________________________________

Information about object: obj_zblock2
Sprite: spr_zblock2
Solid: true
Visible: true
Depth: 0
Persistent: false
Parent: obj_block
Mask: 

______________________________________________________

Information about object: obj_zblock3
Sprite: spr_zblock3
Solid: true
Visible: true
Depth: 0
Persistent: false
Parent: obj_block
Mask: 

______________________________________________________

Information about object: obj_zblock4
Sprite: spr_zblock4
Solid: true
Visible: true
Depth: 0
Persistent: false
Parent: obj_block
Mask: 

Create Event:

execute code:

image_single=0;
______________________________________________________

Information about object: obj_zblock
Sprite: spr_zblock
Solid: true
Visible: true
Depth: 0
Persistent: false
Parent: obj_block
Mask: 

______________________________________________________

Information about object: obj_zblocktele2
Sprite: spr_lift
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: obj_zblocktele
Mask: 

______________________________________________________

Information about object: obj_zspikes
Sprite: spr_zblock2
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

if (!other.takingpain && !other.recovering){
    global.hp-=1;
    global.damage+=1;
    with (other)
        scr_pain();
    scr_sound("iji_sworded");
    }
______________________________________________________

Information about object: obj_ztrapper
Sprite: spr_ztrapper
Solid: false
Visible: true
Depth: 1
Persistent: false
Parent: obj_tasenenemy
Mask: 

Create Event:

execute code:

facing=1;
Step Event:

execute code:

//Move
if (facing==1){
    if (place_free(x+10,y))
        hspeed+=0.25;
    else
        hspeed-=0.25;
    if (hspeed<=0){
        facing=2;
        hspeed=0;
        }
    }
if (facing==2){
    if (place_free(x,y-10))
        vspeed-=0.25;
    else
        vspeed+=0.25;
    if (vspeed>=0){
        vspeed=0;
        facing=3;
        }
    }
if (facing==3){
    if (place_free(x-10,y))
        hspeed-=0.25;
    else
        hspeed+=0.25;
    if (hspeed>=0){
        hspeed=0;
        facing=4;
        }
    }
if (facing==4){
    if (place_free(x,y+10))
        vspeed+=0.25;
    else
        vspeed-=0.25;
    if (vspeed<=0){
        vspeed=0;
        facing=1;
        }
    }
if (speed>2)
    speed=2;
if (speed<-2)
    speed=-2;
image_speed=speed/2;
Collision Event with object obj_iji:

execute code:

with (other){
if (takingpain==0 && recovering==0){
    global.armor-=5;
    instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
    }
}

Collision Event with object obj_bullet:

execute code:

repeat(5){
instance_create(x+14,y+14,obj_komatobloodspecial);
instance_create(x+14,y+14,obj_tasenbloodspecial);
}
instance_destroy();
scr_sound("glo_reflect");
Collision Event with object obj_pellet:

execute code:

repeat(5){
instance_create(x,y,obj_komatobloodspecial);
instance_create(x,y,obj_tasenbloodspecial);
}
instance_destroy();
scr_sound("glo_reflect");
Collision Event with object obj_kickbox:

execute code:

scr_shakescreen(1);
repeat(5){
instance_create(x,y,obj_komatobloodspecial);
instance_create(x,y,obj_tasenbloodspecial);
}
instance_destroy();
scr_sound("glo_reflect");
Collision Event with object obj_pushbox:

execute code:

global.erasetop=0;
global.topmessage="Eww, wierd!";
______________________________________________________

Information about object: obj_zgback
Sprite: spr_zgback
Solid: false
Visible: true
Depth: 1000
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

direction+=-2+random(4);
______________________________________________________

Information about object: obj_zgbackback
Sprite: spr_sabot
Solid: false
Visible: true
Depth: 10000
Persistent: false
Parent: 
Mask: 

Draw Event:

execute script scr_zcir with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_zgball
Sprite: 
Solid: false
Visible: true
Depth: 10
Persistent: false
Parent: obj_tasenenemy
Mask: spr_zhdrone

Collision Event with object obj_iji:

execute code:

with (other){
if (takingpain==0 && recovering==0){
    global.armor-=5;
    instance_create(bbox_left+random(bbox_right-bbox_left),bbox_top+random(bbox_bottom-bbox_top),obj_ijiblood);
    }
}

Collision Event with object obj_bullet:

execute code:

repeat(20)
instance_create(x,y,obj_ijiblood);
instance_destroy();
scr_sound("glo_reflect");
Collision Event with object obj_pellet:

execute code:

repeat(20)
instance_create(x,y,obj_ijiblood);
instance_destroy();
scr_sound("glo_reflect");
Collision Event with object obj_kickbox:

execute code:

scr_shakescreen(1);
repeat(20)
instance_create(x,y,obj_ijiblood);
instance_destroy();
scr_sound("glo_reflect");
Collision Event with object obj_pushbox:

execute code:

global.erasetop=0;
global.topmessage="Eww, squishy!";
Draw Event:

execute code:

if (!init){
blinkmax=floor(30+random(30));
init=1;
}

draw_set_color(c_white);
draw_circle(x,y,12,0);
draw_set_color(c_gray);
draw_circle(x,y,12,1);
dist=point_distance(x,y,obj_iji.x+6,obj_iji.y+30)/120+5;
lookdirx=(cos(degtorad(point_direction(x,y,obj_iji.x+6,obj_iji.y+30))))*dist;
lookdiry=(sin(degtorad(point_direction(x,y,obj_iji.x+6,obj_iji.y+30)+180)))*dist;
draw_set_color(c_black);
blinkcyc+=1;
if (blinkcyc==blinkmax || blinkcyc==blinkmax+1){
    draw_line(x+lookdirx-4,y+lookdiry-1,x+lookdirx+1,y+lookdiry-1);
    draw_line(x+lookdirx,y+lookdiry-1,x+lookdirx+5,y+lookdiry-1);
    }
else if (blinkcyc==blinkmax-1 || blinkcyc==blinkmax-2 || blinkcyc==blinkmax+2 || blinkcyc==blinkmax+3){
    draw_line(x+lookdirx-2,y+lookdiry-2,x+lookdirx-2,y+lookdiry+1);
    draw_line(x+lookdirx+2,y+lookdiry-2,x+lookdirx+2,y+lookdiry+1);
    }
else{
    draw_line(x+lookdirx-2,y+lookdiry-3,x+lookdirx-2,y+lookdiry+2);
    draw_line(x+lookdirx+2,y+lookdiry-3,x+lookdirx+2,y+lookdiry+2);
    }
if (blinkcyc>=blinkmax+4){
    blinkmax=floor(30+random(30));
    blinkcyc=0;
    }

movecyc+=1;
if (movecyc>=30 && point_distance(x,y,obj_iji.x+6,obj_iji.y+30)<200){
    movecyc=0;
    direction=point_direction(x,y,obj_iji.x+6,obj_iji.y+30);
    speed=8;
    }
if (speed>0)
    speed-=0.25;

______________________________________________________

Information about object: obj_sec1rock
Sprite: spr_block
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_tasensoldier:

execute code:

if (other.hp>0 && other.state==1 && other.angry && other.alarm[2]>2 && abs(other.y-obj_iji.y)<100){
instance_destroy();
with (other){
    alarm[2]=1;
    alwaysrocket=1;
    }
}
______________________________________________________

Information about object: obj_breakscreen
Sprite: 
Solid: false
Visible: true
Depth: -2000000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

for (j=0; j<3; j+=1){
crackx[j,0]=view_xview[0]+random(800);
cracky[j,0]=view_yview[0]-20;
crackx[j,1]=crackx[j,0]-50+random(100);
cracky[j,1]=cracky[j,0]+random(150);
crackx[j,2]=crackx[j,1]-50+random(100);
cracky[j,2]=cracky[j,1]-50+random(150);
crackx[j,3]=crackx[j,2]-50+random(100);
cracky[j,3]=cracky[j,2]-50+random(150);

crackx[j+3,0]=view_xview[0]+random(800);
cracky[j+3,0]=view_yview[0]+620;
crackx[j+3,1]=crackx[j+3,0]-50+random(100);
cracky[j+3,1]=cracky[j+3,0]-random(150);
crackx[j+3,2]=crackx[j+3,1]-50+random(100);
cracky[j+3,2]=cracky[j+3,1]+50-random(150);
crackx[j+3,3]=crackx[j+3,2]-50+random(100);
cracky[j+3,3]=cracky[j+3,2]+50-random(150);

crackx[j+6,0]=view_xview[0]-20;
cracky[j+6,0]=view_yview[0]+random(600);
crackx[j+6,1]=crackx[j+6,0]+random(150);
cracky[j+6,1]=cracky[j+6,0]-50+random(100);
crackx[j+6,2]=crackx[j+6,1]-50+random(150);
cracky[j+6,2]=cracky[j+6,1]-50+random(100);
crackx[j+6,3]=crackx[j+6,2]-50+random(150);
cracky[j+6,3]=cracky[j+6,2]-50+random(100);

crackx[j+9,0]=view_xview[0]+820;
cracky[j+9,0]=view_yview[0]+random(600);
crackx[j+9,1]=crackx[j+9,0]-random(150);
cracky[j+9,1]=cracky[j+9,0]-50+random(100);
crackx[j+9,2]=crackx[j+9,1]+50-random(150);
cracky[j+9,2]=cracky[j+9,1]-50+random(100);
crackx[j+9,3]=crackx[j+9,2]+50-random(150);
cracky[j+9,3]=cracky[j+9,2]-50+random(100);
}

Draw Event:

execute code:

if (!global.specialbake){
draw_set_color(c_black);
for (j=0; j<12; j+=1){
    for (i=0; i<3; i+=1){
        draw_line(crackx[j,i],cracky[j,i]-2,crackx[j,i+1],cracky[j,i+1]-2);
        }
    }
if (fade>255)
    fade=255;
draw_set_color(make_color_rgb(255-fade,255-fade,255-fade));
for (j=0; j<12; j+=1){
    for (i=0; i<3; i+=1){
        draw_line(crackx[j,i],cracky[j,i],crackx[j,i+1],cracky[j,i+1]);
        }
    }
}
______________________________________________________

Information about object: obj_mainfullcover
Sprite: spr_mainfullcover
Solid: false
Visible: true
Depth: -100
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

for (i=0; i<13; i+=1){
for (j=0; j<10; j+=1){
draw_sprite(spr_mainfullcover,0,i*64,j*64);
}
}
for (i=0; i<98; i+=1){
draw_sprite(spr_mainfullcover2,1,(i*8)+8,0);
draw_sprite(spr_mainfullcover2,1,(i*8)+8,592);
}
for (i=0; i<73; i+=1){
draw_sprite(spr_mainfullcover2,0,0,(i*8)+8);
draw_sprite(spr_mainfullcover2,0,792,(i*8)+8);
}
draw_sprite(spr_mainfullcover2,2,0,0);
draw_sprite(spr_mainfullcover2,3,792,0);
draw_sprite(spr_mainfullcover2,4,0,592);
draw_sprite(spr_mainfullcover2,5,792,592);

draw_set_font(global.fontwhite);
draw_set_color(c_white);
draw_text_ext(22,20,obj_face.screentext,28,756);

//Enemy info
if (obj_face.tier="wait2" && obj_face.selected==3){
if (obj_face.enemyinfo<=13)
    draw_sprite(spr_mainfullenemies,obj_face.enemyinfo-1,672,0);
else
    draw_sprite(spr_mainfullenemies2,obj_face.enemyinfo-14,672,0);
draw_sprite(spr_mainarrows,0,622,0);
}
//Weapon info
if (obj_face.tier="wait2" && obj_face.selected==2){
if (obj_face.weaponinfo<=18)
    draw_sprite(spr_mainfullweapons,obj_face.weaponinfo-1,672,0);
else
    draw_sprite(spr_mainfullweapons,obj_face.weaponinfo,672,0);
draw_sprite(spr_mainarrows,0,622,0);
}

Key Press Event for Key:

execute code:

if (obj_face.tier="wait2" && obj_face.selected==2){
if (obj_face.weaponinfo==1)
    obj_face.weaponinfo=26;
else
    obj_face.weaponinfo-=1;
scr_sound("glo_menumove");
with (obj_face)
    scr_menufulltexts();
}
if (obj_face.tier="wait2" && obj_face.selected==3){
if (obj_face.enemyinfo==1)
    obj_face.enemyinfo=25;
else
    obj_face.enemyinfo-=1;
scr_sound("glo_menumove");
with (obj_face)
    scr_menufulltexts();
}
Key Press Event for Key:

execute code:

if (obj_face.tier="wait2" && obj_face.selected==2){
if (obj_face.weaponinfo==26)
    obj_face.weaponinfo=1;
else
    obj_face.weaponinfo+=1;
scr_sound("glo_menumove");
with (obj_face)
    scr_menufulltexts();
}
if (obj_face.tier="wait2" && obj_face.selected==3){
if (obj_face.enemyinfo==25)
    obj_face.enemyinfo=1;
else
    obj_face.enemyinfo+=1;
scr_sound("glo_menumove");
with (obj_face)
    scr_menufulltexts();
}
______________________________________________________

Information about object: obj_sec7sentinels
Sprite: spr_sec7sentinels
Solid: false
Visible: true
Depth: 10
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_mainhero3d
Sprite: 
Solid: false
Visible: true
Depth: -10000000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

width=128;
height=96;
Draw Event:

execute code:

cycle+=1;
draw_set_color(c_black);
draw_rectangle(400-width/2,300-height/2,400+width/2,300+height/2,0);
width+=16;
height+=12;

if (cycle>=45){
instance_create(400,300,obj_herosabot);
instance_destroy();
}
______________________________________________________

Information about object: obj_secmap
Sprite: spr_secmap1
Solid: false
Visible: true
Depth: -10
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

if (obj_face.selected!=4 || obj_face.tier!="extras2" && !fade){
    fade=1;
    with (obj_postermarker)
        instance_destroy();
    scr_sound("glo_menuback");
    }

if (fade){
x+=100;
if (x>1000)
    instance_destroy();
    }

else{
if (x>525)
    x-=100;
else if (instance_number(obj_postermarker)==0)
    instance_create(-10,-10,obj_postermarker);
if (obj_face.sectormaps==1)
    sprite_index=spr_secmap1;
if (obj_face.sectormaps==2)
    sprite_index=spr_secmap2;
if (obj_face.sectormaps==3)
    sprite_index=spr_secmap3;
if (obj_face.sectormaps==4)
    sprite_index=spr_secmap4;
if (obj_face.sectormaps==5)
    sprite_index=spr_secmap5;
if (obj_face.sectormaps==6)
    sprite_index=spr_secmap6;
if (obj_face.sectormaps==7)
    sprite_index=spr_secmap7;
if (obj_face.sectormaps==8)
    sprite_index=spr_secmap8;
if (obj_face.sectormaps==9)
    sprite_index=spr_secmap9;
if (obj_face.sectormaps==0)
    sprite_index=spr_secmapx;
}
______________________________________________________

Information about object: obj_mainposters
Sprite: spr_mainposter0
Solid: false
Visible: true
Depth: -100
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

draw_set_color(c_black);
draw_rectangle(-20,-20,820,620,0);

if (global.poster1)
    draw_sprite(spr_mainposter1,0,10,10);
else
    draw_sprite(spr_mainposter0,0,10,10);
if (global.poster2)
    draw_sprite(spr_mainposter2,0,168,10);
else
    draw_sprite(spr_mainposter0,0,168,10);
if (global.poster3)
    draw_sprite(spr_mainposter3,0,326,10);
else
    draw_sprite(spr_mainposter0,0,326,10);
if (global.poster4)
    draw_sprite(spr_mainposter4,0,484,10);
else
    draw_sprite(spr_mainposter0,0,484,10);
if (global.poster5)
    draw_sprite(spr_mainposter5,0,642,10);
else
    draw_sprite(spr_mainposter0,0,642,10);
if (global.poster6)
    draw_sprite(spr_mainposter6,0,10,305);
else
    draw_sprite(spr_mainposter0,0,10,305);
if (global.poster7)
    draw_sprite(spr_mainposter7,0,168,305);
else
    draw_sprite(spr_mainposter0,0,168,305);
if (global.poster8)
    draw_sprite(spr_mainposter8,0,326,305);
else
    draw_sprite(spr_mainposter0,0,326,305);
if (global.poster9)
    draw_sprite(spr_mainposter9,0,484,305);
else
    draw_sprite(spr_mainposter0,0,484,305);
if (global.poster10)
    draw_sprite(spr_mainposter10,0,642,305);
else
    draw_sprite(spr_mainposter0,0,642,305);

______________________________________________________

Information about object: obj_postermarker
Sprite: spr_postermarker
Solid: false
Visible: true
Depth: -11
Persistent: false
Parent: 
Mask: 

End Step Event:

execute code:

blinkcyc+=1;
if (blinkcyc==5)
    visible=0;
if (blinkcyc>=10){
    visible=1;
    blinkcyc=0;
    }

if (obj_face.sectormaps==1){
    x=362;
    y=201;
    if (global.poster1)
        image_single=1;
    else
        image_single=0;
    }
if (obj_face.sectormaps==2){
    x=627;
    y=158;
    if (global.poster2)
        image_single=1;
    else
        image_single=0;
    }
if (obj_face.sectormaps==3){
    x=499;
    y=73;
    if (global.poster3)
        image_single=1;
    else
        image_single=0;
    }
if (obj_face.sectormaps==4){
    x=508;
    y=213;
    if (global.poster4)
        image_single=1;
    else
        image_single=0;
    }
if (obj_face.sectormaps==5){
    x=568;
    y=34;
    if (global.poster5)
        image_single=1;
    else
        image_single=0;
    }
if (obj_face.sectormaps==6){
    x=469;
    y=101;
    if (global.poster6)
        image_single=1;
    else
        image_single=0;
    }
if (obj_face.sectormaps==7){
    x=525;
    y=42;
    if (global.poster7)
        image_single=1;
    else
        image_single=0;
    }
if (obj_face.sectormaps==8){
    x=490;
    y=131;
    if (global.poster8)
        image_single=1;
    else
        image_single=0;
    }
if (obj_face.sectormaps==9){
    x=568;
    y=34;
    if (global.poster9)
        image_single=1;
    else
        image_single=0;
    }
if (obj_face.sectormaps==0){
    x=353;
    y=122;
    if (global.poster10)
        image_single=1;
    else
        image_single=0;
    }

______________________________________________________

Information about object: obj_sec7cp2
Sprite: spr_checkpoint
Solid: false
Visible: true
Depth: 5
Persistent: false
Parent: 
Mask: spr_door

Create Event:

execute code:

image_single=2;
Collision Event with object obj_iji:

execute code:

instance_destroy();
(instance_create(x,y,obj_checkpoint)).tag=2;
______________________________________________________

Information about object: obj_chargetell
Sprite: 
Solid: false
Visible: true
Depth: -5
Persistent: false
Parent: obj_activateme
Mask: 

Create Event:

execute code:

alarm[0]=1;
Alarm Event for alarm 0:

execute code:

if (tempid.turret)
    factormax=tempid.alarm[2];
else if (tempid.enemytype!=12)
    factormax=tempid.alarm[6];
else{ //Assassin
    if (tempid.sprite_index==spr_komatoassassin_pose1 || tempid.sprite_index==spr_komatoassassin_pose1left || tempid.sprite_index==spr_komatoassassin_pose1fire || tempid.sprite_index==spr_komatoassassin_pose1fireleft || tempid.sprite_index==spr_asha_pose1 || tempid.sprite_index==spr_asha_pose1left || tempid.sprite_index==spr_asha_pose1fire || tempid.sprite_index==spr_asha_pose1fireleft)
        factormax=tempid.alarm[0];
    else
        factormax=tempid.alarm[1];
    }
if (factormax<=0)
    factormax=30;
active=1;
Draw Event:

execute code:

if (active){
if (tempid.turret)
    factor=(tempid.alarm[2]/factormax)*40;
else if (tempid.enemytype!=12)
    factor=(tempid.alarm[6]/factormax)*40;
else{ //Assassin
    if (special9==1)
        factor=(tempid.alarm[1]/factormax)*40;
    else if (tempid.sprite_index==spr_komatoassassin_pose1 || tempid.sprite_index==spr_komatoassassin_pose1left || tempid.sprite_index==spr_komatoassassin_pose1fire || tempid.sprite_index==spr_komatoassassin_pose1fireleft || tempid.sprite_index==spr_asha_pose1 || tempid.sprite_index==spr_asha_pose1left || tempid.sprite_index==spr_asha_pose1fire || tempid.sprite_index==spr_asha_pose1fireleft)
        factor=(tempid.alarm[0]/factormax)*40;
    else
        factor=(tempid.alarm[1]/factormax)*40;
    }
if (tempid.enemytype==15){
    x=tempid.x-24+tempid.facing*48;
    y=tempid.y;
    }
if (factor>3){
    draw_set_color(c_white);
    draw_line(x-factor*2,y-factor*2,x+factor*2,y+factor*2);
    draw_line(x-factor*2,y+factor*2,x+factor*2,y-factor*2);
    if (!global.specialbake)
        draw_circle(x,y,factor,1);
    }
else
    instance_destroy();
}
______________________________________________________

Information about object: obj_chargeballpart
Sprite: spr_sabot
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

speed=15+random(10);
gravity=1;
direction=random(150)+90;
Step Event:

execute code:

tempid=instance_create(x,y,obj_ijiblood);
tempid.speed=3;
tempid.gravity=0;
tempid.splat=1;
if (y>1000)
    instance_destroy();

______________________________________________________

Information about object: obj_iosa2safe
Sprite: spr_iosa2_safeu
Solid: false
Visible: false
Depth: -5
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_mainbinary
Sprite: spr_mainbinary
Solid: false
Visible: true
Depth: 1000
Persistent: false
Parent: 
Mask: 

Alarm Event for alarm 0:

execute code:

fade=1;
Step Event:

execute code:

if (fade)
    image_alpha-=0.2;
if (image_alpha<0.2)
    instance_destroy();
______________________________________________________

Information about object: obj_ougi
Sprite: 
Solid: false
Visible: true
Depth: -50
Persistent: false
Parent: obj_activateme
Mask: 

Create Event:

execute code:

r=80;
vspeed=-4;
Step Event:

execute code:

obj_iji.usingougi=40;
cyc+=1;
if (cyc==2 && !attack)
    sleep(500);
if (cyc==3 && !attack){
    scr_sound("exp_boss");
    (instance_create(x,y,obj_whiteblanket)).alarm[0]=2;
    }
if (cyc==25 && !attack)
    scr_sound("iji_ougi2");
if (cyc==50 && !attack){
    attack=1;
    cyc=0;
    explodist=40;
    }
//Attack
if (attack){
    //Spawn explos
    if (cyc<77){
        explodist+=4;
        explodir+=20-cyc/10;
        scr_shakescreen(2);
        if (cyc mod 2 == 0){
            tempid=instance_create(x+explodist*cos(degtorad(explodir)),y+explodist*sin(degtorad(explodir)),obj_rocketexplosion);
            tempid.depth=-51;
            tempid.nospark=1;
            tempid.ijis=1;
            instance_create(x+explodist*cos(degtorad(explodir)),y+explodist*sin(degtorad(explodir)),obj_explosioncenter);
            tempid=instance_create(x-explodist*cos(degtorad(explodir)),y-explodist*sin(degtorad(explodir)),obj_rocketexplosion);
            tempid.depth=-51;
            tempid.nospark=1;
            tempid.ijis=1;
            instance_create(x-explodist*cos(degtorad(explodir)),y-explodist*sin(degtorad(explodir)),obj_explosioncenter);
            }
        }
    //Spawn mpfbs
    if (cyc==78){
        explodist=50;
        }
    if (cyc>80 && cyc<90){
        explodist+=35;
        if (cyc mod 2 == 0){
            scr_sound("exp_mpfb");
            scr_shakescreen(3);
            (instance_create(x+explodist,y+explodist,obj_mpfbexplosion)).ijis=1;
            instance_create(x+explodist,y+explodist,obj_explosioncenter);
            (instance_create(x-explodist,y+explodist,obj_mpfbexplosion)).ijis=1;
            instance_create(x-explodist,y+explodist,obj_explosioncenter);
            (instance_create(x-explodist,y-explodist,obj_mpfbexplosion)).ijis=1;
            instance_create(x-explodist,y-explodist,obj_explosioncenter);
            (instance_create(x+explodist,y-explodist,obj_mpfbexplosion)).ijis=1;
            instance_create(x+explodist,y-explodist,obj_explosioncenter);
            }
        }
    }
//Nuke
if (cyc>=100){
    with (obj_iji){
        global.ignoreall=0;
        visible=1;
        invisible=0;
        recovering=0;
        takingpain=0;
        ignorephysics=0;
        }
    instance_destroy();
    instance_create(x,y,obj_nuke);
    scr_sound("exp_nuke");
    scr_shakescreen(4);
    script_execute(scr_shakescreen,5);
    script_execute(scr_nuke,1);
    instance_create(x+6,y+15,obj_harmlessexplosion);
    instance_create(x,y,obj_nuke);
    (instance_create(x,y,obj_whiteblanket)).alarm[0]=2;
    obj_iji.velocity=1;
    obj_iji.vspeed=-10;
    obj_sabot.ultimatecannotpause=0;
    }

if (vspeed<0)
vspeed+=0.2;
Draw Event:

execute code:

if (cyc>2 || attack){
if (r==80)
    r=60;
else if (r==60)
    r=40;
else if (r==40)
    r=80;
draw_set_color(c_white);
draw_circle(x,y,r,0);
randx=-100+random(200);
draw_rectangle(x+randx-random(5),y-450,x+randx+1+random(5),y+400,0);
draw_sprite(spr_ougi,0,x,y);
}
else
draw_sprite(spr_megaflash,0,x,y);
______________________________________________________

Information about object: obj_ashasmash
Sprite: 
Solid: false
Visible: true
Depth: -10
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

cyc=20;
x2=-64;
x4=64;

Draw Event:

execute code:

cyc-=1+global.specialbake;
if (cyc<=0)
    instance_destroy();

y1-=cyc*cyc*0.15;

if (cyc<15)
    cyc2+=3;
y3-=cyc2;
if (cyc<15)
    cyc3+=2+cyc-8.3;
y2-=cyc3;
y4-=cyc3;

x2+=3.15;
x4-=3.15;

draw_set_color(make_color_rgb(255,55+cyc*10,55+cyc*10));
draw_primitive_begin(pr_trianglefan);
draw_vertex(x+x1,y+y1);
draw_vertex(x+x2,y+y2);
draw_vertex(x+x3,y+y3);
draw_vertex(x+x4,y+y4);
draw_primitive_end();


______________________________________________________

Information about object: obj_sabotx
Sprite: spr_asha_smash
Solid: false
Visible: true
Depth: 1000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

smashx=256;
smashy=512;


Step Event:

execute code:

if (vspeed<0){
    if (image_single==0)
        image_single=1;
    else
        image_single=0;
    }
if (vspeed>0){
    vspeed=0;
    gravity=0;
    gosmash=1;
    }
if (gosmash)
    smashcyc+=1;
if (smashcyc==1){
    image_single=2;
    y+=30;
    }
if (smashcyc==2){
    sprite_index=spr_asha_smash2;
    image_single=0;
    y+=50;
    }
if (smashcyc==3){
    image_single=1;
    y+=80;
    }
if (smashcyc==4){
    image_single=2;
    y+=120;
    }
if (smashcyc==5){
    visible=0;
    megasmash=10;
    repeat(80)
        instance_create(smashx+random(384)-56,smashy-random(32),obj_ashadots);
    with (obj_ashadots){
        speed=random(15);
        direction=point_direction(x,y,obj_sabotx.smashx+192,obj_sabotx.smashy+256);
        direction+=180;
        vspeed-=random(50);
        }
    }

if (megasmash>0)
    megasmash-=1;
if (megasmash==9 || megasmash==6 || megasmash==3){
    for (i=0; i<9; i+=1)
        instance_create(smashx+i*32,smashy,obj_ashasmash);
    }

Key Press Event for F2 Key:

execute code:

room_restart();
______________________________________________________

Information about object: obj_ashadots
Sprite: 
Solid: false
Visible: true
Depth: -9
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

speed*=0.92;
if (speed<1.5)
    instance_destroy();
col=speed*40;
if (col>255)
    col=255;
draw_set_color(make_color_rgb(col,col,col));
draw_line(x,y,x+hspeed,y+vspeed);

______________________________________________________

Information about object: obj_ppe
Sprite: 
Solid: false
Visible: true
Depth: -150
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

if (!global.specialbake){
if (xoff==0)
    xoff=5;
xoff=20+random(30);
xoff2=360+random(20);
temprand=random(1);
if (temprand>0.5){
    if (temprand>0.9)
        yoff=20+random(250);
    else
        yoff=300;
    temprandcol=floor(random(3));
    if (temprandcol==0)
        draw_set_color(make_color_rgb(132,96,42));
    else if (temprandcol==1)
        draw_set_color(make_color_rgb(102,66,12));
    else if (temprandcol==2)
        draw_set_color(make_color_rgb(70,43,0));
    draw_line(x+xoff,y,x+xoff,y+yoff);
    }
if (temprand<0.2){
    yoff2=200+random(90);
    temprandcol=floor(random(3));
    if (temprandcol==0)
        draw_set_color(make_color_rgb(132,96,42));
    else if (temprandcol==1)
        draw_set_color(make_color_rgb(102,66,12));
    else if (temprandcol==2)
        draw_set_color(make_color_rgb(70,43,0));
    draw_line(x+xoff2,y+yoff2,x+xoff2,y+300);
    }
xoff=random(390);
yoff=random(290);
temprandcol=floor(random(3));
if (temprandcol==0)
    draw_set_color(make_color_rgb(132,96,42));
else if (temprandcol==1)
    draw_set_color(make_color_rgb(102,66,12));
else if (temprandcol==2)
    draw_set_color(make_color_rgb(70,43,0));
draw_rectangle(x+xoff,y+yoff,x+xoff+ceil(random(3)),y+yoff+ceil(random(3)),0);
}

______________________________________________________

Information about object: obj_cutdoll
Sprite: 
Solid: false
Visible: false
Depth: -50
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

//style 1: rapid flicker
if (style==1){
    if (visible==1)
        visible=0;
    else
        visible=1;
    }

//style 2: alpha fade in
if (style==2)
    image_alpha+=0.1;

//style 3: blur back and forth fast
if (style==3){
if (styledir==0){
    image_alpha-=0.3;
    if (image_alpha<=0)
        styledir=1;
    }
else if (styledir==1){
    image_alpha+=0.3;
    if (image_alpha>=1)
        styledir=0;
    }
}

//style 4: random broken flicker
if (style==4){
stylecyc+=1;
if (stylecyc==2){
    stylecyc=0;
    temprand=random(1);
    if (temprand<0.5)
        visible=0;
    else
        visible=1;
    }
}

//style 5: slow alpha fade in
if (style==5){
    if (image_alpha<1)
        image_alpha+=0.03;
    else
        image_alpha=1;
    }

//style 6: flicker frame 0 and 2
if (style==6){
    if (image_single==0)
        image_single=2;
    else
        image_single=0;
    }

Draw Event:

execute code:

draw_sprite_ext(sprite_index,image_single,floor(x),floor(y),1,1,0,c_white,image_alpha);
______________________________________________________

Information about object: obj_chatmessagetext
Sprite: spr_block
Solid: false
Visible: true
Depth: -401
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

//This object is used in cutscenes, nowhere else
if (obj_cutsabot.firstscroll==5)
    firstscroll=1;
sabotscroll=1;
alarm[1]=1;
Alarm Event for alarm 0:

execute code:

scr_terminatemessage();
Alarm Event for alarm 1:

execute code:

sabotscroll=0;
Draw Event:

execute code:

//Text
if (page>=0){
    //scramble the text here
    if (global.scrambler){
        if (global.textid!="text403" && global.textid!="text605" && global.textid!="chat47_1" && global.textid!="chat47_2" && global.textid!="chat63_1" && global.textid!="chat63_2"){
            if (page!=prevpage)
                scrambled=0;
            prevpage=page;
            if (instance_number(obj_chat)==0)
                global.scramblefactor=1;
            if (!scrambled){
                scrambled=1;
                scr_scramble();
                }
            }
        }
    draw_set_font(global.fontgreen);
    draw_set_color(c_white);
    draw_text_ext(10,483+firstscroll*48,text[page],28,793);
    }

if (!global.specialbake){
//Outline
if (outline=0) //Neutral
    draw_set_color(make_color_rgb(140,140,140));
if (outline=1) //Iji
    draw_set_color(make_color_rgb(80,180,80));
if (outline=2) //Dan
    draw_set_color(make_color_rgb(170,160,70));
if (outline=3) //Tasen
    draw_set_color(make_color_rgb(130,10,110));
if (outline=4) //Komato
    draw_set_color(make_color(30,130,190));
draw_rectangle(1,473+firstscroll*48,798,598+firstscroll*48,1);
draw_rectangle(3,475+firstscroll*48,796,596+firstscroll*48,1);
if (outline=0) //Neutral light
    draw_set_color(make_color_rgb(210,210,210));
if (outline=1) //Iji light
    draw_set_color(make_color_rgb(120,220,120));
if (outline=2) //Dan light
    draw_set_color(make_color_rgb(210,200,100));
if (outline=3) //Tasen light
    draw_set_color(make_color_rgb(210,20,190));
if (outline=4) //Komato light
    draw_set_color(make_color_rgb(40,170,230));
draw_rectangle(2,474+firstscroll*48,797,597+firstscroll*48,1);
}
if (global.scrambler)
    draw_sprite(spr_scramblertext,0,0,469+firstscroll*48);

//Firstscroll
if (firstscroll==1)
    firstscroll=0;
Key Press Event for Key:

execute code:

if (firstscroll==0 && sabotscroll==0){
page+=1;
with (obj_scrollarrow)
    bounce=1;
if (page==pages){
    page-=1;
    firstscroll=1;
    sabotscroll=1;
    alarm[0]=1;
    }
}
Key Press Event for Key:

execute code:

if (firstscroll==0 && sabotscroll==0){
page+=1;
with (obj_scrollarrow)
    bounce=1;
if (page==pages){
    page-=1;
    firstscroll=1;
    sabotscroll=1;
    alarm[0]=1;
    }
}
Key Press Event for C-key Key:

execute code:

if (firstscroll==0 && sabotscroll==0){
page+=1;
with (obj_scrollarrow)
    bounce=1;
if (page==pages){
    page-=1;
    firstscroll=1;
    sabotscroll=1;
    alarm[0]=1;
    }
}
______________________________________________________

Information about object: obj_blockwide
Sprite: spr_blockwide
Solid: true
Visible: false
Depth: 100
Persistent: false
Parent: obj_block
Mask: 

______________________________________________________

Information about object: obj_blocktall
Sprite: spr_blocktall
Solid: true
Visible: false
Depth: 100
Persistent: false
Parent: obj_block
Mask: 

______________________________________________________

Information about object: obj_mainlogofx
Sprite: spr_ijiblood
Solid: false
Visible: true
Depth: 100
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.25+random(0.5);
Step Event:

execute code:

if (image_index>=7)
    instance_destroy();
______________________________________________________

Information about object: obj_warpback
Sprite: spr_lift
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_iosa2dizzy
Sprite: 
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

//cycle in degrees
cyc-=20-(8-obj_iosa2.guard-global.difficulty)*1.4;
if (cyc<=0)
    cyc+=360;
x1=x+(cos(degtorad(cyc))*10)*2;
y1=y+(sin(degtorad(cyc))*10)/2;
if (cyc<45 || cyc>315)
    size=3;
else if (cyc>45 && cyc<135)
    size=2;
else if (cyc>135 && cyc<225)
    size=3;
else
    size=4;
draw_sprite(spr_ijiblood,size,x1,y1);

______________________________________________________

Information about object: obj_plasmavortex
Sprite: spr_bullet
Solid: false
Visible: true
Depth: -1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=1;
image_single=0;
Alarm Event for alarm 0:

execute code:

if (dir==1){
    if (!global.specialbake)
    (instance_create(x,y,obj_shockshell)).direction=270-90;
    while (place_free(x,y) && cyc<2000){
        cyc+=16;
        y-=16;
        ijidir=1;
        }
    }
else if (dir==2){
    if (!global.specialbake)
    (instance_create(x,y,obj_shockshell)).direction=225-90;
    while (place_free(x,y) && cyc<2000){
        cyc+=16;
        x+=16;
        y-=16;
        ijidir=2;
        }
    }
else if (dir==3){
    if (!global.specialbake)
    (instance_create(x,y,obj_shockshell)).direction=180-90;
    while (place_free(x,y) && cyc<2000){
        cyc+=16;
        x+=16;
        ijidir=2;
        }
    }
else if (dir==4){
    if (!global.specialbake)
    (instance_create(x,y,obj_shockshell)).direction=135-90;
    while (place_free(x,y) && cyc<2000){
        cyc+=16;
        x+=16;
        y+=16;
        ijidir=2;
        }
    }
else if (dir==5){
    if (!global.specialbake)
    (instance_create(x,y,obj_shockshell)).direction=90-90;
    while (place_free(x,y) && cyc<2000){
        cyc+=16;
        y+=16;
        ijidir=2;
        }
    }
else if (dir==6){
    if (!global.specialbake)
    (instance_create(x,y,obj_shockshell)).direction=45-90;
    while (place_free(x,y) && cyc<2000){
        cyc+=16;
        x-=16;
        y+=16;
        ijidir=1;
        }
    }
else if (dir==7){
    if (!global.specialbake)
    (instance_create(x,y,obj_shockshell)).direction=0-90;
    while (place_free(x,y) && cyc<2000){
        cyc+=16;
        x-=16;
        ijidir=1;
        }
    }
else if (dir==8){
    if (!global.specialbake)
    (instance_create(x,y,obj_shockshell)).direction=315-90;
    while (place_free(x,y) && cyc<2000){
        cyc+=16;
        x-=16;
        y-=16;
        ijidir=1;
        }
    }
if (collision_line(xstart,ystart,x,y,obj_iji,0,1)){
    if (!obj_iji.plasmaed && !obj_iji.takingpain){
        global.hp-=3;
        global.damage+=3;
        obj_iji.plasmaed=ijidir;
        if (obj_iji.overload==9){
            global.ammo7+=2;
            global.erasetop=0;
            global.topmessage="Shocksplinter ammo +2";
            }
        }
    }
if (collision_line(xstart,ystart,x,y,obj_reflector,0,1)){
    with (obj_reflector)
        scr_reflectorexplo();
    }
if (collision_line(xstart,ystart,x,y,obj_disruptor,0,1)){
    with (obj_disruptor)
        scr_disruptorexplo();
    }
if (collision_line(xstart,ystart,x,y,obj_shockbarrier,0,1)){
    with (obj_shockbarrier)
        scr_barrierexplo();
    }

Step Event:

execute code:

if (drawcyc==1){
    repeat(3)
        instance_create(x,y,obj_enemyshockballexplosion);
    instance_create(xstart,ystart,obj_shockspark);
    }
Draw Event:

execute code:

drawcyc+=1;
if (drawcyc>1){
    if (dir==1 || dir==5){
        if (!global.specialbake){
            draw_set_color(make_color_rgb(195,45,69));
            draw_rectangle(x-20+drawcyc*2.4,y,x+20-drawcyc*2.4,ystart,0);
            }
        draw_set_color(make_color_rgb(255,105,129));
        draw_rectangle(x-16+drawcyc*1.95,y,x+16-drawcyc*1.95,ystart,0);
        if (!global.specialbake){
            draw_set_color(make_color_rgb(255,195,219));
            draw_rectangle(x-10+drawcyc*1.25,y,x+10-drawcyc*1.25,ystart,0);
            }
        }
    else if (dir==2 || dir==6){
        if (!global.specialbake){
            draw_set_color(make_color_rgb(195,45,69));
            draw_primitive_begin(pr_trianglestrip);
            draw_vertex(xstart-16+drawcyc*1.95,ystart-16+drawcyc*1.95);
            draw_vertex(xstart+16-drawcyc*1.95,ystart+16-drawcyc*1.95);
            draw_vertex(x+16-drawcyc*1.95,y+16-drawcyc*1.95);
            draw_vertex(x-16+drawcyc*1.95,y-16+drawcyc*1.95);
            draw_primitive_end();
            }
        draw_set_color(make_color_rgb(255,105,129));
        draw_primitive_begin(pr_trianglestrip);
        draw_vertex(xstart-12+drawcyc*1.45,ystart-12+drawcyc*1.45);
        draw_vertex(xstart+12-drawcyc*1.45,ystart+12-drawcyc*1.45);
        draw_vertex(x+12-drawcyc*1.45,y+12-drawcyc*1.45);
        draw_vertex(x-12+drawcyc*1.45,y-12+drawcyc*1.45);
        draw_primitive_end();
        if (!global.specialbake){
            draw_set_color(make_color_rgb(255,195,219));
            draw_primitive_begin(pr_trianglestrip);
            draw_vertex(xstart-8+drawcyc*0.95,ystart-8+drawcyc*0.95);
            draw_vertex(xstart+8-drawcyc*0.95,ystart+8-drawcyc*0.95);
            draw_vertex(x+8-drawcyc*0.95,y+8-drawcyc*0.95);
            draw_vertex(x-8+drawcyc*0.95,y-8+drawcyc*0.95);
            draw_primitive_end();
            }
        }
    else if (dir==3 || dir==7){
        if (!global.specialbake){
            draw_set_color(make_color_rgb(195,45,69));
            draw_rectangle(x,y-20+drawcyc*2.4,xstart,y+20-drawcyc*2.4,0);
            }
        draw_set_color(make_color_rgb(255,105,129));
        draw_rectangle(x,y-16+drawcyc*1.95,xstart,y+16-drawcyc*1.95,0);
        if (!global.specialbake){
            draw_set_color(make_color_rgb(255,195,219));
            draw_rectangle(x,y-10+drawcyc*1.25,xstart,y+10-drawcyc*1.25,0);
            }
        }
    else if (dir==4 || dir==8){
        if (!global.specialbake){
            draw_set_color(make_color_rgb(195,45,69));
            draw_primitive_begin(pr_trianglestrip);
            draw_vertex(xstart-16+drawcyc*1.95,ystart+16-drawcyc*1.95);
            draw_vertex(xstart+16-drawcyc*1.95,ystart-16+drawcyc*1.95);
            draw_vertex(x+16-drawcyc*1.95,y-16+drawcyc*1.95);
            draw_vertex(x-16+drawcyc*1.95,y+16-drawcyc*1.95);
            draw_primitive_end();
            }
        draw_set_color(make_color_rgb(255,105,129));
        draw_primitive_begin(pr_trianglestrip);
        draw_vertex(xstart-12+drawcyc*1.45,ystart+12-drawcyc*1.45);
        draw_vertex(xstart+12-drawcyc*1.45,ystart-12+drawcyc*1.45);
        draw_vertex(x+12-drawcyc*1.45,y-12+drawcyc*1.45);
        draw_vertex(x-12+drawcyc*1.45,y+12-drawcyc*1.45);
        draw_primitive_end();
        if (!global.specialbake){
            draw_set_color(make_color_rgb(255,195,219));
            draw_primitive_begin(pr_trianglestrip);
            draw_vertex(xstart-8+drawcyc*0.95,ystart+8-drawcyc*0.95);
            draw_vertex(xstart+8-drawcyc*0.95,ystart-8+drawcyc*0.95);
            draw_vertex(x+8-drawcyc*0.95,y-8+drawcyc*0.95);
            draw_vertex(x-8+drawcyc*0.95,y+8-drawcyc*0.95);
            draw_primitive_end();
            }
        }
    }
if (drawcyc>=8-global.specialbake*3)
    instance_destroy();
______________________________________________________

Information about object: obj_bgspeaker
Sprite: spr_bgspeaker
Solid: false
Visible: true
Depth: 537933
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_clearonoff
Sprite: spr_clearonoff
Solid: false
Visible: true
Depth: -3
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

if(y==311-46 && global.noshake==0)
image_single=2;
if(y==311-46 && global.noshake==1)
image_single=3;
if(y==339-46 && global.novoice==0)
image_single=0;
if(y==339-46 && global.novoice==1)
image_single=1;
if(y==367-46 && global.nosound==0)
image_single=0;
if(y==367-46 && global.nosound==1)
image_single=1;
if(y==395-46 && global.nomusic==0)
image_single=0;
if(y==395-46 && global.nomusic==1)
image_single=1;
if(y==423-46 && global.hidetime==0)
image_single=0;
if(y==423-46 && global.hidetime==1)
image_single=1;

______________________________________________________

Information about object: obj_mainsdindicator
Sprite: spr_postermarker
Solid: false
Visible: false
Depth: -9
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

draw_sprite(sprite_index,1,662,406);
______________________________________________________

Information about object: obj_asha2safe
Sprite: spr_iosa2_safeu
Solid: false
Visible: false
Depth: -5
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_sec7liftmarker
Sprite: spr_sec7liftmarker
Solid: false
Visible: true
Depth: 100
Persistent: false
Parent: obj_activateme
Mask: 

Create Event:

execute code:

image_speed=0.5;
image_index=((y/64) mod 8);
cyc=image_index;
Step Event:

execute code:

cyc+=0.5;
if (cyc==1)
    y-=2;
if (cyc==2)
    y-=1;
if (cyc==4)
    y+=1;
if (cyc==5)
    y+=2;
if (cyc==6)
    y+=1;
if (cyc==8){
    y-=1;
    cyc=0;
    }
______________________________________________________

Information about object: obj_secxcp2
Sprite: spr_checkpoint
Solid: false
Visible: true
Depth: 5
Persistent: false
Parent: 
Mask: spr_door

Create Event:

execute code:

image_single=2;
Collision Event with object obj_iji:

execute code:

instance_destroy();
(instance_create(x,y,obj_checkpoint)).tag=2;
______________________________________________________

Information about object: obj_dummycp
Sprite: spr_checkpoint
Solid: false
Visible: true
Depth: 6
Persistent: false
Parent: 
Mask: spr_door

Create Event:

execute code:

image_single=0;

Collision Event with object obj_iji:

execute code:

global.erasetop=0;
global.topmessage="Checkpoint Nanodrive exhausted";
global.ignorestation=60;
______________________________________________________

Information about object: obj_annipainflash
Sprite: 
Solid: false
Visible: true
Depth: 10
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=1;
if (instance_number(obj_thorspark<100)){
    repeat(10){
        tempid=instance_create(x+50,y+75,obj_thorspark);
        tempid.direction=random(360);
        tempid.speed=5+random(10);
        }
    }
Alarm Event for alarm 0:

destroy the instance
Draw Event:

execute code:

draw_set_color(c_white);
draw_primitive_begin(pr_trianglefan);
draw_vertex(x+64,y+64);
rand=-16+random(32); rand2=-16+random(32);
draw_vertex(x+42+rand,y+102+rand2);
rand=-16+random(32); rand2=-16+random(32);
draw_vertex(x-22+rand,y+139+rand2);
rand=-16+random(32); rand2=-16+random(32);
draw_vertex(x+29+rand,y+84+rand2);
rand=-16+random(32); rand2=-16+random(32);
draw_vertex(x-43+rand,y+71+rand2);
rand=-16+random(32); rand2=-16+random(32);
draw_vertex(x+29+rand,y+60+rand2);
rand=-16+random(32); rand2=-16+random(32);
draw_vertex(x-16+rand,y-5+rand2);
rand=-16+random(32); rand2=-16+random(32);
draw_vertex(x+41+rand,y+41+rand2);
rand=-16+random(32); rand2=-16+random(32);
draw_vertex(x+50+rand,y-34+rand2);
rand=-16+random(32); rand2=-16+random(32);
draw_vertex(x+59+rand,y+41+rand2);
rand=-16+random(32); rand2=-16+random(32);
draw_vertex(x+114+rand,y-5+rand2);
rand=-16+random(32); rand2=-16+random(32);
draw_vertex(x+71+rand,y+60+rand2);
rand=-16+random(32); rand2=-16+random(32);
draw_vertex(x+141+rand,y+71+rand2);
rand=-16+random(32); rand2=-16+random(32);
draw_vertex(x+71+rand,y+84+rand2);
rand=-16+random(32); rand2=-16+random(32);
draw_vertex(x+120+rand,y+139+rand2);
rand=-16+random(32); rand2=-16+random(32);
draw_vertex(x+58+rand,y+103+rand2);
draw_primitive_end();
______________________________________________________

Information about object: obj_sec1lamptrigger
Sprite: spr_door
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

if (obj_iji.hitlamps>=12){
    (instance_create(x,y,obj_trigger)).textid="chat17";
    instance_destroy();
    }
______________________________________________________

Information about object: obj_torsecsil
Sprite: 
Solid: false
Visible: true
Depth: -1000001
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

white=0;
gravity=1.3;
gravity_direction=90;
Draw Event:

execute code:

if (fade)
    white+=12.75;
if (white>=255)
    instance_destroy();
else{
    draw_set_color(make_color_rgb(white,white,white));
    draw_rectangle(x+22,y+1000,x+96,y+1800,0);
    draw_rectangle(x+768,y+1000,x+842,y+1800,0);
    draw_rectangle(x+22,y+1600,x+842,y+1800,0);
    }
______________________________________________________

Information about object: obj_pausefullcover
Sprite: spr_mainfullcover
Solid: false
Visible: true
Depth: -1000010
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

for (i=0; i<13; i+=1){
for (j=0; j<10; j+=1){
draw_sprite(spr_mainfullcover,0,view_xview[0]+i*64,view_yview[0]+j*64);
}
}
for (i=0; i<98; i+=1){
draw_sprite(spr_mainfullcover2,1,view_xview[0]+(i*8)+8,view_yview[0]+0);
draw_sprite(spr_mainfullcover2,1,view_xview[0]+(i*8)+8,view_yview[0]+592);
}
for (i=0; i<73; i+=1){
draw_sprite(spr_mainfullcover2,0,view_xview[0]+0,view_yview[0]+(i*8)+8);
draw_sprite(spr_mainfullcover2,0,view_xview[0]+792,view_yview[0]+(i*8)+8);
}
draw_sprite(spr_mainfullcover2,2,view_xview[0]+0,view_yview[0]+0);
draw_sprite(spr_mainfullcover2,3,view_xview[0]+792,view_yview[0]+0);
draw_sprite(spr_mainfullcover2,4,view_xview[0]+0,view_yview[0]+592);
draw_sprite(spr_mainfullcover2,5,view_xview[0]+792,view_yview[0]+592);

draw_set_font(global.fontwhite);
draw_set_color(c_white);
draw_text_ext(view_xview[0]+22,view_yview[0]+20,obj_paused.screentext,28,756);

//Weapon info
if (obj_paused.getinfo==10){
draw_sprite(spr_mainfullweapons,obj_paused.weaponlist[obj_paused.weaponinfo]-1,view_xview[0]+672,view_yview[0]+0);
draw_sprite(spr_mainarrows,0,view_xview[0]+622,view_yview[0]+0);
}
//Enemy info
if (obj_paused.getinfo==11){
draw_sprite(spr_mainfullenemies,obj_paused.enemylist[obj_paused.enemyinfo]-1,view_xview[0]+672,view_yview[0]+0);
draw_sprite(spr_mainarrows,0,view_xview[0]+622,view_yview[0]+0);
}
Key Press Event for Key:

execute code:

if (obj_paused.getinfo==10){
    if (obj_paused.weaponinfo==1)
        obj_paused.weaponinfo=obj_paused.weaponlistlength;
    else
        obj_paused.weaponinfo-=1;
    //scr_sound("glo_menumove");
    with (obj_paused)
        scr_pausefulltexts();
    }

if (obj_paused.getinfo==11){
    if (obj_paused.enemyinfo==1)
        obj_paused.enemyinfo=obj_paused.enemylistlength;
    else
        obj_paused.enemyinfo-=1;
    //scr_sound("glo_menumove");
    with (obj_paused)
        scr_pausefulltexts();
    }
Key Press Event for Key:

execute code:

if (obj_paused.getinfo==10){
    if (obj_paused.weaponinfo==obj_paused.weaponlistlength)
        obj_paused.weaponinfo=1;
    else
        obj_paused.weaponinfo+=1;
    //scr_sound("glo_menumove");
    with (obj_paused)
        scr_pausefulltexts();
    }

if (obj_paused.getinfo==11){
    if (obj_paused.enemyinfo==obj_paused.enemylistlength)
        obj_paused.enemyinfo=1;
    else
        obj_paused.enemyinfo+=1;
    //scr_sound("glo_menumove");
    with (obj_paused)
        scr_pausefulltexts();
    }
______________________________________________________

Information about object: obj_zspecialtrigger
Sprite: spr_door2
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

global.specialtriggerb2=1;
______________________________________________________

Information about object: obj_enemycfistrace
Sprite: spr_bullet
Solid: false
Visible: true
Depth: -5
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

scr_enemycfisfire();
alarm[0]=2;
Alarm Event for alarm 0:

destroy the instance
Draw Event:

execute script scr_enemycfisdraw with arguments (0,0,0,0,0)
execute script scr_outside with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_scrambler
Sprite: spr_log4
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

scr_ammofloat();
Collision Event with object obj_iji:

execute code:

instance_destroy();
scr_sound("glo_pickup2");
scr_pickupflash(16,16,10);
(instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chat68";
global.extras7=1;
scr_readsum()
if (!wrongsum){
    scr_save(0);
    global.erasetop=0;
    global.topmessage="SCRAMBLER PERMANENTLY ADDED TO PAUSE MENU";
    global.ignorestation=120;
    }
global.scrambler=0;
global.scramblefactor=0;
______________________________________________________

Information about object: obj_sec3trigger
Sprite: spr_door3
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

global.specialtriggerb2=0;
instance_destroy();
______________________________________________________

Information about object: obj_electropad2
Sprite: spr_electropad2
Solid: false
Visible: true
Depth: 10
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_sec16loadingbox
Sprite: 
Solid: false
Visible: true
Depth: -5000000
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

draw_set_color(c_black);
draw_rectangle(view_xview[0]-10,view_yview[0]-10,view_xview[0]+810,view_yview[0]+610,0);
draw_sprite(spr_loading,0,view_xview[0]+400,view_yview[0]+300);

______________________________________________________

Information about object: obj_ijideathflash
Sprite: spr_nanoflash
Solid: false
Visible: true
Depth: -10
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (distance_to_object(obj_iji)>100)
    instance_destroy();
direction=point_direction(x,y,obj_iji.x+15,obj_iji.y+50);
direction+=180;
speed=random(16)+2;
Step Event:

execute code:

speed*=0.94;
if (speed<0.05){
    instance_create(x,y,obj_ijisplat);
    instance_destroy();
    }
______________________________________________________

Information about object: obj_megaflare
Sprite: 
Solid: false
Visible: true
Depth: -50
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

if (!init){
    init=1;
    size=80;
    scr_shakescreen(4);
    }
size-=1+(size/10);
if (size<=0)
    instance_destroy();
else if (!global.specialbake){
    draw_set_color(c_white);
    draw_primitive_begin(pr_trianglestrip);
    draw_vertex(x-1500-floor(size/2),y-1500);
    draw_vertex(x-1500,y-1500-floor(size/2));
    draw_vertex(x+1500+floor(size/2),y+1500);
    draw_vertex(x+1500,y+1500+floor(size/2));
    draw_primitive_end();
    draw_primitive_begin(pr_trianglestrip);
    draw_vertex(x-1500-floor(size/2),y+1500);
    draw_vertex(x-1500,y+1500+floor(size/2));
    draw_vertex(x+1500,y-1500+floor(size/2));
    draw_vertex(x+1500-floor(size/2),y-1500);
    draw_primitive_end();
    draw_rectangle(x-1500,y-floor(size/2),x+1500,y+1+floor(size/2),0);
    draw_rectangle(x-floor(size/2),y-1000,x+1+floor(size/2),y+1000,0);
    }


______________________________________________________

Information about object: obj_sec1musictrigger
Sprite: spr_door
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

instance_destroy();
with (obj_sabot)
    scr_music("mus_sec1");
______________________________________________________

Information about object: obj_sec2musictrigger
Sprite: spr_door
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

instance_destroy();
with (obj_sabot)
    scr_music("mus_sec2");
______________________________________________________

Information about object: obj_distantexplospewer
Sprite: 
Solid: false
Visible: true
Depth: 999
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

cyc+=1;
if (cyc<=5){
    (instance_create(x-cyc*8,y,obj_distantexplosion)).image_index=0;
    (instance_create(x+cyc*8,y,obj_distantexplosion)).image_index=0;
    (instance_create(x,y-cyc*6,obj_distantexplosion)).image_index=0;
    (instance_create(x,y+cyc*6,obj_distantexplosion)).image_index=0;
    (instance_create(x-cyc*5,y-cyc*4,obj_distantexplosion)).image_index=0;
    (instance_create(x+cyc*5,y+cyc*4,obj_distantexplosion)).image_index=0;
    (instance_create(x+cyc*5,y-cyc*4,obj_distantexplosion)).image_index=0;
    (instance_create(x-cyc*5,y+cyc*4,obj_distantexplosion)).image_index=0;
    }
if (cyc==6)
    instance_destroy();
______________________________________________________

Information about object: obj_camera
Sprite: spr_camera
Solid: false
Visible: true
Depth: 100000
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (!place_free(x+32,y))
    dir=1;
else if (!place_free(x-32,y))
    dir=2;
else
    dir=0;
image_single=4;
animcyc=0;
animdir=0;
lowlimit=0;
highlimit=8;
animwant=4;
//Restrict movement
if (dir==1){
    lowlimit=0;
    highlimit=4;
    }
else if (dir==2){
    lowlimit=4;
    highlimit=8;
    }
else{
    lowlimit=0;
    highlimit=8;
    }

if (dir==0)
    image_single=floor(random(9));
else if (dir==1)
    image_single=floor(random(5));
else if (dir==2)
    image_single=4+floor(random(5));

Step Event:

execute code:

//Unmanned
if (room==rom_sector5 || room==rom_sector6 || (room==rom_sector8 && obj_iji.nocameras) || (room==rom_sector9 && global.specialtrigger1==0)){
    //Do nothing
    }

//Focus on Iji
else if (room==rom_sectorx && global.specialtrigger1==0){
    animcyc+=1;
    ijix=obj_iji.x+6;
    myx=x+16;
    if (obj_iji.yy-4 && ((abs(ijix-myx)<256 && dir==0) || (ijix-myx<6 && ijix-myx>-256 && dir==1) || (ijix-myx>6 && ijix-myx<256 && dir==2))){
        lookdir=point_direction(x+16,y+6,obj_iji.x+6,obj_iji.y+15);
        if (lookdir>180 && lookdir<200)
            animwant=0;
        else if (lookdir>200 && lookdir<215)
            animwant=1;
        else if (lookdir>215 && lookdir<240)
            animwant=2;
        else if (lookdir>240 && lookdir<262)
            animwant=3;
        else if (lookdir>262 && lookdir<278)
            animwant=4;
        else if (lookdir>278 && lookdir<300)
            animwant=5;
        else if (lookdir>300 && lookdir<325)
            animwant=6;
        else if (lookdir>325 && lookdir<340)
            animwant=7;
        else if (lookdir>340 && lookdir<359.9)
            animwant=8;
        }
    if (animcyc>=2){
        animcyc=0;
        if (image_singleanimwant && image_single>lowlimit)
            image_single-=1;
        }
    }

//Just look around
else{
    animcyc+=1;
    if (animcyc>=4){
        animcyc=0;
        if (animdir==0){
            if (image_single==lowlimit){
                animdir=1;
                animcyc=-30;
                }
            else
                image_single-=1;
            }
        else if (animdir==1){
            if (image_single==highlimit){
                animdir=0;
                animcyc=-30;
                }
            else
                image_single+=1;
            }
        }
    }
______________________________________________________

Information about object: obj_supercharge
Sprite: spr_supercharge
Solid: false
Visible: true
Depth: 100
Persistent: false
Parent: obj_deactivateme
Mask: 

Step Event:

execute code:

if (collect<100)
    collect+=1;

if (place_free(x,y+32) && place_free(x,y+64))
    y+=2;

if (!init){
    init=1;
    x1dir=1;
    x1=-16;
    y1dir=1;
    y1=-14;
    x2dir=0;
    x2=16;
    y2dir=0;
    y2=12;
    x3dir=0;
    x3=-12;
    y3dir=0;
    y3=16;
    bob=-2;
    }

//bob
if (bobdir==0)
    bobv-=0.1;
else
    bobv+=0.1;
bob+=bobv;
if (bob<=0 && bobdir==0)
    bobdir=1;
if (bob>=0 && bobdir==1)
    bobdir=0;

//1
if (x1dir==0)
    x1v-=0.2;
else
    x1v+=0.2;
x1+=x1v;
if (x1<=0 && x1dir==0)
    x1dir=1;
if (x1>=0 && x1dir==1)
    x1dir=0;

if (y1dir==0)
    y1v-=0.2;
else
    y1v+=0.2;
y1+=y1v;
if (y1<=0 && y1dir==0)
    y1dir=1;
if (y1>=0 && y1dir==1)
    y1dir=0;

//2
if (x2dir==0)
    x2v-=0.2;
else
    x2v+=0.2;
x2+=x2v;
if (x2<=0 && x2dir==0)
    x2dir=1;
if (x2>=0 && x2dir==1)
    x2dir=0;

if (y2dir==0)
    y2v-=0.2;
else
    y2v+=0.2;
y2+=y2v;
if (y2<=0 && y2dir==0)
    y2dir=1;
if (y2>=0 && y2dir==1)
    y2dir=0;

//3
if (x3dir==0)
    x3v-=0.2;
else
    x3v+=0.2;
x3+=x3v;
if (x3<=0 && x3dir==0)
    x3dir=1;
if (x3>=0 && x3dir==1)
    x3dir=0;

if (y3dir==0)
    y3v-=0.2;
else
    y3v+=0.2;
y3+=y3v;
if (y3<=0 && y3dir==0)
    y3dir=1;
if (y3>=0 && y3dir==1)
    y3dir=0;

//B
bcyc+=1;
if (bcyc==1){
    bcyc=0;
    tempid=(instance_create(x+x1,y+y1,obj_superchargep));
    if (x1v<=0){
        if (x1<0)
            tempid.depth=150;
        else
            tempid.depth=150-x1v;
        }
    else{
        if (x1>=0)
            tempid.depth=50-x1v;
        else
            tempid.depth=50;
        }
    tempid=(instance_create(x+x2,y+y2,obj_superchargep));
    if (x2v<=0){
        if (x2<0)
            tempid.depth=150;
        else
            tempid.depth=150-x2v;
        }
    else{
        if (x2>=0)
            tempid.depth=50-x2v;
        else
            tempid.depth=50;
        }
    tempid=(instance_create(x+x3,y+y3,obj_superchargep));
    if (x3v<=0){
        if (x3<0)
            tempid.depth=150;
        else
            tempid.depth=150-x3v;
        }
    else{
        if (x3>=0)
            tempid.depth=50-x3v;
        else
            tempid.depth=50;
        }
    }

Collision Event with object obj_iji:

execute code:

if (collect>=60){
instance_destroy();
scr_sound("glo_pickup2");
scr_pickupflash(0,0,10);
global.hp=global.healthlevel*2;
if (room==rom_sector13)
    obj_proximatrigger.supercharge=1;
if (global.suddendeath)
    global.hp=1;
global.armor=100;
global.erasetop=0;
global.topmessage="SUPERCHARGE: POINTS +1";
global.ignorestation=120;
global.points+=1;

//Sector 9 specific
if (room==rom_sector9){
    if (!obj_iji.gotsupercharge){
        if (global.kills+global.totkills<=9*global.neutralkc){
            if (obj_sabot.bunkertruce)
                (instance_create(10832,5984,obj_trigger)).textid="chat9d";
            else
                (instance_create(9712,6064,obj_trigger)).textid="chat9d";
            }
        obj_iji.gotsupercharge=1;
        instance_activate_object(obj_cdoor);
        with (obj_cdoor){
            if (tag==89782)
                instance_destroy();
            }
        instance_activate_object(obj_visioncheck);
        with (obj_visioncheck)
            instance_destroy();
        instance_activate_object(obj_cdoor);
        with (obj_cdoor){
            if (tag==16862)
                y-=10000;
            }
        instance_deactivate_object(obj_cdoor);
        instance_activate_object(obj_komatoassassin);
        with (obj_komatoassassin)
            y-=10000;
        instance_deactivate_object(obj_komatoassassin);
        instance_activate_object(obj_lift);
        with (obj_lift){
            if (tag==52789)
                liftoff=1;
            }
        }
    }
}
Draw Event:

execute code:

imgcyc+=1;
if (imgcyc==2){
    imgcyc=0;
    image_single+=1;
    if (image_single>3)
        image_single=0;
    }
draw_sprite(sprite_index,image_single,x,y+bob);
______________________________________________________

Information about object: obj_sec9cp2
Sprite: spr_checkpoint
Solid: false
Visible: true
Depth: 5
Persistent: false
Parent: 
Mask: spr_door

Create Event:

execute code:

image_single=2;
Collision Event with object obj_iji:

execute code:

instance_destroy();
(instance_create(x,y,obj_checkpoint)).tag=2;
______________________________________________________

Information about object: obj_deads1
Sprite: spr_deads1
Solid: false
Visible: true
Depth: 5
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_deads2
Sprite: spr_deads2
Solid: false
Visible: true
Depth: 5
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_deads3
Sprite: spr_deads3
Solid: false
Visible: true
Depth: 5
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_deads4
Sprite: spr_deads4
Solid: false
Visible: true
Depth: 5
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_sec9lightswitch
Sprite: spr_lift
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

if (obj_sabot.bunkertruce)
obj_sabot.lightravebottom=lightravebottom;
______________________________________________________

Information about object: obj_sec2speciallift
Sprite: spr_cdoor
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

instance_activate_object(obj_trigger);
with (obj_trigger){
    if (textid=="chat24")
        instance_destroy();
    }
instance_destroy();
______________________________________________________

Information about object: obj_shockshell
Sprite: spr_shockshell
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[1]=90;
gravity=1;
gravity_direction=270;
image_speed=random(0.5)+0.5;
temprand=random(1);
if (temprand>0.5)
    image_speed*=-1;
vspeed=-(4+random(3));
hspeed=3+random(2);
alarm[0]=6;
Alarm Event for alarm 0:

execute code:

if (!short){
alarm[0]=6;
if (vortex)
    (instance_create(x,y,obj_shockemit)).sprite_index=spr_vortexemit;
else
    instance_create(x,y,obj_shockemit);
}
Alarm Event for alarm 1:

execute code:

if (vortex)
    (instance_create(x,y,obj_shockemit)).sprite_index=spr_vortexemit;
else
    instance_create(x,y,obj_shockemit);
instance_destroy();
Step Event:

execute code:

if (vspeed>12)
    vspeed=12;
scr_outside();
Collision Event with object obj_block:

execute code:

if (!vortex)
    scr_sound("glo_shell");
bounce+=1;
if (vortex)
    (instance_create(x,y,obj_shockemit)).sprite_index=spr_vortexemit;
else
    instance_create(x,y,obj_shockemit);
if (bounce>2-short){
    instance_destroy();
    exit;
    }
move_bounce_solid(0);
speed*=0.5;
image_speed=random(0.5)+0.5;
temprand=random(1);
if (temprand>0.5)
    image_speed*=-1;
Collision Event with object obj_glass:

execute code:

if (!vortex)
    scr_sound("glo_shell");
bounce+=1;
if (vortex)
    (instance_create(x,y,obj_shockemit)).sprite_index=spr_vortexemit;
else
    instance_create(x,y,obj_shockemit);
if (bounce>2-short){
    instance_destroy();
    exit;
    }
move_bounce_all(0);
speed*=0.5;
image_speed=random(0.5)+0.5;
temprand=random(1);
if (temprand>0.5)
    image_speed*=-1;
______________________________________________________

Information about object: obj_superchargep
Sprite: spr_ijiblood
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

//image_speed=0.5;
alarm[0]=8;
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_xcore2
Sprite: spr_s4reactor
Solid: false
Visible: true
Depth: 50
Persistent: false
Parent: obj_alliedenemy
Mask: 

Draw Event:

execute code:

scr_ammofloat();
animcyc+=1;
if (animcyc>2)
animcyc=1;
draw_sprite(sprite_index,animcyc,x,y);
//Lines
draw_set_color(c_white);
temprand=random(64)-32;
temprand2=random(64)-32;
temprand3=random(64)-32;
temprand4=random(64)-32;
draw_line(x+temprand,y-64,x+temprand,y+64);
draw_line(x+temprand2,y-64,x+temprand2,y+64);
draw_line(x+temprand3,y-64,x+temprand3,y+64);
draw_line(x+temprand4,y-64,x+temprand4,y+64);

if (place_free(x-96,y) && place_free(x+96,y))
    go=1;
else
    go=0;


______________________________________________________

Information about object: obj_sec9iosa2doll
Sprite: spr_iosa2_spin
Solid: false
Visible: true
Depth: 10000
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

if (go==1){
    go=2;
    gravity=1.2;
    vspeed=3;
    }
if (vspeed>22)
    vspeed=22;

if (y>=5920){
    obj_iosadoll.holdit=0;
    (instance_create(x,y,obj_whiteblanket)).alarm[0]=2;
    scr_sound("tur_appear");
    scr_sound("exp_nano");
    instance_destroy();
    }
______________________________________________________

Information about object: obj_xdarkmusic
Sprite: spr_door
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

instance_destroy();
with (obj_sabot)
    scr_music("mus_dark");
______________________________________________________

Information about object: obj_sec3hologram
Sprite: spr_tasensoldier_basicleft
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (global.totkills<=2*global.neutralkc){
    global.truce=1;
    global.truce2=1;
    with (obj_door){
        if (tag==666 || tag==667 || tag==670)
            instance_destroy();
        }
    tile_layer_hide(666);
    tile_layer_hide(667);
    }
else
    instance_destroy();
______________________________________________________

Information about object: obj_sec3holotrigger
Sprite: spr_lift
Solid: false
Visible: false
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (global.totkills>2*global.neutralkc)
    instance_destroy();
Collision Event with object obj_iji:

execute code:

if (global.ignoreall==0){
    with (obj_sec3hologram){
        tempid=instance_create(x,y,obj_tasensoldier);
        tempid.sprite_index=spr_tasensoldier_walk;
        tempid.facing=1;
        tempid.state=1;
        tempid.alarm[2]=60;
        global.specialtriggerb4=1;
        tempid.specialtriggerb4=1;
        tempid.killdataid=51;
        instance_destroy();
        }
    instance_destroy();
    }
______________________________________________________

Information about object: obj_seczmirror
Sprite: spr_basic
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

if (instance_number(obj_glass)==1 && obj_iji.y<6720 && obj_iji.y>6464){
    if (obj_iji.sprite_index=spr_basic) sprite_index=spr_basicleft;
    else if (obj_iji.sprite_index=spr_basicleft) sprite_index=spr_basic;
    else if (obj_iji.sprite_index=spr_lookaround) sprite_index=spr_lookaroundleft;
    else if (obj_iji.sprite_index=spr_lookaroundleft) sprite_index=spr_lookaround;
    else if (obj_iji.sprite_index=spr_run) sprite_index=spr_runleft;
    else if (obj_iji.sprite_index=spr_runleft) sprite_index=spr_run;
    else if (obj_iji.sprite_index=spr_runfire) sprite_index=spr_runfireleft;
    else if (obj_iji.sprite_index=spr_runfireleft) sprite_index=spr_runfire;
    else if (obj_iji.sprite_index=spr_duck) sprite_index=spr_duckleft;
    else if (obj_iji.sprite_index=spr_duckleft) sprite_index=spr_duck;
    else if (obj_iji.sprite_index=spr_standup) sprite_index=spr_standupleft;
    else if (obj_iji.sprite_index=spr_standupleft) sprite_index=spr_standup;
    else if (obj_iji.sprite_index=spr_fire) sprite_index=spr_fireleft;
    else if (obj_iji.sprite_index=spr_fireleft) sprite_index=spr_fire;
    else if (obj_iji.sprite_index=spr_pushbutton) sprite_index=spr_pushbuttonleft;
    else if (obj_iji.sprite_index=spr_pushbuttonleft) sprite_index=spr_pushbutton;
    else if (obj_iji.sprite_index=spr_kickstrong) sprite_index=spr_kickstrongleft;
    else if (obj_iji.sprite_index=spr_kickstrongleft) sprite_index=spr_kickstrong;
    else if (obj_iji.sprite_index=spr_jump) sprite_index=spr_jumpleft;
    else if (obj_iji.sprite_index=spr_jumpleft) sprite_index=spr_jump;

    if (obj_iji.image_single==-1)
        image_index=floor(obj_iji.image_index);
    else
        image_index=obj_iji.image_single;
    draw_sprite_ext(sprite_index,image_index,7970+(8000-obj_iji.x),obj_iji.y,1,1,0,c_white,0.5);
    }
______________________________________________________

Information about object: obj_sec7vateilika
Sprite: spr_tasensoldier_basic
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
state=1;
alarm[2]=25+random(10);
walkspeed=3+global.specialtrigger16*2;
Alarm Event for alarm 2:

execute code:

//Adjust sprite
if (facing==0 && state==0)
    sprite_index=spr_tasensoldier_basicleft;
if (facing==1 && state==0)
    sprite_index=spr_tasensoldier_basic;
//Begin taking action
alarm[2]=25+random(10);
//Roam
randomstate=random(1);
if (randomstate<0.6){
    state=0;
    alarm[2]=60+random(90);
    }
else{
    state=1;
    facing=0;
    if (randomstate>0.85)
        facing=1;
    }
Step Event:

execute code:

//Nag off
if (obj_iji.y>1250)
    nag=0;

//Resume after chat
if (wait && wait2 && instance_number(obj_chat)==0){
    alarm[2]=25+random(10);
    wait=0;
    waitcyc=0;
    wait2=0;
    }
if (wait){
    waitcyc+=1;
    if (waitcyc>=4){
        waitcyc=0;
        wait2=1;
        }
    }

//First chat with Iji
if (obj_iji.y<1152 && obj_iji.y>912 && abs(x-obj_iji.x)<50 && global.hp>0 && !wait && !ready && !global.ignoreall){
    if (obj_iji.sprite_index==spr_basic || obj_iji.sprite_index==spr_basicleft || obj_iji.sprite_index==spr_run || obj_iji.sprite_index==spr_runleft || obj_iji.sprite_index==spr_jump || obj_iji.sprite_index==spr_jumpleft){
        (instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chat78";
        state=0;
        wait=1;
        wait2=0;
        waitcyc=0;
        ready=1;
        alarm[2]=0;
        if (x4160){
            facing=0;
            exit;
            }
        if (place_free(x+walkspeed,y+1) && (place_meeting(x+walkspeed,y+10,obj_slopel) || place_meeting(x+walkspeed,y+10,obj_sloper))){
            x+=walkspeed;
            move_contact_solid(270,-1);
            }
        else if (place_free(x+walkspeed,y))
            x+=walkspeed;
        else{
            if (place_free(x+walkspeed,y-5) && (place_meeting(x,y+10,obj_slopel) || place_meeting(x,y+10,obj_sloper))){
                y-=5;
                x+=walkspeed;
                move_contact_solid(270,-1);
                }
            else
                facing=0;
            }
        }
    }
Collision Event with object obj_iji:

execute code:

if (global.ignorestation==0){
    global.erasetop=0;
    global.topmessage="Press C to trade with Soldier Vateilika";
    }
Collision Event with object obj_pushbox:

execute code:

//Refill
if (ready && !wait && !global.ignoreall){
    (instance_create(obj_iji.x,obj_iji.y,obj_trigger)).textid="chat79";
    state=0;
    wait=1;
    wait2=0;
    waitcyc=0;
    alarm[2]=0;
    }
______________________________________________________

Information about object: obj_xspecialcannotfire
Sprite: spr_portrait1
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

if (global.hp>0){
if (instance_number(obj_asha2)==0){
    if (xcannotfire==1)
        obj_iji.xcannotfire=1;
    else
        obj_iji.xcannotfire=0;
    }
}
______________________________________________________

Information about object: obj_null
Sprite: 
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_weaponpickup
Mask: 

Create Event:

execute code:

sprite_index=spr_pickupbanana;
image_single=2;
______________________________________________________

Information about object: obj_sec3surprise
Sprite: spr_door
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Alarm Event for alarm 0:

execute code:

x=3000;
y=2403;
visible=1;
sprite_index=spr_tasensoldier_walkleft;
image_speed=0.5;
hspeed=-4;
Alarm Event for alarm 1:

execute code:

sprite_index=spr_tasensoldier_basicleft;
image_single=0;
speed=0;

global.ignoremessagescroll=30;
global.textid="chat37";
(instance_create(obj_shakescreen.x,obj_shakescreen.y,obj_chat)).textid=global.textid;
global.ignoreall=1;
obj_iji.goaroundtrigger=1;
readyforexit=1;

Alarm Event for alarm 2:

execute code:

if (hspeed>0)
    sprite_index=spr_tasensoldier_basic;
else
    sprite_index=spr_tasensoldier_basicleft;
speed=0;
image_single=0;
Step Event:

execute code:

if (!triggered && instance_number(obj_chat)==0){
    triggered=1;
    scr_sound("wea_mpfb");
    scr_shakescreen(1);
    tempid=instance_create(3000,2416,obj_komatompfb);
    tempid.speed=global.mpfbspeed;
    tempid.direction=180;
    tempid=instance_create(3000,2416,obj_komatompfb);
    tempid.speed=global.mpfbspeed-4;
    tempid.direction=180;
    tempid=instance_create(3000,2416,obj_komatompfb);
    tempid.speed=global.mpfbspeed-8;
    tempid.direction=180;
    alarm[0]=40;
    alarm[1]=150;
    with (obj_sabot)
        scr_stopmusic();
    }

if (readyforexit && instance_number(obj_chat)==0 && instance_number(obj_end)==0){
    global.sector=3;
    instance_create(obj_iji.x,obj_iji.y,obj_end);
    }
______________________________________________________

Information about object: obj_sec9ansaksie
Sprite: spr_ansaksie
Solid: false
Visible: true
Depth: -5
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

if (instance_number(obj_chat)==0 && readyforgo && !nogo){
    instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
    instance_destroy();
    }
if (!readyforgo)
    readyforgo=1;

Draw Event:

execute code:

if (type==0){
    draw_sprite(spr_ansaksie,image_single,x,y);
    draw_sprite(spr_ansaksiehead,img,x,y);
    if (shakehead){
        if (shakedir==0 && img<5){
            imgcyc+=1;
            if (imgcyc==2){
                imgcyc=0;
                img+=1;
                }
            }
        else if (shakedir==1 && img>0){
            imgcyc+=1;
            if (imgcyc==2){
                imgcyc=0;
                img-=1;
                }
            }
        if (img==5 && shakedir==0)
            shakedir=1;
        else if (img==0 && shakedir==1)
            shakehead=0;
        }
    else{
        img=0;
        shakedir=0;
        imgcyc=0;
        }
    }
else if (type==1)
    draw_sprite(spr_komatoassassin_pose1,0,x,y);
else if (type==2)
    draw_sprite(spr_komatoassassin_downstab,0,x,y);
______________________________________________________

Information about object: obj_ansaksie
Sprite: spr_komatoassassin_basicleft
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

voice=200+random(200);
ansaksie=1;
lastx=x;
lasty=y;
image_speed=0.5;
hp=1000;
maxhp=1000;
armor=200;
maxarmor=200;
enemytype=12;
resistance=1;
security=12;
angry=1;
alarm[2]=10;
Alarm Event for alarm 0:

execute code:

//Uppercut, Backstab, Upslash
if (sprite_index==spr_komatoassassin_uppercut || sprite_index==spr_komatoassassin_uppercutleft || sprite_index==spr_komatoassassin_backstab || sprite_index==spr_komatoassassin_backstableft || sprite_index==spr_komatoassassin_upslash){
    image_single=-1;
    image_speed=1;
    image_index=1;
    scr_sound("glo_swipe");
    }

//Firing in pose1
if (sprite_index==spr_komatoassassin_pose1 || sprite_index==spr_komatoassassin_pose1left){
scr_sound("wea_plas");
scr_shakescreen(3);
shotcount+=1;
if (sprite_index==spr_komatoassassin_pose1){
    tempid=instance_create(x+49,y+10,obj_enemyplasmatrace);
    tempid.fromansaksie=1;
    with (tempid)
        scr_enemyplasmatrace(1);
    }
else{
    tempid=instance_create(x-24,y+10,obj_enemyplasmatrace);
    tempid.fromansaksie=1;
    with (tempid)
        scr_enemyplasmatrace(0);
    }

if (sprite_index==spr_komatoassassin_pose1)
    sprite_index=spr_komatoassassin_pose1fire;
else
    sprite_index=spr_komatoassassin_pose1fireleft;
if (shotcount!=3){
    alarm[3]=5;
    alarm[0]=8;
    }
}
Alarm Event for alarm 1:

execute code:

//Visibility time is up
//Firing in pose 2
if (sprite_index==spr_komatoassassin_pose2){
    scr_sound("wea_plas");
    scr_shakescreen(3);
    tempid=instance_create(x+54,y+2,obj_enemyplasmatrace);
    tempid.fromansaksie=1;
    with(tempid)
        scr_enemyplasmatrace(1);
    tempid=instance_create(x+29,y+42,obj_enemyplasmatrace);
    tempid.fromansaksie=1;
    with(tempid)
        scr_enemyplasmatrace(1);
    }
if (sprite_index==spr_komatoassassin_pose2left){
    scr_sound("wea_plas");
    scr_shakescreen(3);
    tempid=instance_create(x-21,y+2,obj_enemyplasmatrace);
    tempid.fromansaksie=1;
    with(tempid)
        scr_enemyplasmatrace(0);
    tempid=instance_create(x+4,y+42,obj_enemyplasmatrace);
    tempid.fromansaksie=1;
    with(tempid)
        scr_enemyplasmatrace(0);
    }
//Firing Massacre
if (sprite_index==spr_komatoassassin_massacre){
    scr_shakescreen(4);
    scr_sound("wea_nuke");
    scr_sound("wea_plas");
    (instance_create(x,y,obj_whiteblanket)).alarm[0]=2;
    repeat(12)
        (instance_create(x+40,y+5,obj_massprojectile)).dir=1;
    }
if (sprite_index==spr_komatoassassin_massacreleft){
    scr_shakescreen(4);
    scr_sound("wea_nuke");
    scr_sound("wea_plas");
    (instance_create(x,y,obj_whiteblanket)).alarm[0]=2;
    repeat(12)
        (instance_create(x-15,y+5,obj_massprojectile)).dir=0;
    }

alarm[2]=random(10)+10;
instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
visible=0;
image_single=0;
image_index=0;
sprite_index=spr_komatoassassin_basic;

Alarm Event for alarm 2:

execute code:

//Recieve orders, appear and execute
if (global.hp>0){

upslashing=0;
upslashwait=0;
image_index=0;
image_single=0;
perform=0;
fakeperform=0;
randomfakes=0;

repeat(10){

if (!perform){
x=obj_sabot.x;
y=obj_sabot.y;
sprite_index=spr_komatoassassin_basic;
randomstate=floor(random(4));
if (randomstate>1)
    randomstate=floor(random(6));
temprand=0;
massrand=floor(random(3));

//Three-shot between Iji and Iosa
if (randomstate==0){
temprand=random(150)+100;
tempfacing=floor(random(2));
if (tempfacing==1 && obj_iji.xobj_iosa.x+temprand+150){
    sprite_index=spr_komatoassassin_pose1left;
    if (place_free(obj_iosa.x+100+temprand,803)){
        x=obj_iosa.x+temprand;
        y=803;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) && !place_free(x,y+1) && !collision_line(x,y,obj_iosa.x,obj_iosa.y,obj_block,0,1)){
        alarm[1]=36;
        alarm[0]=15;
        shotcount=0;
        scr_sound("tor_gather");
        if (sprite_index==spr_komatoassassin_pose1)
            (instance_create(x+65,y+5,obj_chargetell)).tempid=id;
        if (sprite_index==spr_komatoassassin_pose1left)
            (instance_create(x-40,y+10,obj_chargetell)).tempid=id;
        }
    else
        perform=0;
    }
}

//Dual-shot between Iji and Iosa
if (randomstate==1){
temprand=random(100)+200;
tempfacing=floor(random(2));
if (tempfacing==1 && obj_iji.xobj_iosa.x+temprand+100){
    if (massrand==0){
        sprite_index=spr_komatoassassin_massacreleft;
        y=780;
        }
    else{
        sprite_index=spr_komatoassassin_pose2left;
        y=800;
        }
    if (place_free(obj_iosa.x+100+temprand,780)){
        x=obj_iosa.x+temprand;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,128);
    if (place_free(x,y) && !place_free(x,y+1) && !collision_line(x,y,obj_iosa.x,obj_iosa.y,obj_block,0,1)){
        //Massacre
        if (massrand==0){
            alarm[1]=20;
            scr_sound("tor_gather");
            if (sprite_index==spr_komatoassassin_massacre)
                (instance_create(x+80,y+8,obj_chargetell)).tempid=id;
            if (sprite_index==spr_komatoassassin_massacreleft)
                (instance_create(x-55,y+8,obj_chargetell)).tempid=id;
            }
        //Dual-shot
        else{
            alarm[1]=15;
            scr_sound("tor_gather");
            if (sprite_index==spr_komatoassassin_pose2){
                (instance_create(x+70,y+2,obj_chargetell)).tempid=id;
                (instance_create(x+45,y+42,obj_chargetell)).tempid=id;
                }
            if (sprite_index==spr_komatoassassin_pose2left){
                (instance_create(x-37,y+2,obj_chargetell)).tempid=id;
                (instance_create(x-12,y+42,obj_chargetell)).tempid=id;
                }
            }
        }
    else
        perform=0;
    }
}

//Downstab
if (randomstate==2){
temprand=random(10)+150;
sprite_index=spr_komatoassassin_downstab;
if (place_free(obj_iosa.x,obj_iosa.y-temprand)){
    x=obj_iosa.x;
    y=obj_iosa.y-temprand;
    if (!collision_line(x,y,obj_iosa.x,obj_iosa.y,obj_block,0,1)){
        gravity=1;
        gravity_direction=270;
        perform=1;
        obj_iosa.downstabbed=0;
        }
    else
        sprite_index=spr_komatoassassin_basic;
    }
}

//Uppercut
if (randomstate==3){
temprand=random(1);
if (temprand>0.5){
    sprite_index=spr_komatoassassin_uppercut;
    if (place_free(obj_iosa.x-50,836) && !place_free(obj_iosa.x-50,846)){
        x=obj_iosa.x-50;
        y=836;
        perform=1;
        }
    }
else{
    sprite_index=spr_komatoassassin_uppercutleft;
    if (place_free(obj_iosa.x+32,836) && !place_free(obj_iosa.x+32,846)){
        x=obj_iosa.x+110;
        y=836;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) && !place_free(x,y+1)){
        image_single=0;
        alarm[1]=15;
        alarm[0]=10;
        }
    else
        perform=0;
    }
}

//Backstab
if (randomstate==4){
if (obj_iosa.facing==0){
    sprite_index=spr_komatoassassin_backstableft;
    if (place_free(obj_iosa.x+50,784) && !place_free(obj_iosa.x+32,794)){
        x=obj_iosa.x+110;
        y=784;
        perform=1;
        }
    }
else if (obj_iosa.facing==1){
    sprite_index=spr_komatoassassin_backstab;
    if (place_free(obj_iosa.x-50,784) && !place_free(obj_iosa.x-50,794)){
        x=obj_iosa.x-50;
        y=784;
        perform=1;
        }
    }
if (perform){
    move_contact_solid(270,64);
    if (place_free(x,y) && !place_free(x,y+1)){
        image_single=0;
        alarm[1]=14;
        alarm[0]=10;
        }
    else
        perform=0;
    }
}
//Fake attack
if (randomstate==5){
    randomfakes=ceil(random(2))+3;
    alarm[4]=5;
    perform=1;
    fakeperform=1;
    }

} //End of perform
} //End of repeat

//Perform
if (perform){
    if (!fakeperform && sprite_index!=spr_komatoassassin_basic && sprite_index!=spr_komatoassassin_basicleft){
        instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
        visible=1;
        }
    }
else
    alarm[2]=random(10)+10;
}
Alarm Event for alarm 3:

execute code:

//Revert to pose1 animation
if (sprite_index==spr_komatoassassin_pose1fire)
    sprite_index=spr_komatoassassin_pose1;
else if (sprite_index==spr_komatoassassin_pose1fireleft)
    sprite_index=spr_komatoassassin_pose1left;
Alarm Event for alarm 4:

execute code:

if (randomfakes>0){
    randomfakes-=1;
    instance_create(random(600)+obj_iji.x-300,random(400)+obj_iji.y-200,obj_megaflash);
    if (randomfakes==0)
        alarm[4]=4;
    else
        alarm[4]=5;
    }
else
    alarm[2]=1;
Step Event:

execute code:

//Voices
if (voice>0)
    voice-=1;
if (shutup>0){
    shutup-=1;
    if (shutup==1)
        scr_voice("ext_ansaksie",3);
    }
if (stopfooling>0){
    stopfooling-=1;
    if (stopfooling==1)
        scr_voice("ext_ansaksie",6);
    }

//Upercut box
if (sprite_index==spr_komatoassassin_uppercut && image_index==2)
    (instance_create(x,y-45,obj_assassin_uppercut)).facing=1;
if (sprite_index==spr_komatoassassin_uppercutleft && image_index==2)
    instance_create(x-50,y-45,obj_assassin_uppercut);

//Backstab box
if (sprite_index==spr_komatoassassin_backstab && image_index==1)
    (instance_create(x-10,y-5,obj_assassin_backstab)).facing=1;
if (sprite_index==spr_komatoassassin_backstableft && image_index==1)
    instance_create(x-65,y-5,obj_assassin_backstab);

//Upslash box
if (sprite_index==spr_komatoassassin_upslash&& image_index==1)
    instance_create(x-35,y-64,obj_assassin_upslash);

//Downstab recovery
if(!place_free(x,y) && sprite_index==spr_komatoassassin_downstab && visible){
    alarm[2]=random(60-(difficulty*20))+30-(difficulty*10);
    instance_create(bbox_left+((bbox_right-bbox_left)/2), bbox_top+((bbox_bottom-bbox_top)/2), obj_megaflash);
    visible=0;
    gravity=0;
    vspeed=0;
    sprite_index=spr_komatoassassin_basic;
    }
if (vspeed>20)
    vspeed=20;
if (visible && sprite_index==spr_komatoassassin_downstab && y>obj_iosa.y+64)
    scr_assassinpain(1);

//Weapon sparks
if (visible){
smoke+=1;
if (smoke==5){
    smoke=0;
    if (sprite_index==spr_komatoassassin_pose1)
        instance_create(x+65,y+10,obj_shockemit);
    if (sprite_index==spr_komatoassassin_pose1left)
        instance_create(x-40,y+10,obj_shockemit);
    if (sprite_index==spr_komatoassassin_pose2){
        instance_create(x+70,y+2,obj_shockemit);
        instance_create(x+45,y+42,obj_shockemit);
        }
    if (sprite_index==spr_komatoassassin_pose2left){
        instance_create(x-37,y+2,obj_shockemit);
        instance_create(x-12,y+42,obj_shockemit);
        }
    if (sprite_index==spr_komatoassassin_massacre){
        instance_create(x+80,y+5,obj_smoke);
        scr_shakescreen(3);
        }
    if (sprite_index==spr_komatoassassin_massacreleft){
        instance_create(x-55,y+5,obj_smoke);
        scr_shakescreen(3);
        }
    }
}

//Change of plans
if (sprite_index==spr_komatoassassin_uppercut || sprite_index==spr_komatoassassin_uppercutleft || sprite_index==spr_komatoassassin_backstab || sprite_index==spr_komatoassassin_backstableft){
    if (visible && distance_to_object(obj_iosa)>100){
        scr_assassinpain(1);
        alarm[2]=10;
        }
    if (visible && ((sprite_index==spr_komatoassassin_uppercut && (obj_iosa.bbox_left+(obj_iosa.bbox_right-obj_iosa.bbox_left)/2 < bbox_left+(bbox_right-bbox_left)/2+10)) || (sprite_index==spr_komatoassassin_uppercutleft && (obj_iosa.bbox_left+(obj_iosa.bbox_right-obj_iosa.bbox_left)/2 > bbox_left+(bbox_right-bbox_left)/2-10)))){
        if (alarm[1]>6){
            alarm[1]=5;
            alarm[0]=2;
            }
        }
    if (visible && ((sprite_index==spr_komatoassassin_backstab && (obj_iosa.bbox_left+(obj_iosa.bbox_right-obj_iosa.bbox_left)/2 < bbox_left+(bbox_right-bbox_left)/2+10)) || (sprite_index==spr_komatoassassin_backstableft && (obj_iosa.bbox_left+(obj_iosa.bbox_right-obj_iosa.bbox_left)/2 > bbox_left+(bbox_right-bbox_left)/2-10)))){
        if (alarm[1]>6){
            alarm[1]=4;
            alarm[0]=2;
            }
        }
    }
if (sprite_index==spr_komatoassassin_pose1 || sprite_index==spr_komatoassassin_pose1left || sprite_index==spr_komatoassassin_pose1fire || sprite_index==spr_komatoassassin_pose1fireleft || sprite_index==spr_komatoassassin_pose2 || sprite_index==spr_komatoassassin_pose2left || sprite_index==spr_komatoassassin_massacre || sprite_index==spr_komatoassassin_massacreleft){
    if (visible && distance_to_object(obj_iosa)<30){
        scr_assassinpain(1);
        scr_ansaksievoice();
        alarm[2]=10;
        }
    }
End Step Event:

execute code:

//Armor
armor=maxarmor;

//Return to sabot
if (!visible){
    x=obj_sabot.x;
    y=obj_sabot.y;
    }

//Ordered to be destroyed
if (destroyme){
    if (visible)
        scr_assassinpain(1);
    else
        instance_destroy();
    }
Collision Event with object obj_rocketexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_mpfbexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_enemyrocketexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_shockexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_shockballexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_enemympfbexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_pushbox:

execute code:

if (visible){
    global.erasetop=0;
    global.topmessage="CUSTOM ACCESS ERROR `Not a chance. /Ansaksie`";
    scr_sound("glo_crackfail");
    global.ignorestation=90;
    voice=300+random(300);
    shutup=0;
    stopfooling=10;
    }
Collision Event with object obj_enemyshockball:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_enemyshockballexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_enemyshock:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_enemyshockexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_enemypulse:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_komatompfb:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_enemythor:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
Collision Event with object obj_iosacrawler:

execute code:

if (visible)
    scr_assassinpain(1);
Collision Event with object obj_impulseexplosion:

execute code:

if (!other.dud && visible)
    scr_assassinpain(1);
______________________________________________________

Information about object: obj_mass
Sprite: 
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_weaponpickup
Mask: 

Create Event:

execute code:

sprite_index=spr_pickupbanana;
image_single=3;
______________________________________________________

Information about object: obj_massprojectile
Sprite: 
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

scr_shakescreen(4);
cyc+=1;
if (dir==1)
    x+=64+random(64);
else
    x+=-(64+random(64));
y+=-64+random(128);
if (cyc<=5){
    (instance_create(x,y,obj_enemyrocketexplosion)).killsky=1;
    instance_create(x,y,obj_explosioncenter);
    }
else{
    (instance_create(x,y,obj_enemympfbexplosion)).killsky=1;
    (instance_create(x,y,obj_enemympfbexplosion)).killsky=1;
    instance_create(x,y,obj_explosioncenter);
    instance_destroy();
    }
______________________________________________________

Information about object: obj_paper
Sprite: spr_paper
Solid: false
Visible: true
Depth: 2
Persistent: false
Parent: obj_deactivateme
Mask: 

Create Event:

execute code:

if (global.specialbake)
instance_destroy();
Step Event:

execute code:

if (state==0){
    if (x>obj_sabot.x-100 && xobj_sabot.y-100 && y1)
        speed*=0.95;
    vspeed+=gr;
    if (vspeed>maxspeed)
        vspeed=maxspeed;
    if (!place_free(x+hspeed,y+vspeed)){
        if (hspeed>0)
            x-=1;
        else
            x+=1;
        hspeed=0;
        }
    if (!place_free(x,y+vspeed) && vspeed<0)
        vspeed=0;
    if (!place_free(x,y+vspeed) && vspeed>0){
        if (place_meeting(x,y+1,obj_lift) || place_meeting(x,y+1,obj_sloper) || place_meeting(x,y+1,obj_slopel))
            instance_destroy();
        else{
            dead=0;
            state=0;
            speed=0;
            x=floor(x);
            y=floor(y);
            move_contact_solid(270,8);
            sprite_index=spr_paper;
            image_speed=0;
            image_index=0;
            }
        }
    }
______________________________________________________

Information about object: obj_sec3timebump
Sprite: spr_blockwide
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

if (instance_number(obj_chat)==0){
    instance_destroy();
    global.seconds+=600;
    if (global.seconds>3599)
        global.seconds=3599;
    }
______________________________________________________

Information about object: obj_sec3specialtrucetrig
Sprite: spr_lift
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

instance_destroy();
if (global.truce && global.specialtriggerb4==1){
    with (obj_crate1)
        instance_destroy();
    with (obj_crate2)
        instance_destroy();
    with (obj_pickuphealth)
        instance_destroy();
    with (obj_pickuparmor)
        instance_destroy();
    with (obj_locker)
        instance_destroy();
    }
______________________________________________________

Information about object: obj_zbarrier
Sprite: spr_zbarrier
Solid: false
Visible: true
Depth: 10
Persistent: false
Parent: obj_activateme
Mask: 

Create Event:

execute code:


Step Event:

execute code:

cyc+=1;
if (cyc==2)
    visible=0;
if (cyc==4){
    cyc=0
    visible=1;
    }
Collision Event with object obj_iji:

execute code:

if (!other.takingpain && !other.recovering){
    global.hp=1;
    global.armor=0;
    }

Collision Event with object obj_pushbox:

execute code:

global.erasetop=0;
global.topmessage="This barrier looks extremely dangerous";
______________________________________________________

Information about object: obj_sec8can
Sprite: spr_sec8can
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_deactivateme
Mask: 

Create Event:

execute code:

image_speed=0;
temprand=floor(random(3));
if (temprand==0)
    sprite_index=spr_sec8can2;
else if (temprand==1)
    sprite_index=spr_sec8can3;

Alarm Event for alarm 0:

execute code:

kicked=0;
Step Event:

execute code:

if (place_free(x,y+1))
    gravity=0.7;
if (speed>20)
    speed=20;
Collision Event with object obj_iji:

execute code:

if (other.goingright || other.goingleft){
    if (kicked==0){
        scr_sound("glo_debris");
        if (place_free(x,y-2))
            y-=2;
        if (global.facing==0)
            direction=150;
        else
            direction=30;
        speed=12+random(4);
        image_speed=0.5;
        kicked=1;
        alarm[0]=10;
        }
    }
Collision Event with object obj_block:

execute code:

if (speed>4)
    scr_sound("glo_debris");
move_bounce_solid(1);
image_speed*=0.6;
speed*=0.4;

if (speed<1.5 && !place_free(x,y+2)){
    speed=0;
    move_contact_solid(270,-1);
    image_speed=0;
    gravity=0;
    }
______________________________________________________

Information about object: obj_sec8vend
Sprite: spr_doorcolors
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_pushbox:

execute code:

if (cans<5){
    cans+=1;
    scr_sound("glo_cracktick");
    instance_create(x-4+random(5),y+80,obj_sec8can);
    }
else
    scr_sound("glo_crackfail");
with (other)
    instance_destroy();

______________________________________________________

Information about object: obj_crumble74
Sprite: spr_crumble74
Solid: true
Visible: false
Depth: 0
Persistent: false
Parent: obj_block
Mask: 

Create Event:

execute code:

if (global.extras1)
    visible=1;
Collision Event with object obj_rocketexplosion:

execute code:

if (visible){
repeat(25){
    tempid=instance_create(x+8+random(48),y+8+random(58),obj_scrapwhite);
    tempid.direction=random(360);
    tempid.speed=random(8)+5;
    }
instance_destroy();
tile_layer_delete(4);
}
Collision Event with object obj_mpfbexplosion:

execute code:

if (visible){
repeat(25){
    tempid=instance_create(x+8+random(48),y+8+random(58),obj_scrapwhite);
    tempid.direction=random(360);
    tempid.speed=random(8)+5;
    }
instance_destroy();
tile_layer_delete(4);
}
Collision Event with object obj_shockexplosion:

execute code:

if (visible){
repeat(25){
    tempid=instance_create(x+8+random(48),y+8+random(58),obj_scrapwhite);
    tempid.direction=random(360);
    tempid.speed=random(8)+5;
    }
instance_destroy();
tile_layer_delete(4);
}
______________________________________________________

Information about object: obj_sec7plushie
Sprite: spr_sec7plushie
Solid: false
Visible: true
Depth: 1000
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_pushbox:

execute code:

global.erasetop=0;
global.topmessage="It's a plush doll named `Anni`.";
if (push==0){
    push=1;
    scr_voice("ann_find",3);
    }
else{
    push=0;
    scr_voice("ann_find",4);
    }
______________________________________________________

Information about object: obj_nul
Sprite: 
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_resolutionsabot
Sprite: 
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute script scr_resolutionsabotcreate with arguments (0,0,0,0,0)
Alarm Event for alarm 0:

execute code:

room_goto_next();
Alarm Event for alarm 1:

execute code:

display_set_all(800,600,-1,-1);
window_set_fullscreen(1);
global.runfullscreen=1;
Step Event:

execute code:

if (keyboard_check(vk_f12)){
    f12quit+=1;
    if (f12quit>=20)
        game_end();
    }
else
    f12quit=0;
Draw Event:

execute code:

if (!fade){
text="Press Enter to run Iji in fullscreen mode."
text2="Press Escape to run in windowed mode."
text3="NOTE: The fullscreen mode will set your"
text4="screen resolution to 800x600."
draw_set_font(global.fontspecial);
draw_set_color(c_white);
draw_text_ext(96,156,text,28,672);
draw_text_ext(96,212,text2,28,672);
draw_set_font(global.fontwhite);
draw_text_ext(96,268,text3,28,672);
draw_text_ext(96,296,text4,28,672);
}
Key Press Event for Key:

execute code:

if (!set){
    set=1;
    alarm[0]=5;
    alarm[1]=2;
    fade=1;
    with (obj_resolutionpart)
        instance_destroy();
    }
Key Press Event for Key:

execute code:

if (!set){
    if (!keyboard_check(vk_enter) && !keyboard_check(vk_f12)){
        set=1;
        alarm[0]=5;
        fade=1;
        with (obj_resolutionpart)
            instance_destroy();
        }
    }
Key Press Event for F4 Key:

execute code:

if (keyboard_check(vk_alt)){
    sound_stop_all();
    game_end();
    }
______________________________________________________

Information about object: obj_resolutionpart
Sprite: spr_clearpix
Solid: false
Visible: true
Depth: 100
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

dep=random(1);
speed=dep;
direction=90+floor(random(2))*180;
image_index=15-floor(dep*6);
image_speed=0;
depth=1000-floor(dep*1000)+100;
alarm[0]=3600;
Alarm Event for alarm 0:

execute code:

sprite_index=spr_banana;
image_index=floor(random(8));
image_speed=0;
alarm[1]=90;
Alarm Event for alarm 1:

execute code:

sprite_index=spr_clearpix;
image_index=15-floor(dep*6);
image_speed=0;
alarm[0]=3600;
Step Event:

execute code:

if (x<-16)
    x=816;
if (x>816)
    x=-16;
if (y<-16)
    y=616;
if (y>616)
    y=-16;

______________________________________________________

Information about object: obj_sec7shutup
Sprite: spr_door
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

instance_destroy();
with (obj_tasensoldier){
    angry=0;
    alarm[5]=0;
    }
______________________________________________________

Information about object: obj_sec4doll
Sprite: spr_duck
Solid: false
Visible: true
Depth: -1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=10;
Alarm Event for alarm 0:

execute code:

sprite_index=spr_xpants;
image_single=0;
x-=1;
______________________________________________________

Information about object: obj_sec9elite
Sprite: spr_tasenelite_basic
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_deactivateme
Mask: 

Create Event:

execute code:

image_speed=0.5;
state=0;
alarm[2]=5+random(5);
walkspeed=2+global.specialtrigger16*2;
type=3;
Alarm Event for alarm 2:

execute code:

if (!stationary){
//Adjust sprite
if (facing==0 && state==0)
    sprite_index=spr_tasenelite_basicleft;
if (facing==1 && state==0)
    sprite_index=spr_tasenelite_basic;
//Begin taking action
alarm[2]=25+random(10);
//Roam
randomstate=random(1);
if (randomstate<0.6){
    state=0;
    }
else{
    state=1;
    facing=0;
    if (randomstate>0.85)
        facing=1;
    }
}
Step Event:

execute code:

//Resume after chat
if (wait && wait2 && instance_number(obj_chat)==0){
    alarm[2]=25+random(10);
    wait=0;
    waitcyc=0;
    wait2=0;
    }
if (wait){
    waitcyc+=1;
    if (waitcyc>=4){
        waitcyc=0;
        wait2=1;
        }
    }

//Stand still
if (state==0){
    if (facing==0)
        sprite_index=spr_tasenelite_basicleft;
    else
        sprite_index=spr_tasenelite_basic;
    }
//Walk
if (state==1 && !stationary){
    if (facing==0){
        sprite_index=spr_tasenelite_walkleft;
        if (place_meeting(x-walkspeed,y,obj_blockenemy) || !place_free(x-walkspeed,y)){
            facing=1;
            exit;
            }
        if (place_free(x-walkspeed,y))
            x-=walkspeed;
        }
    else{
        sprite_index=spr_tasenelite_walk;
        if (place_meeting(x+walkspeed,y,obj_blockenemy) || !place_free(x+walkspeed,y)){
            facing=0;
            exit;
            }
        if (place_free(x+walkspeed,y))
            x+=walkspeed;
        }
    }
//Alter sprite speed
if (sprite_index=spr_tasenelite_basic || sprite_index=spr_tasenelite_basicleft)
    image_speed=0.2;
else
    image_speed=0.5;

Collision Event with object obj_iji:

execute code:

if (global.ignorestation==0){
    global.erasetop=0;
    global.topmessage="Press C to talk";
    }
Collision Event with object obj_pushbox:

execute code:

if (!wait && !global.ignoreall){
    global.ignoreall=1;
    chattemp=(instance_create(obj_iji.x,obj_iji.y,obj_trigger));
    scr_bunkertalk();
    state=0;
    wait=1;
    wait2=0;
    waitcyc=0;
    alarm[2]=0;
    }
______________________________________________________

Information about object: obj_sec9commander
Sprite: spr_tasencommander_basic
Solid: false
Visible: true
Depth: 1
Persistent: false
Parent: obj_deactivateme
Mask: 

Create Event:

execute code:

image_speed=0.5;
state=0;
alarm[2]=5+random(5);
walkspeed=2+global.specialtrigger16*2;
type=2;
Alarm Event for alarm 2:

execute code:

if (!stationary){
//Adjust sprite
if (facing==0 && state==0)
    sprite_index=spr_tasencommander_basicleft;
if (facing==1 && state==0)
    sprite_index=spr_tasencommander_basic;
//Begin taking action
alarm[2]=25+random(10);
//Roam
randomstate=random(1);
if (randomstate<0.6){
    state=0;
    }
else{
    state=1;
    facing=0;
    if (randomstate>0.85)
        facing=1;
    }
}
Step Event:

execute code:

//Resume after chat
if (wait && wait2 && instance_number(obj_chat)==0){
    alarm[2]=25+random(10);
    wait=0;
    waitcyc=0;
    wait2=0;
    }
if (wait){
    waitcyc+=1;
    if (waitcyc>=4){
        waitcyc=0;
        wait2=1;
        }
    }

//Stand still
if (state==0){
    if (facing==0)
        sprite_index=spr_tasencommander_basicleft;
    else
        sprite_index=spr_tasencommander_basic;
    }
//Walk
if (state==1 && !stationary){
    if (facing==0){
        sprite_index=spr_tasencommander_walkleft;
        if (place_meeting(x-walkspeed,y,obj_blockenemy) || !place_free(x-walkspeed,y)){
            facing=1;
            exit;
            }
        if (place_free(x-walkspeed,y))
            x-=walkspeed;
        }
    else{
        sprite_index=spr_tasencommander_walk;
        if (place_meeting(x+walkspeed,y,obj_blockenemy) || !place_free(x+walkspeed,y)){
            facing=0;
            exit;
            }
        if (place_free(x+walkspeed,y))
            x+=walkspeed;
        }
    }
//Alter sprite speed
if (sprite_index=spr_tasencommander_basic || sprite_index=spr_tasencommander_basicleft)
    image_speed=0.2;
else
    image_speed=0.5;

Collision Event with object obj_iji:

execute code:

if (global.ignorestation==0){
    global.erasetop=0;
    global.topmessage="Press C to talk";
    }
Collision Event with object obj_pushbox:

execute code:

if (!wait && !global.ignoreall){
    global.ignoreall=1;
    chattemp=(instance_create(obj_iji.x,obj_iji.y,obj_trigger));
    scr_bunkertalk();
    state=0;
    wait=1;
    wait2=0;
    waitcyc=0;
    alarm[2]=0;
    }
______________________________________________________

Information about object: obj_sec9vateilika
Sprite: spr_tasensoldier_basic
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_deactivateme
Mask: 

Create Event:

execute code:

image_speed=0.5;
state=0;
alarm[2]=5+random(5);
walkspeed=3+global.specialtrigger16*2;
type=1;
Alarm Event for alarm 2:

execute code:

if (!stationary){
//Adjust sprite
if (facing==0 && state==0)
    sprite_index=spr_tasensoldier_basicleft;
if (facing==1 && state==0)
    sprite_index=spr_tasensoldier_basic;
//Begin taking action
alarm[2]=25+random(10);
//Roam
randomstate=random(1);
if (randomstate<0.6){
    state=0;
    }
else{
    state=1;
    facing=0;
    if (randomstate>0.85)
        facing=1;
    }
}
Step Event:

execute code:

//Resume after chat
if (wait && wait2 && instance_number(obj_chat)==0){
    alarm[2]=25+random(10);
    wait=0;
    waitcyc=0;
    wait2=0;
    }
if (wait){
    waitcyc+=1;
    if (waitcyc>=4){
        waitcyc=0;
        wait2=1;
        }
    }

//Stand still
if (state==0){
    if (facing==0)
        sprite_index=spr_tasensoldier_basicleft;
    else
        sprite_index=spr_tasensoldier_basic;
    }
//Walk
if (state==1 && !stationary){
    if (facing==0){
        sprite_index=spr_tasensoldier_walkleft;
        if (place_meeting(x-walkspeed,y,obj_blockenemy) || !place_free(x-walkspeed,y)){
            facing=1;
            exit;
            }
        if (place_free(x-walkspeed,y))
            x-=walkspeed;
        }
    else{
        sprite_index=spr_tasensoldier_walk;
        if (place_meeting(x+walkspeed,y,obj_blockenemy) || !place_free(x+walkspeed,y)){
            facing=0;
            exit;
            }
        if (place_free(x+walkspeed,y))
            x+=walkspeed;
        }
    }
//Alter sprite speed
if (sprite_index=spr_tasensoldier_basic || sprite_index=spr_tasensoldier_basicleft)
    image_speed=0.2;
else
    image_speed=0.5;

Collision Event with object obj_iji:

execute code:

if (global.ignorestation==0){
    global.erasetop=0;
    global.topmessage="Press C to talk";
    }
Collision Event with object obj_pushbox:

execute code:

if (!wait && !global.ignoreall){
    global.ignoreall=1;
    chattemp=(instance_create(obj_iji.x,obj_iji.y,obj_trigger));
    scr_bunkertalk();
    state=0;
    wait=1;
    wait2=0;
    waitcyc=0;
    alarm[2]=0;
    }
______________________________________________________

Information about object: obj_secxansaksie
Sprite: spr_secxansaksie
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

if (global.ignorestation==0){
    global.erasetop=0;
    global.topmessage="Press C to talk";
    }
Collision Event with object obj_pushbox:

execute code:

chattemp=instance_create(obj_iji.x,obj_iji.y,obj_trigger);
if (talk==0){
    chattemp.textid="chatxr";
    talk=1;
    }
else if (talk==1){
    chattemp.textid="chatxs";
    talk=2;
    }
else if (talk==2){
    subtalk+=1;
    if (subtalk==4){
        chattemp.textid="chatxu";
        subtalk=0;
        }
    else
        chattemp.textid="chatxt";
    }
Draw Event:

execute code:

draw_sprite(sprite_index,0,x,y);
draw_sprite(spr_secxansaksieh,h,x+17,y);
if (obj_iji.x>x-96)
    up=1;
if (obj_iji.x0)
    h-=1;
}
______________________________________________________

Information about object: obj_reallytrigger
Sprite: spr_door
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_iji:

execute code:

if (global.ignorestation==0){
global.erasetop=0;
global.topmessage="100% kills required";
}

______________________________________________________

Information about object: obj_nanodust
Sprite: spr_nanodust
Solid: false
Visible: true
Depth: -6
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=2;
alarm[1]=22;
gravity=-0.2;
speed=8;
direction=180;

Alarm Event for alarm 0:

execute code:

image_index=0;
Alarm Event for alarm 1:

destroy the instance
Step Event:

execute code:

cyc+=1;
hspeed*=0.8;
______________________________________________________

Information about object: obj_nanodust2
Sprite: spr_nanoflash
Solid: false
Visible: true
Depth: -5
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

img=floor(random(4));
type=floor(random(4)); //0=swirl
if (type>1)
    type=1;
swirlfac=-(5+random(20));
gravity=0.025-random(0.1);
speed=random(22)+1;
if (dir==1)
    hspeed*=-1;

Step Event:

execute code:

speed*=0.94;
ttl+=1;
extra+=1;
if (type==1 && extra<8)
    hspeed+=0.2;

//Swirl
if (type==0){
    if (swirlfac<-5)
        swirlfac+=0.25;
    swirl-=swirlfac;
    if (swirl<=0)
        swirl+=360;
    if (hspeed<0)
        x-=cos(degtorad(swirl))*3;
    else
        x+=cos(degtorad(swirl))*3;
    y-=sin(degtorad(swirl))*3;
    }

if (speed<1+type || ttl==90){
    tempid=instance_create(x,y,obj_ijisplat);
    tempid.speed=1;
    tempid.direction=direction;
    instance_destroy();
    }
Draw Event:

execute code:

imgcyc+=1;
if (imgcyc==2){
    imgcyc=0;
    img+=1;
    }
draw_sprite(sprite_index,img,x,y);
______________________________________________________

Information about object: obj_gamma
Sprite: 
Solid: false
Visible: true
Depth: -1000000
Persistent: false
Parent: obj_activateme
Mask: 

Draw Event:

execute script scr_gammadraw with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_shape004b
Sprite: 
Solid: false
Visible: true
Depth: 616
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=189;
shapey[0]=131;
shapex[1]=273;
shapey[1]=196;
shapex[2]=282;
shapey[2]=196;
shapex[3]=282;
shapey[3]=161;
shapex[4]=72;
shapey[4]=0;
shapex[5]=63;
shapey[5]=0;
shapex[6]=63;
shapey[6]=35;
shapex[7]=147;
shapey[7]=99;
shapex[8]=140;
shapey[8]=99;
shapex[9]=189;
shapey[9]=137;

points=10;
bone=0;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(74,0,0));
scr_drawshape();

______________________________________________________

Information about object: obj_shape401b
Sprite: 
Solid: false
Visible: false
Depth: 108
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-113;
shapey[0]=9;
shapex[1]=-84;
shapey[1]=-82;
shapex[2]=-133;
shapey[2]=-1;
points=3;
bone=4;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(c_white);
scr_drawshape();

______________________________________________________

Information about object: obj_shape401c
Sprite: 
Solid: false
Visible: false
Depth: 108
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-133;
shapey[0]=-1;
shapex[1]=-101;
shapey[1]=-111;
shapex[2]=-161;
shapey[2]=5;
points=3;
bone=4;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(c_white);
scr_drawshape();

______________________________________________________

Information about object: obj_shape401d
Sprite: 
Solid: false
Visible: false
Depth: 108
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-161;
shapey[0]=5;
shapex[1]=-139;
shapey[1]=-72;
shapex[2]=-176;
shapey[2]=9;
points=3;
bone=4;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(c_white);
scr_drawshape();

______________________________________________________

Information about object: obj_shape402b
Sprite: 
Solid: false
Visible: true
Depth: 107
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-51;
shapey[0]=61;
shapex[1]=-25;
shapey[1]=31;
shapex[2]=-40;
shapey[2]=39;
shapex[3]=-54;
shapey[3]=54;
shapex[4]=-78;
shapey[4]=67;
shapex[5]=-76;
shapey[5]=73;
points=6;
bone=4;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(74,0,0));
scr_drawshape();

______________________________________________________

Information about object: obj_shape405b
Sprite: 
Solid: false
Visible: true
Depth: 104
Persistent: false
Parent: obj_shape
Mask: 

Create Event:

execute code:

//Shape
shapex[0]=-255;
shapey[0]=28;
shapex[1]=-90;
shapey[1]=28;
shapex[2]=-90;
shapey[2]=2;
shapex[3]=-71;
shapey[3]=-35;
shapex[4]=-165;
shapey[4]=-35;
shapex[5]=-190;
shapey[5]=-23;
shapex[6]=-227;
shapey[6]=-23;
shapex[7]=-227;
shapey[7]=-35;
shapex[8]=-265;
shapey[8]=-10;
shapex[9]=-278;
shapey[9]=-10;
points=10;
bone=4;

scr_findallangles();
Draw Event:

execute code:

//Draw
draw_set_color(make_color_rgb(obj_tor.weaponflash,obj_tor.weaponflash,obj_tor.weaponflash));
scr_drawshape();

______________________________________________________

Information about object: obj_deadiji
Sprite: spr_hitfloor
Solid: false
Visible: true
Depth: -1
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0;
image_index=4;
image_single=4;
______________________________________________________

Information about object: obj_redstain
Sprite: spr_redstain
Solid: false
Visible: true
Depth: 999998
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

if (global.noblood)
    instance_destroy();
______________________________________________________

Information about object: obj_torsmoke
Sprite: spr_smoke
Solid: false
Visible: true
Depth: 10
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

img=floor(random(4));
img2=0;
img3=floor(random(2));
imgspd=0.2+random(0.4);
gravity=0.1+random(0.2);
gravity_direction=90;
image_speed=0;
image_index=img3*6;
hspeed=-(8+random(4));
Step Event:

execute code:

img2+=imgspd;
img=floor(img2);
if (img>=6){
    img=5;
    instance_destroy();
    }
image_index=img+img3*6;
speed*=0.9;
______________________________________________________

Information about object: obj_iosacrawler
Sprite: spr_iosacrawler
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_index=floor(random(6));
alarm[1]=3;
cling=0;
Alarm Event for alarm 1:

execute code:

alarm[1]=2;
tempid=instance_create(x-12+random(24),y-12+random(24),obj_tyrian2);
tempid.depth=-1;
tempid.sprite_index=spr_iosacrawler2;
tempid.image_index=4;
tempid.alarm[0]=8;
Step Event:

execute code:

movespeed=1;
if (fast==1)
    movespeed=2;
else if (fast==2)
    movespeed=3;
else if (fast==3)
    movespeed=4;

repeat(movespeed){
    if (!cling){
        if (facing==0){
            if (place_free(x-4,y))
                x-=4;
            else{
                cling=1;
                dir=1;
                }
            }
        else{
            if (place_free(x+4,y))
                x+=4;
            else{
                cling=1;
                dir=1;
                }
            }
        }
    
    else{
        //Clockwise
        if (facing==0){
            if (dir==0){
                x+=4;
                if (place_free(x,y-4))
                    dir=1;
                else if (!place_free(x+4,y))
                    dir=3;
                }
            else if (dir==1){
                y-=4;
                if (place_free(x-4,y))
                    dir=2;
                else if (!place_free(x,y-4))
                    dir=0;
                }
            else if (dir==2){
                x-=4;
                if (place_free(x,y+4))
                    dir=3;
                else if (!place_free(x-4,y))
                    dir=1;
                }
            else if (dir==3){
                y+=4;
                if (place_free(x+4,y))
                    dir=0;
                else if (!place_free(x,y+4))
                    dir=2;
                }
            }
        //Counterclockwise
        else{
            if (dir==0){
                x+=4;
                if (place_free(x,y+4))
                    dir=3;
                else if (!place_free(x+4,y))
                    dir=1;
                }
            else if (dir==1){
                y-=4;
                if (place_free(x+4,y))
                    dir=0;
                else if (!place_free(x,y-4))
                    dir=2;
                }
            else if (dir==2){
                x-=4;
                if (place_free(x,y-4))
                    dir=1;
                else if (!place_free(x-4,y))
                    dir=3;
                }
            else if (dir==3){
                y+=4;
                if (place_free(x-4,y))
                    dir=2;
                else if (!place_free(x,y+4))
                    dir=0;
                }
            }
        }
    }
Collision Event with object obj_iji:

execute code:

if (place_meeting(x-4,y-4,obj_iji) && place_meeting(x-4,y+4,obj_iji) && place_meeting(x+4,y+4,obj_iji) && place_meeting(x+4,y-4,obj_iji)){
    if (!other.takingpain && !other.recovering){
        global.hp-=2;
        global.damage+=2;
        if (obj_iji.x+6
Collision Event with object obj_reflector:

execute code:

with (other)
    scr_reflectorexplo();

/*
if (!iji && other.image_index<=1){
    scr_sound("glo_reflect");
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(x,y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    if (!cling){
        if (xother.x){
            dir=0;
            facing=1-facing;
            }
        else if (dir==3 && yother.y){
            dir=3;
            facing=1-facing;
            }
        }
    if (facing==0)
        image_speed=1;
    else
        image_speed=-1;
    }
*/
______________________________________________________

Information about object: obj_torsmashpart
Sprite: spr_torsmashpart
Solid: false
Visible: true
Depth: 2000010
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

die+=diespeed;
die2=2-die;
if (die<=0.01){
    dir=0.01;
    instance_destroy();
    }
if (die2<1)
    image_alpha=die2;
if (y>=600)
    instance_destroy();
Draw Event:

execute code:

finalx=x+background_x[0];
finaly=y+background_y[0];
draw_sprite_ext(spr_torsmashpart,image_single,floor(finalx),floor(finaly),1,1,0,c_white,image_alpha);
______________________________________________________

Information about object: obj_levelstation
Sprite: spr_levelstation
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: obj_station
Mask: 

Create Event:

execute code:

image_speed=0.25;
if (global.really)
    sprite_index=spr_levelstation_blank;
______________________________________________________

Information about object: obj_disruptorexplo
Sprite: spr_disruptorexplo
Solid: false
Visible: true
Depth: -3
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

img=floor(random(6));
img2=floor(random(4));
speed=1+random(8);
gravity=0.6;
imgcyc=0;
Step Event:

execute code:

imgcyc+=1;
if (imgcyc==2){
    imgcyc=0;
    img+=1;
    }
if (img>=10)
    instance_destroy();
else
    image_single=img+img2*10;
______________________________________________________

Information about object: obj_barrierexplo
Sprite: spr_barrierexplo
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=4;
Alarm Event for alarm 0:

execute code:

instance_destroy();
______________________________________________________

Information about object: obj_impulseexplosion
Sprite: spr_impulseexplosion
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

scr_sound("ext_impulseexplo");
image_speed=0.5;
dud=1;
alarm[0]=16;
alarm[2]=1;
alarm[3]=2;
obj_sabot.raveflash=0;

if (global.specialbake==0 && instance_number(obj_pixspark)<50){
repeat(5)
    instance_create(x-10+random(20),y-10+random(20),obj_pixspark);
    }
Alarm Event for alarm 0:

destroy the instance
Alarm Event for alarm 2:

set variable dud to 0
Alarm Event for alarm 3:

set variable dud to 1
______________________________________________________

Information about object: obj_neutralizer
Sprite: spr_sabot
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: obj_activateme
Mask: 

Create Event:

execute code:

maxcycle=60;
Step Event:

execute code:

repeat(7)
    instance_create(obj_sabot.x-100+random(1000),obj_sabot.y-100+random(800),obj_glassspark);
Draw Event:

execute code:

//Neutralizer graphics
cycle += 1;
if (cycle == 1){
    draw_set_color(c_white);
    draw_ellipse(obj_iji.x-200+6,obj_iji.y-200+30,obj_iji.x+200+6,obj_iji.y+200+30,0);
    }
if (cycle == 3){
    draw_set_color(c_white);
    draw_ellipse(obj_iji.x-400+6,obj_iji.y-400+30,obj_iji.x+400+6,obj_iji.y+400+30,0);
    }
if (cycle == 5){
    draw_set_color(c_white);
    draw_ellipse(obj_iji.x-600+6,obj_iji.y-600+30,obj_iji.x+600+6,obj_iji.y+600+30,0);
    }
if (cycle == 7){
    draw_set_color(c_white);
    draw_rectangle(view_xview[0]-50,view_yview[0]-50,view_xview[0]+850,view_yview[0]+650,0);
    }
if (cycle >= maxcycle)
    instance_destroy();
______________________________________________________

Information about object: obj_disruptor
Sprite: spr_detonator3
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=3+global.attacklevel;
alarm[1]=3+global.attacklevel+3;
obj_sabot.raveflash=0;
img=0;
Alarm Event for alarm 0:

execute code:

dud=1;
img=8;
Alarm Event for alarm 1:

execute code:

instance_destroy();
Alarm Event for alarm 2:

execute script scr_disruptorexplo with arguments (1,0,0,0,0)
Step Event:

execute code:

imgcyc+=1;
if (imgcyc==2){
    imgcyc=0;
    img+=1;
    if (img==8)
        img=0;
    }
image_single=img;
Collision Event with object obj_enemyrocket:

execute code:

if (dud==0){
    with (other){
        scr_sound("glo_reflect");
        instance_create(x+10,y,obj_miniflash);
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x+10,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
Collision Event with object obj_enemympfb:

execute code:

if (dud==0){
    with (other){
        scr_sound("glo_reflect");
        instance_create(x,y,obj_miniflash);
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
Collision Event with object obj_enemyshockball:

execute code:

if (dud==0){
    with (other){
        scr_sound("glo_reflect");
        instance_create(x,y,obj_miniflash);
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
Collision Event with object obj_enemyshock:

execute code:

if (dud==0){
    with (other){
        scr_sound("glo_reflect");
        instance_create(x,y,obj_miniflash);
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
Collision Event with object obj_komatorocket:

execute code:

if (dud==0){
    with (other){
        scr_sound("glo_reflect");
        instance_create(x+10,y,obj_miniflash);
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x+10,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
Collision Event with object obj_komatompfb:

execute code:

if (dud==0){
    with (other){
        scr_sound("glo_reflect");
        instance_create(x,y,obj_miniflash);
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
Collision Event with object obj_laserdagger:

execute code:

if (dud==0){
    with (other){
        scr_sound("glo_reflect");
        instance_create(x,y,obj_miniflash);
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
Collision Event with object obj_rockethail:

execute code:

if (dud==0){
    with (other){
        scr_sound("glo_reflect");
        instance_create(x,y,obj_miniflash);
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
Collision Event with object obj_enemythor:

execute script scr_disruptorexplo with arguments (0,0,0,0,0)
Collision Event with object obj_elecbomb:

execute code:

if (dud==0){
    with (other){
        scr_sound("glo_reflect");
        instance_create(x,y,obj_miniflash);
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y-8,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
Collision Event with object obj_ragebomb:

execute code:

if (dud==0){
    with (other){
        scr_sound("glo_reflect");
        instance_create(x,y,obj_miniflash);
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
Collision Event with object obj_ragebomb2:

execute code:

if (dud==0){
    with (other){
        scr_sound("glo_reflect");
        instance_create(x,y,obj_miniflash);
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
Collision Event with object obj_tyrian:

execute code:

if (dud==0){
    with (other){
        scr_sound("glo_reflect");
        instance_create(x,y,obj_miniflash);
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
Collision Event with object obj_ripper:

execute script scr_disruptorexplo with arguments (0,0,0,0,0)
Collision Event with object obj_ripper4:

execute code:

if (other.image_single>2)
    scr_disruptorexplo();
Collision Event with object obj_ripper42:

execute code:

if (other.image_single>2)
    scr_disruptorexplo();
Collision Event with object obj_chargeball:

execute code:

if (!dud){
    scr_sound("glo_electrocute");
    scr_sound("exp_mpfb");
    with (other){
        repeat(8)
            (instance_create(x,y,obj_chargeballpart)).direction=random(180);
        (instance_create(x,y,obj_whiteblanket)).alarm[0]=2;
        instance_create(x,y,obj_harmlessexplosion);
        scr_shakescreen(5);
        instance_destroy();
        if (global.specialbake==0)
            maxsparks=90;
        else
            maxsparks=10;
        if (instance_number(obj_mpfbspark2)
Collision Event with object obj_fractalrocket:

execute code:

if (dud==0){
    with (other){
        scr_sound("glo_reflect");
        instance_create(x,y,obj_miniflash);
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
Collision Event with object obj_rageburst2:

execute code:

if (other.image_single>0)
    scr_disruptorexplo();
Collision Event with object obj_iosacrawler:

execute script scr_disruptorexplo with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_miniflash
Sprite: spr_megaflash5
Solid: false
Visible: true
Depth: -3
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

cycle+=1;
if (cycle==1)
draw_sprite(spr_megaflash3,0,x,y);
if (cycle==2)
draw_sprite(spr_megaflash4,0,x,y);
if (cycle==3)
draw_sprite(spr_megaflash5,0,x,y);
if (cycle==4)
instance_destroy();
______________________________________________________

Information about object: obj_disruptorexplo2
Sprite: spr_detonator3
Solid: false
Visible: true
Depth: -4
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_single=11;
alarm[0]=2;
Alarm Event for alarm 0:

execute code:

instance_destroy();
______________________________________________________

Information about object: obj_shockbarrier
Sprite: spr_shockbarrier
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

alarm[0]=50+global.attacklevel*10;
obj_sabot.raveflash=0;
image_speed=0.5;
Alarm Event for alarm 0:

execute code:

instance_create(x,y,obj_barrierexplo);
scr_sound("ext_barrierexplo")
instance_destroy();
Alarm Event for alarm 2:

execute script scr_barrierexplo with arguments (1,0,0,0,0)
Collision Event with object obj_rocket:

execute code:

with (other){
    scr_sound("glo_reflect");
    instance_create(x+10,y,obj_miniflash);
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(x+10,y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    instance_destroy();
    }
Collision Event with object obj_mpfb:

execute code:

with (other){
    scr_sound("glo_reflect");
    instance_create(x,y,obj_miniflash);
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(x,y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    instance_destroy();
    }
Collision Event with object obj_pulse:

execute code:

with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
Collision Event with object obj_enemyrocket:

execute code:

with (other){
    scr_sound("glo_reflect");
    instance_create(x+10,y,obj_miniflash);
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(x+10,y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    instance_destroy();
    }
Collision Event with object obj_shock:

execute code:

with (other){
    scr_sound("glo_reflect");
    instance_create(x,y,obj_miniflash);
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(x,y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    instance_destroy();
    }
Collision Event with object obj_shockball:

execute code:

with (other){
    scr_sound("glo_reflect");
    instance_create(x,y,obj_miniflash);
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(x,y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    instance_destroy();
    }
Collision Event with object obj_enemympfb:

execute code:

with (other){
    scr_sound("glo_reflect");
    instance_create(x,y,obj_miniflash);
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(x,y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    instance_destroy();
    }
Collision Event with object obj_thor:

execute script scr_barrierexplo with arguments (0,0,0,0,0)
Collision Event with object obj_banana:

execute code:

with (other){
    scr_sound("glo_reflect");
    instance_create(x,y,obj_miniflash);
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(x,y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    instance_destroy();
    }
Collision Event with object obj_enemyshockball:

execute code:

with (other){
    scr_sound("glo_reflect");
    instance_create(x,y,obj_miniflash);
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(x,y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    instance_destroy();
    }
Collision Event with object obj_enemyshock:

execute code:

with (other){
    scr_sound("glo_reflect");
    instance_create(x,y,obj_miniflash);
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(x,y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    instance_destroy();
    }
Collision Event with object obj_enemypulse:

execute code:

with (other){
    scr_pulseexplosion();
    instance_destroy();
    }
Collision Event with object obj_komatorocket:

execute code:

with (other){
    scr_sound("glo_reflect");
    instance_create(x+10,y,obj_miniflash);
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(x+10,y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    instance_destroy();
    }
Collision Event with object obj_komatompfb:

execute code:

with (other){
    scr_sound("glo_reflect");
    instance_create(x,y,obj_miniflash);
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(x,y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    instance_destroy();
    }
Collision Event with object obj_laserdagger:

execute code:

if (dud==0){
    with (other){
        scr_sound("glo_reflect");
        instance_create(x,y,obj_miniflash);
        if (instance_number(obj_thorspark)<20){
            repeat(5){
                tempid=instance_create(x,y,obj_thorspark);
                tempid.speed=random(2)+2;
                tempid.gravity=0.2;
                }
            }
        instance_destroy();
        }
    }
Collision Event with object obj_rockethail:

execute code:

with (other){
    scr_sound("glo_reflect");
    instance_create(x,y,obj_miniflash);
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(x,y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    instance_destroy();
    }
Collision Event with object obj_blastpellet:

execute code:

with (other){
    instance_destroy();
    }
Collision Event with object obj_enemythor:

execute script scr_barrierexplo with arguments (0,0,0,0,0)
Collision Event with object obj_elecbomb:

execute code:

with (other){
    scr_sound("glo_reflect");
    instance_create(x,y,obj_miniflash);
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(x,y-8,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    instance_destroy();
    }
Collision Event with object obj_ragebomb:

execute code:

with (other){
    scr_sound("glo_reflect");
    instance_create(x,y,obj_miniflash);
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(x,y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    instance_destroy();
    }
Collision Event with object obj_ragebomb2:

execute code:

with (other){
    scr_sound("glo_reflect");
    instance_create(x,y,obj_miniflash);
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(x,y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    instance_destroy();
    }
Collision Event with object obj_tyrian:

execute code:

with (other){
    scr_sound("glo_reflect");
    instance_create(x,y,obj_miniflash);
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(x,y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    instance_destroy();
    }
Collision Event with object obj_ripper:

execute script scr_barrierexplo with arguments (0,0,0,0,0)
Collision Event with object obj_ripper4:

execute code:

if (other.image_single>2)
    scr_barrierexplo();
Collision Event with object obj_ripper42:

execute code:

if (other.image_single>2)
    scr_barrierexplo();
Collision Event with object obj_chargeball:

execute code:

if (!dud){
    scr_sound("glo_electrocute");
    scr_sound("exp_mpfb");
    with (other){
        repeat(8)
            (instance_create(x,y,obj_chargeballpart)).direction=random(180);
        (instance_create(x,y,obj_whiteblanket)).alarm[0]=2;
        instance_create(x,y,obj_harmlessexplosion);
        scr_shakescreen(5);
        instance_destroy();
        if (global.specialbake==0)
            maxsparks=90;
        else
            maxsparks=10;
        if (instance_number(obj_mpfbspark2)
Collision Event with object obj_fractalrocket:

execute code:

with (other){
    scr_sound("glo_reflect");
    instance_create(x,y,obj_miniflash);
    if (instance_number(obj_thorspark)<20){
        repeat(5){
            tempid=instance_create(x,y,obj_thorspark);
            tempid.speed=random(2)+2;
            tempid.gravity=0.2;
            }
        }
    instance_destroy();
    }
Collision Event with object obj_rageburst2:

execute code:

if (other.image_single>0)
    scr_barrierexplo();
Collision Event with object obj_iosacrawler:

execute script scr_barrierexplo with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_chaintracer
Sprite: spr_sabot
Solid: false
Visible: false
Depth: 0
Persistent: false
Parent: obj_activateme
Mask: 

Step Event:

execute script scr_chaintracer with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_chaintracer2
Sprite: 
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: obj_activateme
Mask: 

Draw Event:

execute script scr_chaintracerdraw with arguments (0,0,0,0,0)
______________________________________________________

Information about object: obj_readpaper
Sprite: spr_readpaper
Solid: false
Visible: true
Depth: 3
Persistent: false
Parent: obj_station
Mask: 

______________________________________________________

Information about object: obj_torkilldrawer
Sprite: 
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

if (room==rom_sector15){
    if (obj_tor.berserkend==2){
        if (obj_tor.berserkendcyc mod 12<=8){
            draw_set_font(global.fontwhite);
            draw_set_color(c_white);
            draw_text_ext(obj_iji.x-15*6+6,obj_iji.y-32,"Press "+chr(global.firekey)+" to kill",28,400);
            }
        }
    }

if (room==rom_sector14){
    if (obj_iosatrigger.pacifistend==2){
        if (obj_iosatrigger.pacifistendcyc mod 12<=8){
            draw_set_font(global.fontwhite);
            draw_set_color(c_white);
            draw_text_ext(obj_iji.x-15*6+6,obj_iji.y-32,"Press "+chr(global.firekey)+" to kill",28,400);
            }
        }
    }
______________________________________________________

Information about object: obj_bloodflow
Sprite: spr_bloodflow
Solid: false
Visible: false
Depth: 10
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

img=0;
spd=4;
spdcyc=0;
newspd=2;
ttl=0;
dir=0;
gone=0;
ffall=0;
Step Event:

execute code:

if (place_free(x,y+1))
    newspd=spd*2;
else
    newspd=spd;

repeat(newspd){
    spdcyc+=1;
    if (spdcyc==3){
        spdcyc=0;
        if (place_meeting(x,y+1,obj_meta))
            gone=1;
        else if (place_free(x,y+1)){
            if (place_free(x+1-dir*2,y+1))
                gone=1;
            else
                y+=1;
            }
        else{
            if (place_free(x-1+dir*2,y))
                x+=-1+dir*2;
            else
                gone=1;
            if (place_free(x,y+1))
                y+=1;
            }
        if (!gone)
            (instance_create(x,y,obj_bloodflow2)).image_single=img;
        }
    }

ttl+=1;
if (ttl==20)
    spd=3;
if (ttl==35)
    spd=2;
if (ttl==50){
    spd=1;
    img=1;
    }
if (ttl>=90 || gone)
    instance_destroy();
______________________________________________________

Information about object: obj_bloodflow2
Sprite: spr_bloodflow
Solid: false
Visible: true
Depth: 10
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_iosa2_gun
Sprite: spr_iosa2_gun
Solid: false
Visible: true
Depth: -10
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

img=0;
anim=0;
image_single=0;
Step Event:

execute code:

//0 fall
//1 land
//2 stand
//3 fire
//4 stretch
//5 stretchstand

strikeiji=0;
if (anim==3)
    animcyc=2
else
    animcyc+=1;
if (animcyc>=2){
    animcyc=0;
    animcyc2+=1;
    //fall
    if (anim==0){
        if (animcyc2==1)
            img=1;
        else if (animcyc2==2)
            img=2;
        else if (animcyc2==3){
            animcyc2=0;
            img=0;
            }
        }
    //land
    else if (anim==1){
        if (animcyc2==1)
            img=3;
        else if (animcyc2==2)
            img=4;
        else if (animcyc2==3)
            img=5;
        else if (animcyc2==4){
            animcyc2=0;
            img=6;
            anim=2;
            }
        }
    //stand
    else if (anim==2){
        if (animcyc2==1)
            img=7;
        else if (animcyc2==2)
            img=8;
        else if (animcyc2==3){
            animcyc2=0;
            img=9;
            }
        }
    //fire
    else if (anim==3){
        if (animcyc2==1){
            img=10;
            strikeiji=1;
            }
        else if (animcyc2==2)
            img=7;
        else if (animcyc2==3){
            img=10;
            strikeiji=1;
            }
        else if (animcyc2==4)
            img=8;
        else if (animcyc2==5){
            img=10;
            strikeiji=1;
            }
        else if (animcyc2==6){
            animcyc2=0;
            img=9;
            }
        }
    //stretch
    else if (anim==4){
        if (animcyc2==1)
            img=11;
        else if (animcyc2==2)
            img=12;
        else if (animcyc2==3)
            img=13;
        else if (animcyc2==4)
            img=14;
        else if (animcyc2==5)
            img=15;
        else if (animcyc2==6)
            img=16;
        else if (animcyc2==7)
            img=17;
        else if (animcyc2==8){
            animcyc2=0;
            img=18;
            anim=5;
            }
        }
    //stretchstand
    else if (anim==5){
        if (animcyc2==1)
            img=19;
        else if (animcyc2==2)
            img=20;
        else if (animcyc2==3){
            animcyc2=0;
            img=21;
            }
        }
    }

//Hit floor
if (anim==0 && !place_free(x,y+1+vspeed)){
    speed=0;
    move_contact_solid(270,64);
    obj_tor.holdright=0;
    anim=1;
    animcyc=1;
    animcyc2=1;
    img=3;
    scr_sound("glo_kick");
    scr_shakescreen(1);
    }

//Strike Iji
if (strikeiji && anim==3){
    scr_shakescreen(3);
    scr_sound("exp_turret");
    //scr_sound("wea_plas");
    scr_sound("wea_spli");
    tempid=instance_create(x+72,y+42,obj_shockshell);
    tempid.sprite_index=spr_vortexshell;
    tempid.vortex=1;
    instance_create(x-26,y+56,obj_vortexcannon);
    firedfirst=1;
    with (obj_iji){
        if (!deathscreamed){
            instance_create(0,0,obj_whiteflash);
            deathscreamed=1;
            scr_sound("iji_death",1);
            tile_layer_show(999990);
            }
        vortexkilled=1;
        takingpain=0;
        recovering=0;
        visible=1;
        fatality=1;
        notech=10;
        scr_knockdown(1,2,0,1,1,0);
        obj_iji.velocity=1;
        obj_iji.y=1750;
        if (obj_iji.x<=72)
            obj_iji.x=72;
        if (global.hp>0){
            if (global.healthlevel==10)
                global.hp-=2;
            else
                global.hp-=3;
            global.armor=100;
            if (global.hp<=0){
                global.hp=0;
                global.armor=0;
                }
            }
        else{
            global.hp=0;
            global.armor=0;
            with (obj_iji){
                if (!global.noblood){
                    repeat(1){
                        tempid=instance_create(bbox_left+((bbox_right-bbox_left)/2),bbox_top+((bbox_bottom-bbox_top)/2),obj_tasenbloodspecial);
                        tempid.sprite_index=spr_ijiblood2;
                        tempid.speed*=1.5;
                        tempid.depth=-7;
                        }
                    }
                }
            }
        }
    }
image_single=img;

//hole smoke
if (firedfirst){
    instance_create(0+floor(random(96)),1722,obj_smoke);
    instance_create(0+floor(random(96)),1806,obj_smoke);
    }
______________________________________________________

Information about object: obj_vortexcannon
Sprite: spr_vortexcannon
Solid: false
Visible: true
Depth: -1
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

img+=1;
if (img==4)
    instance_destroy();
Draw Event:

execute code:

for (i=0;i<20;i+=1){
    if (i==0)
        draw_sprite(spr_vortexcannon,img+4-1,x-i*32,y);
    else
        draw_sprite(spr_vortexcannon,img-1,x-i*32,y);
    }
______________________________________________________

Information about object: obj_horsebegin
Sprite: 
Solid: false
Visible: true
Depth: -1200
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

cyc+=1;
if (cyc==1)
    scr_sound("tor_fly");
if (cyc<=36){
    rot-=50;
    scale+=0.075+scale*0.075;
    }
if (cyc==36){
    instance_create(0,0,obj_horsebeginbg);
    scr_sound("exp_nuke");
    with (obj_face)
        scr_music("mus_tor");
    for (i=0;i<15;i+=1){
        myx=random(800);
        myy=random(600);
        for (j=0;j<4;j+=1)
            instance_create(myx,myy,obj_silentexplospewer);
        }
    }
if (cyc>=120)
    xoff+=100;
if (cyc==125){
    global.horse=1;
    global.horselives=2;
    global.horsepoints=0;
    global.backuphorsepoints=0;
    instance_create(0,0,obj_horseexit);
    }
Draw Event:

execute code:

draw_sprite_ext(spr_horse,0,400+xoff,300,scale,scale,rot,c_white,1);
if (cyc>=36){
    draw_set_font(global.fontwhite);
    draw_set_color(c_white);
    text="MISSILE PONY X"
    text2="GET READY"
    draw_text_ext_transformed(400-string_length(text)*12,32,text,56,800,2,2,0);
    draw_text_ext_transformed(400-string_length(text2)*12,516,text2,56,800,2,2,0);
    }
______________________________________________________

Information about object: obj_horsebeginbg
Sprite: 
Solid: false
Visible: true
Depth: -1000
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

cyc+=1;
if (cyc mod 30<15)
    col+=5;
else
    col-=5;
if (col<0)
    col=0;
draw_set_color(make_color_rgb(0,128-col,col));
draw_rectangle(-10,-10,820,620,0);
______________________________________________________

Information about object: obj_silentexplospewer
Sprite: 
Solid: false
Visible: true
Depth: -1100
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

gravity=2;
speed=random(30);
direction=random(360);
vspeed-=15;
cyc=floor(random(4));
Step Event:

execute code:

cyc+=1;
if (cyc>=4){
    cyc=0;
    tempid=instance_create(floor(x),floor(y),obj_harmlessexplosion);
    tempid.sprite_index=spr_rocketexplosion;
    tempid.image_speed=0.5;
    tempid.alarm[0]=18;
    tempid.depth=-1100;
    }

if (y>700)
    instance_destroy();
______________________________________________________

Information about object: obj_horseexit
Sprite: 
Solid: false
Visible: true
Depth: -2000
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

cyc+=1;
if (cyc==9){
    //Next stage (default)
    if (type==0){
        if (room==rom_main)
            room_goto(rom_sector1);
        else if (room==rom_sector1)
            room_goto(rom_sector2);
        else if (room==rom_sector2)
            room_goto(rom_sector3);
        else if (room==rom_sector3)
            room_goto(rom_sector4);
        else if (room==rom_sector4)
            room_goto(rom_sector5);
        else if (room==rom_sector5)
            room_goto(rom_sector6);
        else if (room==rom_sector6)
            room_goto(rom_sector7);
        else if (room==rom_sector7)
            room_goto(rom_sector8);
        else if (room==rom_sector8)
            room_goto(rom_sector9);
        else if (room==rom_sector9)
            room_goto(rom_sectorx);
        else if (room==rom_sectorx){
            //Victory
            with (obj_sabot)
                scr_music("mus_clear");
            obj_sabot.horsevictory=1;
                dist=180;
            for (i=0;i<900;i+=32){
                for (j=0;j<700;j+=32){
                    dist+=1.1;
                    if (dist>=360)
                        dist-=360;
                    dist2=15+cos(degtorad(dist))*15;
                    tempid=instance_create(obj_sabot.x-450+i,obj_sabot.y-350+j,obj_horsestars);
                    tempid.rot=i+j*0.75;
                    tempid.dist=dist2;
                    while (tempid.rot>=360)
                        tempid.rot-=360;
                    }
                }
            with (obj_horseenemy)
                instance_destroy();
            instance_destroy();
            }
        }
    //Death
    else if (type==1){
        global.horselives-=1;
        if (global.horselives>=0){
            global.horsepoints=global.backuphorsepoints;
            room_restart();
            }
        else{
            //Game over
            with (obj_sabot)
                scr_music("mus_gameover");
            obj_sabot.horsegameover=1;
            dist=180;
            for (i=0;i<900;i+=32){
                for (j=0;j<700;j+=32){
                    dist+=1.1;
                    if (dist>=360)
                        dist-=360;
                    dist2=15+cos(degtorad(dist))*15;
                    tempid=instance_create(obj_sabot.x-450+i,obj_sabot.y-350+j,obj_horsestars);
                    tempid.rot=i+j*0.75;
                    tempid.dist=dist2;
                    while (tempid.rot>=360)
                        tempid.rot-=360;
                    }
                }
            with (obj_horseenemy)
                instance_destroy();
            instance_destroy();
            }
        }
    //Victory
    else if (type==2){
        with (obj_sabot)
            scr_music("mus_clear");
        obj_sabot.horsevictory=1;
            dist=180;
        for (i=0;i<900;i+=32){
            for (j=0;j<700;j+=32){
                dist+=1.1;
                if (dist>=360)
                    dist-=360;
                dist2=15+cos(degtorad(dist))*15;
                tempid=instance_create(obj_sabot.x-450+i,obj_sabot.y-350+j,obj_horsestars);
                tempid.rot=i+j*0.75;
                tempid.dist=dist2;
                while (tempid.rot>=360)
                    tempid.rot-=360;
                }
            }
        with (obj_horseenemy)
            instance_destroy();
        instance_destroy();
        }
    //Restart Iji
    else if (type==3){
        sound_stop_all();
        scr_stopmusic();
        room_goto(rom_main);
        }
    }
Draw Event:

execute code:

draw_set_color(c_black);
if (xoff>-1280)
    xoff-=128;
draw_rectangle(view_xview[0]+832+xoff,view_yview[0]-32,view_xview[0]+832,view_yview[0]+632,0);

______________________________________________________

Information about object: obj_horseenter
Sprite: 
Solid: false
Visible: true
Depth: -2000
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

cyc+=1;
if (cyc==9)
    instance_destroy();

Draw Event:

execute code:

draw_set_color(c_black);
xoff-=128;
draw_rectangle(view_xview[0]-32,view_yview[0]-32,view_xview[0]+832+xoff,view_yview[0]+632,0);

______________________________________________________

Information about object: obj_horseflip
Sprite: spr_portrait99
Solid: false
Visible: false
Depth: 100
Persistent: false
Parent: 
Mask: 

______________________________________________________

Information about object: obj_horse
Sprite: spr_horse
Solid: false
Visible: true
Depth: -2
Persistent: false
Parent: 
Mask: 

Collision Event with object obj_horsepup:

execute code:

if (trailer==0){
    if (other.type<=4){
        scr_sound("glo_pickup2");
        if (weapon==other.type){
            weaponpower=1;
            global.horsepoints+=2500;
            (instance_create(other.x+16,other.y+16,obj_horsepoints)).points=2500;
            obj_sabot.forcewavetext=1;
            if (other.type==0)
                obj_sabot.wavetext="BLIT THROWER 2";
            else if (other.type==1)
                obj_sabot.wavetext="VOLCANO CANNON 2";
            else if (other.type==2)
                obj_sabot.wavetext="METEORIC SHREDDER 2";
            else if (other.type==3)
                obj_sabot.wavetext="ROCKET GUN 2";
            else if (other.type==4)
                obj_sabot.wavetext="CORONA LANCE 2";
            }
        else{
            weapon=other.type;
            weaponpower=0;
            global.horsepoints+=1000;
            (instance_create(other.x+16,other.y+16,obj_horsepoints)).points=1000;
            obj_sabot.forcewavetext=1;
            if (other.type==0)
                obj_sabot.wavetext="BLIT THROWER";
            else if (other.type==1)
                obj_sabot.wavetext="VOLCANO CANNON";
            else if (other.type==2)
                obj_sabot.wavetext="METEORIC SHREDDER";
            else if (other.type==3)
                obj_sabot.wavetext="ROCKET GUN";
            else if (other.type==4)
                obj_sabot.wavetext="CORONA LANCE";
            }
        }
    if (other.type==5){
        scr_sound("glo_getoverload");
        if (numtwins==4){
            obj_sabot.forcewavetext=1;
            obj_sabot.wavetext="BONUS";
            global.horsepoints+=2000;
            (instance_create(other.x+16,other.y+16,obj_horsepoints)).points=2000;
            }
        else{
            with (obj_horse2)
                trailer+=5;
            tempid=instance_create(x,y,obj_horse2);
            tempid.trailer=5;
            tempid.weapon=weapon;
            tempid.weaponpower=weaponpower;
            tempid.depth=-1;
            numtwins+=1;
            obj_sabot.forcewavetext=1;
            if (numtwins==1){
                obj_sabot.wavetext="TWINHORSE";
                global.horsepoints+=2000;
                (instance_create(other.x+16,other.y+16,obj_horsepoints)).points=2000;
                }
            else if (numtwins==2){
                obj_sabot.wavetext="TRIHORSE";
                global.horsepoints+=3000;
                (instance_create(other.x+16,other.y+16,obj_horsepoints)).points=3000;
                }
            else if (numtwins==3){
                obj_sabot.wavetext="QUADHORSE";
                global.horsepoints+=4000;
                (instance_create(other.x+16,other.y+16,obj_horsepoints)).points=4000;
                }
            else if (numtwins==4){
                obj_sabot.wavetext="PENTAHORSE";
                global.horsepoints+=5000;
                (instance_create(other.x+16,other.y+16,obj_horsepoints)).points=5000;
                }
            }
        }
    if (other.type==6){
        scr_sound("glo_pickup");
        if (obj_sabot.horsehp==10){
            global.horsepoints+=200;
            (instance_create(other.x+16,other.y+16,obj_horsepoints)).points=200;
            }
        else{
            global.horsepoints+=50;
            (instance_create(other.x+16,other.y+16,obj_horsepoints)).points=50;
            }
        obj_sabot.horsehp+=1;
        if (obj_sabot.horsehp>10)
            obj_sabot.horsehp=10;
        obj_sabot.forcewavetext=1;
        obj_sabot.wavetext="HEALTH";
        }
    else if (other.type==7){
        scr_sound("glo_levelup");
        global.horselives+=1;
        if (global.horselives>10)
            global.horselives=10;
        global.horsepoints+=3000;
        (instance_create(other.x+16,other.y+16,obj_horsepoints)).points=3000;
        obj_sabot.forcewavetext=1;
        obj_sabot.wavetext="LIFE";
        }
    with (other)
        instance_destroy();
    }
Collision Event with object obj_horsecoin:

execute code:

if (trailer==0){
    scr_sound("glo_pickup");
    global.horsepoints+=50;
    (instance_create(other.x+16,other.y+16,obj_horsepoints)).points=50;
    with (other)
        instance_destroy();
    }
Collision Event with object obj_horseenemy:

execute code:

if (trailer==0){
    if (mercy==0){
        scr_sound("iji_basepain");
        obj_sabot.horsehp-=1;
        mercy=10;
        with (other)
            hp-=10;
        }
    }
Collision Event with object obj_horseeshot:

execute code:

if (trailer==0){
    if (mercy==0){
        scr_sound("iji_basepain");
        obj_sabot.horsehp-=1;
        mercy=10;
        }
    with (other){
        if (!mpfb)
            instance_destroy();
        }
    }
Draw Event:

execute code:

if (trailer>0)
    draw_sprite_ext(spr_horse,1,floor(x),floor(y),1,1,0,c_red,0.35);
else{
    //Self
    if (mercy>0 && (mercy mod 2)==0)
        draw_sprite_ext(spr_horse,0,floor(x),floor(y),1,1,0,c_red,1);
    else
        draw_sprite_ext(spr_horse,0,floor(x),floor(y),1,1,0,c_white,1);
//    if (room==rom_sector1){
        if (arrowfade<120){
            arrowfade+=1;
            if (arrowfade mod 8<6){
                draw_set_color(c_white);
                draw_primitive_begin(pr_trianglelist);
                draw_vertex(x+64,y);
                draw_vertex(x+48,y-16);
                draw_vertex(x+48,y+16);
                draw_primitive_end();
                draw_primitive_begin(pr_trianglelist);
                draw_vertex(x-64,y);
                draw_vertex(x-48,y-16);
                draw_vertex(x-48,y+16);
                draw_primitive_end();
                draw_primitive_begin(pr_trianglelist);
                draw_vertex(x,y-64);
                draw_vertex(x-16,y-48);
                draw_vertex(x+16,y-48);
                draw_primitive_end();
                draw_primitive_begin(pr_trianglelist);
                draw_vertex(x,y+64);
                draw_vertex(x-16,y+48);
                draw_vertex(x+16,y+48);
                draw_primitive_end();
                }
            }
        }
//    }
______________________________________________________

Information about object: obj_horse2
Sprite: spr_horse
Solid: false
Visible: true
Depth: -1
Persistent: false
Parent: obj_horse
Mask: 

______________________________________________________

Information about object: obj_horseflip2
Sprite: 
Solid: false
Visible: true
Depth: 99
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

if (dir==0){
    draw_set_color(c_white);
    draw_primitive_begin(pr_linestrip);
    draw_vertex(x-16,y-16);
    draw_vertex(x-16,y+16);
    draw_vertex(x+16,y);
    draw_vertex(x-16,y-16);
    draw_primitive_end();
    }
else if (dir==1){
    draw_set_color(c_white);
    draw_primitive_begin(pr_linestrip);
    draw_vertex(x-16,y+16);
    draw_vertex(x+16,y+16);
    draw_vertex(x,y-16);
    draw_vertex(x-16,y+16);
    draw_primitive_end();
    }
else if (dir==2){
    draw_set_color(c_white);
    draw_primitive_begin(pr_linestrip);
    draw_vertex(x+16,y+16);
    draw_vertex(x+16,y-16);
    draw_vertex(x-16,y);
    draw_vertex(x+16,y+16);
    draw_primitive_end();
    }
else if (dir==3){
    draw_set_color(c_white);
    draw_primitive_begin(pr_linestrip);
    draw_vertex(x-16,y-16);
    draw_vertex(x+16,y-16);
    draw_vertex(x,y+16);
    draw_vertex(x-16,y-16);
    draw_primitive_end();
    }
______________________________________________________

Information about object: obj_horseshot
Sprite: spr_sabot
Solid: false
Visible: true
Depth: 10
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

if (!place_free(x+hspeed,y+vspeed)){
    if (type==3){
        if (bounce>4)
            instance_destroy();
        else{
            bounce+=1;
            if (hspeed>0 && !place_free(x+abs(hspeed),y))
                hspeed=-abs(hspeed);
            else if (hspeed<0 && !place_free(x-abs(hspeed),y))
                hspeed=abs(hspeed);
            if (vspeed>0 && !place_free(x,y+abs(vspeed)))
                vspeed=-abs(vspeed);
            else if (vspeed<0 && !place_free(x,y-abs(vspeed)))
                vspeed=abs(vspeed);
            image_single=floor(direction/45);
            }
        }
    else if (type!=4 && type!=1)
        instance_destroy();
    }
if (type==2){
    direction+=meteorrot;
    if (direction<5 || direction>355){
        direction=0;
        meteorrot=0;
        }
    }
if (type==1){
    img2+=1;
    if (img2==3){
        img2=0;
        img+=1;
        image_single=img;
        if (img>=7)
            instance_destroy();
        }
    }

if (xobj_sabot.x+400 || yobj_sabot.y+300)
    instance_destroy();
if (type==4){
    lancecyc+=1;
    if (lancecyc==1)
        invis=1;
    if (lancecyc>=2)
        instance_destroy();
    }
Draw Event:

execute code:

if (type==0){
    repeat(3)
        draw_sprite_ext(sprite_index,image_single,floor(x-5+random(10)),floor(y-5+random(10)),2,2,0,c_white,0.4);
    }
else if (!invis)
    draw_sprite_ext(sprite_index,image_single,floor(x),floor(y),1,1,0,c_white,0.4);

______________________________________________________

Information about object: obj_horsepup
Sprite: spr_hspecial
Solid: false
Visible: true
Depth: 8
Persistent: false
Parent: 
Mask: 

Draw Event:

execute code:

drawcyc+=1;
if (drawcyc==6)
    drawcyc=0;
if (type<=4){
    draw_set_color(c_white);
    draw_circle(x+16,y+16,16,0);
    if (drawcyc<=2){
        if (type==0)
            draw_set_color(c_yellow);
        else if (type==1)
            draw_set_color(c_red);
        else if (type==2)
            draw_set_color(c_lime);
        else if (type==3)
            draw_set_color(c_gray);
        else if (type==4)
            draw_set_color(c_blue);
        }
    else{
        if (type==0)
            draw_set_color(c_orange);
        else if (type==1)
            draw_set_color(c_maroon);
        else if (type==2)
            draw_set_color(c_green);
        else if (type==3)
            draw_set_color(c_dkgray);
        else if (type==4)
            draw_set_color(c_navy);
        }
    draw_circle(x+16,y+16,14,0);
    draw_set_color(c_white);
    draw_circle(x+8,y+8,4,0);
    }
else if (type==5){
    draw_set_color(c_white);
    draw_circle(x+16,y+16,16,0);
    if (drawcyc<=2)
        draw_set_color(c_white);
    else
        draw_set_color(c_gray);
    draw_circle(x+16,y+16,14,0);
    draw_sprite_ext(spr_horse,1,x+16,y+16,1,1,0,c_red,1);
    }
else if (type==6){
    if (drawcyc<=2)
        draw_set_color(c_white);
    else
        draw_set_color(make_color_rgb(230,230,230));
    draw_rectangle(x,y+10,x+32,y+22,0);
    draw_rectangle(x+10,y,x+22,y+32,0);
    draw_sprite_ext(spr_banana,0,x+16,y+14,1,1,0,c_white,1);
    }
else if (type==7){
    if (drawcyc<=2)
        draw_set_color(c_white);
    else
        draw_set_color(make_color_rgb(230,230,230));
    draw_rectangle(x,y+10,x+32,y+22,0);
    draw_rectangle(x+10,y,x+22,y+32,0);
    draw_sprite_ext(spr_horse,1,x+16,y+16,1,1,0,c_white,1);
    }

______________________________________________________

Information about object: obj_horsecoin
Sprite: spr_hspecial
Solid: false
Visible: true
Depth: 8
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

if (bounce){
    if (!init){
        init=1;
        gravity=0.5;
        direction=random(180);
        speed=4+random(16);
        }
    if (x+hspeed<=8384){
        hspeed=abs(hspeed);
        hspeed/=2;
        }
    else if (x+hspeed>=8928){
        hspeed=-abs(hspeed);
        hspeed/=2;
        }
    if (y+vspeed<=2080){
        vspeed=abs(vspeed);
        vspeed/=2;
        }
    else if (y+vspeed>=2572){
        y=2572;
        vspeed=-abs(vspeed);
        vspeed/=2;
        }
    }
Draw Event:

execute code:

rot+=20;
if (rot>=360)
    rot-=360;
xoff=cos(degtorad(rot))*12;
    draw_set_color(c_olive);
draw_ellipse(x+18-xoff,y+2,x+18+xoff,y+28,0);
if (rot>90 && rot<270)
    draw_set_color(c_olive);
else
    draw_set_color(c_yellow);
draw_ellipse(x+16-xoff,y+2,x+16+xoff,y+28,0);

______________________________________________________

Information about object: obj_horseenemy
Sprite: spr_pickuparmor
Solid: false
Visible: true
Depth: 5
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

sprite_index=spr_nerd;
Step Event:

execute script scr_horseenemystep with arguments (0,0,0,0,0)
Collision Event with object obj_horseshot:

execute code:

global.horsepoints+=1;
if (other.type==4){
    if (type==5)
        temphp-=other.force;
    else
        hp-=other.force;
    }
else if (other.type==2){
    if (other.meteorid!=id){
        if (type==5)
            temphp-=other.force;
        else
            hp-=other.force;
        if (other.meteorid==0)
            other.meteorid=id;
        else{
            with (other)
                instance_destroy();
            }
        }
    }
else{
    if (type==5)
        temphp-=other.force;
    else
        hp-=other.force;
    with (other)
        instance_destroy();
    }
if (hp<=0){
    instance_destroy();
    if (reward>0)
        (instance_create(x-16,y-16,obj_horsepup)).type=reward;
    tempid=instance_create(x,y,obj_horseexplo);
    if (type==5){
        scr_shakescreen(4);
        tempid.sprite_index=spr_mpfbexplosion;
        tempid.alarm[0]=14;
        scr_sound("exp_nuke");
        repeat(10)
            instance_create(x,y,obj_horseexplospewer);
        repeat(30)
            (instance_create(x,y,obj_horsecoin)).bounce=1;
        repeat(70)
            instance_create(x-32+random(64),y-32+random(64),obj_shardhail);
        with (obj_horseeshot){
            instance_destroy();
            instance_create(x,y,obj_smoke);
            }
        }
    else if (type==4){
        tempid.sprite_index=spr_mpfbexplosion;
        tempid.alarm[0]=14;
        scr_sound("exp_mpfb");
        }
    else
        scr_sound("exp_rock");
    scr_shakescreen(3);
    if (type==5){
        global.horsepoints+=9999;
        (instance_create(x,y,obj_horsepoints)).points=9999;
        obj_sabot.horsebossdead=1;
        }
    else{
        global.horsepoints+=100+100*type*type;
        (instance_create(x,y,obj_horsepoints)).points=100+100*type*type;
        }
    }
Draw Event:

execute code:

if (type==5){
    draw_sprite(spr_proxima_body,img,floor(x),floor(y));
    draw_sprite(spr_proxima_streams,streamimg,floor(x-64),floor(y-64));
    if (whitened>0)
        whitened-=1;
    if (temphp
______________________________________________________

Information about object: obj_horseeshot
Sprite: spr_nanoflash
Solid: false
Visible: true
Depth: -3
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

if (mpfb){
    if (x+hspeed<=8400)
        hspeed=abs(hspeed);
    else if (x+hspeed>=8944)
        hspeed=-abs(hspeed);
    if (y+vspeed<=2096)
        vspeed=abs(vspeed);
    else if (y+vspeed>=2588)
        vspeed=-abs(vspeed);
    }
else{
    if (!place_free(x+hspeed,y+vspeed))
        instance_destroy();
    if (xobj_sabot.x+396 || yobj_sabot.y+296)
        instance_destroy();
    }
Draw Event:

execute code:

if (mpfb){
    mpfbimg=1-mpfbimg;
    draw_sprite(spr_mpfb,mpfbimg,floor(x),floor(y));
    }
else{
    dcyc=1-dcyc;
    if (dcyc==0){
        draw_sprite_ext(spr_shockball,0,floor(x),floor(y),1,1,0,c_white,1);
        draw_sprite_ext(spr_shockballtrail,0,floor(x),floor(y),1,1,0,c_black,1);
        }
    else{
        draw_sprite_ext(spr_shockball,0,floor(x),floor(y),1,1,0,c_black,1);
        draw_sprite_ext(spr_shockballtrail,0,floor(x),floor(y),1,1,0,c_white,1);
        }
    }
______________________________________________________

Information about object: obj_horsepoints
Sprite: 
Solid: false
Visible: true
Depth: -4
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

if (xview_xview[0]+768)
    x=view_xview[0]+768;
if (yview_yview[0]+552)
    y=view_yview[0]+552;
scale=8;
Draw Event:

execute code:

if (scale>2)
    scale-=1;
if (points>0){
    if (points<10)
        draw_sprite_ext(spr_chainsecurity2,points,x-8,y-6*scale,2,scale,0,c_white,1);
    else if (points<100){
        draw_sprite_ext(spr_chainsecurity2,floor(points/10),x-8-8,y-6*scale,2,scale,0,c_white,1);
        draw_sprite_ext(spr_chainsecurity2,points mod 10,x-8+8,y-6*scale,2,scale,0,c_white,1);
        }
    else if (points<1000){
        draw_sprite_ext(spr_chainsecurity2,floor(points/100),x-8-16,y-6*scale,2,scale,0,c_white,1);
        draw_sprite_ext(spr_chainsecurity2,floor(points/10),x-8,y-6*scale,2,scale,0,c_white,1);
        draw_sprite_ext(spr_chainsecurity2,points mod 10,x-8+16,y-6*scale,2,scale,0,c_white,1);
        }
    else{
        draw_sprite_ext(spr_chainsecurity2,floor(points/1000),x-8-24,y-6*scale,2,scale,0,c_white,1);
        draw_sprite_ext(spr_chainsecurity2,floor(points/100),x-8-8,y-6*scale,2,scale,0,c_white,1);
        draw_sprite_ext(spr_chainsecurity2,floor(points/10),x-8+8,y-6*scale,2,scale,0,c_white,1);
        draw_sprite_ext(spr_chainsecurity2,points mod 10,x-8+24,y-6*scale,2,scale,0,c_white,1);
        }
    }
cyc+=1;
if (cyc>=30)
    instance_destroy();
______________________________________________________

Information about object: obj_horseexplo
Sprite: spr_rocketexplosion
Solid: false
Visible: true
Depth: -3
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

image_speed=0.5;
alarm[0]=18;
Alarm Event for alarm 0:

destroy the instance
______________________________________________________

Information about object: obj_horsestars
Sprite: 
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Step Event:

execute code:

rot+=4;
if (rot>=360)
    rot-=360;
xoff=cos(degtorad(rot))*dist;
yoff=-sin(degtorad(rot))*dist;
______________________________________________________

Information about object: obj_horseexplospewer
Sprite: 
Solid: false
Visible: false
Depth: -3
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

gravity=2;
speed=5+random(20);
direction=random(360);
vspeed-=20;
Step Event:

execute code:

if (y>obj_sabot.y+300)
    instance_destroy();
cyc+=1;
if (cyc==3){
    cyc=0;
    instance_create(x,y,obj_horseexplo);
    }
______________________________________________________

Information about object: obj_horseblocker
Sprite: spr_crate2
Solid: true
Visible: true
Depth: 10
Persistent: false
Parent: obj_block
Mask: 

______________________________________________________

Information about object: obj_tas
Sprite: spr_sabot
Solid: false
Visible: true
Depth: -10000
Persistent: true
Parent: obj_activateme
Mask: spr_block

Create Event:

execute code:

randomize();
rm_speed = 30;
is_executing = false;
held_keys = ds_list_create(); //data strutures don't get saved in savestates, but that's not a problem (hopefully)
tas_font = font_add_sprite(spr_text_tas,32,0,0);
current_inputs = " ";
frames_on_step = 0;
record = false;

Alarm Event for alarm 0:

execute code:

inputs_file = file_text_open_read(tas_file_name);
line = 0;

repeat (step) {
    scr_nextline();
    
    if (string_count("speed", current_inputs) == 1) {
        room_speed = num_in_inputs;
        rm_speed = num_in_inputs;
        scr_nextline();
    }
}

file_text_close(inputs_file);
step += 1;

handle = false;
scr_executecommand("escape", vk_escape);
scr_executecommand("enter", vk_enter);
scr_executecommand("up", vk_up);
scr_executecommand("down", vk_down);
scr_executecommand("left", vk_left);
scr_executecommand("right", vk_right);
scr_executecommand("z", ord('Z'));
scr_executecommand("x", ord('X'));
scr_executecommand("c", ord('C'));
scr_executecommand("a", ord('A'));
scr_executecommand("s", ord('S'));
scr_executecommand("d", ord('D'));
scr_executecommand("q", ord('Q'));
scr_executecommand("one", ord('1'));
scr_executecommand("two", ord('2'));
scr_executecommand("three", ord('3'));
scr_executecommand("four", ord('4'));
scr_executecommand("five", ord('5'));
scr_executecommand("six", ord('6'));
scr_executecommand("seven", ord('7'));
scr_executecommand("eight", ord('8'));
scr_executecommand("nine", ord('9'));
if (handle) {io_handle();}

if (string_count("save: ", current_inputs) == 1) {
    state_filename_save = string_replace(current_inputs, "save: ", "");
    obj_taspause.most_recent_savestate = state_filename_save
    io_clear();
    alarm[0] = 1;
    game_save("savestates\" + state_filename_save + ".state");
    // yeah this eats the frame
}
else {alarm[0] = num_in_inputs;}

Begin Step Event:

execute code:

if (is_executing) {
    room_speed = rm_speed;
    
    if (alarm[0] == -1) {
        alarm[0] = 1; // this is dumb
    }
}

End Step Event:

execute code:

if (is_executing) {
    scr_seed(current_inputs + string(room), frames_on_step)
    frame += 1;
    frames_on_step += 1;
}

Draw Event:

execute code:

if (is_executing and record) {
    screen_save('record\' + string_replace_all(string_format(frame, 6, 0), ' ', '0') + '.png')
}

draw_set_font(tas_font);
draw_set_color(c_white);

if instance_exists(obj_shakescreen) {
    root_x = obj_shakescreen.x-396;
    root_y = obj_shakescreen.y-296;
    
    if (!global.hidetime) {
        root_x += 4;
        root_y += 60;
    }
}
else {
    root_x = 4;
    root_y = 4;
}

fps_string = string(room_speed) + "/" + string(fps) + "/" + string(instance_count);
held_keys_string = "";
for (i=0; i<=ds_list_size(held_keys); i+=1) {held_keys_string += string(ds_list_find_value(held_keys, i)) + " ";}
held_keys_string = string_replace(held_keys_string, "0", "");

draw_text_ext(root_x,root_y,string(line) + " " + string(step) + " " + string(frame) + " ",28,800);
draw_text_ext(root_x,root_y + (18 * 1),held_keys_string,28,800);
draw_text_ext(root_x,root_y + (18 * 2),string(frames_on_step) + " (" + string(alarm[0]) + ")",28,800);
draw_text_ext(root_x,root_y + (18 * 3),fps_string,28,800);

Key Press Event for Key:

execute code:

if (!is_executing) {
    tas_file_name = get_open_filename("ITF file|*.itf", "");
    
    if (tas_file_name != "") {
        step = 1;
        frame = 1;
        current_inputs = "";
        last_inputs = "";
        io_clear();
        alarm[0] = 2;
        is_executing = true;
    }
}

______________________________________________________

Information about object: obj_taspause
Sprite: 
Solid: false
Visible: true
Depth: -10000
Persistent: true
Parent: obj_activateme
Mask: 

Create Event:

execute code:

paused = false;
most_recent_savestate = "INIT";

Alarm Event for alarm 0:

execute code:

keyboard_key_press(ord("M"));
io_handle();

// Q: why not just run scr_taspause?
// A: it causes dysync for some reason

Draw Event:

execute code:

if (paused == true) {
    draw_background(pausebackid,view_xview[0],view_yview[0])
}

Key Press Event for Key:

execute code:

///Restart the game
io_clear();
game_restart();

Key Press Event for B-key Key:

execute code:

scr_tasunpause();
with (obj_tas) {
    if (is_executing) { 
        io_clear();
        room_speed = 30;
        rm_speed = 30;
        handle = true;
        ds_list_clear(held_keys);
        alarm[0] = -1;
        is_executing = false;
    }
    else {
        game_end();
    }
}

Key Press Event for K-key Key:

execute code:

///Load most recent savestate
if (most_recent_savestate != "INIT") {
    instance_activate_object(obj_tas);
    ds_list_clear(obj_tas.held_keys);
    scr_tasunpause();
    game_load("savestates\" + most_recent_savestate + ".state");
}

Key Press Event for L-key Key:

execute code:

///Load savestate
state_filename_load = get_open_filename("STATE file|*.state", "");
if (state_filename_load != "") {
    instance_activate_object(obj_tas);
    ds_list_clear(obj_tas.held_keys);
    paused = false;
    game_load(state_filename_load);
}

Key Press Event for M-key Key:

execute code:

///Pause/unpause
keyboard_key_release(ord("M"));
io_handle();

if (paused == false) {
    scr_taspause();
}
else {
    scr_tasunpause();
}

Key Press Event for N-key Key:

execute code:

///Frame advance
if (paused == true) {
    scr_tasunpause();
    alarm[0] = 1;
}

______________________________________________________

Information about object: obj_tastext
Sprite: spr_tastext
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: 
Mask: 

Create Event:

execute code:

/*if (room == rom_resolution) {
    sprite_replace_sprite(spr_tastext, 'tas_text.gmspr')
}

______________________________________________________
